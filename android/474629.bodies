class MediaClock
!!!1277061.cpp!!!	setStartingTimeMedia(in startingTimeMediaUs : int64_t) : void
    Mutex::Autolock autoLock(mLock);
    mStartingTimeMediaUs = startingTimeMediaUs;
!!!1277189.cpp!!!	clearAnchor() : void
    Mutex::Autolock autoLock(mLock);
    mAnchorTimeMediaUs = -1;
    mAnchorTimeRealUs = -1;
!!!1277317.cpp!!!	updateAnchor(in anchorTimeMediaUs : int64_t, in anchorTimeRealUs : int64_t, in maxTimeMediaUs : int64_t = INT64_MAX) : void
    if (anchorTimeMediaUs < 0 || anchorTimeRealUs < 0) {
        ALOGW("reject anchor time since it is negative.");
        return;
    }

    Mutex::Autolock autoLock(mLock);
    int64_t nowUs = ALooper::GetNowUs();
    int64_t nowMediaUs =
        anchorTimeMediaUs + (nowUs - anchorTimeRealUs) * (double)mPlaybackRate;
    if (nowMediaUs < 0) {
        ALOGW("reject anchor time since it leads to negative media time.");
        return;
    }

    if (maxTimeMediaUs != -1) {
        mMaxTimeMediaUs = maxTimeMediaUs;
    }
    if (mAnchorTimeRealUs != -1) {
        int64_t oldNowMediaUs =
            mAnchorTimeMediaUs + (nowUs - mAnchorTimeRealUs) * (double)mPlaybackRate;
        if (nowMediaUs < oldNowMediaUs
                && nowMediaUs > oldNowMediaUs - kAnchorFluctuationAllowedUs) {
            return;
        }
    }
    mAnchorTimeRealUs = nowUs;
    mAnchorTimeMediaUs = nowMediaUs;
!!!1277445.cpp!!!	updateMaxTimeMedia(in maxTimeMediaUs : int64_t) : void
    Mutex::Autolock autoLock(mLock);
    mMaxTimeMediaUs = maxTimeMediaUs;
!!!1277573.cpp!!!	setPlaybackRate(in rate : float) : void
    CHECK_GE(rate, 0.0);
    Mutex::Autolock autoLock(mLock);
    if (mAnchorTimeRealUs == -1) {
        mPlaybackRate = rate;
        return;
    }

    int64_t nowUs = ALooper::GetNowUs();
    mAnchorTimeMediaUs += (nowUs - mAnchorTimeRealUs) * (double)mPlaybackRate;
    if (mAnchorTimeMediaUs < 0) {
        ALOGW("setRate: anchor time should not be negative, set to 0.");
        mAnchorTimeMediaUs = 0;
    }
    mAnchorTimeRealUs = nowUs;
    mPlaybackRate = rate;
!!!1277701.cpp!!!	getPlaybackRate() : float
    Mutex::Autolock autoLock(mLock);
    return mPlaybackRate;
!!!1277829.cpp!!!	getMediaTime(in realUs : int64_t, inout outMediaUs : int64_t, in allowPastMaxTime : bool = false) : status_t
    if (outMediaUs == NULL) {
        return BAD_VALUE;
    }

    Mutex::Autolock autoLock(mLock);
    return getMediaTime_l(realUs, outMediaUs, allowPastMaxTime);
!!!1277957.cpp!!!	getRealTimeFor(in targetMediaUs : int64_t, inout outRealUs : int64_t) : status_t
    if (outRealUs == NULL) {
        return BAD_VALUE;
    }

    Mutex::Autolock autoLock(mLock);
    if (mPlaybackRate == 0.0) {
        return NO_INIT;
    }

    int64_t nowUs = ALooper::GetNowUs();
    int64_t nowMediaUs;
    status_t status =
            getMediaTime_l(nowUs, &nowMediaUs, true /* allowPastMaxTime */);
    if (status != OK) {
        return status;
    }
    *outRealUs = (targetMediaUs - nowMediaUs) / (double)mPlaybackRate + nowUs;
    return OK;
!!!1278213.cpp!!!	getMediaTime_l(in realUs : int64_t, inout outMediaUs : int64_t, in allowPastMaxTime : bool) : status_t
    if (mAnchorTimeRealUs == -1) {
        return NO_INIT;
    }

    int64_t mediaUs = mAnchorTimeMediaUs
            + (realUs - mAnchorTimeRealUs) * (double)mPlaybackRate;
    if (mediaUs > mMaxTimeMediaUs && !allowPastMaxTime) {
        mediaUs = mMaxTimeMediaUs;
    }
    if (mediaUs < mStartingTimeMediaUs) {
        mediaUs = mStartingTimeMediaUs;
    }
    if (mediaUs < 0) {
        mediaUs = 0;
    }
    *outMediaUs = mediaUs;
    return OK;
