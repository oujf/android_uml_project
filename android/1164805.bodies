class CursorToBulkCursorAdaptor
!!!6461829.java!!!	CursorToBulkCursorAdaptor(inout cursor : Cursor, inout observer : IContentObserver, in providerName : String)
        if (cursor instanceof CrossProcessCursor) {
            mCursor = (CrossProcessCursor)cursor;
        } else {
            mCursor = new CrossProcessCursorWrapper(cursor);
        }
        mProviderName = providerName;

        synchronized (mLock) {
            createAndRegisterObserverProxyLocked(observer);
        }
!!!6461957.java!!!	closeFilledWindowLocked() : void
        if (mFilledWindow != null) {
            mFilledWindow.close();
            mFilledWindow = null;
        }
!!!6462085.java!!!	disposeLocked() : void
        if (mCursor != null) {
            unregisterObserverProxyLocked();
            mCursor.close();
            mCursor = null;
        }

        closeFilledWindowLocked();
!!!6462213.java!!!	throwIfCursorIsClosed() : void
        if (mCursor == null) {
            throw new StaleDataException("Attempted to access a cursor after it has been closed.");
        }
!!!6462341.java!!!	binderDied() : void
        synchronized (mLock) {
            disposeLocked();
        }
!!!6462469.java!!!	getBulkCursorDescriptor() : BulkCursorDescriptor
        synchronized (mLock) {
            throwIfCursorIsClosed();

            BulkCursorDescriptor d = new BulkCursorDescriptor();
            d.cursor = this;
            d.columnNames = mCursor.getColumnNames();
            d.wantsAllOnMoveCalls = mCursor.getWantsAllOnMoveCalls();
            d.count = mCursor.getCount();
            d.window = mCursor.getWindow();
            if (d.window != null) {
                // Acquire a reference to the window because its reference count will be
                // decremented when it is returned as part of the binder call reply parcel.
                d.window.acquireReference();
            }
            return d;
        }
!!!6462597.java!!!	getWindow(in position : int) : CursorWindow
        synchronized (mLock) {
            throwIfCursorIsClosed();

            if (!mCursor.moveToPosition(position)) {
                closeFilledWindowLocked();
                return null;
            }

            CursorWindow window = mCursor.getWindow();
            if (window != null) {
                closeFilledWindowLocked();
            } else {
                window = mFilledWindow;
                if (window == null) {
                    mFilledWindow = new CursorWindow(mProviderName);
                    window = mFilledWindow;
                } else if (position < window.getStartPosition()
                        || position >= window.getStartPosition() + window.getNumRows()) {
                    window.clear();
                }
                mCursor.fillWindow(position, window);
            }

            if (window != null) {
                // Acquire a reference to the window because its reference count will be
                // decremented when it is returned as part of the binder call reply parcel.
                window.acquireReference();
            }
            return window;
        }
!!!6462725.java!!!	onMove(in position : int) : void
        synchronized (mLock) {
            throwIfCursorIsClosed();

            mCursor.onMove(mCursor.getPosition(), position);
        }
!!!6462853.java!!!	deactivate() : void
        synchronized (mLock) {
            if (mCursor != null) {
                unregisterObserverProxyLocked();
                mCursor.deactivate();
            }

            closeFilledWindowLocked();
        }
!!!6462981.java!!!	close() : void
        synchronized (mLock) {
            disposeLocked();
        }
!!!6463109.java!!!	requery(inout observer : IContentObserver) : int
        synchronized (mLock) {
            throwIfCursorIsClosed();

            closeFilledWindowLocked();

            try {
                if (!mCursor.requery()) {
                    return -1;
                }
            } catch (IllegalStateException e) {
                IllegalStateException leakProgram = new IllegalStateException(
                        mProviderName + " Requery misuse db, mCursor isClosed:" +
                        mCursor.isClosed(), e);
                throw leakProgram;
            }

            unregisterObserverProxyLocked();
            createAndRegisterObserverProxyLocked(observer);
            return mCursor.getCount();
        }
!!!6463237.java!!!	createAndRegisterObserverProxyLocked(inout observer : IContentObserver) : void
        if (mObserver != null) {
            throw new IllegalStateException("an observer is already registered");
        }
        mObserver = new ContentObserverProxy(observer, this);
        mCursor.registerContentObserver(mObserver);
!!!6463365.java!!!	unregisterObserverProxyLocked() : void
        if (mObserver != null) {
            mCursor.unregisterContentObserver(mObserver);
            mObserver.unlinkToDeath(this);
            mObserver = null;
        }
!!!6463493.java!!!	getExtras() : Bundle
        synchronized (mLock) {
            throwIfCursorIsClosed();

            return mCursor.getExtras();
        }
!!!6463621.java!!!	respond(inout extras : Bundle) : Bundle
        synchronized (mLock) {
            throwIfCursorIsClosed();

            return mCursor.respond(extras);
        }
