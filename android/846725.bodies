class DoubleTapHelper
!!!3900293.java!!!	DoubleTapHelper(inout view : View, inout activationListener : DoubleTapHelper::ActivationListener, inout doubleTapListener : DoubleTapHelper::DoubleTapListener, inout slideBackListener : DoubleTapHelper::SlideBackListener, inout doubleTapLogListener : DoubleTapHelper::DoubleTapLogListener)
        mTouchSlop = ViewConfiguration.get(view.getContext()).getScaledTouchSlop();
        mDoubleTapSlop = view.getResources().getDimension(R.dimen.double_tap_slop);
        mView = view;

        mActivationListener = activationListener;
        mDoubleTapListener = doubleTapListener;
        mSlideBackListener = slideBackListener;
        mDoubleTapLogListener = doubleTapLogListener;
!!!3900421.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        return onTouchEvent(event, Integer.MAX_VALUE);
!!!3900549.java!!!	onTouchEvent(inout event : MotionEvent, in maxTouchableHeight : int) : boolean
        int action = event.getActionMasked();
        switch (action) {
            case MotionEvent.ACTION_DOWN:
                mDownX = event.getX();
                mDownY = event.getY();
                mTrackTouch = true;
                if (mDownY > maxTouchableHeight) {
                    mTrackTouch = false;
                }
                break;
            case MotionEvent.ACTION_MOVE:
                if (!isWithinTouchSlop(event)) {
                    makeInactive();
                    mTrackTouch = false;
                }
                break;
            case MotionEvent.ACTION_UP:
                if (isWithinTouchSlop(event)) {
                    if (mSlideBackListener != null && mSlideBackListener.onSlideBack()) {
                        return true;
                    }
                    if (!mActivated) {
                        makeActive();
                        mView.postDelayed(mTapTimeoutRunnable, DOUBLETAP_TIMEOUT_MS);
                        mActivationX = event.getX();
                        mActivationY = event.getY();
                    } else {
                        boolean withinDoubleTapSlop = isWithinDoubleTapSlop(event);
                        if (mDoubleTapLogListener != null) {
                            mDoubleTapLogListener.onDoubleTapLog(withinDoubleTapSlop,
                                    event.getX() - mActivationX,
                                    event.getY() - mActivationY);
                        }
                        if (withinDoubleTapSlop) {
                            if (!mDoubleTapListener.onDoubleTap()) {
                                return false;
                            }
                        } else {
                            makeInactive();
                            mTrackTouch = false;
                        }
                    }
                } else {
                    makeInactive();
                    mTrackTouch = false;
                }
                break;
            case MotionEvent.ACTION_CANCEL:
                makeInactive();
                mTrackTouch = false;
                break;
            default:
                break;
        }
        return mTrackTouch;
!!!3900677.java!!!	makeActive() : void
        if (!mActivated) {
            mActivated = true;
            mActivationListener.onActiveChanged(true);
        }
!!!3900805.java!!!	makeInactive() : void
        if (mActivated) {
            mActivated = false;
            mActivationListener.onActiveChanged(false);
        }
!!!3900933.java!!!	isWithinTouchSlop(inout event : MotionEvent) : boolean
        return Math.abs(event.getX() - mDownX) < mTouchSlop
                && Math.abs(event.getY() - mDownY) < mTouchSlop;
!!!3901061.java!!!	isWithinDoubleTapSlop(inout event : MotionEvent) : boolean
        if (!mActivated) {
            // If we're not activated there's no double tap slop to satisfy.
            return true;
        }

        return Math.abs(event.getX() - mActivationX) < mDoubleTapSlop
                && Math.abs(event.getY() - mActivationY) < mDoubleTapSlop;
