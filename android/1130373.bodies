class BluetoothUuid
!!!6025733.java!!!	isAudioSource(inout uuid : ParcelUuid) : boolean
        return uuid.equals(AudioSource);
!!!6025861.java!!!	isAudioSink(inout uuid : ParcelUuid) : boolean
        return uuid.equals(AudioSink);
!!!6025989.java!!!	isAdvAudioDist(inout uuid : ParcelUuid) : boolean
        return uuid.equals(AdvAudioDist);
!!!6026117.java!!!	isHandsfree(inout uuid : ParcelUuid) : boolean
        return uuid.equals(Handsfree);
!!!6026245.java!!!	isHeadset(inout uuid : ParcelUuid) : boolean
        return uuid.equals(HSP);
!!!6026373.java!!!	isAvrcpController(inout uuid : ParcelUuid) : boolean
        return uuid.equals(AvrcpController);
!!!6026501.java!!!	isAvrcpTarget(inout uuid : ParcelUuid) : boolean
        return uuid.equals(AvrcpTarget);
!!!6026629.java!!!	isInputDevice(inout uuid : ParcelUuid) : boolean
        return uuid.equals(Hid);
!!!6026757.java!!!	isPanu(inout uuid : ParcelUuid) : boolean
        return uuid.equals(PANU);
!!!6026885.java!!!	isNap(inout uuid : ParcelUuid) : boolean
        return uuid.equals(NAP);
!!!6027013.java!!!	isBnep(inout uuid : ParcelUuid) : boolean
        return uuid.equals(BNEP);
!!!6027141.java!!!	isMap(inout uuid : ParcelUuid) : boolean
        return uuid.equals(MAP);
!!!6027269.java!!!	isMns(inout uuid : ParcelUuid) : boolean
        return uuid.equals(MNS);
!!!6027397.java!!!	isMas(inout uuid : ParcelUuid) : boolean
        return uuid.equals(MAS);
!!!6027525.java!!!	isSap(inout uuid : ParcelUuid) : boolean
        return uuid.equals(SAP);
!!!6027653.java!!!	isUuidPresent(inout uuidArray : ParcelUuid [[]], inout uuid : ParcelUuid) : boolean
        if ((uuidArray == null || uuidArray.length == 0) && uuid == null)
            return true;

        if (uuidArray == null)
            return false;

        for (ParcelUuid element: uuidArray) {
            if (element.equals(uuid)) return true;
        }
        return false;
!!!6027781.java!!!	containsAnyUuid(inout uuidA : ParcelUuid [[]], inout uuidB : ParcelUuid [[]]) : boolean
        if (uuidA == null && uuidB == null) return true;

        if (uuidA == null) {
            return uuidB.length == 0 ? true : false;
        }

        if (uuidB == null) {
            return uuidA.length == 0 ? true : false;
        }

        HashSet<ParcelUuid> uuidSet = new HashSet<ParcelUuid> (Arrays.asList(uuidA));
        for (ParcelUuid uuid: uuidB) {
            if (uuidSet.contains(uuid)) return true;
        }
        return false;
!!!6027909.java!!!	containsAllUuids(inout uuidA : ParcelUuid [[]], inout uuidB : ParcelUuid [[]]) : boolean
        if (uuidA == null && uuidB == null) return true;

        if (uuidA == null) {
            return uuidB.length == 0 ? true : false;
        }

        if (uuidB == null) return true;

        HashSet<ParcelUuid> uuidSet = new HashSet<ParcelUuid> (Arrays.asList(uuidA));
        for (ParcelUuid uuid: uuidB) {
            if (!uuidSet.contains(uuid)) return false;
        }
        return true;
!!!6028037.java!!!	getServiceIdentifierFromParcelUuid(inout parcelUuid : ParcelUuid) : int
        UUID uuid = parcelUuid.getUuid();
        long value = (uuid.getMostSignificantBits() & 0x0000FFFF00000000L) >>> 32;
        return (int)value;
!!!6028165.java!!!	parseUuidFrom(inout uuidBytes : byte [[]]) : ParcelUuid
        if (uuidBytes == null) {
            throw new IllegalArgumentException("uuidBytes cannot be null");
        }
        int length = uuidBytes.length;
        if (length != UUID_BYTES_16_BIT && length != UUID_BYTES_32_BIT &&
                length != UUID_BYTES_128_BIT) {
            throw new IllegalArgumentException("uuidBytes length invalid - " + length);
        }

        // Construct a 128 bit UUID.
        if (length == UUID_BYTES_128_BIT) {
            ByteBuffer buf = ByteBuffer.wrap(uuidBytes).order(ByteOrder.LITTLE_ENDIAN);
            long msb = buf.getLong(8);
            long lsb = buf.getLong(0);
            return new ParcelUuid(new UUID(msb, lsb));
        }

        // For 16 bit and 32 bit UUID we need to convert them to 128 bit value.
        // 128_bit_value = uuid * 2^96 + BASE_UUID
        long shortUuid;
        if (length == UUID_BYTES_16_BIT) {
            shortUuid = uuidBytes[0] & 0xFF;
            shortUuid += (uuidBytes[1] & 0xFF) << 8;
        } else {
            shortUuid = uuidBytes[0] & 0xFF ;
            shortUuid += (uuidBytes[1] & 0xFF) << 8;
            shortUuid += (uuidBytes[2] & 0xFF) << 16;
            shortUuid += (uuidBytes[3] & 0xFF) << 24;
        }
        long msb = BASE_UUID.getUuid().getMostSignificantBits() + (shortUuid << 32);
        long lsb = BASE_UUID.getUuid().getLeastSignificantBits();
        return new ParcelUuid(new UUID(msb, lsb));
!!!6028293.java!!!	uuidToBytes(inout uuid : ParcelUuid) : byte
        if (uuid == null) {
            throw new IllegalArgumentException("uuid cannot be null");
        }

        if (is16BitUuid(uuid)) {
            byte[] uuidBytes = new byte[UUID_BYTES_16_BIT];
            int uuidVal = getServiceIdentifierFromParcelUuid(uuid);
            uuidBytes[0] = (byte)(uuidVal & 0xFF);
            uuidBytes[1] = (byte)((uuidVal & 0xFF00) >> 8);
            return uuidBytes;
        }

        if (is32BitUuid(uuid)) {
            byte[] uuidBytes = new byte[UUID_BYTES_32_BIT];
            int uuidVal = getServiceIdentifierFromParcelUuid(uuid);
            uuidBytes[0] = (byte)(uuidVal & 0xFF);
            uuidBytes[1] = (byte)((uuidVal & 0xFF00) >> 8);
            uuidBytes[2] = (byte)((uuidVal & 0xFF0000) >> 16);
            uuidBytes[3] = (byte)((uuidVal & 0xFF000000) >> 24);
            return uuidBytes;
        }

        // Construct a 128 bit UUID.
        long msb = uuid.getUuid().getMostSignificantBits();
        long lsb = uuid.getUuid().getLeastSignificantBits();

        byte[] uuidBytes = new byte[UUID_BYTES_128_BIT];
        ByteBuffer buf = ByteBuffer.wrap(uuidBytes).order(ByteOrder.LITTLE_ENDIAN);
        buf.putLong(8, msb);
        buf.putLong(0, lsb);
        return uuidBytes;
!!!6028421.java!!!	is16BitUuid(inout parcelUuid : ParcelUuid) : boolean
        UUID uuid = parcelUuid.getUuid();
        if (uuid.getLeastSignificantBits() != BASE_UUID.getUuid().getLeastSignificantBits()) {
            return false;
        }
        return ((uuid.getMostSignificantBits() & 0xFFFF0000FFFFFFFFL) == 0x1000L);
!!!6028549.java!!!	is32BitUuid(inout parcelUuid : ParcelUuid) : boolean
        UUID uuid = parcelUuid.getUuid();
        if (uuid.getLeastSignificantBits() != BASE_UUID.getUuid().getLeastSignificantBits()) {
            return false;
        }
        if (is16BitUuid(parcelUuid)) {
            return false;
        }
        return ((uuid.getMostSignificantBits() & 0xFFFFFFFFL) == 0x1000L);
