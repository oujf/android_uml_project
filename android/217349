format 214
"animation" // source::frameworks::base::core::java::android::animation
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\Users\\Jeff\\Documents\\aosp\\frameworks\\base\\core\\java/android/animation/"
  java_package "android.animation"
  classview 204293 "animation"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 978949 "StateListAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Lets you define a number of Animators that will run on the attached View depending on the View's
drawable state.
<p>
It can be defined in an XML file with the <code>&lt;selector></code> element.
Each State Animator is defined in a nested <code>&lt;item></code> element.

@attr ref android.R.styleable#DrawableStates_state_focused
@attr ref android.R.styleable#DrawableStates_state_window_focused
@attr ref android.R.styleable#DrawableStates_state_enabled
@attr ref android.R.styleable#DrawableStates_state_checkable
@attr ref android.R.styleable#DrawableStates_state_checked
@attr ref android.R.styleable#DrawableStates_state_selected
@attr ref android.R.styleable#DrawableStates_state_activated
@attr ref android.R.styleable#DrawableStates_state_active
@attr ref android.R.styleable#DrawableStates_state_single
@attr ref android.R.styleable#DrawableStates_state_first
@attr ref android.R.styleable#DrawableStates_state_middle
@attr ref android.R.styleable#DrawableStates_state_last
@attr ref android.R.styleable#DrawableStates_state_pressed
@attr ref android.R.styleable#StateListAnimatorItem_animation
"
      classrelation 1461509 // <realization>
	relation 1461509 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1461509 // <realization>
	  b parent class_ref 1004805 // Cloneable
      end

      class 1014149 "Tuple"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 3276549 "mSpecs"
	  const_attribute package explicit_type "int"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 1462405 // mAnimator (<unidirectional association>)
	  relation 1462405 --->
	    a role_name "mAnimator" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1462405 // mAnimator (<unidirectional association>)
	    b parent class_ref 1004677 // Animator
	end

	operation 4967173 "Tuple"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "specs" explicit_type "int"
	  multiplicity "[]"
	    param inout name "animator" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4967301 "getSpecs"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "@hide
"
	end

	operation 4967429 "getAnimator"
	  public return_type class_ref 1004677 // Animator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "@hide
"
	end
      end

      classrelation 1461637 // mTuples (<unidirectional association>)
	relation 1461637 --->
	  stereotype "ArrayList"
	  a role_name "mTuples" init_value " new ArrayList<Tuple>()" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1461637 // mTuples (<unidirectional association>)
	  b parent class_ref 1014149 // Tuple
      end

      classrelation 1461765 // mLastMatch (<unidirectional association>)
	relation 1461765 --->
	  a role_name "mLastMatch" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1461765 // mLastMatch (<unidirectional association>)
	  b parent class_ref 1014149 // Tuple
      end

      classrelation 1461893 // mRunningAnimator (<unidirectional association>)
	relation 1461893 --->
	  a role_name "mRunningAnimator" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1461893 // mRunningAnimator (<unidirectional association>)
	  b parent class_ref 1004677 // Animator
      end

      classrelation 1462021 // mViewRef (<unidirectional association>)
	relation 1462021 --->
	  stereotype "WeakReference"
	  a role_name "mViewRef" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1462021 // mViewRef (<unidirectional association>)
	  b parent class_ref 970757 // View
      end

      class 1014277 "StateListAnimatorConstantState"
	visibility private 
	nactuals 1
	actual class class_ref 1005445 // ConstantState
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1462533 // <realization>
	  relation 1462533 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1462533 // <realization>
	    b parent class_ref 1005445 // ConstantState
	end

	classrelation 1462661 // mAnimator (<unidirectional association>)
	  relation 1462661 --->
	    a role_name "mAnimator" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1462661 // mAnimator (<unidirectional association>)
	    b parent class_ref 978949 // StateListAnimator
	end

	attribute 3276677 "mChangingConf"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@Config
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4967557 "StateListAnimatorConstantState"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "animator" type class_ref 978949 // StateListAnimator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4967685 "getChangingConfigurations"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
@Config
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4967813 "newInstance"
	  public return_type class_ref 978949 // StateListAnimator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      classrelation 1462149 // mConstantState (<unidirectional association>)
	relation 1462149 --->
	  a role_name "mConstantState" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1462149 // mConstantState (<unidirectional association>)
	  b parent class_ref 1014277 // StateListAnimatorConstantState
      end

      classrelation 1462277 // mAnimatorListener (<unidirectional association>)
	relation 1462277 --->
	  a role_name "mAnimatorListener" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1462277 // mAnimatorListener (<unidirectional association>)
	  b parent class_ref 1006725 // AnimatorListenerAdapter
      end

      attribute 3276421 "mChangingConfigurations"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Config
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 4964997 "StateListAnimator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4965125 "initAnimatorListener"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4965253 "addState"
	public explicit_return_type "void"
	nparams 2
	  param inout name "specs" explicit_type "int"
	multiplicity "[]"
	  param inout name "animator" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Associates the given animator with the provided drawable state specs so that it will be run
when the View's drawable state matches the specs.

@param specs The drawable state specs to match against
@param animator The animator to run when the specs match
"
      end

      operation 4965381 "getRunningAnimator"
	public return_type class_ref 1004677 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the current {@link android.animation.Animator} which is started because of a state
change.

@return The currently running Animator or null if no Animator is running
@hide
"
      end

      operation 4965509 "getTarget"
	public return_type class_ref 970757 // View
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
"
      end

      operation 4965637 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Called by View
@hide
"
      end

      operation 4965765 "clearTarget"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4965893 "clone"
	public return_type class_ref 978949 // StateListAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4966021 "setState"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Called by View
@hide
"
      end

      operation 4966149 "start"
	private explicit_return_type "void"
	nparams 1
	  param inout name "match" type class_ref 1014149 // Tuple
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4966277 "cancel"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4966405 "getTuples"
	public return_type class_ref 1014149 // Tuple
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
"
      end

      operation 4966533 "jumpToCurrentState"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "If there is an animation running for a recent state change, ends it.
<p>
This causes the animation to assign the end value(s) to the View.
"
      end

      operation 4966661 "getChangingConfigurations"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Config
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Return a mask of the configuration parameters for which this animator may change, requiring
that it be re-created.  The default implementation returns whatever was provided through
{@link #setChangingConfigurations(int)} or 0 by default.

@return Returns a mask of the changing configuration parameters, as defined by
{@link android.content.pm.ActivityInfo}.

@see android.content.pm.ActivityInfo
@hide
"
      end

      operation 4966789 "setChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Set a mask of the configuration parameters for which this animator may change, requiring
that it should be recreated from resources instead of being cloned.

@param configs A mask of the changing configuration parameters, as
defined by {@link android.content.pm.ActivityInfo}.

@see android.content.pm.ActivityInfo
@hide
"
      end

      operation 4966917 "appendChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the changing configurations value to the union of the current changing configurations
and the provided configs.
This method is called while loading the animator.
@hide
"
      end

      operation 4967045 "createConstantState"
	public return_type class_ref 1005445 // ConstantState
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<StateListAnimator> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Return a {@link android.content.res.ConstantState} instance that holds the shared state of
this Animator.
<p>
This constant state is used to create new instances of this animator when needed. Default
implementation creates a new {@link StateListAnimatorConstantState}. You can override this
method to provide your custom logic or return null if you don't want this animator to be
cached.

@return The {@link android.content.res.ConstantState} associated to this Animator.
@see android.content.res.ConstantState
@see #clone()
@hide
"
      end
    end

    class 987013 "LayoutTransition"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class enables automatic animations on layout changes in ViewGroup objects. To enable
transitions for a layout container, create a LayoutTransition object and set it on any
ViewGroup by calling {@link ViewGroup#setLayoutTransition(LayoutTransition)}. This will cause
default animations to run whenever items are added to or removed from that container. To specify
custom animations, use the {@link LayoutTransition#setAnimator(int, Animator)
setAnimator()} method.

<p>One of the core concepts of these transition animations is that there are two types of
changes that cause the transition and four different animations that run because of
those changes. The changes that trigger the transition are items being added to a container
(referred to as an \"appearing\" transition) or removed from a container (also known as
\"disappearing\"). Setting the visibility of views (between GONE and VISIBLE) will trigger
the same add/remove logic. The animations that run due to those events are one that animates
items being added, one that animates items being removed, and two that animate the other
items in the container that change due to the add/remove occurrence. Users of
the transition may want different animations for the changing items depending on whether
they are changing due to an appearing or disappearing event, so there is one animation for
each of these variations of the changing event. Most of the API of this class is concerned
with setting up the basic properties of the animations used in these four situations,
or with setting up custom animations for any or all of the four.</p>

<p>By default, the DISAPPEARING animation begins immediately, as does the CHANGE_APPEARING
animation. The other animations begin after a delay that is set to the default duration
of the animations. This behavior facilitates a sequence of animations in transitions as
follows: when an item is being added to a layout, the other children of that container will
move first (thus creating space for the new item), then the appearing animation will run to
animate the item being added. Conversely, when an item is removed from a container, the
animation to remove it will run first, then the animations of the other children in the
layout will run (closing the gap created in the layout when the item was removed). If this
default choreography behavior is not desired, the {@link #setDuration(int, long)} and
{@link #setStartDelay(int, long)} of any or all of the animations can be changed as
appropriate. Keep in mind, however, that if you start an APPEARING animation before a
DISAPPEARING animation is completed, the DISAPPEARING animation stops, and any effects from
the DISAPPEARING animation are reverted. If you instead start a DISAPPEARING animation
before an APPEARING animation is completed, a similar set of effects occurs for the
APPEARING animation.</p>

<p>The animations specified for the transition, both the defaults and any custom animations
set on the transition object, are templates only. That is, these animations exist to hold the
basic animation properties, such as the duration, start delay, and properties being animated.
But the actual target object, as well as the start and end values for those properties, are
set automatically in the process of setting up the transition each time it runs. Each of the
animations is cloned from the original copy and the clone is then populated with the dynamic
values of the target being animated (such as one of the items in a layout container that is
moving as a result of the layout event) as well as the values that are changing (such as the
position and size of that object). The actual values that are pushed to each animation
depends on what properties are specified for the animation. For example, the default
CHANGE_APPEARING animation animates the <code>left</code>, <code>top</code>, <code>right</code>,
<code>bottom</code>, <code>scrollX</code>, and <code>scrollY</code> properties.
Values for these properties are updated with the pre- and post-layout
values when the transition begins. Custom animations will be similarly populated with
the target and values being animated, assuming they use ObjectAnimator objects with
property names that are known on the target object.</p>

<p>This class, and the associated XML flag for containers, animateLayoutChanges=\"true\",
provides a simple utility meant for automating changes in straightforward situations.
Using LayoutTransition at multiple levels of a nested view hierarchy may not work due to the
interrelationship of the various levels of layout. Also, a container that is being scrolled
at the same time as items are being added or removed is probably not a good candidate for
this utility, because the before/after locations calculated by LayoutTransition
may not match the actual locations when the animations finish due to the container
being scrolled as the animations are running. You can work around that
particular issue by disabling the 'changing' animations by setting the CHANGE_APPEARING
and CHANGE_DISAPPEARING animations to null, and setting the startDelay of the
other animations appropriately.</p>
"
      class 987397 "TransitionListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	operation 4915717 "startTransition"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "transition" type class_ref 987013 // LayoutTransition
	    param inout name "container" type class_ref 971013 // ViewGroup
	    param inout name "view" type class_ref 970757 // View
	    param in name "transitionType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "This event is sent to listeners when any type of transition animation begins.

@param transition The LayoutTransition sending out the event.
@param container The ViewGroup on which the transition is playing.
@param view The View object being affected by the transition animation.
@param transitionType The type of transition that is beginning,
{@link android.animation.LayoutTransition#APPEARING},
{@link android.animation.LayoutTransition#DISAPPEARING},
{@link android.animation.LayoutTransition#CHANGE_APPEARING}, or
{@link android.animation.LayoutTransition#CHANGE_DISAPPEARING}.
"
	end

	operation 4915845 "endTransition"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "transition" type class_ref 987013 // LayoutTransition
	    param inout name "container" type class_ref 971013 // ViewGroup
	    param inout name "view" type class_ref 970757 // View
	    param in name "transitionType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "This event is sent to listeners when any type of transition animation ends.

@param transition The LayoutTransition sending out the event.
@param container The ViewGroup on which the transition is playing.
@param view The View object being affected by the transition animation.
@param transitionType The type of transition that is ending,
{@link android.animation.LayoutTransition#APPEARING},
{@link android.animation.LayoutTransition#DISAPPEARING},
{@link android.animation.LayoutTransition#CHANGE_APPEARING}, or
{@link android.animation.LayoutTransition#CHANGE_DISAPPEARING}.
"
	end
      end

      attribute 3258629 "CHANGE_APPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are changing
due to a new item appearing in the container.

"
      end

      attribute 3258757 "CHANGE_DISAPPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are changing
due to an item disappearing from the container.

"
      end

      attribute 3258885 "APPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are appearing
in the container.

"
      end

      attribute 3259013 "DISAPPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are disappearing
from the container.

"
      end

      attribute 3259141 "CHANGING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are changing
due to a layout change not caused by items being added to or removed
from the container. This transition type is not enabled by default; it can be
enabled via {@link #enableTransitionType(int)}.

"
      end

      attribute 3259269 "FLAG_APPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x01"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Private bit fields used to set the collection of enabled transition types for
mTransitionTypes.

"
      end

      attribute 3259397 "FLAG_DISAPPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x02"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3259525 "FLAG_CHANGE_APPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x04"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3259653 "FLAG_CHANGE_DISAPPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x08"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3259781 "FLAG_CHANGING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x10"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1449733 // mDisappearingAnim (<unidirectional association>)
	relation 1449733 --->
	  a role_name "mDisappearingAnim" init_value " null" private
	    comment "
These variables hold the animations that are currently used to run the transition effects.
These animations are set to defaults, but can be changed to custom animations by
calls to setAnimator().

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1449733 // mDisappearingAnim (<unidirectional association>)
	  b parent class_ref 1004677 // Animator
      end

      classrelation 1449861 // mAppearingAnim (<unidirectional association>)
	relation 1449861 --->
	  a role_name "mAppearingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1449861 // mAppearingAnim (<unidirectional association>)
	  b parent class_ref 1004677 // Animator
      end

      classrelation 1449989 // mChangingAppearingAnim (<unidirectional association>)
	relation 1449989 --->
	  a role_name "mChangingAppearingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1449989 // mChangingAppearingAnim (<unidirectional association>)
	  b parent class_ref 1004677 // Animator
      end

      classrelation 1450117 // mChangingDisappearingAnim (<unidirectional association>)
	relation 1450117 --->
	  a role_name "mChangingDisappearingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1450117 // mChangingDisappearingAnim (<unidirectional association>)
	  b parent class_ref 1004677 // Animator
      end

      classrelation 1450245 // mChangingAnim (<unidirectional association>)
	relation 1450245 --->
	  a role_name "mChangingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1450245 // mChangingAnim (<unidirectional association>)
	  b parent class_ref 1004677 // Animator
      end

      classrelation 1450373 // defaultChange (<unidirectional association>)
	relation 1450373 --->
	  a role_name "defaultChange" class_relation private
	    comment "
These are the default animations, defined in the constructor, that will be used
unless the user specifies custom animations.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1450373 // defaultChange (<unidirectional association>)
	  b parent class_ref 1004421 // ObjectAnimator
      end

      classrelation 1450501 // defaultChangeIn (<unidirectional association>)
	relation 1450501 --->
	  a role_name "defaultChangeIn" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1450501 // defaultChangeIn (<unidirectional association>)
	  b parent class_ref 1004421 // ObjectAnimator
      end

      classrelation 1450629 // defaultChangeOut (<unidirectional association>)
	relation 1450629 --->
	  a role_name "defaultChangeOut" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1450629 // defaultChangeOut (<unidirectional association>)
	  b parent class_ref 1004421 // ObjectAnimator
      end

      classrelation 1450757 // defaultFadeIn (<unidirectional association>)
	relation 1450757 --->
	  a role_name "defaultFadeIn" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1450757 // defaultFadeIn (<unidirectional association>)
	  b parent class_ref 1004421 // ObjectAnimator
      end

      classrelation 1450885 // defaultFadeOut (<unidirectional association>)
	relation 1450885 --->
	  a role_name "defaultFadeOut" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1450885 // defaultFadeOut (<unidirectional association>)
	  b parent class_ref 1004421 // ObjectAnimator
      end

      attribute 3259909 "DEFAULT_DURATION"
	class_attribute private explicit_type "long"
	init_value " 300"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The default duration used by all animations.

"
      end

      attribute 3260037 "mChangingAppearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The durations of the different animations

"
      end

      attribute 3260165 "mChangingDisappearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3260293 "mChangingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3260421 "mAppearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3260549 "mDisappearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3260677 "mAppearingDelay"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The start delays of the different animations. Note that the default behavior of
the appearing item is the default duration, since it should wait for the items to move
before fading it. Same for the changing animation when disappearing; it waits for the item
to fade out before moving the other items.

"
      end

      attribute 3260805 "mDisappearingDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3260933 "mChangingAppearingDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3261061 "mChangingDisappearingDelay"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3261189 "mChangingDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3261317 "mChangingAppearingStagger"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The inter-animation delays used on the changing animations

"
      end

      attribute 3261445 "mChangingDisappearingStagger"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3261573 "mChangingStagger"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1451013 // ACCEL_DECEL_INTERPOLATOR (<unidirectional association>)
	relation 1451013 --->
	  a role_name "ACCEL_DECEL_INTERPOLATOR" init_value "
            new AccelerateDecelerateInterpolator()" class_relation private
	    comment "
Static interpolators - these are stateless and can be shared across the instances

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1451013 // ACCEL_DECEL_INTERPOLATOR (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1451141 // DECEL_INTERPOLATOR (<unidirectional association>)
	relation 1451141 --->
	  a role_name "DECEL_INTERPOLATOR" init_value " new DecelerateInterpolator()" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1451141 // DECEL_INTERPOLATOR (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1451269 // sAppearingInterpolator (<unidirectional association>)
	relation 1451269 --->
	  a role_name "sAppearingInterpolator" init_value " ACCEL_DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1451269 // sAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1451397 // sDisappearingInterpolator (<unidirectional association>)
	relation 1451397 --->
	  a role_name "sDisappearingInterpolator" init_value " ACCEL_DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1451397 // sDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1451525 // sChangingAppearingInterpolator (<unidirectional association>)
	relation 1451525 --->
	  a role_name "sChangingAppearingInterpolator" init_value " DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1451525 // sChangingAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1451653 // sChangingDisappearingInterpolator (<unidirectional association>)
	relation 1451653 --->
	  a role_name "sChangingDisappearingInterpolator" init_value " DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1451653 // sChangingDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1451781 // sChangingInterpolator (<unidirectional association>)
	relation 1451781 --->
	  a role_name "sChangingInterpolator" init_value " DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1451781 // sChangingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1451909 // mAppearingInterpolator (<unidirectional association>)
	relation 1451909 --->
	  a role_name "mAppearingInterpolator" init_value " sAppearingInterpolator" private
	    comment "
The default interpolators used for the animations

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1451909 // mAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1452037 // mDisappearingInterpolator (<unidirectional association>)
	relation 1452037 --->
	  a role_name "mDisappearingInterpolator" init_value " sDisappearingInterpolator" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1452037 // mDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1452165 // mChangingAppearingInterpolator (<unidirectional association>)
	relation 1452165 --->
	  a role_name "mChangingAppearingInterpolator" init_value " sChangingAppearingInterpolator" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1452165 // mChangingAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1452293 // mChangingDisappearingInterpolator (<unidirectional association>)
	relation 1452293 --->
	  a role_name "mChangingDisappearingInterpolator" init_value " sChangingDisappearingInterpolator" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1452293 // mChangingDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1452421 // mChangingInterpolator (<unidirectional association>)
	relation 1452421 --->
	  a role_name "mChangingInterpolator" init_value " sChangingInterpolator" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1452421 // mChangingInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1452549 // pendingAnimations (<unidirectional association>)
	relation 1452549 --->
	  stereotype "HashMap"
	  a role_name "pendingAnimations" init_value "
            new HashMap<View, Animator>()" const_relation private
	    comment "These hashmaps are used to store the animations that are currently running as part of
the transition. The reason for this is that a further layout event should cause
existing animations to stop where they are prior to starting new animations. So
we cache all of the current animations in this map for possible cancellation on
another layout event. LinkedHashMaps are used to preserve the order in which animations
are inserted, so that we process events (such as setting up start values) in the same order.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1452549 // pendingAnimations (<unidirectional association>)
	  b parent class_ref 970757 // View
      end

      classrelation 1452677 // currentChangingAnimations (<unidirectional association>)
	relation 1452677 --->
	  stereotype "LinkedHashMap"
	  a role_name "currentChangingAnimations" init_value "
            new LinkedHashMap<View, Animator>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1452677 // currentChangingAnimations (<unidirectional association>)
	  b parent class_ref 970757 // View
      end

      classrelation 1452805 // currentAppearingAnimations (<unidirectional association>)
	relation 1452805 --->
	  stereotype "LinkedHashMap"
	  a role_name "currentAppearingAnimations" init_value "
            new LinkedHashMap<View, Animator>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1452805 // currentAppearingAnimations (<unidirectional association>)
	  b parent class_ref 970757 // View
      end

      classrelation 1452933 // currentDisappearingAnimations (<unidirectional association>)
	relation 1452933 --->
	  stereotype "LinkedHashMap"
	  a role_name "currentDisappearingAnimations" init_value "
            new LinkedHashMap<View, Animator>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1452933 // currentDisappearingAnimations (<unidirectional association>)
	  b parent class_ref 970757 // View
      end

      classrelation 1453061 // layoutChangeListenerMap (<unidirectional association>)
	relation 1453061 --->
	  stereotype "HashMap"
	  a role_name "layoutChangeListenerMap" init_value "
            new HashMap<View, View.OnLayoutChangeListener>()" const_relation private
	    comment "This hashmap is used to track the listeners that have been added to the children of
a container. When a layout change occurs, an animation is created for each View, so that
the pre-layout values can be cached in that animation. Then a listener is added to the
view to see whether the layout changes the bounds of that view. If so, the animation
is set with the final values and then run. If not, the animation is not started. When
the process of setting up and running all appropriate animations is done, we need to
remove these listeners and clear out the map.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, View.OnLayoutChangeListener> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1453061 // layoutChangeListenerMap (<unidirectional association>)
	  b parent class_ref 970757 // View
      end

      attribute 3261701 "staggerDelay"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Used to track the current delay being assigned to successive animations as they are
started. This value is incremented for each new animation, then zeroed before the next
transition begins.

"
      end

      attribute 3261829 "mTransitionTypes"
	private explicit_type "int"
	init_value " FLAG_CHANGE_APPEARING | FLAG_CHANGE_DISAPPEARING |
            FLAG_APPEARING | FLAG_DISAPPEARING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "These are the types of transition animations that the LayoutTransition is reacting
to. By default, appearing/disappearing and the change animations related to them are
enabled (not CHANGING).

"
      end

      classrelation 1453189 // mListeners (<unidirectional association>)
	relation 1453189 --->
	  stereotype "ArrayList"
	  a role_name "mListeners" private
	    comment "The set of listeners that should be notified when APPEARING/DISAPPEARING transitions
start and end.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1453189 // mListeners (<unidirectional association>)
	  b parent class_ref 987397 // TransitionListener
      end

      attribute 3261957 "mAnimateParentHierarchy"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Controls whether changing animations automatically animate the parent hierarchy as well.
This behavior prevents artifacts when wrap_content layouts snap to the end state as the
transition begins, causing visual glitches and clipping.
Default value is true.

"
      end

      operation 4910725 "LayoutTransition"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs a LayoutTransition object. By default, the object will listen to layout
events on any ViewGroup that it is set on and will run default animations for each
type of layout event.
"
      end

      operation 4910853 "setDuration"
	public explicit_return_type "void"
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the duration to be used by all animations of this transition object. If you want to
set the duration of just one of the animations in particular, use the
{@link #setDuration(int, long)} method.

@param duration The length of time, in milliseconds, that the transition animations
should last.
"
      end

      operation 4910981 "enableTransitionType"
	public explicit_return_type "void"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Enables the specified transitionType for this LayoutTransition object.
By default, a LayoutTransition listens for changes in children being
added/remove/hidden/shown in the container, and runs the animations associated with
those events. That is, all transition types besides {@link #CHANGING} are enabled by default.
You can also enable {@link #CHANGING} animations by calling this method with the
{@link #CHANGING} transitionType.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.
"
      end

      operation 4911109 "disableTransitionType"
	public explicit_return_type "void"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Disables the specified transitionType for this LayoutTransition object.
By default, all transition types except {@link #CHANGING} are enabled.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.
"
      end

      operation 4911237 "isTransitionTypeEnabled"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns whether the specified transitionType is enabled for this LayoutTransition object.
By default, all transition types except {@link #CHANGING} are enabled.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.
@return true if the specified transitionType is currently enabled, false otherwise.
"
      end

      operation 4911365 "setStartDelay"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the start delay on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose start delay
is being set.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose start delay is being set.
@param delay The length of time, in milliseconds, to delay before starting the animation.
@see Animator#setStartDelay(long)
"
      end

      operation 4911493 "getStartDelay"
	public explicit_return_type "long"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the start delay on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose start delay
is returned.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose start delay is returned.
@return long The start delay of the specified animation.
@see Animator#getStartDelay()
"
      end

      operation 4911621 "setDuration"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the duration on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose duration
is being set.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose duration is being set.
@param duration The length of time, in milliseconds, that the specified animation should run.
@see Animator#setDuration(long)
"
      end

      operation 4911749 "getDuration"
	public explicit_return_type "long"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the duration on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose duration
is returned.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose duration is returned.
@return long The duration of the specified animation.
@see Animator#getDuration()
"
      end

      operation 4911877 "setStagger"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the length of time to delay between starting each animation during one of the
change animations.

@param transitionType A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or
{@link #CHANGING}.
@param duration The length of time, in milliseconds, to delay before launching the next
animation in the sequence.
"
      end

      operation 4912005 "getStagger"
	public explicit_return_type "long"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the length of time to delay between starting each animation during one of the
change animations.

@param transitionType A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or
{@link #CHANGING}.
@return long The length of time, in milliseconds, to delay before launching the next
animation in the sequence.
"
      end

      operation 4912133 "setInterpolator"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param inout name "interpolator" type class_ref 1005317 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the interpolator on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose interpolator
is being set.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose interpolator is being set.
@param interpolator The interpolator that the specified animation should use.
@see Animator#setInterpolator(TimeInterpolator)
"
      end

      operation 4912261 "getInterpolator"
	public return_type class_ref 1005317 // TimeInterpolator
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the interpolator on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose interpolator
is returned.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose interpolator is being returned.
@return TimeInterpolator The interpolator that the specified animation uses.
@see Animator#setInterpolator(TimeInterpolator)
"
      end

      operation 4912389 "setAnimator"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param inout name "animator" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the animation used during one of the transition types that may run. Any
Animator object can be used, but to be most useful in the context of layout
transitions, the animation should either be a ObjectAnimator or a AnimatorSet
of animations including PropertyAnimators. Also, these ObjectAnimator objects
should be able to get and set values on their target objects automatically. For
example, a ObjectAnimator that animates the property \"left\" is able to set and get the
<code>left</code> property from the View objects being animated by the layout
transition. The transition works by setting target objects and properties
dynamically, according to the pre- and post-layoout values of those objects, so
having animations that can handle those properties appropriately will work best
for custom animation. The dynamic setting of values is only the case for the
CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with
the values they have.

<p>It is also worth noting that any and all animations (and their underlying
PropertyValuesHolder objects) will have their start and end values set according
to the pre- and post-layout values. So, for example, a custom animation on \"alpha\"
as the CHANGE_APPEARING animation will inherit the real value of alpha on the target
object (presumably 1) as its starting and ending value when the animation begins.
Animations which need to use values at the beginning and end that may not match the
values queried when the transition begins may need to use a different mechanism
than a standard ObjectAnimator object.</p>

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the
animation whose animator is being set.
@param animator The animation being assigned. A value of <code>null</code> means that no
animation will be run for the specified transitionType.
"
      end

      operation 4912517 "getAnimator"
	public return_type class_ref 1004677 // Animator
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the animation used during one of the transition types that may run.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose animator is being returned.
@return Animator The animation being used for the given transition type.
@see #setAnimator(int, Animator)
"
      end

      operation 4912645 "runChangeTransition"
	private explicit_return_type "void"
	nparams 3
	  param in name "parent" type class_ref 971013 // ViewGroup
	  param inout name "newView" type class_ref 970757 // View
	  param in name "changeReason" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function sets up animations on all of the views that change during layout.
For every child in the parent, we create a change animation of the appropriate
type (appearing, disappearing, or changing) and ask it to populate its start values from its
target view. We add layout listeners to all child views and listen for changes. For
those views that change, we populate the end values for those animations and start them.
Animations are not run on unchanging views.

@param parent The container which is undergoing a change.
@param newView The view being added to or removed from the parent. May be null if the
changeReason is CHANGING.
@param changeReason A value of APPEARING, DISAPPEARING, or CHANGING, indicating whether the
transition is occurring because an item is being added to or removed from the parent, or
if it is running in response to a layout operation (that is, if the value is CHANGING).
"
      end

      operation 4912773 "setAnimateParentHierarchy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animateParentHierarchy" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will
cause the default changing animation to be run on the parent hierarchy as well. This allows
containers of transitioning views to also transition, which may be necessary in situations
where the containers bounds change between the before/after states and may clip their
children during the transition animations. For example, layouts with wrap_content will
adjust their bounds according to the dimensions of their children.

<p>The default changing transitions animate the bounds and scroll positions of the
target views. These are the animations that will run on the parent hierarchy, not
the custom animations that happen to be set on the transition. This allows custom
behavior for the children of the transitioning container, but uses standard behavior
of resizing/rescrolling on any changing parents.

@param animateParentHierarchy A boolean value indicating whether the parents of
transitioning views should also be animated during the transition. Default value is true.
"
      end

      operation 4912901 "setupChangeAnimation"
	private explicit_return_type "void"
	nparams 5
	  param in name "parent" type class_ref 971013 // ViewGroup
	  param in name "changeReason" explicit_type "int"
	  param inout name "baseAnimator" type class_ref 1004677 // Animator
	  param in name "duration" explicit_type "long"
	  param in name "child" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, ${t2} ${p2}, final ${t3} ${p3}, final ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Utility function called by runChangingTransition for both the children and the parent
hierarchy.
"
      end

      operation 4913029 "startChangingAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Starts the animations set up for a CHANGING transition. We separate the setup of these
animations from actually starting them, to avoid side-effects that starting the animations
may have on the properties of the affected objects. After setup, we tell the affected parent
that this transition should be started. The parent informs its ViewAncestor, which then
starts the transition after the current layout/measurement phase, just prior to drawing
the view hierarchy.

@hide
"
      end

      operation 4913157 "endChangingAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Ends the animations that are set up for a CHANGING transition. This is a variant of
startChangingAnimations() which is called when the window the transition is playing in
is not visible. We need to make sure the animations put their targets in their end states
and that the transition finishes to remove any mid-process state (such as isRunning()).

@hide
"
      end

      operation 4913285 "isChangingLayout"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns true if animations are running which animate layout-related properties. This
essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING animations
are running, since these animations operate on layout-related properties.

@return true if CHANGE_APPEARING or CHANGE_DISAPPEARING animations are currently
running.
"
      end

      operation 4913413 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns true if any of the animations in this transition are currently running.

@return true if any animations in the transition are running.
"
      end

      operation 4913541 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Cancels the currently running transition. Note that we cancel() the changing animations
but end() the visibility animations. This is because this method is currently called
in the context of starting a new transition, so we want to move things from their mid-
transition positions, but we want them to have their end-transition visibility.

@hide
"
      end

      operation 4913669 "cancel"
	public explicit_return_type "void"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Cancels the specified type of transition. Note that we cancel() the changing animations
but end() the visibility animations. This is because this method is currently called
in the context of starting a new transition, so we want to move things from their mid-
transition positions, but we want them to have their end-transition visibility.

@hide
"
      end

      operation 4913797 "runAppearingTransition"
	private explicit_return_type "void"
	nparams 2
	  param in name "parent" type class_ref 971013 // ViewGroup
	  param in name "child" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method runs the animation that makes an added item appear.

@param parent The ViewGroup to which the View is being added.
@param child The View being added to the ViewGroup.
"
      end

      operation 4913925 "runDisappearingTransition"
	private explicit_return_type "void"
	nparams 2
	  param in name "parent" type class_ref 971013 // ViewGroup
	  param in name "child" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method runs the animation that makes a removed item disappear.

@param parent The ViewGroup from which the View is being removed.
@param child The View being removed from the ViewGroup.
"
      end

      operation 4914053 "addChild"
	private explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 971013 // ViewGroup
	  param inout name "child" type class_ref 970757 // View
	  param inout name "changesLayout" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method is called by ViewGroup when a child view is about to be added to the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup to which the View is being added.
@param child The View being added to the ViewGroup.
@param changesLayout Whether the removal will cause changes in the layout of other views
in the container. INVISIBLE views becoming VISIBLE will not cause changes and thus will not
affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations.
"
      end

      operation 4914181 "hasListeners"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4914309 "layoutChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 971013 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method is called by ViewGroup when there is a call to layout() on the container
with this LayoutTransition. If the CHANGING transition is enabled and if there is no other
transition currently running on the container, then this call runs a CHANGING transition.
The transition does not start immediately; it just sets up the mechanism to run if any
of the children of the container change their layout parameters (similar to
the CHANGE_APPEARING and CHANGE_DISAPPEARING transitions).

@param parent The ViewGroup whose layout() method has been called.

@hide
"
      end

      operation 4914437 "addChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 971013 // ViewGroup
	  param inout name "child" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method is called by ViewGroup when a child view is about to be added to the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup to which the View is being added.
@param child The View being added to the ViewGroup.
"
      end

      operation 4914565 "showChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 971013 // ViewGroup
	  param inout name "child" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@deprecated Use {@link #showChild(android.view.ViewGroup, android.view.View, int)}.
"
      end

      operation 4914693 "showChild"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 971013 // ViewGroup
	  param inout name "child" type class_ref 970757 // View
	  param in name "oldVisibility" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method is called by ViewGroup when a child view is about to be made visible in the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup in which the View is being made visible.
@param child The View being made visible.
@param oldVisibility The previous visibility value of the child View, either
{@link View#GONE} or {@link View#INVISIBLE}.
"
      end

      operation 4914821 "removeChild"
	private explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 971013 // ViewGroup
	  param inout name "child" type class_ref 970757 // View
	  param inout name "changesLayout" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method is called by ViewGroup when a child view is about to be removed from the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup from which the View is being removed.
@param child The View being removed from the ViewGroup.
@param changesLayout Whether the removal will cause changes in the layout of other views
in the container. Views becoming INVISIBLE will not cause changes and thus will not
affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations.
"
      end

      operation 4914949 "removeChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 971013 // ViewGroup
	  param inout name "child" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method is called by ViewGroup when a child view is about to be removed from the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup from which the View is being removed.
@param child The View being removed from the ViewGroup.
"
      end

      operation 4915077 "hideChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 971013 // ViewGroup
	  param inout name "child" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@deprecated Use {@link #hideChild(android.view.ViewGroup, android.view.View, int)}.
"
      end

      operation 4915205 "hideChild"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 971013 // ViewGroup
	  param inout name "child" type class_ref 970757 // View
	  param in name "newVisibility" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method is called by ViewGroup when a child view is about to be hidden in
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The parent ViewGroup of the View being hidden.
@param child The View being hidden.
@param newVisibility The new visibility value of the child View, either
{@link View#GONE} or {@link View#INVISIBLE}.
"
      end

      operation 4915333 "addTransitionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 987397 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Add a listener that will be called when the bounds of the view change due to
layout processing.

@param listener The listener that will be called when layout bounds change.
"
      end

      operation 4915461 "removeTransitionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 987397 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Remove a listener for layout changes.

@param listener The listener for layout bounds change.
"
      end

      operation 4915589 "getTransitionListeners"
	public return_type class_ref 987397 // TransitionListener
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the current list of listeners for layout changes.
@return
"
      end

      class 1009669 "CleanupCallback"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1454853 // <realization>
	  relation 1454853 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1454853 // <realization>
	    b parent class_ref 1009797 // OnPreDrawListener
	end

	classrelation 1454981 // <realization>
	  relation 1454981 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1454981 // <realization>
	    b parent class_ref 976773 // OnAttachStateChangeListener
	end

	classrelation 1455109 // layoutChangeListenerMap (<unidirectional association>)
	  relation 1455109 --->
	    stereotype "Map"
	    a role_name "layoutChangeListenerMap" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, View.OnLayoutChangeListener> ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1455109 // layoutChangeListenerMap (<unidirectional association>)
	    b parent class_ref 970757 // View
	end

	classrelation 1455237 // parent (<unidirectional association>)
	  relation 1455237 --->
	    a role_name "parent" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1455237 // parent (<unidirectional association>)
	    b parent class_ref 971013 // ViewGroup
	end

	operation 4924933 "CleanupCallback"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "listenerMap" explicit_type "Map<View, View.OnLayoutChangeListener>"
	    param inout name "parent" type class_ref 971013 // ViewGroup
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4925061 "cleanup"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4925189 "onViewAttachedToWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 970757 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4925317 "onViewDetachedFromWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 970757 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4925445 "onPreDraw"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end
    end

    class 1003781 "AnimationHandler"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This custom, static handler handles the timing pulse that is shared by all active
ValueAnimators. This approach ensures that the setting of animation values will happen on the
same thread that animations start on, and that all animations will share the same times for
calculating their values, which makes synchronizing animations possible.

The handler uses the Choreographer by default for doing periodic callbacks. A custom
AnimationFrameCallbackProvider can be set on the handler to provide timing pulse that
may be independent of UI frame update. This could be useful in testing.

@hide
"
      class 1003909 "AnimationFrameCallback"
	visibility package stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	operation 4877829 "doAnimationFrame"
	  public explicit_return_type "boolean"
	  nparams 1
	    param in name "frameTime" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Run animation based on the frame time.
@param frameTime The frame start time, in the {@link SystemClock#uptimeMillis()} time
                 base.
@return if the animation has finished.
"
	end

	operation 4877957 "commitAnimationFrame"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "frameTime" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "This notifies the callback of frame commit time. Frame commit time is the time after
traversals happen, as opposed to the normal animation frame time that is before
traversals. This is used to compensate expensive traversals that happen as the
animation starts. When traversals take a long time to complete, the rendering of the
initial frame will be delayed (by a long time). But since the startTime of the
animation is set before the traversal, by the time of next frame, a lot of time would
have passed since startTime was set, the animation will consequently skip a few frames
to respect the new frameTime. By having the commit time, we can adjust the start time to
when the first frame was drawn (after any expensive traversals) so that no frames
will be skipped.

@param frameTime The frame time after traversals happen, if any, in the
                 {@link SystemClock#uptimeMillis()} time base.
"
	end
      end

      classrelation 1441285 // mDelayedCallbackStartTime (<unidirectional association>)
	relation 1441285 --->
	  a role_name "mDelayedCallbackStartTime" init_value "
            new ArrayMap<>()" const_relation private
	    comment "
Internal per-thread collections used to avoid set collisions as animations start and end
while being processed.
@hide

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AnimationFrameCallback, Long> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1441285 // mDelayedCallbackStartTime (<unidirectional association>)
	  b parent class_ref 956293 // ArrayMap
      end

      classrelation 1441413 // mAnimationCallbacks (<unidirectional association>)
	relation 1441413 --->
	  stereotype "ArrayList"
	  a role_name "mAnimationCallbacks" init_value "
            new ArrayList<>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1441413 // mAnimationCallbacks (<unidirectional association>)
	  b parent class_ref 1003909 // AnimationFrameCallback
      end

      classrelation 1441541 // mCommitCallbacks (<unidirectional association>)
	relation 1441541 --->
	  stereotype "ArrayList"
	  a role_name "mCommitCallbacks" init_value "
            new ArrayList<>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1441541 // mCommitCallbacks (<unidirectional association>)
	  b parent class_ref 1003909 // AnimationFrameCallback
      end

      class 1004037 "AnimationFrameCallbackProvider"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	operation 4878085 "postFrameCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "callback" type class_ref 1004293 // FrameCallback
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4878213 "postCommitCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "runnable" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4878341 "getFrameTime"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4878469 "getFrameDelay"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4878597 "setFrameDelay"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      classrelation 1441669 // mProvider (<unidirectional association>)
	relation 1441669 --->
	  a role_name "mProvider" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1441669 // mProvider (<unidirectional association>)
	  b parent class_ref 1004037 // AnimationFrameCallbackProvider
      end

      classrelation 1441797 // mFrameCallback (<unidirectional association>)
	relation 1441797 --->
	  a role_name "mFrameCallback" init_value " new Choreographer.FrameCallback() {
        @Override
        public void doFrame(long frameTimeNanos) {
            doAnimationFrame(getProvider().getFrameTime());
            if (mAnimationCallbacks.size() > 0) {
                getProvider().postFrameCallback(this);
            }
        }
    }" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1441797 // mFrameCallback (<unidirectional association>)
	  b parent class_ref 1004293 // FrameCallback
      end

      classrelation 1441925 // sAnimatorHandler (<unidirectional association>)
	relation 1441925 --->
	  stereotype "ThreadLocal"
	  a role_name "sAnimatorHandler" init_value " new ThreadLocal<>()" class_relation const_relation public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1441925 // sAnimatorHandler (<unidirectional association>)
	  b parent class_ref 1003781 // AnimationHandler
      end

      attribute 3251845 "mListDirty"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 4875269 "getInstance"
	class_operation public return_type class_ref 1003781 // AnimationHandler
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4875397 "setProvider"
	public explicit_return_type "void"
	nparams 1
	  param inout name "provider" type class_ref 1004037 // AnimationFrameCallbackProvider
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "By default, the Choreographer is used to provide timing for frame callbacks. A custom
provider can be used here to provide different timing pulse.
"
      end

      operation 4875525 "getProvider"
	private return_type class_ref 1004037 // AnimationFrameCallbackProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4875653 "addAnimationFrameCallback"
	public explicit_return_type "void"
	nparams 2
	  param in name "callback" type class_ref 1003909 // AnimationFrameCallback
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Register to get a callback on the next frame after the delay.
"
      end

      operation 4875781 "addOneShotCommitCallback"
	public explicit_return_type "void"
	nparams 1
	  param in name "callback" type class_ref 1003909 // AnimationFrameCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Register to get a one shot callback for frame commit timing. Frame commit timing is the
time *after* traversals are done, as opposed to the animation frame timing, which is
before any traversals. This timing can be used to adjust the start time of an animation
when expensive traversals create big delta between the animation frame timing and the time
that animation is first shown on screen.

Note this should only be called when the animation has already registered to receive
animation frame callbacks. This callback will be guaranteed to happen *after* the next
animation frame callback.
"
      end

      operation 4875909 "removeCallback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "callback" type class_ref 1003909 // AnimationFrameCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Removes the given callback from the list, so it will no longer be called for frame related
timing.
"
      end

      operation 4876037 "doAnimationFrame"
	private explicit_return_type "void"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4876165 "commitAnimationFrame"
	private explicit_return_type "void"
	nparams 2
	  param inout name "callback" type class_ref 1003909 // AnimationFrameCallback
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4876293 "isCallbackDue"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "callback" type class_ref 1003909 // AnimationFrameCallback
	  param in name "currentTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Remove the callbacks from mDelayedCallbackStartTime once they have passed the initial delay
so that they can start getting frame callbacks.

@return true if they have passed the initial delay or have no delay, false otherwise.
"
      end

      operation 4876421 "getAnimationCount"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Return the number of callbacks that have registered for frame callbacks.
"
      end

      operation 4876549 "setFrameDelay"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4876677 "getFrameDelay"
	class_operation public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4876805 "autoCancelBasedOn"
	package explicit_return_type "void"
	nparams 1
	  param inout name "objectAnimator" type class_ref 1004421 // ObjectAnimator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4876933 "cleanUpList"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4877061 "getCallbackSize"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      class 1004549 "MyFrameCallbackProvider"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1442053 // <realization>
	  relation 1442053 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1442053 // <realization>
	    b parent class_ref 1004037 // AnimationFrameCallbackProvider
	end

	classrelation 1442181 // mChoreographer (<unidirectional association>)
	  relation 1442181 --->
	    a role_name "mChoreographer" init_value " Choreographer.getInstance()" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1442181 // mChoreographer (<unidirectional association>)
	    b parent class_ref 1004165 // Choreographer
	end

	operation 4877189 "postFrameCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "callback" type class_ref 1004293 // FrameCallback
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4877317 "postCommitCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "runnable" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4877445 "getFrameTime"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4877573 "getFrameDelay"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4877701 "setFrameDelay"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end
    end

    class 1004421 "ObjectAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This subclass of {@link ValueAnimator} provides support for animating properties on target objects.
The constructors of this class take parameters to define the target object that will be animated
as well as the name of the property that will be animated. Appropriate set/get functions
are then determined internally and the animation will call these functions as necessary to
animate the property.

<p>Animators can be created from either code or resource files, as shown here:</p>

{@sample development/samples/ApiDemos/res/anim/object_animator.xml ObjectAnimatorResources}

<p>Starting from API 23, it is possible to use {@link PropertyValuesHolder} and
{@link Keyframe} in resource files to create more complex animations. Using PropertyValuesHolders
allows animators to animate several properties in parallel, as shown in this sample:</p>

{@sample development/samples/ApiDemos/res/anim/object_animator_pvh.xml
PropertyValuesHolderResources}

<p>Using Keyframes allows animations to follow more complex paths from the start
to the end values. Note that you can specify explicit fractional values (from 0 to 1) for
each keyframe to determine when, in the overall duration, the animation should arrive at that
value. Alternatively, you can leave the fractions off and the keyframes will be equally
distributed within the total duration. Also, a keyframe with no value will derive its value
from the target object when the animator starts, just like animators with only one
value specified. In addition, an optional interpolator can be specified. The interpolator will
be applied on the interval between the keyframe that the interpolator is set on and the previous
keyframe. When no interpolator is supplied, the default {@link AccelerateDecelerateInterpolator}
will be used. </p>

{@sample development/samples/ApiDemos/res/anim/object_animator_pvh_kf_interpolated.xml KeyframeResources}

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about animating with {@code ObjectAnimator}, read the
<a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#object-animator\">Property
Animation</a> developer guide.</p>
</div>

@see #setPropertyName(String)

"
      classrelation 1456261 // <generalisation>
	relation 1456261 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1456261 // <generalisation>
	  b parent class_ref 1006341 // ValueAnimator
      end

      attribute 3267717 "LOG_TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " \"ObjectAnimator\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3267845 "DBG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3267973 "mTarget"
	private explicit_type "Object"
	stereotype "WeakReference"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "A weak reference to the target object on which the property exists, set
in the constructor. We'll cancel the animation if this goes away.

"
      end

      attribute 3268101 "mPropertyName"
	private explicit_type "String"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1456389 // mProperty (<unidirectional association>)
	relation 1456389 --->
	  a role_name "mProperty" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1456389 // mProperty (<unidirectional association>)
	  b parent class_ref 984069 // Property
      end

      attribute 3268229 "mAutoCancel"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 4935301 "setPropertyName"
	public explicit_return_type "void"
	nparams 1
	  param in name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the name of the property that will be animated. This name is used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.

<p>For best performance of the mechanism that calls the setter function determined by the
name of the property being animated, use <code>float</code> or <code>int</code> typed values,
and make the setter function for those properties have a <code>void</code> return value. This
will cause the code to take an optimized path for these constrained circumstances. Other
property types and return types will work, but will have more overhead in processing
the requests due to normal reflection mechanisms.</p>

<p>Note that the setter function derived from this property name
must take the same parameter type as the
<code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
the setter function will fail.</p>

<p>If this ObjectAnimator has been set up to animate several properties together,
using more than one PropertyValuesHolder objects, then setting the propertyName simply
sets the propertyName in the first of those PropertyValuesHolder objects.</p>

@param propertyName The name of the property being animated. Should not be null.
"
      end

      operation 4935429 "setProperty"
	public explicit_return_type "void"
	nparams 1
	  param inout name "property" type class_ref 984069 // Property
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the property that will be animated. Property objects will take precedence over
properties specified by the {@link #setPropertyName(String)} method. Animations should
be set up to use one or the other, not both.

@param property The property being animated. Should not be null.
"
      end

      operation 4935557 "getPropertyName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the name of the property that will be animated. This name will be used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.

<p>If this animator was created with a {@link Property} object instead of the
string name of a property, then this method will return the {@link
Property#getName() name} of that Property object instead. If this animator was
created with one or more {@link PropertyValuesHolder} objects, then this method
will return the {@link PropertyValuesHolder#getPropertyName() name} of that
object (if there was just one) or a comma-separated list of all of the
names (if there are more than one).</p>
"
      end

      operation 4935685 "getNameForTrace"
	package explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4935813 "ObjectAnimator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Creates a new ObjectAnimator object. This default constructor is primarily for
use internally; the other constructors which take parameters are more generally
useful.
"
      end

      operation 4935941 "ObjectAnimator"
	private explicit_return_type ""
	nparams 2
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Private utility constructor that initializes the target object and name of the
property being animated.

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
"
      end

      operation 4936069 "ObjectAnimator"
	private explicit_return_type ""
	nparams 2
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 984069 // Property
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T, ?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Private utility constructor that initializes the target object and property being animated.

@param target The object whose property is to be animated.
@param property The property being animated.
"
      end

      operation 4936197 "ofInt"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between int values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4936325 "ofInt"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "xPropertyName" explicit_type "String"
	  param in name "yPropertyName" explicit_type "String"
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties. A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are integers that are set to separate properties designated by
<code>xPropertyName</code> and <code>yPropertyName</code>.

@param target The object whose properties are to be animated. This object should
              have public methods on it called <code>setNameX()</code> and
              <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>
              are the value of <code>xPropertyName</code> and <code>yPropertyName</code>
              parameters, respectively.
@param xPropertyName The name of the property for the x coordinate being animated.
@param yPropertyName The name of the property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 4936453 "ofInt"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Integer> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between int values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated.
@param property The property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4936581 "ofInt"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "xProperty" type class_ref 984069 // Property
	  param inout name "yProperty" type class_ref 984069 // Property
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Integer> ${p1}, ${t2}<T, Integer> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties.  A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are integers that are set to separate properties, <code>xProperty</code> and
<code>yProperty</code>.

@param target The object whose properties are to be animated.
@param xProperty The property for the x coordinate being animated.
@param yProperty The property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 4936709 "ofMultiInt"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "values" explicit_type "int"
	multiplicity "[][]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[][] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates over int values for a multiple
parameters setter. Only public methods that take only int parameters are supported.
Each <code>int[]</code> contains a complete set of parameters to the setter method.
At least two <code>int[]</code> values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4936837 "ofMultiInt"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates the target using a multi-int setter
along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,
animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are integer x and y coordinates used in the first and second parameter of the
setter, respectively.

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 4936965 "ofMultiInt"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 5
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "T...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T, int[]> ${p2}, ${t3}<T> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates over values for a multiple int
parameters setter. Only public methods that take only int parameters are supported.
<p>At least two values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).</p>

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param converter Converts T objects into int parameters for the multi-value setter.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4937093 "ofArgb"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between color values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4937221 "ofArgb"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Integer> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between color values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated.
@param property The property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4937349 "ofFloat"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between float values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4937477 "ofFloat"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "xPropertyName" explicit_type "String"
	  param in name "yPropertyName" explicit_type "String"
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties. A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are floats that are set to separate properties designated by
<code>xPropertyName</code> and <code>yPropertyName</code>.

@param target The object whose properties are to be animated. This object should
              have public methods on it called <code>setNameX()</code> and
              <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>
              are the value of the <code>xPropertyName</code> and <code>yPropertyName</code>
              parameters, respectively.
@param xPropertyName The name of the property for the x coordinate being animated.
@param yPropertyName The name of the property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 4937605 "ofFloat"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Float> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between float values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated.
@param property The property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4937733 "ofFloat"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "xProperty" type class_ref 984069 // Property
	  param inout name "yProperty" type class_ref 984069 // Property
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Float> ${p1}, ${t2}<T, Float> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties. A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are floats that are set to separate properties, <code>xProperty</code> and
<code>yProperty</code>.

@param target The object whose properties are to be animated.
@param xProperty The property for the x coordinate being animated.
@param yProperty The property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 4937861 "ofMultiFloat"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "values" explicit_type "float"
	multiplicity "[][]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[][] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates over float values for a multiple
parameters setter. Only public methods that take only float parameters are supported.
Each <code>float[]</code> contains a complete set of parameters to the setter method.
At least two <code>float[]</code> values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4937989 "ofMultiFloat"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates the target using a multi-float setter
along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,
animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are float x and y coordinates used in the first and second parameter of the
setter, respectively.

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 4938117 "ofMultiFloat"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 5
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "T...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T, float[]> ${p2}, ${t3}<T> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates over values for a multiple float
parameters setter. Only public methods that take only float parameters are supported.
<p>At least two values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).</p>

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param converter Converts T objects into float parameters for the multi-value setter.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4938245 "ofObject"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between Object values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

<p><strong>Note:</strong> The values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4938373 "ofObject"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, @Nullable ${t2}<PointF, ?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.
A <code>Path</code></> animation moves in two dimensions, animating coordinates
<code>(x, y)</code> together to follow the line. This variant animates the coordinates
in a <code>PointF</code> to follow the <code>Path</code>. If the <code>Property</code>
associated with <code>propertyName</code> uses a type other than <code>PointF</code>,
<code>converter</code> can be used to change from <code>PointF</code> to the type
associated with the <code>Property</code>.

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 4938501 "ofObject"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, V> ${p1}, ${t2}<V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
@SafeVarargs
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between Object values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

<p><strong>Note:</strong> The values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

@param target The object whose property is to be animated.
@param property The property being animated.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4938629 "ofObject"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 5
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V, P> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, P> ${p1}, ${t2}<V, P> ${p2}, ${t3}<V> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
@SafeVarargs
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between Object values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).
This variant supplies a <code>TypeConverter</code> to convert from the animated values to the
type of the property. If only one value is supplied, the <code>TypeConverter</code> must be a
{@link android.animation.BidirectionalTypeConverter} to retrieve the current value.

<p><strong>Note:</strong> The values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

@param target The object whose property is to be animated.
@param property The property being animated.
@param converter Converts the animated object to the Property type.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4938757 "ofObject"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V> ${type} ${name}${(}${t0} ${p0}, @NonNull ${t1}<T, V> ${p1}, @Nullable ${t2}<PointF, V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.
A <code>Path</code></> animation moves in two dimensions, animating coordinates
<code>(x, y)</code> together to follow the line. This variant animates the coordinates
in a <code>PointF</code> to follow the <code>Path</code>. If <code>property</code>
uses a type other than <code>PointF</code>, <code>converter</code> can be used to change
from <code>PointF</code> to the type associated with the <code>Property</code>.

<p>The PointF passed to <code>converter</code> or <code>property</code>, if
<code>converter</code> is <code>null</code>, is reused on each animation frame and should
not be stored by the setter or TypeConverter.</p>

@param target The object whose property is to be animated.
@param property The property being animated. Should not be null.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 4938885 "ofPropertyValuesHolder"
	class_operation public return_type class_ref 1004421 // ObjectAnimator
	nparams 2
	  param inout name "target" explicit_type "Object"
	  param inout name "" explicit_type "PropertyValuesHolder...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns an ObjectAnimator that animates between the sets of values specified
in <code>PropertyValueHolder</code> objects. This variant should be used when animating
several properties at once with the same ObjectAnimator, since PropertyValuesHolder allows
you to associate a set of animation values with a property name.

@param target The object whose property is to be animated. Depending on how the
PropertyValuesObjects were constructed, the target object should either have the {@link
android.util.Property} objects used to construct the PropertyValuesHolder objects or (if the
PropertyValuesHOlder objects were created with property names) the target object should have
public methods on it called <code>setName()</code>, where <code>name</code> is the name of
the property passed in as the <code>propertyName</code> parameter for each of the
PropertyValuesHolder objects.
@param values A set of PropertyValuesHolder objects whose values will be animated between
over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 4939013 "setIntValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4939141 "setFloatValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4939269 "setObjectValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4939397 "setAutoCancel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cancel" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "autoCancel controls whether an ObjectAnimator will be canceled automatically
when any other ObjectAnimator with the same target and properties is started.
Setting this flag may make it easier to run different animators on the same target
object without having to keep track of whether there are conflicting animators that
need to be manually canceled. Canceling animators must have the same exact set of
target properties, in the same order.

@param cancel Whether future ObjectAnimators with the same target and properties
as this ObjectAnimator will cause this ObjectAnimator to be canceled.
"
      end

      operation 4939525 "hasSameTargetAndProperties"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "anim" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4939653 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4939781 "shouldAutoCancel"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "anim" type class_ref 1003909 // AnimationFrameCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4939909 "initAnimation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function is called immediately before processing the first animation
frame of an animation. If there is a nonzero <code>startDelay</code>, the
function is called after that delay ends.
It takes care of the final initialization steps for the
animation. This includes setting mEvaluator, if the user has not yet
set it up, and the setter/getter methods, if the user did not supply
them.

 <p>Overriders of this method should call the superclass method to cause
 internal mechanisms to be set up correctly.</p>
"
      end

      operation 4940037 "setDuration"
	public return_type class_ref 1004421 // ObjectAnimator
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@NonNull
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the length of the animation. The default duration is 300 milliseconds.

@param duration The length of the animation, in milliseconds.
@return ObjectAnimator The object called with setDuration(). This return
value makes it easier to compose statements together that construct and then set the
duration, as in
<code>ObjectAnimator.ofInt(target, propertyName, 0, 10).setDuration(500).start()</code>.
"
      end

      operation 4940165 "getTarget"
	public explicit_return_type "Object"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The target object whose property will be animated by this animation

@return The object being animated
"
      end

      operation 4940293 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4940421 "setupStartValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4940549 "setupEndValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4940677 "animateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method is called with the elapsed fraction of the animation during every
animation frame. This function turns the elapsed fraction into an interpolated fraction
and then into an animated value (from the evaluator. The function is called mostly during
animation updates, but it is also called when the <code>end()</code>
function is called, to set the final value on the property.

<p>Overrides of this method must call the superclass to perform the calculation
of the animated value.</p>

@param fraction The elapsed fraction of the animation.
"
      end

      operation 4940805 "isInitialized"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4940933 "clone"
	public return_type class_ref 1004421 // ObjectAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4941061 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@NonNull
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 1004677 "Animator"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the superclass for classes which provide basic support for animations which can be
started, ended, and have <code>AnimatorListeners</code> added to them.
"
      classrelation 1442309 // <realization>
	relation 1442309 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1442309 // <realization>
	  b parent class_ref 1004805 // Cloneable
      end

      attribute 3251973 "DURATION_INFINITE"
	class_attribute const_attribute public explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The value used to indicate infinite duration (e.g. when Animators repeat infinitely).

"
      end

      class 1004933 "AnimatorListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	operation 4883333 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "animation" type class_ref 1004677 // Animator
	    param inout name "isReverse" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies the start of the animation as well as the animation's overall play direction.
This method's default behavior is to call {@link #onAnimationStart(Animator)}. This
method can be overridden, though not required, to get the additional play direction info
when an animation starts. Skipping calling super when overriding this method results in
{@link #onAnimationStart(Animator)} not getting called.

@param animation The started animation.
@param isReverse Whether the animation is playing in reverse.
"
	end

	operation 4883461 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "animation" type class_ref 1004677 // Animator
	    param inout name "isReverse" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies the end of the animation. This callback is not invoked
for animations with repeat count set to INFINITE.</p>

<p>This method's default behavior is to call {@link #onAnimationEnd(Animator)}. This
method can be overridden, though not required, to get the additional play direction info
when an animation ends. Skipping calling super when overriding this method results in
{@link #onAnimationEnd(Animator)} not getting called.

@param animation The animation which reached its end.
@param isReverse Whether the animation is playing in reverse.
"
	end

	operation 4883589 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies the start of the animation.</p>

@param animation The started animation.
"
	end

	operation 4883717 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies the end of the animation. This callback is not invoked
for animations with repeat count set to INFINITE.</p>

@param animation The animation which reached its end.
"
	end

	operation 4883845 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies the cancellation of the animation. This callback is not invoked
for animations with repeat count set to INFINITE.</p>

@param animation The animation which was canceled.
"
	end

	operation 4883973 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies the repetition of the animation.</p>

@param animation The animation which was repeated.
"
	end
      end

      classrelation 1442437 // mListeners (<unidirectional association>)
	relation 1442437 --->
	  stereotype "ArrayList"
	  a role_name "mListeners" init_value " null" package
	    comment "The set of listeners to be sent events through the life of an animation.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1442437 // mListeners (<unidirectional association>)
	  b parent class_ref 1004933 // AnimatorListener
      end

      class 1005061 "AnimatorPauseListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	operation 4884101 "onAnimationPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies that the animation was paused.</p>

@param animation The animaton being paused.
@see #pause()
"
	end

	operation 4884229 "onAnimationResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies that the animation was resumed, after being
previously paused.</p>

@param animation The animation being resumed.
@see #resume()
"
	end
      end

      classrelation 1442565 // mPauseListeners (<unidirectional association>)
	relation 1442565 --->
	  stereotype "ArrayList"
	  a role_name "mPauseListeners" init_value " null" package
	    comment "The set of listeners to be sent pause/resume events through the life
of an animation.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1442565 // mPauseListeners (<unidirectional association>)
	  b parent class_ref 1005061 // AnimatorPauseListener
      end

      attribute 3252101 "mPaused"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Whether this animator is currently in a paused state.

"
      end

      attribute 3252229 "mChangingConfigurations"
	package explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Config
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "A set of flags which identify the type of configuration changes that can affect this
Animator. Used by the Animator cache.

"
      end

      class 1005189 "AnimatorConstantState"
	visibility private 
	nactuals 1
	actual class class_ref 1005445 // ConstantState
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1442821 // <realization>
	  relation 1442821 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1442821 // <realization>
	    b parent class_ref 1005445 // ConstantState
	end

	classrelation 1442949 // mAnimator (<unidirectional association>)
	  relation 1442949 --->
	    a role_name "mAnimator" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1442949 // mAnimator (<unidirectional association>)
	    b parent class_ref 1004677 // Animator
	end

	attribute 3252357 "mChangingConf"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@Config
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4884997 "AnimatorConstantState"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "animator" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4885125 "getChangingConfigurations"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
@Config
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4885253 "newInstance"
	  public return_type class_ref 1004677 // Animator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      classrelation 1442693 // mConstantState (<unidirectional association>)
	relation 1442693 --->
	  a role_name "mConstantState" private
	    comment "
If this animator is inflated from a constant state, keep a reference to it so that
ConstantState will not be garbage collected until this animator is collected

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1442693 // mConstantState (<unidirectional association>)
	  b parent class_ref 1005189 // AnimatorConstantState
      end

      operation 4878725 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Starts this animation. If the animation has a nonzero startDelay, the animation will start
running after that delay elapses. A non-delayed animation will have its initial
value(s) set immediately, followed by calls to
{@link AnimatorListener#onAnimationStart(Animator)} for any listeners of this animator.

<p>The animation started by calling this method will be run on the thread that called
this method. This thread should have a Looper on it (a runtime exception will be thrown if
this is not the case). Also, if the animation will animate
properties of objects in the view hierarchy, then the calling thread should be the UI
thread for that view hierarchy.</p>

"
      end

      operation 4878853 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Cancels the animation. Unlike {@link #end()}, <code>cancel()</code> causes the animation to
stop in its tracks, sending an
{@link android.animation.Animator.AnimatorListener#onAnimationCancel(Animator)} to
its listeners, followed by an
{@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} message.

<p>This method must be called on the thread that is running the animation.</p>
"
      end

      operation 4878981 "end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Ends the animation. This causes the animation to assign the end value of the property being
animated, then calling the
{@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} method on
its listeners.

<p>This method must be called on the thread that is running the animation.</p>
"
      end

      operation 4879109 "pause"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Pauses a running animation. This method should only be called on the same thread on
which the animation was started. If the animation has not yet been {@link
#isStarted() started} or has since ended, then the call is ignored. Paused
animations can be resumed by calling {@link #resume()}.

@see #resume()
@see #isPaused()
@see AnimatorPauseListener
"
      end

      operation 4879237 "resume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Resumes a paused animation, causing the animator to pick up where it left off
when it was paused. This method should only be called on the same thread on
which the animation was started. Calls to resume() on an animator that is
not currently paused will be ignored.

@see #pause()
@see #isPaused()
@see AnimatorPauseListener
"
      end

      operation 4879365 "isPaused"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns whether this animator is currently in a paused state.

@return True if the animator is currently paused, false otherwise.

@see #pause()
@see #resume()
"
      end

      operation 4879493 "getStartDelay"
	abstract public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The amount of time, in milliseconds, to delay processing the animation
after {@link #start()} is called.

@return the number of milliseconds to delay running the animation
"
      end

      operation 4879621 "setStartDelay"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The amount of time, in milliseconds, to delay processing the animation
after {@link #start()} is called.

@param startDelay The amount of the delay, in milliseconds
"
      end

      operation 4879749 "setDuration"
	abstract public return_type class_ref 1004677 // Animator
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the duration of the animation.

@param duration The length of the animation, in milliseconds.
"
      end

      operation 4879877 "getDuration"
	abstract public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the duration of the animation.

@return The length of the animation, in milliseconds.
"
      end

      operation 4880005 "getTotalDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the total duration of the animation, accounting for animation sequences, start delay,
and repeating. Return {@link #DURATION_INFINITE} if the duration is infinite.

@return  Total time an animation takes to finish, starting from the time {@link #start()}
         is called. {@link #DURATION_INFINITE} will be returned if the animation or any
         child animation repeats infinite times.
"
      end

      operation 4880133 "setInterpolator"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 1005317 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The time interpolator used in calculating the elapsed fraction of the
animation. The interpolator determines whether the animation runs with
linear or non-linear motion, such as acceleration and deceleration. The
default value is {@link android.view.animation.AccelerateDecelerateInterpolator}.

@param value the interpolator to be used by this animation
"
      end

      operation 4880261 "getInterpolator"
	public return_type class_ref 1005317 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the timing interpolator that this animation uses.

@return The timing interpolator for this animation.
"
      end

      operation 4880389 "isRunning"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns whether this Animator is currently running (having been started and gone past any
initial startDelay period and not yet ended).

@return Whether the Animator is running.
"
      end

      operation 4880517 "isStarted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns whether this Animator has been started and not yet ended. For reusable
Animators (which most Animators are, apart from the one-shot animator produced by
{@link android.view.ViewAnimationUtils#createCircularReveal(
android.view.View, int, int, float, float) createCircularReveal()}),
this state is a superset of {@link #isRunning()}, because an Animator with a
nonzero {@link #getStartDelay() startDelay} will return true for {@link #isStarted()} during
the delay phase, whereas {@link #isRunning()} will return true only after the delay phase
is complete. Non-reusable animators will always return true after they have been
started, because they cannot return to a non-started state.

@return Whether the Animator has been started and not yet ended.
"
      end

      operation 4880645 "addListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1004933 // AnimatorListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Adds a listener to the set of listeners that are sent events through the life of an
animation, such as start, repeat, and end.

@param listener the listener to be added to the current set of listeners for this animation.
"
      end

      operation 4880773 "removeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1004933 // AnimatorListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Removes a listener from the set listening to this animation.

@param listener the listener to be removed from the current set of listeners for this
                animation.
"
      end

      operation 4880901 "getListeners"
	public return_type class_ref 1004933 // AnimatorListener
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the set of {@link android.animation.Animator.AnimatorListener} objects that are currently
listening for events on this <code>Animator</code> object.

@return ArrayList<AnimatorListener> The set of listeners.
"
      end

      operation 4881029 "addPauseListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1005061 // AnimatorPauseListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Adds a pause listener to this animator.

@param listener the listener to be added to the current set of pause listeners
for this animation.
"
      end

      operation 4881157 "removePauseListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1005061 // AnimatorPauseListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Removes a pause listener from the set listening to this animation.

@param listener the listener to be removed from the current set of pause
listeners for this animation.
"
      end

      operation 4881285 "removeAllListeners"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Removes all {@link #addListener(android.animation.Animator.AnimatorListener) listeners}
and {@link #addPauseListener(android.animation.Animator.AnimatorPauseListener)
pauseListeners} from this object.
"
      end

      operation 4881413 "getChangingConfigurations"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Config
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Return a mask of the configuration parameters for which this animator may change, requiring
that it should be re-created from Resources. The default implementation returns whatever
value was provided through setChangingConfigurations(int) or 0 by default.

@return Returns a mask of the changing configuration parameters, as defined by
{@link android.content.pm.ActivityInfo}.
@see android.content.pm.ActivityInfo
@hide
"
      end

      operation 4881541 "setChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Set a mask of the configuration parameters for which this animator may change, requiring
that it be re-created from resource.

@param configs A mask of the changing configuration parameters, as
defined by {@link android.content.pm.ActivityInfo}.

@see android.content.pm.ActivityInfo
@hide
"
      end

      operation 4881669 "appendChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the changing configurations value to the union of the current changing configurations
and the provided configs.
This method is called while loading the animator.
@hide
"
      end

      operation 4881797 "createConstantState"
	public return_type class_ref 1005445 // ConstantState
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Animator> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Return a {@link android.content.res.ConstantState} instance that holds the shared state of
this Animator.
<p>
This constant state is used to create new instances of this animator when needed, instead
of re-loading it from resources. Default implementation creates a new
{@link AnimatorConstantState}. You can override this method to provide your custom logic or
return null if you don't want this animator to be cached.

@return The ConfigurationBoundResourceCache.BaseConstantState associated to this Animator.
@see android.content.res.ConstantState
@see #clone()
@hide
"
      end

      operation 4881925 "clone"
	public return_type class_ref 1004677 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4882053 "setupStartValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method tells the object to use appropriate information to extract
starting values for the animation. For example, a AnimatorSet object will pass
this call to its child objects to tell them to set up the values. A
ObjectAnimator object will use the information it has about its target object
and PropertyValuesHolder objects to get the start values for its properties.
A ValueAnimator object will ignore the request since it does not have enough
information (such as a target object) to gather these values.
"
      end

      operation 4882181 "setupEndValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method tells the object to use appropriate information to extract
ending values for the animation. For example, a AnimatorSet object will pass
this call to its child objects to tell them to set up the values. A
ObjectAnimator object will use the information it has about its target object
and PropertyValuesHolder objects to get the start values for its properties.
A ValueAnimator object will ignore the request since it does not have enough
information (such as a target object) to gather these values.
"
      end

      operation 4882309 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the target object whose property will be animated by this animation. Not all subclasses
operate on target objects (for example, {@link ValueAnimator}, but this method
is on the superclass for the convenience of dealing generically with those subclasses
that do handle targets.
<p>
<strong>Note:</strong> The target is stored as a weak reference internally to avoid leaking
resources by having animators directly reference old targets. Therefore, you should
ensure that animator targets always have a hard reference elsewhere.

@param target The object being animated
"
      end

      operation 4882437 "canReverse"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Hide reverse() and canReverse() for now since reverse() only work for simple
 cases, like we don't support sequential, neither startDelay.
 TODO: make reverse() works for all the Animators.

@hide
"
      end

      operation 4882565 "reverse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
"
      end

      operation 4882693 "pulseAnimationFrame"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Pulse an animation frame into the animation."
      end

      operation 4882821 "startWithoutPulsing"
	package explicit_return_type "void"
	nparams 1
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal use only.
This call starts the animation in regular or reverse direction without requiring them to
register frame callbacks. The caller will be responsible for all the subsequent animation
pulses. Specifically, the caller needs to call doAnimationFrame(...) for the animation on
every frame.

@param inReverse whether the animation should play in reverse direction
"
      end

      operation 4882949 "skipToEndValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal use only.
Skips the animation value to end/start, depending on whether the play direction is forward
or backward.

@param inReverse whether the end value is based on a reverse direction. If yes, this is
                 equivalent to skip to start value in a forward playing direction.
"
      end

      operation 4883077 "isInitialized"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal use only.

Returns whether the animation has start/end values setup. For most of the animations, this
should always be true. For ObjectAnimators, the start values are setup in the initialization
of the animation.
"
      end

      operation 4883205 "animateBasedOnPlayTime"
	package explicit_return_type "void"
	nparams 3
	  param in name "currentPlayTime" explicit_type "long"
	  param in name "lastPlayTime" explicit_type "long"
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal use only.
"
      end

      operation 4884357 "setAllowRunningAsynchronously"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mayRunAsync" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "<p>Whether or not the Animator is allowed to run asynchronously off of
the UI thread. This is a hint that informs the Animator that it is
OK to run the animation off-thread, however the Animator may decide
that it must run the animation on the UI thread anyway.

<p>Regardless of whether or not the animation runs asynchronously, all
listener callbacks will be called on the UI thread.</p>

<p>To be able to use this hint the following must be true:</p>
<ol>
<li>The animator is immutable while {@link #isStarted()} is true. Requests
   to change duration, delay, etc... may be ignored.</li>
<li>Lifecycle callback events may be asynchronous. Events such as
   {@link Animator.AnimatorListener#onAnimationEnd(Animator)} or
   {@link Animator.AnimatorListener#onAnimationRepeat(Animator)} may end up delayed
   as they must be posted back to the UI thread, and any actions performed
   by those callbacks (such as starting new animations) will not happen
   in the same frame.</li>
<li>State change requests ({@link #cancel()}, {@link #end()}, {@link #reverse()}, etc...)
   may be asynchronous. It is guaranteed that all state changes that are
   performed on the UI thread in the same frame will be applied as a single
   atomic update, however that frame may be the current frame,
   the next frame, or some future frame. This will also impact the observed
   state of the Animator. For example, {@link #isStarted()} may still return true
   after a call to {@link #end()}. Using the lifecycle callbacks is preferred over
   queries to {@link #isStarted()}, {@link #isRunning()}, and {@link #isPaused()}
   for this reason.</li>
</ol>
@hide
"
      end
    end

    class 1005317 "TimeInterpolator"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A time interpolator defines the rate of change of an animation. This allows animations
to have non-linear motion, such as acceleration and deceleration.
"
      operation 4968837 "getInterpolation"
	public explicit_return_type "float"
	nparams 1
	  param in name "input" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Maps a value representing the elapsed fraction of an animation to a value that represents
the interpolated fraction. This interpolated value is then multiplied by the change in
value of an animation to derive the animated value at the current elapsed animation time.

@param input A value between 0 and 1.0 indicating our current point
       in the animation where 0 represents the start and 1.0 represents
       the end
@return The interpolation value. This value can be more than 1.0 for
        interpolators which overshoot their targets, or less than 0 for
        interpolators that undershoot their targets.
"
      end
    end

    class 1005573 "AnimatorInflater"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used to instantiate animator XML files into Animator objects.
<p>
For performance reasons, inflation relies heavily on pre-processing of
XML files that is done at build time. Therefore, it is not currently possible
to use this inflater with an XmlPullParser over a plain XML file at runtime;
it only works with an XmlPullParser returned from a compiled resource (R.
<em>something</em> file.)
"
      attribute 3252485 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " \"AnimatorInflater\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3252613 "TOGETHER"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "These flags are used when parsing AnimatorSet objects

"
      end

      attribute 3252741 "SEQUENTIALLY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3252869 "VALUE_TYPE_FLOAT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Enum values used in XML attributes to indicate the value for mValueType

"
      end

      attribute 3252997 "VALUE_TYPE_INT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3253125 "VALUE_TYPE_PATH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3253253 "VALUE_TYPE_COLOR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3253381 "VALUE_TYPE_UNDEFINED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3253509 "DBG_ANIMATOR_INFLATER"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1443077 // sTmpTypedValue (<unidirectional association>)
	relation 1443077 --->
	  a role_name "sTmpTypedValue" init_value " new TypedValue()" class_relation const_relation private
	    comment " used to calculate changing configs for resource references
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1443077 // sTmpTypedValue (<unidirectional association>)
	  b parent class_ref 970629 // TypedValue
      end

      operation 4885381 "loadAnimator"
	class_operation public return_type class_ref 1004677 // Animator
	nparams 2
	  param inout name "context" type class_ref 956933 // Context
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 958853 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, @AnimatorRes ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Loads an {@link Animator} object from a resource

@param context Application context used to access resources
@param id The resource id of the animation to load
@return The animator object reference by the specified id
@throws android.content.res.Resources.NotFoundException when the animation cannot be loaded
"
      end

      operation 4885509 "loadAnimator"
	class_operation public return_type class_ref 1004677 // Animator
	nparams 3
	  param inout name "resources" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 958853 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Loads an {@link Animator} object from a resource

@param resources The resources
@param theme The theme
@param id The resource id of the animation to load
@return The animator object reference by the specified id
@throws android.content.res.Resources.NotFoundException when the animation cannot be loaded
@hide
"
      end

      operation 4885637 "loadAnimator"
	class_operation public return_type class_ref 1004677 // Animator
	nparams 4
	  param inout name "resources" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param in name "id" explicit_type "int"
	  param in name "pathErrorScale" explicit_type "float"
	nexceptions 1
	  exception class_ref 958853 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " @hide "
      end

      operation 4885765 "loadStateListAnimator"
	class_operation public return_type class_ref 978949 // StateListAnimator
	nparams 2
	  param inout name "context" type class_ref 956933 // Context
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 958853 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4885893 "createStateListAnimatorFromXml"
	class_operation private return_type class_ref 978949 // StateListAnimator
	nparams 3
	  param inout name "context" type class_ref 956933 // Context
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attributeSet" type class_ref 958981 // AttributeSet
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "XmlPullParserException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      class 1005701 "PathDataEvaluator"
	visibility private 
	nactuals 1
	actual class class_ref 1006085 // TypeEvaluator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1443205 // <realization>
	  relation 1443205 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1443205 // <realization>
	    b parent class_ref 1006085 // TypeEvaluator
	end

	classrelation 1443333 // mPathData (<unidirectional association>)
	  relation 1443333 --->
	    a role_name "mPathData" init_value " new PathParser.PathData()" const_relation private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1443333 // mPathData (<unidirectional association>)
	    b parent class_ref 1005957 // PathData
	end

	operation 4886149 "evaluate"
	  public return_type class_ref 1005957 // PathData
	  nparams 3
	    param in name "fraction" explicit_type "float"
	    param inout name "startPathData" type class_ref 1005957 // PathData
	    param inout name "endPathData" type class_ref 1005957 // PathData
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      operation 4886277 "getPVH"
	class_operation private return_type class_ref 1006213 // PropertyValuesHolder
	nparams 5
	  param inout name "styledAttributes" type class_ref 958725 // TypedArray
	  param in name "valueType" explicit_type "int"
	  param in name "valueFromId" explicit_type "int"
	  param in name "valueToId" explicit_type "int"
	  param in name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4886405 "parseAnimatorFromTypeArray"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "anim" type class_ref 1006341 // ValueAnimator
	  param inout name "arrayAnimator" type class_ref 958725 // TypedArray
	  param inout name "arrayObjectAnimator" type class_ref 958725 // TypedArray
	  param in name "pixelSize" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@param anim The animator, must not be null
@param arrayAnimator Incoming typed array for Animator's attributes.
@param arrayObjectAnimator Incoming typed array for Object Animator's
           attributes.
@param pixelSize The relative pixel size, used to calculate the
                 maximum error for path animations.
"
      end

      operation 4886533 "setupAnimatorForPath"
	class_operation private return_type class_ref 1006085 // TypeEvaluator
	nparams 2
	  param inout name "anim" type class_ref 1006341 // ValueAnimator
	  param inout name "arrayAnimator" type class_ref 958725 // TypedArray
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Setup the Animator to achieve path morphing.

@param anim The target Animator which will be updated.
@param arrayAnimator TypedArray for the ValueAnimator.
@return the PathDataEvaluator.
"
      end

      operation 4886661 "setupObjectAnimator"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "anim" type class_ref 1006341 // ValueAnimator
	  param inout name "arrayObjectAnimator" type class_ref 958725 // TypedArray
	  param in name "valueType" explicit_type "int"
	  param in name "pixelSize" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Setup ObjectAnimator's property or values from pathData.

@param anim The target Animator which will be updated.
@param arrayObjectAnimator TypedArray for the ObjectAnimator.
@param getFloats True if the value type is float.
@param pixelSize The relative pixel size, used to calculate the
                 maximum error for path animations.
"
      end

      operation 4886789 "setupValues"
	class_operation private explicit_return_type "void"
	nparams 7
	  param inout name "anim" type class_ref 1006341 // ValueAnimator
	  param inout name "arrayAnimator" type class_ref 958725 // TypedArray
	  param inout name "getFloats" explicit_type "boolean"
	  param inout name "hasFrom" explicit_type "boolean"
	  param in name "fromType" explicit_type "int"
	  param inout name "hasTo" explicit_type "boolean"
	  param in name "toType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Setup ValueAnimator's values.
This will handle all of the integer, float and color types.

@param anim The target Animator which will be updated.
@param arrayAnimator TypedArray for the ValueAnimator.
@param getFloats True if the value type is float.
@param hasFrom True if \"valueFrom\" exists.
@param fromType The type of \"valueFrom\".
@param hasTo True if \"valueTo\" exists.
@param toType The type of \"valueTo\".
"
      end

      operation 4886917 "createAnimatorFromXml"
	class_operation private return_type class_ref 1004677 // Animator
	nparams 4
	  param inout name "res" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param in name "pixelSize" explicit_type "float"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4887045 "createAnimatorFromXml"
	class_operation private return_type class_ref 1004677 // Animator
	nparams 7
	  param inout name "res" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attrs" type class_ref 958981 // AttributeSet
	  param inout name "parent" type class_ref 1006469 // AnimatorSet
	  param in name "sequenceOrdering" explicit_type "int"
	  param in name "pixelSize" explicit_type "float"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4887173 "loadValues"
	class_operation private return_type class_ref 1006213 // PropertyValuesHolder
	nparams 4
	  param inout name "res" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attrs" type class_ref 958981 // AttributeSet
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4887301 "inferValueTypeOfKeyframe"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "res" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param inout name "attrs" type class_ref 958981 // AttributeSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " When no value type is provided in keyframe, we need to infer the type from the value. i.e.
 if value is defined in the style of a color value, then the color type is returned.
 Otherwise, default float type is returned."
      end

      operation 4887429 "inferValueTypeFromValues"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "styledAttributes" type class_ref 958725 // TypedArray
	  param in name "valueFromId" explicit_type "int"
	  param in name "valueToId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4887557 "dumpKeyframes"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "keyframes" explicit_type "Object"
	multiplicity "[]"
	  param in name "header" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4887685 "loadPvh"
	class_operation private return_type class_ref 1006213 // PropertyValuesHolder
	nparams 5
	  param inout name "res" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param in name "propertyName" explicit_type "String"
	  param in name "valueType" explicit_type "int"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Load property values holder if there are keyframes defined in it. Otherwise return null."
      end

      operation 4887813 "createNewKeyframe"
	class_operation private return_type class_ref 1006597 // Keyframe
	nparams 2
	  param inout name "sampleKeyframe" type class_ref 1006597 // Keyframe
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4887941 "distributeKeyframes"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "keyframes" type class_ref 1006597 // Keyframe
	multiplicity "[]"
	  param in name "gap" explicit_type "float"
	  param in name "startIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Utility function to set fractions on keyframes to cover a gap in which the
fractions are not currently set. Keyframe fractions will be distributed evenly
in this gap. For example, a gap of 1 keyframe in the range 0-1 will be at .5, a gap
of .6 spread between two keyframes will be at .2 and .4 beyond the fraction at the
keyframe before startIndex.
Assumptions:
- First and last keyframe fractions (bounding this spread) are already set. So,
for example, if no fractions are set, we will already set first and last keyframe
fraction values to 0 and 1.
- startIndex must be >0 (which follows from first assumption).
- endIndex must be >= startIndex.

@param keyframes the array of keyframes
@param gap The total gap we need to distribute
@param startIndex The index of the first keyframe whose fraction must be set
@param endIndex The index of the last keyframe whose fraction must be set
"
      end

      operation 4888069 "loadKeyframe"
	class_operation private return_type class_ref 1006597 // Keyframe
	nparams 4
	  param inout name "res" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param inout name "attrs" type class_ref 958981 // AttributeSet
	  param in name "valueType" explicit_type "int"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4888197 "loadObjectAnimator"
	class_operation private return_type class_ref 1004421 // ObjectAnimator
	nparams 4
	  param inout name "res" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param inout name "attrs" type class_ref 958981 // AttributeSet
	  param in name "pathErrorScale" explicit_type "float"
	nexceptions 1
	  exception class_ref 958853 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4888325 "loadAnimator"
	class_operation private return_type class_ref 1006341 // ValueAnimator
	nparams 5
	  param inout name "res" type class_ref 957829 // Resources
	  param inout name "theme" type class_ref 958597 // Theme
	  param inout name "attrs" type class_ref 958981 // AttributeSet
	  param inout name "anim" type class_ref 1006341 // ValueAnimator
	  param in name "pathErrorScale" explicit_type "float"
	nexceptions 1
	  exception class_ref 958853 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Creates a new animation whose parameters come from the specified context
and attributes set.

@param res The resources
@param attrs The set of attributes holding the animation parameters
@param anim Null if this is a ValueAnimator, otherwise this is an
           ObjectAnimator
"
      end

      operation 4888453 "getChangingConfigs"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "resources" type class_ref 957829 // Resources
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @AnyRes ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Config
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4888581 "isColorType"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 1006085 "TypeEvaluator"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for use with the {@link ValueAnimator#setEvaluator(TypeEvaluator)} function. Evaluators
allow developers to create animations on arbitrary property types, by allowing them to supply
custom evaluators for types that are not automatically understood and used by the animation
system.

@see ValueAnimator#setEvaluator(TypeEvaluator)
"
      operation 4886021 "evaluate"
	cpp_inline public explicit_return_type "T"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "T"
	  param inout name "endValue" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function returns the result of linearly interpolating the start and end values, with
<code>fraction</code> representing the proportion between the start and end values. The
calculation is a simple parametric calculation: <code>result = x0 + t * (x1 - x0)</code>,
where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
and <code>t</code> is <code>fraction</code>.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value.
@param endValue   The end value.
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 1006213 "PropertyValuesHolder"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds information about a property and the values that that property
should take on during an animation. PropertyValuesHolder objects can be used to create
animations with ValueAnimator or ObjectAnimator that operate on several different properties
in parallel.
"
      classrelation 1457541 // <realization>
	relation 1457541 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1457541 // <realization>
	  b parent class_ref 1004805 // Cloneable
      end

      attribute 3269253 "mPropertyName"
	package explicit_type "String"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The name of the property associated with the values. This need not be a real property,
unless this object is being used with ObjectAnimator. But this is the name by which
aniamted values are looked up with getAnimatedValue(String) in ValueAnimator.

"
      end

      classrelation 1457669 // mProperty (<unidirectional association>)
	relation 1457669 --->
	  a role_name "mProperty" protected
	    comment "
@hide

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1457669 // mProperty (<unidirectional association>)
	  b parent class_ref 984069 // Property
      end

      attribute 3269381 "mSetter"
	package explicit_type "Method"
	init_value " null"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The setter function, if needed. ObjectAnimator hands off this functionality to
PropertyValuesHolder, since it holds all of the per-property information. This
property is automatically
derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.

"
      end

      attribute 3269509 "mGetter"
	private explicit_type "Method"
	init_value " null"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The getter function, if needed. ObjectAnimator hands off this functionality to
PropertyValuesHolder, since it holds all of the per-property information. This
property is automatically
derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.
The getter is only derived and used if one of the values is null.

"
      end

      attribute 3269637 "mValueType"
	package explicit_type "Class"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The type of values supplied. This information is used both in deriving the setter/getter
functions and in deriving the type of TypeEvaluator.

"
      end

      classrelation 1457797 // mKeyframes (<unidirectional association>)
	relation 1457797 --->
	  a role_name "mKeyframes" init_value " null" package
	    comment "
The set of keyframes (time/value pairs) that define this animation.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1457797 // mKeyframes (<unidirectional association>)
	  b parent class_ref 1008389 // Keyframes
      end

      classrelation 1457925 // sIntEvaluator (<unidirectional association>)
	relation 1457925 --->
	  a role_name "sIntEvaluator" init_value " new IntEvaluator()" class_relation const_relation private
	    comment " type evaluators for the primitive types handled by this implementation
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1457925 // sIntEvaluator (<unidirectional association>)
	  b parent class_ref 1006085 // TypeEvaluator
      end

      classrelation 1458053 // sFloatEvaluator (<unidirectional association>)
	relation 1458053 --->
	  a role_name "sFloatEvaluator" init_value " new FloatEvaluator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1458053 // sFloatEvaluator (<unidirectional association>)
	  b parent class_ref 1006085 // TypeEvaluator
      end

      attribute 3269765 "FLOAT_VARIANTS"
	class_attribute private explicit_type "Class"
	multiplicity "[]"
	init_value " {float.class, Float.class, double.class, int.class,
            Double.class, Integer.class}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " We try several different types when searching for appropriate setter/getter functions.
 The caller may have supplied values in a type that does not match the setter/getter
 functions (such as the integers 0 and 1 to represent floating point values for alpha).
 Also, the use of generics in constructors means that we end up with the Object versions
 of primitive types (Float vs. float). But most likely, the setter/getter functions
 will take primitive types instead.
 So we supply an ordered array of other types to try before giving up.
"
      end

      attribute 3269893 "INTEGER_VARIANTS"
	class_attribute private explicit_type "Class"
	multiplicity "[]"
	init_value " {int.class, Integer.class, float.class, double.class,
            Float.class, Double.class}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3270021 "DOUBLE_VARIANTS"
	class_attribute private explicit_type "Class"
	multiplicity "[]"
	init_value " {double.class, Double.class, float.class, int.class,
            Float.class, Integer.class}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3270149 "sSetterPropertyMap"
	class_attribute const_attribute private explicit_type "Class, HashMap<String, Method>"
	init_value "
            new HashMap<Class, HashMap<String, Method>>()"
	stereotype "HashMap"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " These maps hold all property entries for a particular class. This map
 is used to speed up property/setter/getter lookups for a given class/property
 combination. No need to use reflection on the combination more than once.
"
      end

      attribute 3270277 "sGetterPropertyMap"
	class_attribute const_attribute private explicit_type "Class, HashMap<String, Method>"
	init_value "
            new HashMap<Class, HashMap<String, Method>>()"
	stereotype "HashMap"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3270405 "mTmpValueArray"
	const_attribute package explicit_type "Object"
	multiplicity "[]"
	init_value " new Object[1]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Used to pass single value to varargs parameter in setter invocation
"
      end

      classrelation 1458181 // mEvaluator (<unidirectional association>)
	relation 1458181 --->
	  a role_name "mEvaluator" private
	    comment "
The type evaluator used to calculate the animated values. This evaluator is determined
automatically based on the type of the start/end objects passed into the constructor,
but the system only knows about the primitive types int and float. Any other
type will need to set the evaluator to a custom evaluator for that type.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1458181 // mEvaluator (<unidirectional association>)
	  b parent class_ref 1006085 // TypeEvaluator
      end

      attribute 3270533 "mAnimatedValue"
	private explicit_type "Object"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The value most recently calculated by calculateValue(). This is set during
that function and might be retrieved later either by ValueAnimator.animatedValue() or
by the property-setting logic in ObjectAnimator.animatedValue().

"
      end

      classrelation 1458309 // mConverter (<unidirectional association>)
	relation 1458309 --->
	  a role_name "mConverter" private
	    comment "
Converts from the source Object type to the setter Object type.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1458309 // mConverter (<unidirectional association>)
	  b parent class_ref 1007621 // TypeConverter
      end

      operation 4944261 "PropertyValuesHolder"
	private explicit_return_type ""
	nparams 1
	  param in name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal utility constructor, used by the factory methods to set the property name.
@param propertyName The name of the property for this holder.
"
      end

      operation 4944389 "PropertyValuesHolder"
	private explicit_return_type ""
	nparams 1
	  param inout name "property" type class_ref 984069 // Property
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal utility constructor, used by the factory methods to set the property.
@param property The property for this holder.
"
      end

      operation 4944517 "ofInt"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param in name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of int values.
@param propertyName The name of the property being animated.
@param values The values that the named property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 4944645 "ofInt"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, Integer> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of int values.
@param property The property being animated. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 4944773 "ofMultiInt"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param in name "propertyName" explicit_type "String"
	  param inout name "values" explicit_type "int"
	multiplicity "[][]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[][] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of <code>int[]</code> values. At least two <code>int[]</code> values must be supplied,
a start and end value. If more values are supplied, the values will be animated from the
start, through all intermediate values to the end value. When used with ObjectAnimator,
the elements of the array represent the parameters of the setter function.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see IntArrayEvaluator#IntArrayEvaluator(int[])
@see ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])
"
      end

      operation 4944901 "ofMultiInt"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param in name "propertyName" explicit_type "String"
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property name to use
as a multi-int setter. The values are animated along the path, with the first
parameter of the setter set to the x coordinate and the second set to the y coordinate.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
                    The setter must take exactly two <code>int</code> parameters.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
"
      end

      operation 4945029 "ofMultiInt"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 4
	  param in name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}, ${t1}<V, int[]> ${p1}, ${t2}<V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values for use with ObjectAnimator multi-value setters. The Object
values are converted to <code>int[]</code> using the converter.

@param propertyName The property being animated or complete name of the setter.
                    Should not be null.
@param converter Used to convert the animated value to setter parameters.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])
@see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
"
      end

      operation 4945157 "ofMultiInt"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 4
	  param in name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, int[]> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder object with the specified property name or
setter name for use in a multi-int setter function using ObjectAnimator. The values can be
of any type, but the type should be consistent so that the supplied
{@link android.animation.TypeEvaluator} can be used to to evaluate the animated value. The
<code>converter</code> converts the values to parameters in the setter function.

<p>At least two values must be supplied, a start and an end value.</p>

@param propertyName The name of the property to associate with the set of values. This
                    may also be the complete name of a setter function.
@param converter    Converts <code>values</code> into int parameters for the setter.
                    Can be null if the Keyframes have int[] values.
@param evaluator    Used to interpolate between values.
@param values       The values at specific fractional times to evaluate between
@return A PropertyValuesHolder for a multi-int parameter setter.
"
      end

      operation 4945285 "ofFloat"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param in name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of float values.
@param propertyName The name of the property being animated.
@param values The values that the named property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 4945413 "ofFloat"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, Float> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of float values.
@param property The property being animated. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 4945541 "ofMultiFloat"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param in name "propertyName" explicit_type "String"
	  param inout name "values" explicit_type "float"
	multiplicity "[][]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[][] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of <code>float[]</code> values. At least two <code>float[]</code> values must be supplied,
a start and end value. If more values are supplied, the values will be animated from the
start, through all intermediate values to the end value. When used with ObjectAnimator,
the elements of the array represent the parameters of the setter function.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see FloatArrayEvaluator#FloatArrayEvaluator(float[])
@see ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])
"
      end

      operation 4945669 "ofMultiFloat"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param in name "propertyName" explicit_type "String"
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property name to use
as a multi-float setter. The values are animated along the path, with the first
parameter of the setter set to the x coordinate and the second set to the y coordinate.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
                    The setter must take exactly two <code>float</code> parameters.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
"
      end

      operation 4945797 "ofMultiFloat"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 4
	  param in name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}, ${t1}<V, float[]> ${p1}, ${t2}<V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values for use with ObjectAnimator multi-value setters. The Object
values are converted to <code>float[]</code> using the converter.

@param propertyName The property being animated or complete name of the setter.
                    Should not be null.
@param converter Used to convert the animated value to setter parameters.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])
"
      end

      operation 4945925 "ofMultiFloat"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 4
	  param in name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, float[]> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder object with the specified property name or
setter name for use in a multi-float setter function using ObjectAnimator. The values can be
of any type, but the type should be consistent so that the supplied
{@link android.animation.TypeEvaluator} can be used to to evaluate the animated value. The
<code>converter</code> converts the values to parameters in the setter function.

<p>At least two values must be supplied, a start and an end value.</p>

@param propertyName The name of the property to associate with the set of values. This
                    may also be the complete name of a setter function.
@param converter    Converts <code>values</code> into float parameters for the setter.
                    Can be null if the Keyframes have float[] values.
@param evaluator    Used to interpolate between values.
@param values       The values at specific fractional times to evaluate between
@return A PropertyValuesHolder for a multi-float parameter setter.
"
      end

      operation 4946053 "ofObject"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 3
	  param in name "propertyName" explicit_type "String"
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of Object values. This variant also takes a TypeEvaluator because the system
cannot automatically interpolate between objects of unknown type.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param propertyName The name of the property being animated.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the named property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 4946181 "ofObject"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 3
	  param in name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<PointF, ?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
a Path along which the values should be animated. This variant supports a
<code>TypeConverter</code> to convert from <code>PointF</code> to the target
type.

<p>The PointF passed to <code>converter</code> or <code>property</code>, if
<code>converter</code> is <code>null</code>, is reused on each animation frame and should
not be stored by the setter or TypeConverter.</p>

@param propertyName The name of the property being animated.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 4946309 "ofObject"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 3
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values. This variant also takes a TypeEvaluator because the system
cannot automatically interpolate between objects of unknown type.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param property The property being animated. Should not be null.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 4946437 "ofObject"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 4
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "T...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V> ${type} ${name}${(}${t0}<?, V> ${p0}, ${t1}<T, V> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values. This variant also takes a TypeEvaluator because the system
cannot automatically interpolate between objects of unknown type. This variant also
takes a <code>TypeConverter</code> to convert from animated values to the type
of the property. If only one value is supplied, the <code>TypeConverter</code>
must be a {@link android.animation.BidirectionalTypeConverter} to retrieve the current
value.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param property The property being animated. Should not be null.
@param converter Converts the animated object to the Property type.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see #setConverter(TypeConverter)
@see TypeConverter
"
      end

      operation 4946565 "ofObject"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 3
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0}<?, V> ${p0}, ${t1}<PointF, V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder with a given property and
a Path along which the values should be animated. This variant supports a
<code>TypeConverter</code> to convert from <code>PointF</code> to the target
type.

<p>The PointF passed to <code>converter</code> or <code>property</code>, if
<code>converter</code> is <code>null</code>, is reused on each animation frame and should
not be stored by the setter or TypeConverter.</p>

@param property The property being animated. Should not be null.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 4946693 "ofKeyframe"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param in name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder object with the specified property name and set
of values. These values can be of any type, but the type should be consistent so that
an appropriate {@link android.animation.TypeEvaluator} can be found that matches
the common type.
<p>If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.
@param propertyName The name of the property associated with this set of values. This
can be the actual property name to be used when using a ObjectAnimator object, or
just a name used to get animated values, such as if this object is used with an
ValueAnimator object.
@param values The set of values to animate between.
"
      end

      operation 4946821 "ofKeyframe"
	class_operation public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a PropertyValuesHolder object with the specified property and set
of values. These values can be of any type, but the type should be consistent so that
an appropriate {@link android.animation.TypeEvaluator} can be found that matches
the common type.
<p>If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling the property's
{@link android.util.Property#get(Object)} function.
Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction with
{@link ObjectAnimator}, since otherwise PropertyValuesHolder has
no way of determining what the value should be.
@param property The property associated with this set of values. Should not be null.
@param values The set of values to animate between.
"
      end

      operation 4946949 "ofKeyframes"
	class_operation package return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param in name "propertyName" explicit_type "String"
	  param inout name "keyframes" type class_ref 1008389 // Keyframes
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4947077 "ofKeyframes"
	class_operation package return_type class_ref 1006213 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 984069 // Property
	  param inout name "keyframes" type class_ref 1008389 // Keyframes
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4947205 "setIntValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Set the animated values for this object to this set of ints.
If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.

@param values One or more values that the animation will animate between.
"
      end

      operation 4947333 "setFloatValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Set the animated values for this object to this set of floats.
If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.

@param values One or more values that the animation will animate between.
"
      end

      operation 4947461 "setKeyframes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Set the animated values for this object to this set of Keyframes.

@param values One or more values that the animation will animate between.
"
      end

      operation 4947589 "setObjectValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Set the animated values for this object to this set of Objects.
If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param values One or more values that the animation will animate between.
"
      end

      operation 4947717 "setConverter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "converter" type class_ref 1007621 // TypeConverter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the converter to convert from the values type to the setter's parameter type.
If only one value is supplied, <var>converter</var> must be a
{@link android.animation.BidirectionalTypeConverter}.
@param converter The converter to use to convert values.
"
      end

      operation 4947845 "getPropertyFunction"
	private explicit_return_type "Method"
	nparams 3
	  param inout name "targetClass" explicit_type "Class"
	  param in name "prefix" explicit_type "String"
	  param inout name "valueType" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Determine the setter or getter function using the JavaBeans convention of setFoo or
getFoo for a property named 'foo'. This function figures out what the name of the
function should be and uses reflection to find the Method with that name on the
target object.

@param targetClass The class to search for the method
@param prefix \"set\" or \"get\", depending on whether we need a setter or getter.
@param valueType The type of the parameter (in the case of a setter). This type
is derived from the values set on this PropertyValuesHolder. This type is used as
a first guess at the parameter type, but we check for methods with several different
types to avoid problems with slight mis-matches between supplied values and actual
value types used on the setter.
@return Method the method associated with mPropertyName.
"
      end

      operation 4947973 "setupSetterOrGetter"
	private explicit_return_type "Method"
	nparams 4
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "propertyMapMap" explicit_type "HashMap<Class, HashMap<String, Method>>"
	  param in name "prefix" explicit_type "String"
	  param inout name "valueType" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the setter or getter requested. This utility function checks whether the
requested method exists in the propertyMapMap cache. If not, it calls another
utility function to request the Method from the targetClass directly.
@param targetClass The Class on which the requested method should exist.
@param propertyMapMap The cache of setters/getters derived so far.
@param prefix \"set\" or \"get\", for the setter or getter.
@param valueType The type of parameter passed into the method (null for getter).
@return Method the method associated with mPropertyName.
"
      end

      operation 4948101 "setupSetter"
	package explicit_return_type "void"
	nparams 1
	  param inout name "targetClass" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Utility function to get the setter from targetClass
@param targetClass The Class on which the requested method should exist.
"
      end

      operation 4948229 "setupGetter"
	private explicit_return_type "void"
	nparams 1
	  param inout name "targetClass" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Utility function to get the getter from targetClass
"
      end

      operation 4948357 "setupSetterAndGetter"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal function (called from ObjectAnimator) to set up the setter and getter
prior to running the animation. If the setter has not been manually set for this
object, it will be derived automatically given the property name, target object, and
types of values supplied. If no getter has been set, it will be supplied iff any of the
supplied values was null. If there is a null value, then the getter (supplied or derived)
will be called to set those null values to the current value of the property
on the target object.
@param target The object on which the setter (and possibly getter) exist.
"
      end

      operation 4948485 "convertBack"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "value" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4948613 "setupValue"
	private explicit_return_type "void"
	nparams 2
	  param inout name "target" explicit_type "Object"
	  param inout name "kf" type class_ref 1006597 // Keyframe
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Utility function to set the value stored in a particular Keyframe. The value used is
whatever the value is for the property name specified in the keyframe on the target object.

@param target The target object from which the current value should be extracted.
@param kf The keyframe which holds the property name and value.
"
      end

      operation 4948741 "setupStartValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function is called by ObjectAnimator when setting the start values for an animation.
The start values are set according to the current values in the target object. The
property whose value is extracted is whatever is specified by the propertyName of this
PropertyValuesHolder object.

@param target The object which holds the start values that should be set.
"
      end

      operation 4948869 "setupEndValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function is called by ObjectAnimator when setting the end values for an animation.
The end values are set according to the current values in the target object. The
property whose value is extracted is whatever is specified by the propertyName of this
PropertyValuesHolder object.

@param target The object which holds the start values that should be set.
"
      end

      operation 4948997 "clone"
	public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4949125 "setAnimatedValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.
@param target The target object on which the value is set
"
      end

      operation 4949253 "init"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal function, called by ValueAnimator, to set up the TypeEvaluator that will be used
to calculate animated values.
"
      end

      operation 4949381 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The TypeEvaluator will be automatically determined based on the type of values
supplied to PropertyValuesHolder. The evaluator can be manually set, however, if so
desired. This may be important in cases where either the type of the values supplied
do not match the way that they should be interpolated between, or if the values
are of a custom type or one not currently understood by the animation system. Currently,
only values of type float and int (and their Object equivalents: Float
and Integer) are  correctly interpolated; all other types require setting a TypeEvaluator.
@param evaluator
"
      end

      operation 4949509 "calculateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Function used to calculate the value according to the evaluator set up for
this PropertyValuesHolder object. This function is called by ValueAnimator.animateValue().

@param fraction The elapsed, interpolated fraction of the animation.
"
      end

      operation 4949637 "setPropertyName"
	public explicit_return_type "void"
	nparams 1
	  param in name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the name of the property that will be animated. This name is used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.

<p>Note that the setter function derived from this property name
must take the same parameter type as the
<code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
the setter function will fail.</p>

@param propertyName The name of the property being animated.
"
      end

      operation 4949765 "setProperty"
	public explicit_return_type "void"
	nparams 1
	  param inout name "property" type class_ref 984069 // Property
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the property that will be animated.

<p>Note that if this PropertyValuesHolder object is used with ObjectAnimator, the property
must exist on the target object specified in that ObjectAnimator.</p>

@param property The property being animated.
"
      end

      operation 4949893 "getPropertyName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the name of the property that will be animated. This name will be used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.
"
      end

      operation 4950021 "getAnimatedValue"
	package explicit_return_type "Object"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal function, called by ValueAnimator and ObjectAnimator, to retrieve the value
most recently calculated in calculateValue().
@return
"
      end

      operation 4950149 "getPropertyValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "values" type class_ref 1012229 // PropertyValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "PropertyValuesHolder is Animators use to hold internal animation related data.
Therefore, in order to replicate the animation behavior, we need to get data out of
PropertyValuesHolder.
@hide
"
      end

      class 1012229 "PropertyValues"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 3272197 "propertyName"
	  public explicit_type "String"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3272325 "type"
	  public explicit_type "Class"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3272453 "startValue"
	  public explicit_type "Object"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3272581 "endValue"
	  public explicit_type "Object"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	class 1013381 "DataSource"
	  visibility public stereotype "interface"
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  operation 4955269 "getValueAtFraction"
	    public explicit_return_type "Object"
	    nparams 1
	      param in name "fraction" explicit_type "float"
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  end
	end

	classrelation 1459717 // dataSource (<unidirectional association>)
	  relation 1459717 --->
	    a role_name "dataSource" init_value " null" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1459717 // dataSource (<unidirectional association>)
	    b parent class_ref 1013381 // DataSource
	end

	operation 4955397 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      operation 4950277 "getValueType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
"
      end

      operation 4950405 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4950533 "getMethodName"
	class_operation package explicit_return_type "String"
	nparams 2
	  param in name "prefix" explicit_type "String"
	  param in name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Utility method to derive a setter/getter method name from a property name, where the
prefix is typically \"set\" or \"get\" and the first letter of the property name is
capitalized.

@param prefix The precursor to the method name, before the property name begins, typically
\"set\" or \"get\".
@param propertyName The name of the property that represents the bulk of the method name
after the prefix. The first letter of this word will be capitalized in the resulting
method name.
@return String the property name converted to a method name according to the conventions
specified above.
"
      end

      class 1012357 "IntPropertyValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1458437 // <generalisation>
	  relation 1458437 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1458437 // <generalisation>
	    b parent class_ref 1006213 // PropertyValuesHolder
	end

	attribute 3270661 "sJNISetterPropertyMap"
	  class_attribute const_attribute private explicit_type "Class, HashMap<String, Long>"
	  init_value "
                new HashMap<Class, HashMap<String, Long>>()"
	  stereotype "HashMap"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	  comment " Cache JNI functions to avoid looking them up twice
"
	end

	attribute 3270789 "mJniSetter"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 1458565 // mIntProperty (<unidirectional association>)
	  relation 1458565 --->
	    a role_name "mIntProperty" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1458565 // mIntProperty (<unidirectional association>)
	    b parent class_ref 1012485 // IntProperty
	end

	classrelation 1458693 // mIntKeyframes (<unidirectional association>)
	  relation 1458693 --->
	    a role_name "mIntKeyframes" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1458693 // mIntKeyframes (<unidirectional association>)
	    b parent class_ref 1008517 // IntKeyframes
	end

	attribute 3270917 "mIntAnimatedValue"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4950661 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param in name "propertyName" explicit_type "String"
	    param inout name "keyframes" type class_ref 1008517 // IntKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4950789 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 984069 // Property
	    param inout name "keyframes" type class_ref 1008517 // IntKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4950917 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param in name "propertyName" explicit_type "String"
	    param inout name "" explicit_type "int...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4951045 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 984069 // Property
	    param inout name "" explicit_type "int...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4951173 "setProperty"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "property" type class_ref 984069 // Property
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4951301 "setIntValues"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "" explicit_type "int...values"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4951429 "calculateValue"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4951557 "getAnimatedValue"
	  package explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4951685 "clone"
	  public return_type class_ref 1012357 // IntPropertyValuesHolder
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4951813 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.
@param target The target object on which the value is set
"
	end

	operation 4951941 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" explicit_type "Class"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1012613 "FloatPropertyValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1458821 // <generalisation>
	  relation 1458821 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1458821 // <generalisation>
	    b parent class_ref 1006213 // PropertyValuesHolder
	end

	attribute 3271045 "sJNISetterPropertyMap"
	  class_attribute const_attribute private explicit_type "Class, HashMap<String, Long>"
	  init_value "
                new HashMap<Class, HashMap<String, Long>>()"
	  stereotype "HashMap"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	  comment " Cache JNI functions to avoid looking them up twice
"
	end

	attribute 3271173 "mJniSetter"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 1458949 // mFloatProperty (<unidirectional association>)
	  relation 1458949 --->
	    a role_name "mFloatProperty" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1458949 // mFloatProperty (<unidirectional association>)
	    b parent class_ref 1012741 // FloatProperty
	end

	classrelation 1459077 // mFloatKeyframes (<unidirectional association>)
	  relation 1459077 --->
	    a role_name "mFloatKeyframes" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1459077 // mFloatKeyframes (<unidirectional association>)
	    b parent class_ref 1008645 // FloatKeyframes
	end

	attribute 3271301 "mFloatAnimatedValue"
	  package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4952069 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param in name "propertyName" explicit_type "String"
	    param inout name "keyframes" type class_ref 1008645 // FloatKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4952197 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 984069 // Property
	    param inout name "keyframes" type class_ref 1008645 // FloatKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4952325 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param in name "propertyName" explicit_type "String"
	    param inout name "" explicit_type "float...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4952453 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 984069 // Property
	    param inout name "" explicit_type "float...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4952581 "setProperty"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "property" type class_ref 984069 // Property
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4952709 "setFloatValues"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "" explicit_type "float...values"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4952837 "calculateValue"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4952965 "getAnimatedValue"
	  package explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4953093 "clone"
	  public return_type class_ref 1012613 // FloatPropertyValuesHolder
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4953221 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.
@param target The target object on which the value is set
"
	end

	operation 4953349 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" explicit_type "Class"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1012869 "MultiFloatValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1459205 // <generalisation>
	  relation 1459205 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1459205 // <generalisation>
	    b parent class_ref 1006213 // PropertyValuesHolder
	end

	attribute 3271429 "mJniSetter"
	  private explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3271557 "sJNISetterPropertyMap"
	  class_attribute const_attribute private explicit_type "Class, HashMap<String, Long>"
	  init_value "
                new HashMap<Class, HashMap<String, Long>>()"
	  stereotype "HashMap"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4953477 "MultiFloatValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param in name "propertyName" explicit_type "String"
	    param inout name "converter" type class_ref 1007621 // TypeConverter
	    param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	    param inout name "" explicit_type "Object...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4953605 "MultiFloatValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param in name "propertyName" explicit_type "String"
	    param inout name "converter" type class_ref 1007621 // TypeConverter
	    param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	    param inout name "keyframes" type class_ref 1008389 // Keyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4953733 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.

@param target The target object on which the value is set
"
	end

	operation 4953861 "setupSetterAndGetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Internal function (called from ObjectAnimator) to set up the setter and getter
prior to running the animation. No getter can be used for multiple parameters.

@param target The object on which the setter exists.
"
	end

	operation 4953989 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" explicit_type "Class"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1012997 "MultiIntValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1459333 // <generalisation>
	  relation 1459333 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1459333 // <generalisation>
	    b parent class_ref 1006213 // PropertyValuesHolder
	end

	attribute 3271685 "mJniSetter"
	  private explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3271813 "sJNISetterPropertyMap"
	  class_attribute const_attribute private explicit_type "Class, HashMap<String, Long>"
	  init_value "
                new HashMap<Class, HashMap<String, Long>>()"
	  stereotype "HashMap"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4954117 "MultiIntValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param in name "propertyName" explicit_type "String"
	    param inout name "converter" type class_ref 1007621 // TypeConverter
	    param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	    param inout name "" explicit_type "Object...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4954245 "MultiIntValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param in name "propertyName" explicit_type "String"
	    param inout name "converter" type class_ref 1007621 // TypeConverter
	    param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	    param inout name "keyframes" type class_ref 1008389 // Keyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4954373 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.

@param target The target object on which the value is set
"
	end

	operation 4954501 "setupSetterAndGetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Internal function (called from ObjectAnimator) to set up the setter and getter
prior to running the animation. No getter can be used for multiple parameters.

@param target The object on which the setter exists.
"
	end

	operation 4954629 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" explicit_type "Class"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1013125 "PointFToFloatArray"
	visibility private 
	nactuals 2
	actual class class_ref 1007621 // TypeConverter
	  rank 0 explicit_value ""
	actual class class_ref 1007621 // TypeConverter
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1459461 // <realization>
	  relation 1459461 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1459461 // <realization>
	    b parent class_ref 1007621 // TypeConverter
	end

	attribute 3271941 "mCoordinates"
	  private explicit_type "float"
	  multiplicity "[]"
	  init_value " new float[2]"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4954757 "PointFToFloatArray"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4954885 "convert"
	  public explicit_return_type "float"
	  nparams 1
	    param inout name "value" explicit_type "PointF"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1013253 "PointFToIntArray"
	visibility private 
	nactuals 2
	actual class class_ref 1007621 // TypeConverter
	  rank 0 explicit_value ""
	actual class class_ref 1007621 // TypeConverter
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1459589 // <realization>
	  relation 1459589 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1459589 // <realization>
	    b parent class_ref 1007621 // TypeConverter
	end

	attribute 3272069 "mCoordinates"
	  private explicit_type "int"
	  multiplicity "[]"
	  init_value " new int[2]"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4955013 "PointFToIntArray"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4955141 "convert"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "value" explicit_type "PointF"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      operation 4955525 "nGetIntMethod"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" explicit_type "Class"
	  param in name "methodName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4955653 "nGetFloatMethod"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" explicit_type "Class"
	  param in name "methodName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4955781 "nGetMultipleIntMethod"
	class_operation private explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" explicit_type "Class"
	  param in name "methodName" explicit_type "String"
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4955909 "nGetMultipleFloatMethod"
	class_operation private explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" explicit_type "Class"
	  param in name "methodName" explicit_type "String"
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4956037 "nCallIntMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4956165 "nCallFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4956293 "nCallTwoIntMethod"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4956421 "nCallFourIntMethod"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	  param in name "arg3" explicit_type "int"
	  param in name "arg4" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4956549 "nCallMultipleIntMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4956677 "nCallTwoFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4956805 "nCallFourFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	  param in name "arg3" explicit_type "float"
	  param in name "arg4" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4956933 "nCallMultipleFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws};
s"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 1006341 "ValueAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"unchecked\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides a simple timing engine for running animations
which calculate animated values and set them on target objects.

<p>There is a single timing pulse that all animations use. It runs in a
custom handler to ensure that property changes happen on the UI thread.</p>

<p>By default, ValueAnimator uses non-linear time interpolation, via the
{@link AccelerateDecelerateInterpolator} class, which accelerates into and decelerates
out of an animation. This behavior can be changed by calling
{@link ValueAnimator#setInterpolator(TimeInterpolator)}.</p>

<p>Animators can be created from either code or resource files. Here is an example
of a ValueAnimator resource file:</p>

{@sample development/samples/ApiDemos/res/anim/animator.xml ValueAnimatorResources}

<p>Starting from API 23, it is also possible to use a combination of {@link PropertyValuesHolder}
and {@link Keyframe} resource tags to create a multi-step animation.
Note that you can specify explicit fractional values (from 0 to 1) for
each keyframe to determine when, in the overall duration, the animation should arrive at that
value. Alternatively, you can leave the fractions off and the keyframes will be equally
distributed within the total duration:</p>

{@sample development/samples/ApiDemos/res/anim/value_animator_pvh_kf.xml
ValueAnimatorKeyframeResources}

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about animating with {@code ValueAnimator}, read the
<a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#value-animator\">Property
Animation</a> developer guide.</p>
</div>
"
      classrelation 1455365 // <generalisation>
	relation 1455365 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1455365 // <generalisation>
	  b parent class_ref 1004677 // Animator
      end

      classrelation 1455493 // <realization>
	relation 1455493 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1455493 // <realization>
	  b parent class_ref 1003909 // AnimationFrameCallback
      end

      attribute 3264261 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " \"ValueAnimator\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3264389 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3264517 "sDurationScale"
	class_attribute private explicit_type "float"
	init_value " 1.0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Internal constants

"
      end

      attribute 3264645 "mStartTime"
	package explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Internal variables
NOTE: This object implements the clone() method, making a deep copy of any referenced
objects. As other non-trivial fields are added to this class, make sure to add logic
to clone() to make deep copies of them.


The first time that the animation's animateFrame() method is called. This time is used to
determine elapsed time (and therefore the elapsed fraction) in subsequent calls
to animateFrame().

Whenever mStartTime is set, you must also update mStartTimeCommitted.

"
      end

      attribute 3264773 "mStartTimeCommitted"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "When true, the start time has been firmly committed as a chosen reference point in
time by which the progress of the animation will be evaluated.  When false, the
start time may be updated when the first animation frame is committed so as
to compensate for jank that may have occurred between when the start time was
initialized and when the frame was actually drawn.

This flag is generally set to false during the first frame of the animation
when the animation playing state transitions from STOPPED to RUNNING or
resumes after having been paused.  This flag is set to true when the start time
is firmly committed and should not be further compensated for jank.

"
      end

      attribute 3264901 "mSeekFraction"
	package explicit_type "float"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Set when setCurrentPlayTime() is called. If negative, animation is not currently seeked
to a value.

"
      end

      attribute 3265029 "mPauseTime"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Set on the next frame after pause() is called, used to calculate a new startTime
or delayStartTime which allows the animator to continue from the point at which
it was paused. If negative, has not yet been set.

"
      end

      attribute 3265157 "mResumed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Set when an animator is resumed. This triggers logic in the next frame which
actually resumes the animator.

"
      end

      classrelation 1455621 // sDefaultInterpolator (<unidirectional association>)
	relation 1455621 --->
	  a role_name "sDefaultInterpolator" init_value "
            new AccelerateDecelerateInterpolator()" class_relation const_relation private
	    comment " The time interpolator to be used if none is set on the animation
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1455621 // sDefaultInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      attribute 3265285 "mReversing"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Flag to indicate whether this animator is playing in reverse mode, specifically
by being started or interrupted by a call to reverse(). This flag is different than
mPlayingBackwards, which indicates merely whether the current iteration of the
animator is playing in reverse. It is used in corner cases to determine proper end
behavior.

"
      end

      attribute 3265413 "mOverallFraction"
	private explicit_type "float"
	init_value " 0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Tracks the overall fraction of the animation, ranging from 0 to mRepeatCount + 1

"
      end

      attribute 3265541 "mCurrentFraction"
	private explicit_type "float"
	init_value " 0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Tracks current elapsed/eased fraction, for querying in getAnimatedFraction().
This is calculated by interpolating the fraction (range: [0, 1]) in the current iteration.

"
      end

      attribute 3265669 "mLastFrameTime"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Tracks the time (in milliseconds) when the last frame arrived.

"
      end

      attribute 3265797 "mFirstFrameTime"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Tracks the time (in milliseconds) when the first frame arrived. Note the frame may arrive
during the start delay.

"
      end

      attribute 3265925 "mRunning"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Additional playing state to indicate whether an animator has been start()'d. There is
some lag between a call to start() and the first animation frame. We should still note
that the animation has been started, even if it's first animation frame has not yet
happened, and reflect that state in isRunning().
Note that delayed animations are different: they are not started until their first
animation frame, which occurs after their delay elapses.

"
      end

      attribute 3266053 "mStarted"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Additional playing state to indicate whether an animator has been start()'d, whether or
not there is a nonzero startDelay.

"
      end

      attribute 3266181 "mStartListenersCalled"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Tracks whether we've notified listeners of the onAnimationStart() event. This can be
complex to keep track of since we notify listeners at different times depending on
startDelay and whether start() was called before end().

"
      end

      attribute 3266309 "mInitialized"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Flag that denotes whether the animation is set up and ready to go. Used to
set up animation that has not yet been started.

"
      end

      attribute 3266437 "mAnimationEndRequested"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Flag that tracks whether animation has been requested to end.

"
      end

      attribute 3266565 "mDuration"
	private explicit_type "long"
	init_value " 300"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Backing variables

 How long the animation should last in ms
"
      end

      attribute 3266693 "mStartDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " The amount of time in ms to delay starting the animation after start() is called. Note
 that this start delay is unscaled. When there is a duration scale set on the animator, the
 scaling factor will be applied to this delay.
"
      end

      attribute 3266821 "mRepeatCount"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " The number of times the animation will repeat. The default is 0, which means the animation
 will play only once
"
      end

      attribute 3266949 "mRepeatMode"
	private explicit_type "int"
	init_value " RESTART"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The type of repetition that will occur when repeatMode is nonzero. RESTART means the
animation will start from the beginning on every new cycle. REVERSE means the animation
will reverse directions on each iteration.

"
      end

      attribute 3267077 "mSelfPulse"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Whether or not the animator should register for its own animation callback to receive
animation pulse.

"
      end

      attribute 3267205 "mSuppressSelfPulseRequested"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Whether or not the animator has been requested to start without pulsing. This flag gets set
in startWithoutPulsing(), and reset in start().

"
      end

      classrelation 1455749 // mInterpolator (<unidirectional association>)
	relation 1455749 --->
	  a role_name "mInterpolator" init_value " sDefaultInterpolator" private
	    comment "
The time interpolator to be used. The elapsed fraction of the animation will be passed
through this interpolator to calculate the interpolated fraction, which is then used to
calculate the animated values.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1455749 // mInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      class 1011461 "AnimatorUpdateListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	operation 4934661 "onAnimationUpdate"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1006341 // ValueAnimator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies the occurrence of another frame of the animation.</p>

@param animation The animation which was repeated.
"
	end
      end

      classrelation 1455877 // mUpdateListeners (<unidirectional association>)
	relation 1455877 --->
	  stereotype "ArrayList"
	  a role_name "mUpdateListeners" init_value " null" package
	    comment "The set of listeners to be sent events through the life of an animation.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1455877 // mUpdateListeners (<unidirectional association>)
	  b parent class_ref 1011461 // AnimatorUpdateListener
      end

      classrelation 1456005 // mValues (<unidirectional association>)
	relation 1456005 --->
	  a role_name "mValues" multiplicity "[]" package
	    comment "
The property/value sets being animated.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1456005 // mValues (<unidirectional association>)
	  b parent class_ref 1006213 // PropertyValuesHolder
      end

      classrelation 1456133 // mValuesMap (<unidirectional association>)
	relation 1456133 --->
	  stereotype "HashMap"
	  a role_name "mValuesMap" package
	    comment "A hashmap of the PropertyValuesHolder objects. This map is used to lookup animated values
by property name during calls to getAnimatedValue(String).

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<String, ${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1456133 // mValuesMap (<unidirectional association>)
	  b parent class_ref 1006213 // PropertyValuesHolder
      end

      class 1011589 "RepeatMode"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef({RESTART, REVERSE})
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
      end

      attribute 3267333 "RESTART"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "When the animation reaches the end and <code>repeatCount</code> is INFINITE
or a positive value, the animation restarts from the beginning.

"
      end

      attribute 3267461 "REVERSE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "When the animation reaches the end and <code>repeatCount</code> is INFINITE
or a positive value, the animation reverses direction on every iteration.

"
      end

      attribute 3267589 "INFINITE"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "This value used used with the {@link #setRepeatCount(int)} property to repeat
the animation indefinitely.

"
      end

      operation 4925573 "setDurationScale"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "durationScale" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@TestApi
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
"
      end

      operation 4925701 "getDurationScale"
	class_operation public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@TestApi
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
"
      end

      operation 4925829 "areAnimatorsEnabled"
	class_operation public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns whether animators are currently enabled, system-wide. By default, all
animators are enabled. This can change if either the user sets a Developer Option
to set the animator duration scale to 0 or by Battery Savery mode being enabled
(which disables all animations).

<p>Developers should not typically need to call this method, but should an app wish
to show a different experience when animators are disabled, this return value
can be used as a decider of which experience to offer.

@return boolean Whether animators are currently enabled. The default value is
<code>true</code>.
"
      end

      operation 4925957 "ValueAnimator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Creates a new ValueAnimator object. This default constructor is primarily for
use internally; the factory methods which take parameters are more generally
useful.
"
      end

      operation 4926085 "ofInt"
	class_operation public return_type class_ref 1006341 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a ValueAnimator that animates between int values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 4926213 "ofArgb"
	class_operation public return_type class_ref 1006341 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a ValueAnimator that animates between color values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 4926341 "ofFloat"
	class_operation public return_type class_ref 1006341 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a ValueAnimator that animates between float values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 4926469 "ofPropertyValuesHolder"
	class_operation public return_type class_ref 1006341 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "PropertyValuesHolder...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a ValueAnimator that animates between the values
specified in the PropertyValuesHolder objects.

@param values A set of PropertyValuesHolder objects whose values will be animated
between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 4926597 "ofObject"
	class_operation public return_type class_ref 1006341 // ValueAnimator
	nparams 2
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs and returns a ValueAnimator that animates between Object values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

<p>Since ValueAnimator does not know how to animate between arbitrary Objects, this
factory method also takes a TypeEvaluator object that the ValueAnimator will use
to perform that interpolation.

@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the ncessry interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 4926725 "setIntValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets int values that will be animated between. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p>If there are already multiple sets of values defined for this ValueAnimator via more
than one PropertyValuesHolder object, this method will set the values for the first
of those objects.</p>

@param values A set of values that the animation will animate between over time.
"
      end

      operation 4926853 "setFloatValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets float values that will be animated between. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p>If there are already multiple sets of values defined for this ValueAnimator via more
than one PropertyValuesHolder object, this method will set the values for the first
of those objects.</p>

@param values A set of values that the animation will animate between over time.
"
      end

      operation 4926981 "setObjectValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the values to animate between for this animation. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

<p>If there are already multiple sets of values defined for this ValueAnimator via more
than one PropertyValuesHolder object, this method will set the values for the first
of those objects.</p>

<p>There should be a TypeEvaluator set on the ValueAnimator that knows how to interpolate
between these value objects. ValueAnimator only knows how to interpolate between the
primitive types specified in the other setValues() methods.</p>

@param values The set of values to animate between.
"
      end

      operation 4927109 "setValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "PropertyValuesHolder...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the values, per property, being animated between. This function is called internally
by the constructors of ValueAnimator that take a list of values. But a ValueAnimator can
be constructed without values and this method can be called to set the values manually
instead.

@param values The set of values, per property, being animated between.
"
      end

      operation 4927237 "getValues"
	public return_type class_ref 1006213 // PropertyValuesHolder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the values that this ValueAnimator animates between. These values are stored in
PropertyValuesHolder objects, even if the ValueAnimator was created with a simple list
of value objects instead.

@return PropertyValuesHolder[] An array of PropertyValuesHolder objects which hold the
values, per property, that define the animation.
"
      end

      operation 4927365 "initAnimation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function is called immediately before processing the first animation
frame of an animation. If there is a nonzero <code>startDelay</code>, the
function is called after that delay ends.
It takes care of the final initialization steps for the
animation.

 <p>Overrides of this method should call the superclass method to ensure
 that internal mechanisms for the animation are set up correctly.</p>
"
      end

      operation 4927493 "setDuration"
	public return_type class_ref 1006341 // ValueAnimator
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the length of the animation. The default duration is 300 milliseconds.

@param duration The length of the animation, in milliseconds. This value cannot
be negative.
@return ValueAnimator The object called with setDuration(). This return
value makes it easier to compose statements together that construct and then set the
duration, as in <code>ValueAnimator.ofInt(0, 10).setDuration(500).start()</code>.
"
      end

      operation 4927621 "getScaledDuration"
	private explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4927749 "getDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the length of the animation. The default duration is 300 milliseconds.

@return The length of the animation, in milliseconds.
"
      end

      operation 4927877 "getTotalDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4928005 "setCurrentPlayTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "playTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the position of the animation to the specified point in time. This time should
be between 0 and the total duration of the animation, including any repetition. If
the animation has not yet been started, then it will not advance forward after it is
set to this time; it will simply set the time to this value and perform any appropriate
actions based on that time. If the animation is already running, then setCurrentPlayTime()
will set the current playing time to this value and continue playing from that point.

@param playTime The time, in milliseconds, to which the animation is advanced or rewound.
"
      end

      operation 4928133 "setCurrentFraction"
	public explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the position of the animation to the specified fraction. This fraction should
be between 0 and the total fraction of the animation, including any repetition. That is,
a fraction of 0 will position the animation at the beginning, a value of 1 at the end,
and a value of 2 at the end of a reversing animator that repeats once. If
the animation has not yet been started, then it will not advance forward after it is
set to this fraction; it will simply set the fraction to this value and perform any
appropriate actions based on that fraction. If the animation is already running, then
setCurrentFraction() will set the current fraction to this value and continue
playing from that point. {@link Animator.AnimatorListener} events are not called
due to changing the fraction; those events are only processed while the animation
is running.

@param fraction The fraction to which the animation is advanced or rewound. Values
outside the range of 0 to the maximum fraction for the animator will be clamped to
the correct range.
"
      end

      operation 4928261 "getCurrentIteration"
	private explicit_return_type "int"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Calculates current iteration based on the overall fraction. The overall fraction will be
in the range of [0, mRepeatCount + 1]. Both current iteration and fraction in the current
iteration can be derived from it.
"
      end

      operation 4928389 "getCurrentIterationFraction"
	private explicit_return_type "float"
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Calculates the fraction of the current iteration, taking into account whether the animation
should be played backwards. E.g. When the animation is played backwards in an iteration,
the fraction for that iteration will go from 1f to 0f.
"
      end

      operation 4928517 "clampFraction"
	private explicit_return_type "float"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Clamps fraction into the correct range: [0, mRepeatCount + 1]. If repeat count is infinite,
no upper bound will be set for the fraction.

@param fraction fraction to be clamped
@return fraction clamped into the range of [0, mRepeatCount + 1]
"
      end

      operation 4928645 "shouldPlayBackward"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "iteration" explicit_type "int"
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Calculates the direction of animation playing (i.e. forward or backward), based on 1)
whether the entire animation is being reversed, 2) repeat mode applied to the current
iteration.
"
      end

      operation 4928773 "getCurrentPlayTime"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the current position of the animation in time, which is equal to the current
time minus the time that the animation started. An animation that is not yet started will
return a value of zero, unless the animation has has its play time set via
{@link #setCurrentPlayTime(long)} or {@link #setCurrentFraction(float)}, in which case
it will return the time that was set.

@return The current position in time of the animation.
"
      end

      operation 4928901 "getStartDelay"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called.

@return the number of milliseconds to delay running the animation
"
      end

      operation 4929029 "setStartDelay"
	public explicit_return_type "void"
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called. Note that the start delay should always be non-negative. Any
negative start delay will be clamped to 0 on N and above.

@param startDelay The amount of the delay, in milliseconds
"
      end

      operation 4929157 "getFrameDelay"
	class_operation public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The amount of time, in milliseconds, between each frame of the animation. This is a
requested time that the animation will attempt to honor, but the actual delay between
frames may be different, depending on system load and capabilities. This is a static
function because the same delay will be applied to all animations, since they are all
run off of a single timing loop.

The frame delay may be ignored when the animation system uses an external timing
source, such as the display refresh rate (vsync), to govern animations.

Note that this method should be called from the same thread that {@link #start()} is
called in order to check the frame delay for that animation. A runtime exception will be
thrown if the calling thread does not have a Looper.

@return the requested time between frames, in milliseconds
"
      end

      operation 4929285 "setFrameDelay"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "frameDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The amount of time, in milliseconds, between each frame of the animation. This is a
requested time that the animation will attempt to honor, but the actual delay between
frames may be different, depending on system load and capabilities. This is a static
function because the same delay will be applied to all animations, since they are all
run off of a single timing loop.

The frame delay may be ignored when the animation system uses an external timing
source, such as the display refresh rate (vsync), to govern animations.

Note that this method should be called from the same thread that {@link #start()} is
called in order to have the new frame delay take effect on that animation. A runtime
exception will be thrown if the calling thread does not have a Looper.

@param frameDelay the requested time between frames, in milliseconds
"
      end

      operation 4929413 "getAnimatedValue"
	public explicit_return_type "Object"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The most recent value calculated by this <code>ValueAnimator</code> when there is just one
property being animated. This value is only sensible while the animation is running. The main
purpose for this read-only property is to retrieve the value from the <code>ValueAnimator</code>
during a call to {@link AnimatorUpdateListener#onAnimationUpdate(ValueAnimator)}, which
is called during each animation frame, immediately after the value is calculated.

@return animatedValue The value most recently calculated by this <code>ValueAnimator</code> for
the single property being animated. If there are several properties being animated
(specified by several PropertyValuesHolder objects in the constructor), this function
returns the animated value for the first of those objects.
"
      end

      operation 4929541 "getAnimatedValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The most recent value calculated by this <code>ValueAnimator</code> for <code>propertyName</code>.
The main purpose for this read-only property is to retrieve the value from the
<code>ValueAnimator</code> during a call to
{@link AnimatorUpdateListener#onAnimationUpdate(ValueAnimator)}, which
is called during each animation frame, immediately after the value is calculated.

@return animatedValue The value most recently calculated for the named property
by this <code>ValueAnimator</code>.
"
      end

      operation 4929669 "setRepeatCount"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets how many times the animation should be repeated. If the repeat
count is 0, the animation is never repeated. If the repeat count is
greater than 0 or {@link #INFINITE}, the repeat mode will be taken
into account. The repeat count is 0 by default.

@param value the number of times the animation should be repeated
"
      end

      operation 4929797 "getRepeatCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Defines how many times the animation should repeat. The default value
is 0.

@return the number of times the animation should repeat, or {@link #INFINITE}
"
      end

      operation 4929925 "setRepeatMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@RepeatMode ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Defines what this animation should do when it reaches the end. This
setting is applied only when the repeat count is either greater than
0 or {@link #INFINITE}. Defaults to {@link #RESTART}.

@param value {@link #RESTART} or {@link #REVERSE}
"
      end

      operation 4930053 "getRepeatMode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@RepeatMode
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Defines what this animation should do when it reaches the end.

@return either one of {@link #REVERSE} or {@link #RESTART}
"
      end

      operation 4930181 "addUpdateListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1011461 // AnimatorUpdateListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Adds a listener to the set of listeners that are sent update events through the life of
an animation. This method is called on all listeners for every frame of the animation,
after the values for the animation have been calculated.

@param listener the listener to be added to the current set of listeners for this animation.
"
      end

      operation 4930309 "removeAllUpdateListeners"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Removes all listeners from the set listening to frame updates for this animation.
"
      end

      operation 4930437 "removeUpdateListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1011461 // AnimatorUpdateListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Removes a listener from the set listening to frame updates for this animation.

@param listener the listener to be removed from the current set of update listeners
for this animation.
"
      end

      operation 4930565 "setInterpolator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 1005317 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The time interpolator used in calculating the elapsed fraction of this animation. The
interpolator determines whether the animation runs with linear or non-linear motion,
such as acceleration and deceleration. The default value is
{@link android.view.animation.AccelerateDecelerateInterpolator}

@param value the interpolator to be used by this animation. A value of <code>null</code>
will result in linear interpolation.
"
      end

      operation 4930693 "getInterpolator"
	public return_type class_ref 1005317 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the timing interpolator that this ValueAnimator uses.

@return The timing interpolator for this ValueAnimator.
"
      end

      operation 4930821 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 1006085 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The type evaluator to be used when calculating the animated values of this animation.
The system will automatically assign a float or int evaluator based on the type
of <code>startValue</code> and <code>endValue</code> in the constructor. But if these values
are not one of these primitive types, or if different evaluation is desired (such as is
necessary with int values that represent colors), a custom evaluator needs to be assigned.
For example, when running an animation on color values, the {@link ArgbEvaluator}
should be used to get correct RGB color interpolation.

<p>If this ValueAnimator has only one set of values being animated between, this evaluator
will be used for that set. If there are several sets of values being animated, which is
the case if PropertyValuesHolder objects were set on the ValueAnimator, then the evaluator
is assigned just to the first PropertyValuesHolder object.</p>

@param value the evaluator to be used this animation
"
      end

      operation 4930949 "notifyStartListeners"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4931077 "start"
	private explicit_return_type "void"
	nparams 1
	  param inout name "playBackwards" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Start the animation playing. This version of start() takes a boolean flag that indicates
whether the animation should play in reverse. The flag is usually false, but may be set
to true if called from the reverse() method.

<p>The animation started by calling this method will be run on the thread that called
this method. This thread should have a Looper on it (a runtime exception will be thrown if
this is not the case). Also, if the animation will animate
properties of objects in the view hierarchy, then the calling thread should be the UI
thread for that view hierarchy.</p>

@param playBackwards Whether the ValueAnimator should start playing in reverse.
"
      end

      operation 4931205 "startWithoutPulsing"
	package explicit_return_type "void"
	nparams 1
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4931333 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4931461 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4931589 "end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4931717 "resume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4931845 "pause"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4931973 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4932101 "isStarted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4932229 "reverse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Plays the ValueAnimator in reverse. If the animation is already running,
it will stop itself and play backwards from the point reached when reverse was called.
If the animation is not currently running, then it will start from the end and
play backwards. This behavior is only set for the current animation; future playing
of the animation will use the default behavior of playing forward.
"
      end

      operation 4932357 "canReverse"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
"
      end

      operation 4932485 "endAnimation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Called internally to end an animation by removing it from the animations list. Must be
called on the UI thread.
"
      end

      operation 4932613 "startAnimation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Called internally to start an animation by adding it to the active animations list. Must be
called on the UI thread.
"
      end

      operation 4932741 "isPulsingInternal"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal only: This tracks whether the animation has gotten on the animation loop. Note
this is different than {@link #isRunning()} in that the latter tracks the time after start()
is called (or after start delay if any), which may be before the animation loop starts.
"
      end

      operation 4932869 "getNameForTrace"
	package explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the name of this animator for debugging purposes.
"
      end

      operation 4932997 "commitAnimationFrame"
	public explicit_return_type "void"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Applies an adjustment to the animation to compensate for jank between when
the animation first ran and when the frame was drawn.
@hide
"
      end

      operation 4933125 "animateBasedOnTime"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "currentTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This internal function processes a single animation frame for a given animation. The
currentTime parameter is the timing pulse sent by the handler, used to calculate the
elapsed duration, and therefore
the elapsed fraction, of the animation. The return value indicates whether the animation
should be ended (which happens when the elapsed time of the animation exceeds the
animation's duration, including the repeatCount).

@param currentTime The current time, as tracked by the static timing handler
@return true if the animation's duration, including any repetitions due to
<code>repeatCount</code> has been exceeded and the animation should be ended.
"
      end

      operation 4933253 "animateBasedOnPlayTime"
	package explicit_return_type "void"
	nparams 3
	  param in name "currentPlayTime" explicit_type "long"
	  param in name "lastPlayTime" explicit_type "long"
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal use only.

This method does not modify any fields of the animation. It should be called when seeking
in an AnimatorSet. When the last play time and current play time are of different repeat
iterations,
{@link android.view.animation.Animation.AnimationListener#onAnimationRepeat(Animation)}
will be called.
"
      end

      operation 4933381 "skipToEndValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal use only.
Skips the animation value to end/start, depending on whether the play direction is forward
or backward.

@param inReverse whether the end value is based on a reverse direction. If yes, this is
                 equivalent to skip to start value in a forward playing direction.
"
      end

      operation 4933509 "isInitialized"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4933637 "doAnimationFrame"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Processes a frame of the animation, adjusting the start time if needed.

@param frameTime The frame time.
@return true if the animation has ended.
@hide
"
      end

      operation 4933765 "pulseAnimationFrame"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4933893 "addOneShotCommitCallback"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4934021 "removeAnimationCallback"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4934149 "addAnimationCallback"
	private explicit_return_type "void"
	nparams 1
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4934277 "getAnimatedFraction"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the current animation fraction, which is the elapsed/interpolated fraction used in
the most recent frame update on the animation.

@return Elapsed/interpolated fraction of the animation.
"
      end

      operation 4934405 "animateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method is called with the elapsed fraction of the animation during every
animation frame. This function turns the elapsed fraction into an interpolated fraction
and then into an animated value (from the evaluator. The function is called mostly during
animation updates, but it is also called when the <code>end()</code>
function is called, to set the final value on the property.

<p>Overrides of this method must call the superclass to perform the calculation
of the animated value.</p>

@param fraction The elapsed fraction of the animation.
"
      end

      operation 4934533 "clone"
	public return_type class_ref 1006341 // ValueAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4934789 "getCurrentAnimationsCount"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Return the number of animations currently running.

Used by StrictMode internally to annotate violations.
May be called on arbitrary threads!

@hide
"
      end

      operation 4934917 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4935045 "setAllowRunningAsynchronously"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mayRunAsync" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "<p>Whether or not the ValueAnimator is allowed to run asynchronously off of
the UI thread. This is a hint that informs the ValueAnimator that it is
OK to run the animation off-thread, however ValueAnimator may decide
that it must run the animation on the UI thread anyway. For example if there
is an {@link AnimatorUpdateListener} the animation will run on the UI thread,
regardless of the value of this hint.</p>

<p>Regardless of whether or not the animation runs asynchronously, all
listener callbacks will be called on the UI thread.</p>

<p>To be able to use this hint the following must be true:</p>
<ol>
<li>{@link #getAnimatedFraction()} is not needed (it will return undefined values).</li>
<li>The animator is immutable while {@link #isStarted()} is true. Requests
   to change values, duration, delay, etc... may be ignored.</li>
<li>Lifecycle callback events may be asynchronous. Events such as
   {@link Animator.AnimatorListener#onAnimationEnd(Animator)} or
   {@link Animator.AnimatorListener#onAnimationRepeat(Animator)} may end up delayed
   as they must be posted back to the UI thread, and any actions performed
   by those callbacks (such as starting new animations) will not happen
   in the same frame.</li>
<li>State change requests ({@link #cancel()}, {@link #end()}, {@link #reverse()}, etc...)
   may be asynchronous. It is guaranteed that all state changes that are
   performed on the UI thread in the same frame will be applied as a single
   atomic update, however that frame may be the current frame,
   the next frame, or some future frame. This will also impact the observed
   state of the Animator. For example, {@link #isStarted()} may still return true
   after a call to {@link #end()}. Using the lifecycle callbacks is preferred over
   queries to {@link #isStarted()}, {@link #isRunning()}, and {@link #isPaused()}
   for this reason.</li>
</ol>
@hide
"
      end

      operation 4935173 "getAnimationHandler"
	public return_type class_ref 1003781 // AnimationHandler
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@return The {@link AnimationHandler} that will be used to schedule updates for this animator.
@hide
"
      end
    end

    class 1006469 "AnimatorSet"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class plays a set of {@link Animator} objects in the specified order. Animations
can be set up to play together, in sequence, or after a specified delay.

<p>There are two different approaches to adding animations to a <code>AnimatorSet</code>:
either the {@link AnimatorSet#playTogether(Animator[]) playTogether()} or
{@link AnimatorSet#playSequentially(Animator[]) playSequentially()} methods can be called to add
a set of animations all at once, or the {@link AnimatorSet#play(Animator)} can be
used in conjunction with methods in the {@link AnimatorSet.Builder Builder}
class to add animations
one by one.</p>

<p>It is possible to set up a <code>AnimatorSet</code> with circular dependencies between
its animations. For example, an animation a1 could be set up to start before animation a2, a2
before a3, and a3 before a1. The results of this configuration are undefined, but will typically
result in none of the affected animations being played. Because of this (and because
circular dependencies do not make logical sense anyway), circular dependencies
should be avoided, and the dependency flow of animations should only be in one direction.

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about animating with {@code AnimatorSet}, read the
<a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#choreography\">Property
Animation</a> developer guide.</p>
</div>
"
      classrelation 1443717 // <generalisation>
	relation 1443717 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1443717 // <generalisation>
	  b parent class_ref 1004677 // Animator
      end

      classrelation 1443845 // <realization>
	relation 1443845 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1443845 // <realization>
	  b parent class_ref 1003909 // AnimationFrameCallback
      end

      attribute 3253637 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " \"AnimatorSet\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      class 1006853 "Node"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1445125 // <realization>
	  relation 1445125 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1445125 // <realization>
	    b parent class_ref 1004805 // Cloneable
	end

	classrelation 1445253 // mAnimation (<unidirectional association>)
	  relation 1445253 --->
	    a role_name "mAnimation" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1445253 // mAnimation (<unidirectional association>)
	    b parent class_ref 1004677 // Animator
	end

	classrelation 1445381 // mChildNodes (<unidirectional association>)
	  relation 1445381 --->
	    stereotype "ArrayList"
	    a role_name "mChildNodes" init_value " null" package
	      comment "Child nodes are the nodes associated with animations that will be played immediately
after current node.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1445381 // mChildNodes (<unidirectional association>)
	    b parent class_ref 1006853 // Node
	end

	attribute 3255685 "mEnded"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	  comment "Flag indicating whether the animation in this node is finished. This flag
is used by AnimatorSet to check, as each animation ends, whether all child animations
are mEnded and it's time to send out an end event for the entire AnimatorSet.

"
	end

	classrelation 1445509 // mSiblings (<unidirectional association>)
	  relation 1445509 --->
	    stereotype "ArrayList"
	    a role_name "mSiblings" package
	      comment "Nodes with animations that are defined to play simultaneously with the animation
associated with this current node.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1445509 // mSiblings (<unidirectional association>)
	    b parent class_ref 1006853 // Node
	end

	classrelation 1445637 // mParents (<unidirectional association>)
	  relation 1445637 --->
	    stereotype "ArrayList"
	    a role_name "mParents" package
	      comment "Parent nodes are the nodes with animations preceding current node's animation. Parent
nodes here are derived from user defined animation sequence.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1445637 // mParents (<unidirectional association>)
	    b parent class_ref 1006853 // Node
	end

	classrelation 1445765 // mLatestParent (<unidirectional association>)
	  relation 1445765 --->
	    a role_name "mLatestParent" init_value " null" package
	      comment "
Latest parent is the parent node associated with a animation that finishes after all
the other parents' animations.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1445765 // mLatestParent (<unidirectional association>)
	    b parent class_ref 1006853 // Node
	end

	attribute 3255813 "mParentsAdded"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3255941 "mStartTime"
	  package explicit_type "long"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3256069 "mEndTime"
	  package explicit_type "long"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3256197 "mTotalDuration"
	  package explicit_type "long"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4897541 "Node"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment "Constructs the Node with the animation that it encapsulates. A Node has no
dependencies by default; dependencies are added via the addDependency()
method.

@param animation The animation that the Node encapsulates.
"
	end

	operation 4897669 "clone"
	  public return_type class_ref 1006853 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4897797 "addChild"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 1006853 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4897925 "addSibling"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 1006853 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4898053 "addParent"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 1006853 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4898181 "addParents"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "parents" explicit_type "ArrayList<Node>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      classrelation 1443973 // mPlayingSet (<unidirectional association>)
	relation 1443973 --->
	  stereotype "ArrayList"
	  a role_name "mPlayingSet" init_value " new ArrayList<Node>()" private
	    comment "Internal variables
NOTE: This object implements the clone() method, making a deep copy of any referenced
objects. As other non-trivial fields are added to this class, make sure to add logic
to clone() to make deep copies of them.


Tracks animations currently being played, so that we know what to
cancel or end when cancel() or end() is called on this AnimatorSet

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1443973 // mPlayingSet (<unidirectional association>)
	  b parent class_ref 1006853 // Node
      end

      classrelation 1444101 // mNodeMap (<unidirectional association>)
	relation 1444101 --->
	  a role_name "mNodeMap" init_value " new ArrayMap<Animator, Node>()" private
	    comment "
Contains all nodes, mapped to their respective Animators. When new
dependency information is added for an Animator, we want to add it
to a single node representing that Animator, not create a new Node
if one already exists.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Animator, Node> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1444101 // mNodeMap (<unidirectional association>)
	  b parent class_ref 956293 // ArrayMap
      end

      class 1006981 "AnimationEvent"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 3256325 "ANIMATION_START"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3256453 "ANIMATION_DELAY_ENDED"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3256581 "ANIMATION_END"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 2"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 1445893 // mNode (<unidirectional association>)
	  relation 1445893 --->
	    a role_name "mNode" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1445893 // mNode (<unidirectional association>)
	    b parent class_ref 1006853 // Node
	end

	attribute 3256709 "mEvent"
	  const_attribute package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4898309 "AnimationEvent"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "node" type class_ref 1006853 // Node
	    param in name "event" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4898437 "getTime"
	  package explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4898565 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      classrelation 1444229 // mEvents (<unidirectional association>)
	relation 1444229 --->
	  stereotype "ArrayList"
	  a role_name "mEvents" init_value " new ArrayList<>()" private
	    comment "Contains the start and end events of all the nodes. All these events are sorted in this list.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1444229 // mEvents (<unidirectional association>)
	  b parent class_ref 1006981 // AnimationEvent
      end

      classrelation 1444357 // mNodes (<unidirectional association>)
	relation 1444357 --->
	  stereotype "ArrayList"
	  a role_name "mNodes" init_value " new ArrayList<Node>()" private
	    comment "Set of all nodes created for this AnimatorSet. This list is used upon
starting the set, and the nodes are placed in sorted order into the
sortedNodes collection.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1444357 // mNodes (<unidirectional association>)
	  b parent class_ref 1006853 // Node
      end

      attribute 3253765 "mDependencyDirty"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Tracks whether any change has been made to the AnimatorSet, which is then used to
determine whether the dependency graph should be re-constructed.

"
      end

      attribute 3253893 "mStarted"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Indicates whether an AnimatorSet has been start()'d, whether or
not there is a nonzero startDelay.

"
      end

      attribute 3254021 "mStartDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " The amount of time in ms to delay starting the animation after start() is called
"
      end

      classrelation 1444485 // mDelayAnim (<unidirectional association>)
	relation 1444485 --->
	  a role_name "mDelayAnim" init_value " ValueAnimator.ofFloat(0f, 1f).setDuration(0)" private
	    comment " Animator used for a nonzero startDelay
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1444485 // mDelayAnim (<unidirectional association>)
	  b parent class_ref 1006341 // ValueAnimator
      end

      classrelation 1444613 // mRootNode (<unidirectional association>)
	relation 1444613 --->
	  a role_name "mRootNode" init_value " new Node(mDelayAnim)" private
	    comment " Root of the dependency tree of all the animators in the set. In this tree, parent-child
 relationship captures the order of animation (i.e. parent and child will play sequentially),
 and sibling relationship indicates \"with\" relationship, as sibling animators start at the
 same time.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1444613 // mRootNode (<unidirectional association>)
	  b parent class_ref 1006853 // Node
      end

      attribute 3254149 "mDuration"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " How long the child animations should last in ms. The default value is negative, which
 simply means that there is no duration set on the AnimatorSet. When a real duration is
 set, it is passed along to the child animations.
"
      end

      classrelation 1444741 // mInterpolator (<unidirectional association>)
	relation 1444741 --->
	  a role_name "mInterpolator" init_value " null" private
	    comment " Records the interpolator for the set. Null value indicates that no interpolator
 was set on this AnimatorSet, so it should not be passed down to the children.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1444741 // mInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      attribute 3254277 "mTotalDuration"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " The total duration of finishing all the Animators in the set.
"
      end

      attribute 3254405 "mShouldIgnoreEndWithoutStart"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " In pre-N releases, calling end() before start() on an animator set is no-op. But that is not
 consistent with the behavior for other animator types. In order to keep the behavior
 consistent within Animation framework, when end() is called without start(), we will start
 the animator set and immediately end it for N and forward.
"
      end

      attribute 3254533 "mShouldResetValuesAtStart"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " In pre-O releases, calling start() doesn't reset all the animators values to start values.
 As a result, the start of the animation is inconsistent with what setCurrentPlayTime(0) would
 look like on O. Also it is inconsistent with what reverse() does on O, as reverse would
 advance all the animations to the right beginning values for before starting to reverse.
 From O and forward, we will add an additional step of resetting the animation values (unless
 the animation was previously seeked and therefore doesn't start from the beginning).
"
      end

      attribute 3254661 "mEndCanBeCalled"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " In pre-O releases, end() may never explicitly called on a child animator. As a result, end()
 may not even be properly implemented in a lot of cases. After a few apps crashing on this,
 it became necessary to use an sdk target guard for calling end().
"
      end

      attribute 3254789 "mLastFrameTime"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " The time, in milliseconds, when last frame of the animation came in. -1 when the animation is
 not running.
"
      end

      attribute 3254917 "mFirstFrame"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " The time, in milliseconds, when the first frame of the animation came in. This is the
 frame before we start counting down the start delay, if any.
 -1 when the animation is not running.
"
      end

      attribute 3255045 "mLastEventId"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " The time, in milliseconds, when the first frame of the animation came in.
 -1 when the animation is not running.
"
      end

      attribute 3255173 "mReversing"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Indicates whether the animation is reversing.
"
      end

      attribute 3255301 "mSelfPulse"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Indicates whether the animation should register frame callbacks. If false, the animation will
 passively wait for an AnimatorSet to pulse it.
"
      end

      class 1007109 "SeekState"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 3256837 "mPlayTime"
	  private explicit_type "long"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 3256965 "mSeekingInReverse"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 4898693 "reset"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4898821 "setPlayTime"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "playTime" explicit_type "long"
	    param inout name "inReverse" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4898949 "updateSeekDirection"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "inReverse" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4899077 "getPlayTime"
	  package explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4899205 "getPlayTimeNormalized"
	  package explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Returns the playtime assuming the animation is forward playing
"
	end

	operation 4899333 "isActive"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      classrelation 1444869 // mSeekState (<unidirectional association>)
	relation 1444869 --->
	  a role_name "mSeekState" init_value " new SeekState()" private
	    comment " SeekState stores the last seeked play time as well as seek direction.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1444869 // mSeekState (<unidirectional association>)
	  b parent class_ref 1007109 // SeekState
      end

      attribute 3255429 "mChildrenInitialized"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Indicates where children animators are all initialized with their start values captured.
"
      end

      attribute 3255557 "mPauseTime"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Set on the next frame after pause() is called, used to calculate a new startTime
or delayStartTime which allows the animator set to continue from the point at which
it was paused. If negative, has not yet been set.

"
      end

      classrelation 1444997 // mDummyListener (<unidirectional association>)
	relation 1444997 --->
	  a role_name "mDummyListener" init_value " new AnimatorListenerAdapter() {
        @Override
        public void onAnimationEnd(Animator animation) {
            if (mNodeMap.get(animation) == null) {
                throw new AndroidRuntimeException(\"Error: animation ended is not in the node map\");
            }
            mNodeMap.get(animation).mEnded = true;

        }
    }" private
	    comment " This is to work around a bug in b/34736819. This needs to be removed once app team
 fixes their side.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1444997 // mDummyListener (<unidirectional association>)
	  b parent class_ref 1006725 // AnimatorListenerAdapter
      end

      operation 4889477 "AnimatorSet"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4889605 "playTogether"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Animator...items"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets up this AnimatorSet to play all of the supplied animations at the same time.
This is equivalent to calling {@link #play(Animator)} with the first animator in the
set and then {@link Builder#with(Animator)} with each of the other animators. Note that
an Animator with a {@link Animator#setStartDelay(long) startDelay} will not actually
start until that delay elapses, which means that if the first animator in the list
supplied to this constructor has a startDelay, none of the other animators will start
until that first animator's startDelay has elapsed.

@param items The animations that will be started simultaneously.
"
      end

      operation 4889733 "playTogether"
	public explicit_return_type "void"
	nparams 1
	  param inout name "items" explicit_type "Collection<Animator>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets up this AnimatorSet to play all of the supplied animations at the same time.

@param items The animations that will be started simultaneously.
"
      end

      operation 4889861 "playSequentially"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Animator...items"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets up this AnimatorSet to play each of the supplied animations when the
previous animation ends.

@param items The animations that will be started one after another.
"
      end

      operation 4889989 "playSequentially"
	public explicit_return_type "void"
	nparams 1
	  param inout name "items" explicit_type "List<Animator>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets up this AnimatorSet to play each of the supplied animations when the
previous animation ends.

@param items The animations that will be started one after another.
"
      end

      operation 4890117 "getChildAnimations"
	public return_type class_ref 1004677 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the current list of child Animator objects controlled by this
AnimatorSet. This is a copy of the internal list; modifications to the returned list
will not affect the AnimatorSet, although changes to the underlying Animator objects
will affect those objects being managed by the AnimatorSet.

@return ArrayList<Animator> The list of child animations of this AnimatorSet.
"
      end

      operation 4890245 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the target object for all current {@link #getChildAnimations() child animations}
of this AnimatorSet that take targets ({@link ObjectAnimator} and
AnimatorSet).

@param target The object being animated
"
      end

      operation 4890373 "getChangingConfigurations"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
"
      end

      operation 4890501 "setInterpolator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "interpolator" type class_ref 1005317 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the TimeInterpolator for all current {@link #getChildAnimations() child animations}
of this AnimatorSet. The default value is null, which means that no interpolator
is set on this AnimatorSet. Setting the interpolator to any non-null value
will cause that interpolator to be set on the child animations
when the set is started.

@param interpolator the interpolator to be used by each child animation of this AnimatorSet
"
      end

      operation 4890629 "getInterpolator"
	public return_type class_ref 1005317 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      class 1007237 "Builder"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1446021 // mCurrentNode (<unidirectional association>)
	  relation 1446021 --->
	    a role_name "mCurrentNode" private
	      comment "
This tracks the current node being processed. It is supplied to the play() method
of AnimatorSet and passed into the constructor of Builder.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1446021 // mCurrentNode (<unidirectional association>)
	    b parent class_ref 1006853 // Node
	end

	operation 4899461 "Builder"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "anim" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment "package-private constructor. Builders are only constructed by AnimatorSet, when the
play() method is called.

@param anim The animation that is the dependency for the other animations passed into
the other methods of this Builder object.
"
	end

	operation 4899589 "with"
	  public return_type class_ref 1007237 // Builder
	  nparams 1
	    param inout name "anim" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Sets up the given animation to play at the same time as the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object.

@param anim The animation that will play when the animation supplied to the
{@link AnimatorSet#play(Animator)} method starts.
"
	end

	operation 4899717 "before"
	  public return_type class_ref 1007237 // Builder
	  nparams 1
	    param inout name "anim" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Sets up the given animation to play when the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
ends.

@param anim The animation that will play when the animation supplied to the
{@link AnimatorSet#play(Animator)} method ends.
"
	end

	operation 4899845 "after"
	  public return_type class_ref 1007237 // Builder
	  nparams 1
	    param inout name "anim" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Sets up the given animation to play when the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
to start when the animation supplied in this method call ends.

@param anim The animation whose end will cause the animation supplied to the
{@link AnimatorSet#play(Animator)} method to play.
"
	end

	operation 4899973 "after"
	  public return_type class_ref 1007237 // Builder
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Sets up the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
to play when the given amount of time elapses.

@param delay The number of milliseconds that should elapse before the
animation starts.
"
	end
      end

      operation 4890757 "play"
	public return_type class_ref 1007237 // Builder
	nparams 1
	  param inout name "anim" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method creates a <code>Builder</code> object, which is used to
set up playing constraints. This initial <code>play()</code> method
tells the <code>Builder</code> the animation that is the dependency for
the succeeding commands to the <code>Builder</code>. For example,
calling <code>play(a1).with(a2)</code> sets up the AnimatorSet to play
<code>a1</code> and <code>a2</code> at the same time,
<code>play(a1).before(a2)</code> sets up the AnimatorSet to play
<code>a1</code> first, followed by <code>a2</code>, and
<code>play(a1).after(a2)</code> sets up the AnimatorSet to play
<code>a2</code> first, followed by <code>a1</code>.

<p>Note that <code>play()</code> is the only way to tell the
<code>Builder</code> the animation upon which the dependency is created,
so successive calls to the various functions in <code>Builder</code>
will all refer to the initial parameter supplied in <code>play()</code>
as the dependency of the other animations. For example, calling
<code>play(a1).before(a2).before(a3)</code> will play both <code>a2</code>
and <code>a3</code> when a1 ends; it does not set up a dependency between
<code>a2</code> and <code>a3</code>.</p>

@param anim The animation that is the dependency used in later calls to the
methods in the returned <code>Builder</code> object. A null parameter will result
in a null <code>Builder</code> return value.
@return Builder The object that constructs the AnimatorSet based on the dependencies
outlined in the calls to <code>play</code> and the other methods in the
<code>Builder</code object.
"
      end

      operation 4890885 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "{@inheritDoc}

<p>Note that canceling a <code>AnimatorSet</code> also cancels all of the animations that it
is responsible for.</p>
"
      end

      operation 4891013 "forceToEnd"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Force all the animations to end when the duration scale is 0."
      end

      operation 4891141 "end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "{@inheritDoc}

<p>Note that ending a <code>AnimatorSet</code> also ends all of the animations that it is
responsible for.</p>
"
      end

      operation 4891269 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns true if any of the child animations of this AnimatorSet have been started and have
not yet ended. Child animations will not be started until the AnimatorSet has gone past
its initial delay set through {@link #setStartDelay(long)}.

@return Whether this AnimatorSet has gone past the initial delay, and at least one child
        animation has been started and not yet ended.
"
      end

      operation 4891397 "isStarted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4891525 "getStartDelay"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called.

@return the number of milliseconds to delay running the animation
"
      end

      operation 4891653 "setStartDelay"
	public explicit_return_type "void"
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called. Note that the start delay should always be non-negative. Any
negative start delay will be clamped to 0 on N and above.

@param startDelay The amount of the delay, in milliseconds
"
      end

      operation 4891781 "getDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the length of each of the child animations of this AnimatorSet. This value may
be less than 0, which indicates that no duration has been set on this AnimatorSet
and each of the child animations will use their own duration.

@return The length of the animation, in milliseconds, of each of the child
animations of this AnimatorSet.
"
      end

      operation 4891909 "setDuration"
	public return_type class_ref 1006469 // AnimatorSet
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the length of each of the current child animations of this AnimatorSet. By default,
each child animation will use its own duration. If the duration is set on the AnimatorSet,
then each child animation inherits this duration.

@param duration The length of the animation, in milliseconds, of each of the child
animations of this AnimatorSet.
"
      end

      operation 4892037 "setupStartValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4892165 "setupEndValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4892293 "pause"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4892421 "resume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4892549 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "{@inheritDoc}

<p>Starting this <code>AnimatorSet</code> will, in turn, start the animations for which
it is responsible. The details of when exactly those animations are started depends on
the dependency relationships that have been set up between the animations.

<b>Note:</b> Manipulating AnimatorSet's lifecycle in the child animators' listener callbacks
will lead to undefined behaviors. Also, AnimatorSet will ignore any seeking in the child
animators once {@link #start()} is called.
"
      end

      operation 4892677 "startWithoutPulsing"
	package explicit_return_type "void"
	nparams 1
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4892805 "initAnimation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4892933 "start"
	private explicit_return_type "void"
	nparams 2
	  param inout name "inReverse" explicit_type "boolean"
	  param inout name "selfPulse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4893061 "isEmptySet"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "set" type class_ref 1006469 // AnimatorSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Returns true if set is empty or contains nothing but animator sets with no start delay."
      end

      operation 4893189 "updateAnimatorsDuration"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4893317 "skipToEndValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4893445 "animateBasedOnPlayTime"
	package explicit_return_type "void"
	nparams 3
	  param in name "currentPlayTime" explicit_type "long"
	  param in name "lastPlayTime" explicit_type "long"
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Internal only.

This method sets the animation values based on the play time. It also fast forward or
backward all the child animations progress accordingly.

This method is also responsible for calling
{@link android.view.animation.Animation.AnimationListener#onAnimationRepeat(Animation)},
as needed, based on the last play time and current play time.
"
      end

      operation 4893573 "isInitialized"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4893701 "skipToStartValue"
	private explicit_return_type "void"
	nparams 1
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4893829 "setCurrentPlayTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "playTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the position of the animation to the specified point in time. This time should
be between 0 and the total duration of the animation, including any repetition. If
the animation has not yet been started, then it will not advance forward after it is
set to this time; it will simply set the time to this value and perform any appropriate
actions based on that time. If the animation is already running, then setCurrentPlayTime()
will set the current playing time to this value and continue playing from that point.

@param playTime The time, in milliseconds, to which the animation is advanced or rewound.
                Unless the animation is reversing, the playtime is considered the time since
                the end of the start delay of the AnimatorSet in a forward playing direction.

"
      end

      operation 4893957 "getCurrentPlayTime"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the milliseconds elapsed since the start of the animation.

<p>For ongoing animations, this method returns the current progress of the animation in
terms of play time. For an animation that has not yet been started: if the animation has been
seeked to a certain time via {@link #setCurrentPlayTime(long)}, the seeked play time will
be returned; otherwise, this method will return 0.

@return the current position in time of the animation in milliseconds
"
      end

      operation 4894085 "initChildren"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4894213 "doAnimationFrame"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@param frameTime The frame start time, in the {@link SystemClock#uptimeMillis()} time
                 base.
@return
@hide
"
      end

      operation 4894341 "commitAnimationFrame"
	public explicit_return_type "void"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
"
      end

      operation 4894469 "pulseAnimationFrame"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4894597 "handleAnimationEvents"
	private explicit_return_type "void"
	nparams 3
	  param in name "startId" explicit_type "int"
	  param in name "latestId" explicit_type "int"
	  param in name "playTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "When playing forward, we call start() at the animation's scheduled start time, and make sure
to pump a frame at the animation's scheduled end time.

When playing in reverse, we should reverse the animation when we hit animation's end event,
and expect the animation to end at the its delay ended event, rather than start event.
"
      end

      operation 4894725 "pulseFrame"
	private explicit_return_type "void"
	nparams 2
	  param inout name "node" type class_ref 1006853 // Node
	  param in name "animPlayTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This method pulses frames into child animations. It scales the input animation play time
with the duration scale and pass that to the child animation via pulseAnimationFrame(long).

@param node child animator node
@param animPlayTime unscaled play time (including start delay) for the child animator
"
      end

      operation 4894853 "getPlayTimeForNode"
	private explicit_return_type "long"
	nparams 2
	  param in name "overallPlayTime" explicit_type "long"
	  param inout name "node" type class_ref 1006853 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4894981 "getPlayTimeForNode"
	private explicit_return_type "long"
	nparams 3
	  param in name "overallPlayTime" explicit_type "long"
	  param inout name "node" type class_ref 1006853 // Node
	  param inout name "inReverse" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4895109 "startAnimation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4895237 "addDummyListener"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " This is to work around the issue in b/34736819, as the old behavior in AnimatorSet had
 masked a real bug in play movies. TODO: remove this and below once the root cause is fixed."
      end

      operation 4895365 "removeDummyListener"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4895493 "findLatestEventIdForTime"
	private explicit_return_type "int"
	nparams 1
	  param in name "currentPlayTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4895621 "endAnimation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4895749 "removeAnimationCallback"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4895877 "addAnimationCallback"
	private explicit_return_type "void"
	nparams 1
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4896005 "clone"
	public return_type class_ref 1006469 // AnimatorSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4896133 "canReverse"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "AnimatorSet is only reversible when the set contains no sequential animation, and no child
animators have a start delay.
@hide
"
      end

      operation 4896261 "reverse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Plays the AnimatorSet in reverse. If the animation has been seeked to a specific play time
using {@link #setCurrentPlayTime(long)}, it will play backwards from the point seeked when
reverse was called. Otherwise, then it will start from the end and play backwards. This
behavior is only set for the current animation; future playing of the animation will use the
default behavior of playing forward.
<p>
Note: reverse is not supported for infinite AnimatorSet.
"
      end

      operation 4896389 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4896517 "printChildCount"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4896645 "createDependencyGraph"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4896773 "sortAnimationEvents"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4896901 "updatePlayTime"
	private explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 1006853 // Node
	  param inout name "visited" explicit_type "ArrayList<Node>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Based on parent's start/end time, calculate children's start/end time. If cycle exists in
the graph, all the nodes on the cycle will be marked to start at {@link #DURATION_INFINITE},
meaning they will ever play.
"
      end

      operation 4897029 "findSiblings"
	private explicit_return_type "void"
	nparams 2
	  param inout name "node" type class_ref 1006853 // Node
	  param inout name "siblings" explicit_type "ArrayList<Node>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Recursively find all the siblings"
      end

      operation 4897157 "shouldPlayTogether"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@hide
TODO: For animatorSet defined in XML, we can use a flag to indicate what the play order
if defined (i.e. sequential or together), then we can use the flag instead of calculating
dynamically. Note that when AnimatorSet is empty this method returns true.
@return whether all the animators in the set are supposed to play together
"
      end

      operation 4897285 "getTotalDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4897413 "getNodeForAnimation"
	private return_type class_ref 1006853 // Node
	nparams 1
	  param inout name "anim" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 1006597 "Keyframe"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds a time/value pair for an animation. The Keyframe class is used
by {@link ValueAnimator} to define the values that the animation target will have over the course
of the animation. As the time proceeds from one keyframe to the other, the value of the
target object will animate between the value at the previous keyframe and the value at the
next keyframe. Each keyframe also holds an optional {@link TimeInterpolator}
object, which defines the time interpolation over the intervalue preceding the keyframe.

<p>The Keyframe class itself is abstract. The type-specific factory methods will return
a subclass of Keyframe specific to the type of value being stored. This is done to improve
performance when dealing with the most common cases (e.g., <code>float</code> and
<code>int</code> values). Other types will fall into a more general Keyframe class that
treats its values as Objects. Unless your animation requires dealing with a custom type
or a data structure that needs to be animated directly (and evaluated using an implementation
of {@link TypeEvaluator}), you should stick to using float and int as animations using those
types have lower runtime overhead than other types.</p>
"
      classrelation 1449093 // <realization>
	relation 1449093 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1449093 // <realization>
	  b parent class_ref 1004805 // Cloneable
      end

      attribute 3257733 "mHasValue"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Flag to indicate whether this keyframe has a valid value. This flag is used when an
animation first starts, to populate placeholder keyframes with real values derived
from the target object.

"
      end

      attribute 3257861 "mValueWasSetOnStart"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Flag to indicate whether the value in the keyframe was read from the target object or not.
If so, its value will be recalculated if target changes.

"
      end

      attribute 3257989 "mFraction"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The time at which mValue will hold true.

"
      end

      attribute 3258117 "mValueType"
	package explicit_type "Class"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The type of the value in this Keyframe. This type is determined at construction time,
based on the type of the <code>value</code> object passed into the constructor.

"
      end

      classrelation 1449221 // mInterpolator (<unidirectional association>)
	relation 1449221 --->
	  a role_name "mInterpolator" init_value " null" private
	    comment "
The optional time interpolator for the interval preceding this keyframe. A null interpolator
(the default) results in linear interpolation over the interval.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1449221 // mInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      operation 4906501 "ofInt"
	class_operation public return_type class_ref 1006597 // Keyframe
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs a Keyframe object with the given time and value. The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
@param value The value that the object will animate to as the animation time approaches
the time in this keyframe, and the the value animated from as the time passes the time in
this keyframe.
"
      end

      operation 4906629 "ofInt"
	class_operation public return_type class_ref 1006597 // Keyframe
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs a Keyframe object with the given time. The value at this time will be derived
from the target object when the animation first starts (note that this implies that keyframes
with no initial value must be used as part of an {@link ObjectAnimator}).
The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
"
      end

      operation 4906757 "ofFloat"
	class_operation public return_type class_ref 1006597 // Keyframe
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs a Keyframe object with the given time and value. The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
@param value The value that the object will animate to as the animation time approaches
the time in this keyframe, and the the value animated from as the time passes the time in
this keyframe.
"
      end

      operation 4906885 "ofFloat"
	class_operation public return_type class_ref 1006597 // Keyframe
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs a Keyframe object with the given time. The value at this time will be derived
from the target object when the animation first starts (note that this implies that keyframes
with no initial value must be used as part of an {@link ObjectAnimator}).
The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
"
      end

      operation 4907013 "ofObject"
	class_operation public return_type class_ref 1006597 // Keyframe
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param inout name "value" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs a Keyframe object with the given time and value. The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
@param value The value that the object will animate to as the animation time approaches
the time in this keyframe, and the the value animated from as the time passes the time in
this keyframe.
"
      end

      operation 4907141 "ofObject"
	class_operation public return_type class_ref 1006597 // Keyframe
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs a Keyframe object with the given time. The value at this time will be derived
from the target object when the animation first starts (note that this implies that keyframes
with no initial value must be used as part of an {@link ObjectAnimator}).
The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
"
      end

      operation 4907269 "hasValue"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Indicates whether this keyframe has a valid value. This method is called internally when
an {@link ObjectAnimator} first starts; keyframes without values are assigned values at
that time by deriving the value for the property from the target object.

@return boolean Whether this object has a value assigned.
"
      end

      operation 4907397 "valueWasSetOnStart"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "If the Keyframe's value was acquired from the target object, this flag should be set so that,
if target changes, value will be reset.

@return boolean Whether this Keyframe's value was retieved from the target object or not.
"
      end

      operation 4907525 "setValueWasSetOnStart"
	package explicit_return_type "void"
	nparams 1
	  param inout name "valueWasSetOnStart" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4907653 "getValue"
	abstract public explicit_return_type "Object"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the value for this Keyframe.

@return The value for this Keyframe.
"
      end

      operation 4907781 "setValue"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the value for this Keyframe.

@param value value for this Keyframe.
"
      end

      operation 4907909 "getFraction"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the time for this keyframe, as a fraction of the overall animation duration.

@return The time associated with this keyframe, as a fraction of the overall animation
duration. This should be a value between 0 and 1.
"
      end

      operation 4908037 "setFraction"
	public explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the time for this keyframe, as a fraction of the overall animation duration.

@param fraction time associated with this keyframe, as a fraction of the overall animation
duration. This should be a value between 0 and 1.
"
      end

      operation 4908165 "getInterpolator"
	public return_type class_ref 1005317 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
that there is no interpolation, which is the same as linear interpolation.

@return The optional interpolator for this Keyframe.
"
      end

      operation 4908293 "setInterpolator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "interpolator" type class_ref 1005317 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
that there is no interpolation, which is the same as linear interpolation.

@return The optional interpolator for this Keyframe.
"
      end

      operation 4908421 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the type of keyframe. This information is used by ValueAnimator to determine the type of
{@link TypeEvaluator} to use when calculating values between keyframes. The type is based
on the type of Keyframe created.

@return The type of the value stored in the Keyframe.
"
      end

      operation 4908549 "clone"
	abstract public return_type class_ref 1006597 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      class 1009285 "ObjectKeyframe"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1449349 // <generalisation>
	  relation 1449349 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1449349 // <generalisation>
	    b parent class_ref 1006597 // Keyframe
	end

	attribute 3258245 "mValue"
	  package explicit_type "Object"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	  comment "The value of the animation at the time mFraction.

"
	end

	operation 4908677 "ObjectKeyframe"
	  package explicit_return_type ""
	  nparams 2
	    param in name "fraction" explicit_type "float"
	    param inout name "value" explicit_type "Object"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4908805 "getValue"
	  public explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4908933 "setValue"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4909061 "clone"
	  public return_type class_ref 1009285 // ObjectKeyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1009413 "IntKeyframe"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1449477 // <generalisation>
	  relation 1449477 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1449477 // <generalisation>
	    b parent class_ref 1006597 // Keyframe
	end

	attribute 3258373 "mValue"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	  comment "The value of the animation at the time mFraction.

"
	end

	operation 4909189 "IntKeyframe"
	  package explicit_return_type ""
	  nparams 2
	    param in name "fraction" explicit_type "float"
	    param in name "value" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4909317 "IntKeyframe"
	  package explicit_return_type ""
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4909445 "getIntValue"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4909573 "getValue"
	  public explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4909701 "setValue"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4909829 "clone"
	  public return_type class_ref 1009413 // IntKeyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1009541 "FloatKeyframe"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1449605 // <generalisation>
	  relation 1449605 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1449605 // <generalisation>
	    b parent class_ref 1006597 // Keyframe
	end

	attribute 3258501 "mValue"
	  package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	  comment "The value of the animation at the time mFraction.

"
	end

	operation 4909957 "FloatKeyframe"
	  package explicit_return_type ""
	  nparams 2
	    param in name "fraction" explicit_type "float"
	    param in name "value" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4910085 "FloatKeyframe"
	  package explicit_return_type ""
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4910213 "getFloatValue"
	  public explicit_return_type "float"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4910341 "getValue"
	  public explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4910469 "setValue"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4910597 "clone"
	  public return_type class_ref 1009541 // FloatKeyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end
    end

    class 1006725 "AnimatorListenerAdapter"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This adapter class provides empty implementations of the methods from {@link android.animation.Animator.AnimatorListener}.
Any custom listener that cares only about a subset of the methods of this listener can
simply subclass this adapter class instead of implementing the interface directly.
"
      classrelation 1443461 // <realization>
	relation 1443461 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1443461 // <realization>
	  b parent class_ref 1004933 // AnimatorListener
      end

      classrelation 1443589 // <realization>
	relation 1443589 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1443589 // <realization>
	  b parent class_ref 1005061 // AnimatorPauseListener
      end

      operation 4888709 "onAnimationCancel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "{@inheritDoc}
"
      end

      operation 4888837 "onAnimationEnd"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "{@inheritDoc}
"
      end

      operation 4888965 "onAnimationRepeat"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "{@inheritDoc}
"
      end

      operation 4889093 "onAnimationStart"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "{@inheritDoc}
"
      end

      operation 4889221 "onAnimationPause"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "{@inheritDoc}
"
      end

      operation 4889349 "onAnimationResume"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 1004677 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "{@inheritDoc}
"
      end
    end

    class 1007365 "ArgbEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 1006085 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between integer
values that represent ARGB colors.
"
      classrelation 1446149 // <realization>
	relation 1446149 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1446149 // <realization>
	  b parent class_ref 1006085 // TypeEvaluator
      end

      classrelation 1446277 // sInstance (<unidirectional association>)
	relation 1446277 --->
	  a role_name "sInstance" init_value " new ArgbEvaluator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1446277 // sInstance (<unidirectional association>)
	  b parent class_ref 1007365 // ArgbEvaluator
      end

      operation 4900101 "getInstance"
	class_operation public return_type class_ref 1007365 // ArgbEvaluator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns an instance of <code>ArgbEvaluator</code> that may be used in
{@link ValueAnimator#setEvaluator(TypeEvaluator)}. The same instance may
be used in multiple <code>Animator</code>s because it holds no state.
@return An instance of <code>ArgbEvalutor</code>.

@hide
"
      end

      operation 4900229 "evaluate"
	public explicit_return_type "Object"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "Object"
	  param inout name "endValue" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function returns the calculated in-between value for a color
given integers that represent the start and end values in the four
bytes of the 32-bit int. Each channel is separately linearly interpolated
and the resulting calculated values are recombined into the return value.

@param fraction The fraction from the starting to the ending values
@param startValue A 32-bit int value representing colors in the
separate bytes of the parameter
@param endValue A 32-bit int value representing colors in the
separate bytes of the parameter
@return A value that is calculated to be the linearly interpolated
result, derived by separating the start and end values into separate
color channels and interpolating each one separately, recombining the
resulting values in the same way.
"
      end
    end

    class 1007493 "BidirectionalTypeConverter"
      abstract visibility public 
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1007621 // TypeConverter
        rank 0 explicit_value ""
      actual class class_ref 1007621 // TypeConverter
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class used convert type T to another type V and back again. This
is necessary when the value types of in animation are different from the property
type. BidirectionalTypeConverter is needed when only the final value for the
animation is supplied to animators.
@see PropertyValuesHolder#setConverter(TypeConverter)
"
      classrelation 1446405 // <realization>
	relation 1446405 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1446405 // <realization>
	  b parent class_ref 1007621 // TypeConverter
      end

      classrelation 1446533 // mInvertedConverter (<unidirectional association>)
	relation 1446533 --->
	  a role_name "mInvertedConverter" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1446533 // mInvertedConverter (<unidirectional association>)
	  b parent class_ref 1007493 // BidirectionalTypeConverter
      end

      operation 4900869 "BidirectionalTypeConverter"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "fromClass" explicit_type "Class<T>"
	  param inout name "toClass" explicit_type "Class<V>"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4900997 "convertBack"
	abstract cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Does a conversion from the target type back to the source type. The subclass
must implement this when a TypeConverter is used in animations and current
values will need to be read for an animation.
@param value The Object to convert.
@return A value of type T, converted from <code>value</code>.
"
      end

      operation 4901125 "invert"
	cpp_inline public return_type class_ref 1007493 // BidirectionalTypeConverter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V, T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the inverse of this converter, where the from and to classes are reversed.
The inverted converter uses this convert to call {@link #convertBack(Object)} for
{@link #convert(Object)} calls and {@link #convert(Object)} for
{@link #convertBack(Object)} calls.
@return The inverse of this converter, where the from and to classes are reversed.
"
      end

      class 1007749 "InvertedConverter"
	visibility private 
	nformals 2
	formal name "From" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "To" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1007493 // BidirectionalTypeConverter
	  rank 0 explicit_value ""
	actual class class_ref 1007493 // BidirectionalTypeConverter
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1446661 // <realization>
	  relation 1446661 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1446661 // <realization>
	    b parent class_ref 1007493 // BidirectionalTypeConverter
	end

	classrelation 1446789 // mConverter (<unidirectional association>)
	  relation 1446789 --->
	    a role_name "mConverter" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<To, From> ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 1446789 // mConverter (<unidirectional association>)
	    b parent class_ref 1007493 // BidirectionalTypeConverter
	end

	operation 4901253 "InvertedConverter"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "converter" type class_ref 1007493 // BidirectionalTypeConverter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<To, From> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4901381 "convertBack"
	  cpp_inline public explicit_return_type "From"
	  nparams 1
	    param inout name "value" explicit_type "To"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4901509 "convert"
	  cpp_inline public explicit_return_type "To"
	  nparams 1
	    param inout name "value" explicit_type "From"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end
    end

    class 1007621 "TypeConverter"
      abstract visibility public 
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class used convert type T to another type V. This
is necessary when the value types of in animation are different
from the property type.
@see PropertyValuesHolder#setConverter(TypeConverter)
"
      attribute 3257093 "mFromClass"
	private explicit_type "T"
	stereotype "Class"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3257221 "mToClass"
	private explicit_type "V"
	stereotype "Class"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 4900357 "TypeConverter"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "fromClass" explicit_type "Class<T>"
	  param inout name "toClass" explicit_type "Class<V>"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4900485 "getTargetType"
	cpp_inline package explicit_return_type "Class<V>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the target converted type. Used by the animation system to determine
the proper setter function to call.
@return The Class to convert the input to.
"
      end

      operation 4900613 "getSourceType"
	cpp_inline package explicit_return_type "Class<T>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the source conversion type.
"
      end

      operation 4900741 "convert"
	abstract cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "value" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Converts a value from one type to another.
@param value The Object to convert.
@return A value of type V, converted from <code>value</code>.
"
      end
    end

    class 1007877 "FloatArrayEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 1006085 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>float[]</code> values.
Each index into the array is treated as a separate value to interpolate. For example,
evaluating <code>{100, 200}</code> and <code>{300, 400}</code> will interpolate the value at
the first index between 100 and 300 and the value at the second index value between 200 and 400.
"
      classrelation 1446917 // <realization>
	relation 1446917 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1446917 // <realization>
	  b parent class_ref 1006085 // TypeEvaluator
      end

      attribute 3257349 "mArray"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 4901637 "FloatArrayEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Create a FloatArrayEvaluator that does not reuse the animated value. Care must be taken
when using this option because on every evaluation a new <code>float[]</code> will be
allocated.

@see #FloatArrayEvaluator(float[])
"
      end

      operation 4901765 "FloatArrayEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuseArray" explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Create a FloatArrayEvaluator that reuses <code>reuseArray</code> for every evaluate() call.
Caution must be taken to ensure that the value returned from
{@link android.animation.ValueAnimator#getAnimatedValue()} is not cached, modified, or
used across threads. The value will be modified on each <code>evaluate()</code> call.

@param reuseArray The array to modify and return from <code>evaluate</code>.
"
      end

      operation 4901893 "evaluate"
	public explicit_return_type "float"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "float"
	multiplicity "[]"
	  param inout name "endValue" explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Interpolates the value at each index by the fraction. If
{@link #FloatArrayEvaluator(float[])} was used to construct this object,
<code>reuseArray</code> will be returned, otherwise a new <code>float[]</code>
will be returned.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value.
@param endValue   The end value.
@return A <code>float[]</code> where each element is an interpolation between
        the same index in startValue and endValue.
"
      end
    end

    class 1008005 "FloatEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 1006085 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>float</code> values.
"
      classrelation 1447045 // <realization>
	relation 1447045 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1447045 // <realization>
	  b parent class_ref 1006085 // TypeEvaluator
      end

      operation 4902021 "evaluate"
	public explicit_return_type "Float"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "Number"
	  param inout name "endValue" explicit_type "Number"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function returns the result of linearly interpolating the start and end values, with
<code>fraction</code> representing the proportion between the start and end values. The
calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
and <code>t</code> is <code>fraction</code>.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value; should be of type <code>float</code> or
                  <code>Float</code>
@param endValue   The end value; should be of type <code>float</code> or <code>Float</code>
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 1008133 "FloatKeyframeSet"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds a collection of FloatKeyframe objects and is called by ValueAnimator to calculate
values between those keyframes for a given animation. The class internal to the animation
package because it is an implementation detail of how Keyframes are stored and used.

<p>This type-specific subclass of KeyframeSet, along with the other type-specific subclass for
int, exists to speed up the getValue() method when there is no custom
TypeEvaluator set for the animation, so that values can be calculated without autoboxing to the
Object equivalents of these primitive types.</p>
"
      classrelation 1448325 // <generalisation>
	relation 1448325 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1448325 // <generalisation>
	  b parent class_ref 1008261 // KeyframeSet
      end

      classrelation 1448453 // <realization>
	relation 1448453 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1448453 // <realization>
	  b parent class_ref 1008645 // FloatKeyframes
      end

      operation 4904709 "FloatKeyframeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "FloatKeyframe...keyframes"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4904837 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4904965 "clone"
	public return_type class_ref 1008133 // FloatKeyframeSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4905093 "getFloatValue"
	public explicit_return_type "float"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4905221 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 1008261 "KeyframeSet"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds a collection of Keyframe objects and is called by ValueAnimator to calculate
values between those keyframes for a given animation. The class internal to the animation
package because it is an implementation detail of how Keyframes are stored and used.
@hide
"
      classrelation 1447557 // <realization>
	relation 1447557 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1447557 // <realization>
	  b parent class_ref 1008389 // Keyframes
      end

      attribute 3257477 "mNumKeyframes"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1447685 // mFirstKeyframe (<unidirectional association>)
	relation 1447685 --->
	  a role_name "mFirstKeyframe" package
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1447685 // mFirstKeyframe (<unidirectional association>)
	  b parent class_ref 1006597 // Keyframe
      end

      classrelation 1447813 // mLastKeyframe (<unidirectional association>)
	relation 1447813 --->
	  a role_name "mLastKeyframe" package
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1447813 // mLastKeyframe (<unidirectional association>)
	  b parent class_ref 1006597 // Keyframe
      end

      classrelation 1447941 // mInterpolator (<unidirectional association>)
	relation 1447941 --->
	  a role_name "mInterpolator" package
	    comment " only used in the 2-keyframe case"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1447941 // mInterpolator (<unidirectional association>)
	  b parent class_ref 1005317 // TimeInterpolator
      end

      classrelation 1448069 // mKeyframes (<unidirectional association>)
	relation 1448069 --->
	  stereotype "List"
	  a role_name "mKeyframes" package
	    comment " only used when there are not 2 keyframes"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1448069 // mKeyframes (<unidirectional association>)
	  b parent class_ref 1006597 // Keyframe
      end

      classrelation 1448197 // mEvaluator (<unidirectional association>)
	relation 1448197 --->
	  a role_name "mEvaluator" package
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1448197 // mEvaluator (<unidirectional association>)
	  b parent class_ref 1006085 // TypeEvaluator
      end

      operation 4903045 "KeyframeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "Keyframe...keyframes"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4903173 "getKeyframes"
	public return_type class_ref 1006597 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4903301 "ofInt"
	class_operation public return_type class_ref 1008261 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4903429 "ofFloat"
	class_operation public return_type class_ref 1008261 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4903557 "ofKeyframe"
	class_operation public return_type class_ref 1008261 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "Keyframe...keyframes"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4903685 "ofObject"
	class_operation public return_type class_ref 1008261 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4903813 "ofPath"
	class_operation public return_type class_ref 1008773 // PathKeyframes
	nparams 1
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4903941 "ofPath"
	class_operation public return_type class_ref 1008773 // PathKeyframes
	nparams 2
	  param inout name "path" explicit_type "Path"
	  param in name "error" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4904069 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the TypeEvaluator to be used when calculating animated values. This object
is required only for KeyframeSets that are not either IntKeyframeSet or FloatKeyframeSet,
both of which assume their own evaluator to speed up calculations with those primitive
types.

@param evaluator The TypeEvaluator to be used to calculate animated values.
"
      end

      operation 4904197 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4904325 "clone"
	public return_type class_ref 1008261 // KeyframeSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4904453 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the animated value, given the elapsed fraction of the animation (interpolated by the
animation's interpolator) and the evaluator used to calculate in-between values. This
function maps the input fraction to the appropriate keyframe interval and a fraction
between them and returns the interpolated value. Note that the input fraction may fall
outside the [0-1] bounds, if the animation's interpolator made that happen (e.g., a
spring interpolation that might send the fraction past 1.0). We handle this situation by
just using the two keyframes at the appropriate end when the value is outside those bounds.

@param fraction The elapsed fraction of the animation
@return The animated value.
"
      end

      operation 4904581 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 1008389 "Keyframes"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface abstracts a collection of Keyframe objects and is called by
ValueAnimator to calculate values between those keyframes for a given animation.
@hide
"
      classrelation 1447173 // <generalisation>
	relation 1447173 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1447173 // <generalisation>
	  b parent class_ref 1004805 // Cloneable
      end

      operation 4902149 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the TypeEvaluator to be used when calculating animated values. This object
is required only for Keyframes that are not either IntKeyframes or FloatKeyframes,
both of which assume their own evaluator to speed up calculations with those primitive
types.

@param evaluator The TypeEvaluator to be used to calculate animated values.
"
      end

      operation 4902277 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@return The value type contained by the contained Keyframes.
"
      end

      operation 4902405 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the animated value, given the elapsed fraction of the animation (interpolated by the
animation's interpolator) and the evaluator used to calculate in-between values. This
function maps the input fraction to the appropriate keyframe interval and a fraction
between them and returns the interpolated value. Note that the input fraction may fall
outside the [0-1] bounds, if the animation's interpolator made that happen (e.g., a
spring interpolation that might send the fraction past 1.0). We handle this situation by
just using the two keyframes at the appropriate end when the value is outside those bounds.

@param fraction The elapsed fraction of the animation
@return The animated value.
"
      end

      operation 4902533 "getKeyframes"
	public return_type class_ref 1006597 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "@return A list of all Keyframes contained by this. This may return null if this is
not made up of Keyframes.
"
      end

      operation 4902661 "clone"
	public return_type class_ref 1008389 // Keyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      class 1008517 "IntKeyframes"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1447301 // <generalisation>
	  relation 1447301 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1447301 // <generalisation>
	    b parent class_ref 1008389 // Keyframes
	end

	operation 4902789 "getIntValue"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Works like {@link #getValue(float)}, but returning a primitive.
@param fraction The elapsed fraction of the animation
@return The animated value.
"
	end
      end

      class 1008645 "FloatKeyframes"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1447429 // <generalisation>
	  relation 1447429 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1447429 // <generalisation>
	    b parent class_ref 1008389 // Keyframes
	end

	operation 4902917 "getFloatValue"
	  public explicit_return_type "float"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Works like {@link #getValue(float)}, but returning a primitive.
@param fraction The elapsed fraction of the animation
@return The animated value.
"
	end
      end
    end

    class 1008773 "PathKeyframes"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "PathKeyframes relies on approximating the Path as a series of line segments.
The line segments are recursively divided until there is less than 1/2 pixel error
between the lines and the curve. Each point of the line segment is converted
to a Keyframe and a linear interpolation between Keyframes creates a good approximation
of the curve.
<p>
PathKeyframes is optimized to reduce the number of objects created when there are
many keyframes for a curve.
</p>
<p>
Typically, the returned type is a PointF, but the individual components can be extracted
as either an IntKeyframes or FloatKeyframes.
</p>
@hide
"
      classrelation 1456517 // <realization>
	relation 1456517 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1456517 // <realization>
	  b parent class_ref 1008389 // Keyframes
      end

      attribute 3268357 "FRACTION_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3268485 "X_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3268613 "Y_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3268741 "NUM_COMPONENTS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1456645 // EMPTY_KEYFRAMES (<unidirectional association>)
	relation 1456645 --->
	  stereotype "ArrayList"
	  a role_name "EMPTY_KEYFRAMES" init_value " new ArrayList<Keyframe>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1456645 // EMPTY_KEYFRAMES (<unidirectional association>)
	  b parent class_ref 1006597 // Keyframe
      end

      attribute 3268869 "mTempPointF"
	private explicit_type "PointF"
	init_value " new PointF()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 3268997 "mKeyframeData"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 4941189 "PathKeyframes"
	public explicit_return_type ""
	nparams 1
	  param inout name "path" explicit_type "Path"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4941317 "PathKeyframes"
	public explicit_return_type ""
	nparams 2
	  param inout name "path" explicit_type "Path"
	  param in name "error" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4941445 "getKeyframes"
	public return_type class_ref 1006597 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4941573 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4941701 "interpolateInRange"
	private explicit_return_type "PointF"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param in name "startIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4941829 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4941957 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4942085 "clone"
	public return_type class_ref 1008389 // Keyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4942213 "pointForIndex"
	private explicit_return_type "PointF"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4942341 "interpolate"
	class_operation private explicit_return_type "float"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param in name "startValue" explicit_type "float"
	  param in name "endValue" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4942469 "createXFloatKeyframes"
	public return_type class_ref 1008645 // FloatKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a FloatKeyframes for the X component of the Path.
@return a FloatKeyframes for the X component of the Path.
"
      end

      operation 4942597 "createYFloatKeyframes"
	public return_type class_ref 1008645 // FloatKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a FloatKeyframes for the Y component of the Path.
@return a FloatKeyframes for the Y component of the Path.
"
      end

      operation 4942725 "createXIntKeyframes"
	public return_type class_ref 1008517 // IntKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns an IntKeyframes for the X component of the Path.
@return an IntKeyframes for the X component of the Path.
"
      end

      operation 4942853 "createYIntKeyframes"
	public return_type class_ref 1008517 // IntKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns an IntKeyframeSet for the Y component of the Path.
@return an IntKeyframeSet for the Y component of the Path.
"
      end

      class 1011717 "SimpleKeyframes"
	abstract visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1456773 // <realization>
	  relation 1456773 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1456773 // <realization>
	    b parent class_ref 1008389 // Keyframes
	end

	operation 4942981 "setEvaluator"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "evaluator" type class_ref 1006085 // TypeEvaluator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4943109 "getKeyframes"
	  public return_type class_ref 1006597 // Keyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4943237 "clone"
	  public return_type class_ref 1008389 // Keyframes
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1011845 "IntKeyframesBase"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1456901 // <generalisation>
	  relation 1456901 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1456901 // <generalisation>
	    b parent class_ref 1011717 // SimpleKeyframes
	end

	classrelation 1457029 // <realization>
	  relation 1457029 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1457029 // <realization>
	    b parent class_ref 1008517 // IntKeyframes
	end

	operation 4943365 "getType"
	  public explicit_return_type "Class"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4943493 "getValue"
	  public explicit_return_type "Object"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1011973 "FloatKeyframesBase"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1457157 // <generalisation>
	  relation 1457157 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1457157 // <generalisation>
	    b parent class_ref 1011717 // SimpleKeyframes
	end

	classrelation 1457285 // <realization>
	  relation 1457285 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 1457285 // <realization>
	    b parent class_ref 1008645 // FloatKeyframes
	end

	operation 4943621 "getType"
	  public explicit_return_type "Class"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 4943749 "getValue"
	  public explicit_return_type "Object"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end
    end

    class 1008901 "IntArrayEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 1006085 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>int[]</code> values.
Each index into the array is treated as a separate value to interpolate. For example,
evaluating <code>{100, 200}</code> and <code>{300, 400}</code> will interpolate the value at
the first index between 100 and 300 and the value at the second index value between 200 and 400.
"
      classrelation 1448581 // <realization>
	relation 1448581 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1448581 // <realization>
	  b parent class_ref 1006085 // TypeEvaluator
      end

      attribute 3257605 "mArray"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 4905349 "IntArrayEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Create an IntArrayEvaluator that does not reuse the animated value. Care must be taken
when using this option because on every evaluation a new <code>int[]</code> will be
allocated.

@see #IntArrayEvaluator(int[])
"
      end

      operation 4905477 "IntArrayEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuseArray" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Create an IntArrayEvaluator that reuses <code>reuseArray</code> for every evaluate() call.
Caution must be taken to ensure that the value returned from
{@link android.animation.ValueAnimator#getAnimatedValue()} is not cached, modified, or
used across threads. The value will be modified on each <code>evaluate()</code> call.

@param reuseArray The array to modify and return from <code>evaluate</code>.
"
      end

      operation 4905605 "evaluate"
	public explicit_return_type "int"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "int"
	multiplicity "[]"
	  param inout name "endValue" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Interpolates the value at each index by the fraction. If {@link #IntArrayEvaluator(int[])}
was used to construct this object, <code>reuseArray</code> will be returned, otherwise
a new <code>int[]</code> will be returned.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value.
@param endValue   The end value.
@return An <code>int[]</code> where each element is an interpolation between
        the same index in startValue and endValue.
"
      end
    end

    class 1009029 "IntEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 1006085 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>int</code> values.
"
      classrelation 1448709 // <realization>
	relation 1448709 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1448709 // <realization>
	  b parent class_ref 1006085 // TypeEvaluator
      end

      operation 4905733 "evaluate"
	public explicit_return_type "Integer"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "Integer"
	  param inout name "endValue" explicit_type "Integer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function returns the result of linearly interpolating the start and end values, with
<code>fraction</code> representing the proportion between the start and end values. The
calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
and <code>t</code> is <code>fraction</code>.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value; should be of type <code>int</code> or
                  <code>Integer</code>
@param endValue   The end value; should be of type <code>int</code> or <code>Integer</code>
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 1009157 "IntKeyframeSet"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds a collection of IntKeyframe objects and is called by ValueAnimator to calculate
values between those keyframes for a given animation. The class internal to the animation
package because it is an implementation detail of how Keyframes are stored and used.

<p>This type-specific subclass of KeyframeSet, along with the other type-specific subclass for
float, exists to speed up the getValue() method when there is no custom
TypeEvaluator set for the animation, so that values can be calculated without autoboxing to the
Object equivalents of these primitive types.</p>
"
      classrelation 1448837 // <generalisation>
	relation 1448837 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1448837 // <generalisation>
	  b parent class_ref 1008261 // KeyframeSet
      end

      classrelation 1448965 // <realization>
	relation 1448965 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1448965 // <realization>
	  b parent class_ref 1008517 // IntKeyframes
      end

      operation 4905861 "IntKeyframeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "IntKeyframe...keyframes"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4905989 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4906117 "clone"
	public return_type class_ref 1009157 // IntKeyframeSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4906245 "getIntValue"
	public explicit_return_type "int"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4906373 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 1012101 "PointFEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 1006085 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>PointF</code> values.
"
      classrelation 1457413 // <realization>
	relation 1457413 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1457413 // <realization>
	  b parent class_ref 1006085 // TypeEvaluator
      end

      attribute 3269125 "mPoint"
	private explicit_type "PointF"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "When null, a new PointF is returned on every evaluate call. When non-null,
mPoint will be modified and returned on every evaluate.

"
      end

      operation 4943877 "PointFEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Construct a PointFEvaluator that returns a new PointF on every evaluate call.
To avoid creating an object for each evaluate call,
{@link PointFEvaluator#PointFEvaluator(android.graphics.PointF)} should be used
whenever possible.
"
      end

      operation 4944005 "PointFEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuse" explicit_type "PointF"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs a PointFEvaluator that modifies and returns <code>reuse</code>
in {@link #evaluate(float, android.graphics.PointF, android.graphics.PointF)} calls.
The value returned from
{@link #evaluate(float, android.graphics.PointF, android.graphics.PointF)} should
not be cached because it will change over time as the object is reused on each
call.

@param reuse A PointF to be modified and returned by evaluate.
"
      end

      operation 4944133 "evaluate"
	public explicit_return_type "PointF"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "PointF"
	  param inout name "endValue" explicit_type "PointF"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function returns the result of linearly interpolating the start and
end PointF values, with <code>fraction</code> representing the proportion
between the start and end values. The calculation is a simple parametric
calculation on each of the separate components in the PointF objects
(x, y).

<p>If {@link #PointFEvaluator(android.graphics.PointF)} was used to construct
this PointFEvaluator, the object returned will be the <code>reuse</code>
passed into the constructor.</p>

@param fraction   The fraction from the starting to the ending values
@param startValue The start PointF
@param endValue   The end PointF
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 1013509 "RectEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 1006085 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>Rect</code> values.
"
      classrelation 1459845 // <realization>
	relation 1459845 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1459845 // <realization>
	  b parent class_ref 1006085 // TypeEvaluator
      end

      attribute 3272709 "mRect"
	private explicit_type "Rect"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "When null, a new Rect is returned on every evaluate call. When non-null,
mRect will be modified and returned on every evaluate.

"
      end

      operation 4957061 "RectEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Construct a RectEvaluator that returns a new Rect on every evaluate call.
To avoid creating an object for each evaluate call,
{@link RectEvaluator#RectEvaluator(android.graphics.Rect)} should be used
whenever possible.
"
      end

      operation 4957189 "RectEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuseRect" explicit_type "Rect"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructs a RectEvaluator that modifies and returns <code>reuseRect</code>
in {@link #evaluate(float, android.graphics.Rect, android.graphics.Rect)} calls.
The value returned from
{@link #evaluate(float, android.graphics.Rect, android.graphics.Rect)} should
not be cached because it will change over time as the object is reused on each
call.

@param reuseRect A Rect to be modified and returned by evaluate.
"
      end

      operation 4957317 "evaluate"
	public explicit_return_type "Rect"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "Rect"
	  param inout name "endValue" explicit_type "Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "This function returns the result of linearly interpolating the start and
end Rect values, with <code>fraction</code> representing the proportion
between the start and end values. The calculation is a simple parametric
calculation on each of the separate components in the Rect objects
(left, top, right, and bottom).

<p>If {@link #RectEvaluator(android.graphics.Rect)} was used to construct
this RectEvaluator, the object returned will be the <code>reuseRect</code>
passed into the constructor.</p>

@param fraction   The fraction from the starting to the ending values
@param startValue The start Rect
@param endValue   The end Rect
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 1013637 "RevealAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Reveals a View with an animated clipping circle.
The clipping is implemented efficiently by talking to a private reveal API on View.
This hidden class currently only accessed by the {@link android.view.View}.

@hide
"
      classrelation 1461253 // <generalisation>
	relation 1461253 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1461253 // <generalisation>
	  b parent class_ref 1013765 // RenderNodeAnimator
      end

      classrelation 1461381 // mClipView (<unidirectional association>)
	relation 1461381 --->
	  a role_name "mClipView" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1461381 // mClipView (<unidirectional association>)
	  b parent class_ref 970757 // View
      end

      operation 4964741 "RevealAnimator"
	public explicit_return_type ""
	nparams 5
	  param inout name "clipView" type class_ref 970757 // View
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "startRadius" explicit_type "float"
	  param in name "endRadius" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4964869 "onFinished"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 1014405 "TimeAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides a simple callback mechanism to listeners that is synchronized with all
other animators in the system. There is no duration, interpolation, or object value-setting
with this Animator. Instead, it is simply started, after which it proceeds to send out events
on every animation frame to its TimeListener (if set), with information about this animator,
the total elapsed time, and the elapsed time since the previous animation frame.
"
      classrelation 1462789 // <generalisation>
	relation 1462789 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 1462789 // <generalisation>
	  b parent class_ref 1006341 // ValueAnimator
      end

      class 1014533 "TimeListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	operation 4968709 "onTimeUpdate"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "animation" type class_ref 1014405 // TimeAnimator
	    param in name "totalTime" explicit_type "long"
	    param in name "deltaTime" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "<p>Notifies listeners of the occurrence of another frame of the animation,
along with information about the elapsed time.</p>

@param animation The animator sending out the notification.
@param totalTime The total time elapsed since the animator started, in milliseconds.
@param deltaTime The time elapsed since the previous frame, in milliseconds.
"
	end
      end

      classrelation 1462917 // mListener (<unidirectional association>)
	relation 1462917 --->
	  a role_name "mListener" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 1462917 // mListener (<unidirectional association>)
	  b parent class_ref 1014533 // TimeListener
      end

      attribute 3276805 "mPreviousTime"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 4967941 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4968069 "animateBasedOnTime"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "currentTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4968197 "setCurrentPlayTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "playTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4968325 "setTimeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1014533 // TimeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets a listener that is sent update events throughout the life of
an animation.

@param listener the listener to be set.
"
      end

      operation 4968453 "animateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 4968581 "initAnimation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end
  end

  deploymentview 192645 "animation"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 521861 "AnimationHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.SystemClock;
import android.util.ArrayMap;
import android.view.Choreographer;
import java.util.ArrayList;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1003781 // AnimationHandler
      end
      comment "Copyright (C) 2015 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 522117 "Animator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.Nullable;
import android.content.pm.ActivityInfo.Config;
import android.content.res.ConstantState;
import java.util.ArrayList;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1004677 // Animator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 522245 "TypeEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1006085 // TypeEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 522373 "AnimatorInflater"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.AnimatorRes;
import android.annotation.AnyRes;
import android.annotation.NonNull;
import android.content.Context;
import android.content.pm.ActivityInfo.Config;
import android.content.res.ConfigurationBoundResourceCache;
import android.content.res.ConstantState;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.Path;
import android.util.AttributeSet;
import android.util.Log;
import android.util.PathParser;
import android.util.StateSet;
import android.util.TypedValue;
import android.util.Xml;
import android.view.InflateException;
import android.view.animation.AnimationUtils;
import android.view.animation.BaseInterpolator;
import android.view.animation.Interpolator;
import com.android.internal.R;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import java.io.IOException;
import java.util.ArrayList;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1005573 // AnimatorInflater
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 522501 "AnimatorListenerAdapter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1006725 // AnimatorListenerAdapter
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 522629 "AnimatorSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.app.ActivityThread;
import android.app.Application;
import android.os.Build;
import android.os.Looper;
import android.util.AndroidRuntimeException;
import android.util.ArrayMap;
import android.util.Log;
import android.view.animation.Animation;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1006469 // AnimatorSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 522757 "ArgbEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1007365 // ArgbEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 522885 "TypeConverter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1007621 // TypeConverter
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 523013 "BidirectionalTypeConverter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1007493 // BidirectionalTypeConverter
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 523141 "FloatArrayEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1007877 // FloatArrayEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 523269 "FloatEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1008005 // FloatEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 523397 "Keyframes"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1008389 // Keyframes
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 523525 "KeyframeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Keyframe.FloatKeyframe;
import android.animation.Keyframe.IntKeyframe;
import android.animation.Keyframe.ObjectKeyframe;
import android.graphics.Path;
import android.util.Log;
import java.util.Arrays;
import java.util.List;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1008261 // KeyframeSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 523653 "FloatKeyframeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Keyframe.FloatKeyframe;
import java.util.List;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1008133 // FloatKeyframeSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 523781 "IntArrayEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1008901 // IntArrayEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 523909 "IntEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1009029 // IntEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 524037 "IntKeyframeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Keyframe.IntKeyframe;
import java.util.List;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1009157 // IntKeyframeSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 524165 "Keyframe"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1006597 // Keyframe
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 524421 "LayoutTransition"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.ViewTreeObserver;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 987013 // LayoutTransition
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 524549 "ValueAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.CallSuper;
import android.annotation.IntDef;
import android.annotation.TestApi;
import android.os.Looper;
import android.os.Trace;
import android.util.AndroidRuntimeException;
import android.util.Log;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.animation.LinearInterpolator;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.ArrayList;
import java.util.HashMap;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1006341 // ValueAnimator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 524677 "ObjectAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.CallSuper;
import android.annotation.NonNull;
import android.annotation.Nullable;
import android.graphics.Path;
import android.graphics.PointF;
import android.util.Log;
import android.util.Property;
import android.view.animation.AccelerateDecelerateInterpolator;
import java.lang.ref.WeakReference;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1004421 // ObjectAnimator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 524805 "PathKeyframes"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Path;
import android.graphics.PointF;
import java.util.ArrayList;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1008773 // PathKeyframes
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 524933 "PointFEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.PointF;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1012101 // PointFEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 525061 "PropertyValuesHolder"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Path;
import android.graphics.PointF;
import android.util.FloatProperty;
import android.util.IntProperty;
import android.util.Log;
import android.util.PathParser;
import android.util.Property;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1006213 // PropertyValuesHolder
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 525189 "RectEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Rect;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1013509 // RectEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 525445 "RevealAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.RenderNodeAnimator;
import android.view.View;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1013637 // RevealAnimator
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 525573 "StateListAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.pm.ActivityInfo.Config;
import android.content.res.ConstantState;
import android.util.StateSet;
import android.view.View;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 978949 // StateListAnimator
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 525701 "TimeAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.animation.AnimationUtils;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1014405 // TimeAnimator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 525829 "TimeInterpolator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1005317 // TimeInterpolator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
