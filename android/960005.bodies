class Bundle
!!!7411077.java!!!	Bundle()
        super();
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!7411205.java!!!	Bundle(inout parcelledData : Parcel)
        super(parcelledData);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
        if (mParcelledData.hasFileDescriptors()) {
            mFlags |= FLAG_HAS_FDS;
        }
!!!7411333.java!!!	Bundle(inout parcelledData : Parcel, in length : int)
        super(parcelledData, length);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
        if (mParcelledData.hasFileDescriptors()) {
            mFlags |= FLAG_HAS_FDS;
        }
!!!7411461.java!!!	Bundle(inout loader : ClassLoader)
        super(loader);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!7411589.java!!!	Bundle(in capacity : int)
        super(capacity);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!7411717.java!!!	Bundle(inout b : Bundle)
        super(b);
        mFlags = b.mFlags;
!!!7411845.java!!!	Bundle(inout b : PersistableBundle)
        super(b);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!7411973.java!!!	Bundle(inout doInit : boolean)
        super(doInit);
!!!7412101.java!!!	forPair(in key : String, in value : String) : Bundle
        Bundle b = new Bundle(1);
        b.putString(key, value);
        return b;
!!!7412229.java!!!	setClassLoader(inout loader : ClassLoader) : void
        super.setClassLoader(loader);
!!!7412357.java!!!	getClassLoader() : ClassLoader
        return super.getClassLoader();
!!!7412485.java!!!	setAllowFds(inout allowFds : boolean) : boolean
        final boolean orig = (mFlags & FLAG_ALLOW_FDS) != 0;
        if (allowFds) {
            mFlags |= FLAG_ALLOW_FDS;
        } else {
            mFlags &= ~FLAG_ALLOW_FDS;
        }
        return orig;
!!!7412613.java!!!	setDefusable(inout defusable : boolean) : void
        if (defusable) {
            mFlags |= FLAG_DEFUSABLE;
        } else {
            mFlags &= ~FLAG_DEFUSABLE;
        }
!!!7412741.java!!!	setDefusable(inout bundle : Bundle, inout defusable : boolean) : Bundle
        if (bundle != null) {
            bundle.setDefusable(defusable);
        }
        return bundle;
!!!7412869.java!!!	clone() : Object
        return new Bundle(this);
!!!7412997.java!!!	deepCopy() : Bundle
        Bundle b = new Bundle(false);
        b.copyInternal(this, true);
        return b;
!!!7413125.java!!!	clear() : void
        super.clear();
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!7413253.java!!!	remove(in key : String) : void
        super.remove(key);
        if ((mFlags & FLAG_HAS_FDS) != 0) {
            mFlags &= ~FLAG_HAS_FDS_KNOWN;
        }
!!!7413381.java!!!	putAll(inout bundle : Bundle) : void
        unparcel();
        bundle.unparcel();
        mMap.putAll(bundle.mMap);

        // FD state is now known if and only if both bundles already knew
        if ((bundle.mFlags & FLAG_HAS_FDS) != 0) {
            mFlags |= FLAG_HAS_FDS;
        }
        if ((bundle.mFlags & FLAG_HAS_FDS_KNOWN) == 0) {
            mFlags &= ~FLAG_HAS_FDS_KNOWN;
        }
!!!7413509.java!!!	hasFileDescriptors() : boolean
        if ((mFlags & FLAG_HAS_FDS_KNOWN) == 0) {
            boolean fdFound = false;    // keep going until we find one or run out of data

            if (mParcelledData != null) {
                if (mParcelledData.hasFileDescriptors()) {
                    fdFound = true;
                }
            } else {
                // It's been unparcelled, so we need to walk the map
                for (int i=mMap.size()-1; i>=0; i--) {
                    Object obj = mMap.valueAt(i);
                    if (obj instanceof Parcelable) {
                        if ((((Parcelable)obj).describeContents()
                                & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                            fdFound = true;
                            break;
                        }
                    } else if (obj instanceof Parcelable[]) {
                        Parcelable[] array = (Parcelable[]) obj;
                        for (int n = array.length - 1; n >= 0; n--) {
                            Parcelable p = array[n];
                            if (p != null && ((p.describeContents()
                                    & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                                fdFound = true;
                                break;
                            }
                        }
                    } else if (obj instanceof SparseArray) {
                        SparseArray<? extends Parcelable> array =
                                (SparseArray<? extends Parcelable>) obj;
                        for (int n = array.size() - 1; n >= 0; n--) {
                            Parcelable p = array.valueAt(n);
                            if (p != null && (p.describeContents()
                                    & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                                fdFound = true;
                                break;
                            }
                        }
                    } else if (obj instanceof ArrayList) {
                        ArrayList array = (ArrayList) obj;
                        // an ArrayList here might contain either Strings or
                        // Parcelables; only look inside for Parcelables
                        if (!array.isEmpty() && (array.get(0) instanceof Parcelable)) {
                            for (int n = array.size() - 1; n >= 0; n--) {
                                Parcelable p = (Parcelable) array.get(n);
                                if (p != null && ((p.describeContents()
                                        & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                                    fdFound = true;
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            if (fdFound) {
                mFlags |= FLAG_HAS_FDS;
            } else {
                mFlags &= ~FLAG_HAS_FDS;
            }
            mFlags |= FLAG_HAS_FDS_KNOWN;
        }
        return (mFlags & FLAG_HAS_FDS) != 0;
!!!7413637.java!!!	filterValues() : Bundle
        unparcel();
        Bundle bundle = this;
        if (mMap != null) {
            ArrayMap<String, Object> map = mMap;
            for (int i = map.size() - 1; i >= 0; i--) {
                Object value = map.valueAt(i);
                if (PersistableBundle.isValidType(value)) {
                    continue;
                }
                if (value instanceof Bundle) {
                    Bundle newBundle = ((Bundle)value).filterValues();
                    if (newBundle != value) {
                        if (map == mMap) {
                            // The filter had to generate a new bundle, but we have not yet
                            // created a new one here.  Do that now.
                            bundle = new Bundle(this);
                            // Note the ArrayMap<> constructor is guaranteed to generate
                            // a new object with items in the same order as the original.
                            map = bundle.mMap;
                        }
                        // Replace this current entry with the new child bundle.
                        map.setValueAt(i, newBundle);
                    }
                    continue;
                }
                if (value.getClass().getName().startsWith("android.")) {
                    continue;
                }
                if (map == mMap) {
                    // This is the first time we have had to remove something, that means we
                    // need to switch to a new Bundle.
                    bundle = new Bundle(this);
                    // Note the ArrayMap<> constructor is guaranteed to generate
                    // a new object with items in the same order as the original.
                    map = bundle.mMap;
                }
                map.removeAt(i);
            }
        }
        mFlags |= FLAG_HAS_FDS_KNOWN;
        mFlags &= ~FLAG_HAS_FDS;
        return bundle;
!!!7413765.java!!!	putByte(in key : String, in value : byte) : void
        super.putByte(key, value);
!!!7413893.java!!!	putChar(in key : String, in value : char) : void
        super.putChar(key, value);
!!!7414021.java!!!	putShort(in key : String, in value : short) : void
        super.putShort(key, value);
!!!7414149.java!!!	putFloat(in key : String, in value : float) : void
        super.putFloat(key, value);
!!!7414277.java!!!	putCharSequence(in key : String, inout value : CharSequence) : void
        super.putCharSequence(key, value);
!!!7414405.java!!!	putParcelable(in key : String, inout value : Parcelable) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!7414533.java!!!	putSize(in key : String, inout value : Size) : void
        unparcel();
        mMap.put(key, value);
!!!7414661.java!!!	putSizeF(in key : String, inout value : SizeF) : void
        unparcel();
        mMap.put(key, value);
!!!7414789.java!!!	putParcelableArray(in key : String, inout value : Parcelable [[]]) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!7414917.java!!!	putParcelableArrayList(in key : String, inout value : ArrayList<? extends Parcelable>) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!7415045.java!!!	putParcelableList(in key : String, inout value : List<? extends Parcelable>) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!7415173.java!!!	putSparseParcelableArray(in key : String, inout value : SparseArray) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!7415301.java!!!	putIntegerArrayList(in key : String, inout value : ArrayList<Integer>) : void
        super.putIntegerArrayList(key, value);
!!!7415429.java!!!	putStringArrayList(in key : String, inout value : ArrayList<String>) : void
        super.putStringArrayList(key, value);
!!!7415557.java!!!	putCharSequenceArrayList(in key : String, inout value : ArrayList<CharSequence>) : void
        super.putCharSequenceArrayList(key, value);
!!!7415685.java!!!	putSerializable(in key : String, inout value : Serializable) : void
        super.putSerializable(key, value);
!!!7415813.java!!!	putByteArray(in key : String, inout value : byte [[]]) : void
        super.putByteArray(key, value);
!!!7415941.java!!!	putShortArray(in key : String, inout value : short [[]]) : void
        super.putShortArray(key, value);
!!!7416069.java!!!	putCharArray(in key : String, inout value : char [[]]) : void
        super.putCharArray(key, value);
!!!7416197.java!!!	putFloatArray(in key : String, inout value : float [[]]) : void
        super.putFloatArray(key, value);
!!!7416325.java!!!	putCharSequenceArray(in key : String, inout value : CharSequence [[]]) : void
        super.putCharSequenceArray(key, value);
!!!7416453.java!!!	putBundle(in key : String, inout value : Bundle) : void
        unparcel();
        mMap.put(key, value);
!!!7416581.java!!!	putBinder(in key : String, inout value : IBinder) : void
        unparcel();
        mMap.put(key, value);
!!!7416709.java!!!	putIBinder(in key : String, inout value : IBinder) : void
        unparcel();
        mMap.put(key, value);
!!!7416837.java!!!	getByte(in key : String) : byte
        return super.getByte(key);
!!!7416965.java!!!	getByte(in key : String, in defaultValue : byte) : Byte
        return super.getByte(key, defaultValue);
!!!7417093.java!!!	getChar(in key : String) : char
        return super.getChar(key);
!!!7417221.java!!!	getChar(in key : String, in defaultValue : char) : char
        return super.getChar(key, defaultValue);
!!!7417349.java!!!	getShort(in key : String) : short
        return super.getShort(key);
!!!7417477.java!!!	getShort(in key : String, in defaultValue : short) : short
        return super.getShort(key, defaultValue);
!!!7417605.java!!!	getFloat(in key : String) : float
        return super.getFloat(key);
!!!7417733.java!!!	getFloat(in key : String, in defaultValue : float) : float
        return super.getFloat(key, defaultValue);
!!!7417861.java!!!	getCharSequence(in key : String) : CharSequence
        return super.getCharSequence(key);
!!!7417989.java!!!	getCharSequence(in key : String, inout defaultValue : CharSequence) : CharSequence
        return super.getCharSequence(key, defaultValue);
!!!7418117.java!!!	getSize(in key : String) : Size
        unparcel();
        final Object o = mMap.get(key);
        try {
            return (Size) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Size", e);
            return null;
        }
!!!7418245.java!!!	getSizeF(in key : String) : SizeF
        unparcel();
        final Object o = mMap.get(key);
        try {
            return (SizeF) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "SizeF", e);
            return null;
        }
!!!7418373.java!!!	getBundle(in key : String) : Bundle
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (Bundle) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Bundle", e);
            return null;
        }
!!!7418501.java!!!	getParcelable(in key : String) : T
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (T) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Parcelable", e);
            return null;
        }
!!!7418629.java!!!	getParcelableArray(in key : String) : Parcelable
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (Parcelable[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Parcelable[]", e);
            return null;
        }
!!!7418757.java!!!	getParcelableArrayList(in key : String) : ArrayList<T>
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (ArrayList<T>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "ArrayList", e);
            return null;
        }
!!!7418885.java!!!	getSparseParcelableArray(in key : String) : SparseArray
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (SparseArray<T>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "SparseArray", e);
            return null;
        }
!!!7419013.java!!!	getSerializable(in key : String) : Serializable
        return super.getSerializable(key);
!!!7419141.java!!!	getIntegerArrayList(in key : String) : ArrayList<Integer>
        return super.getIntegerArrayList(key);
!!!7419269.java!!!	getStringArrayList(in key : String) : ArrayList<String>
        return super.getStringArrayList(key);
!!!7419397.java!!!	getCharSequenceArrayList(in key : String) : ArrayList<CharSequence>
        return super.getCharSequenceArrayList(key);
!!!7419525.java!!!	getByteArray(in key : String) : byte
        return super.getByteArray(key);
!!!7419653.java!!!	getShortArray(in key : String) : short
        return super.getShortArray(key);
!!!7419781.java!!!	getCharArray(in key : String) : char
        return super.getCharArray(key);
!!!7419909.java!!!	getFloatArray(in key : String) : float
        return super.getFloatArray(key);
!!!7420037.java!!!	getCharSequenceArray(in key : String) : CharSequence
        return super.getCharSequenceArray(key);
!!!7420165.java!!!	getBinder(in key : String) : IBinder
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (IBinder) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "IBinder", e);
            return null;
        }
!!!7420293.java!!!	getIBinder(in key : String) : IBinder
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (IBinder) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "IBinder", e);
            return null;
        }
!!!7420421.java!!!	describeContents() : int
        int mask = 0;
        if (hasFileDescriptors()) {
            mask |= Parcelable.CONTENTS_FILE_DESCRIPTOR;
        }
        return mask;
!!!7420549.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        final boolean oldAllowFds = parcel.pushAllowFds((mFlags & FLAG_ALLOW_FDS) != 0);
        try {
            super.writeToParcelInner(parcel, flags);
        } finally {
            parcel.restoreAllowFds(oldAllowFds);
        }
!!!7420677.java!!!	readFromParcel(inout parcel : Parcel) : void
        super.readFromParcelInner(parcel);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
        if (mParcelledData.hasFileDescriptors()) {
            mFlags |= FLAG_HAS_FDS;
        }
!!!7420805.java!!!	toString() : String
        if (mParcelledData != null) {
            if (isEmptyParcel()) {
                return "Bundle[EMPTY_PARCEL]";
            } else {
                return "Bundle[mParcelledData.dataSize=" +
                        mParcelledData.dataSize() + "]";
            }
        }
        return "Bundle[" + mMap.toString() + "]";
!!!7420933.java!!!	toShortString() : String
        if (mParcelledData != null) {
            if (isEmptyParcel()) {
                return "EMPTY_PARCEL";
            } else {
                return "mParcelledData.dataSize=" + mParcelledData.dataSize();
            }
        }
        return mMap.toString();
