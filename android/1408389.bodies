class StrictJarManifest
!!!8539397.java!!!	StrictJarManifest()
        entries = new HashMap<String, Attributes>();
        mainAttributes = new Attributes();
!!!8539525.java!!!	StrictJarManifest(inout is : InputStream)
        this();
        read(Streams.readFully(is));
!!!8539653.java!!!	StrictJarManifest(inout man : StrictJarManifest)
        mainAttributes = (Attributes) man.mainAttributes.clone();
        entries = (HashMap<String, Attributes>) ((HashMap<String, Attributes>) man
                .getEntries()).clone();
!!!8539781.java!!!	StrictJarManifest(inout manifestBytes : byte [[]], inout readChunks : boolean)
        this();
        if (readChunks) {
            chunks = new HashMap<String, Chunk>();
        }
        read(manifestBytes);
!!!8539909.java!!!	clear() : void
        entries.clear();
        mainAttributes.clear();
!!!8540037.java!!!	getAttributes(in name : String) : Attributes
        return getEntries().get(name);
!!!8540165.java!!!	getEntries() : Map<String, Attributes>
        return entries;
!!!8540293.java!!!	getMainAttributes() : Attributes
        return mainAttributes;
!!!8540421.java!!!	clone() : Object
        return new StrictJarManifest(this);
!!!8540549.java!!!	write(inout os : OutputStream) : void
        write(this, os);
!!!8540677.java!!!	read(inout is : InputStream) : void
        read(Streams.readFullyNoClose(is));
!!!8540805.java!!!	read(inout buf : byte [[]]) : void
        if (buf.length == 0) {
            return;
        }

        StrictJarManifestReader im = new StrictJarManifestReader(buf, mainAttributes);
        mainEnd = im.getEndOfMainSection();
        im.readEntries(entries, chunks);
!!!8540933.java!!!	hashCode() : int
        return mainAttributes.hashCode() ^ getEntries().hashCode();
!!!8541061.java!!!	equals(inout o : Object) : boolean
        if (o == null) {
            return false;
        }
        if (o.getClass() != this.getClass()) {
            return false;
        }
        if (!mainAttributes.equals(((StrictJarManifest) o).mainAttributes)) {
            return false;
        }
        return getEntries().equals(((StrictJarManifest) o).getEntries());
!!!8541189.java!!!	getChunk(in name : String) : StrictJarManifest::Chunk
        return chunks.get(name);
!!!8541317.java!!!	removeChunks() : void
        chunks = null;
!!!8541445.java!!!	getMainAttributesEnd() : int
        return mainEnd;
!!!8541573.java!!!	write(inout manifest : StrictJarManifest, inout out : OutputStream) : void
        CharsetEncoder encoder = StandardCharsets.UTF_8.newEncoder();
        ByteBuffer buffer = ByteBuffer.allocate(LINE_LENGTH_LIMIT);

        Attributes.Name versionName = Attributes.Name.MANIFEST_VERSION;
        String version = manifest.mainAttributes.getValue(versionName);
        if (version == null) {
            versionName = Attributes.Name.SIGNATURE_VERSION;
            version = manifest.mainAttributes.getValue(versionName);
        }
        if (version != null) {
            writeEntry(out, versionName, version, encoder, buffer);
            Iterator<?> entries = manifest.mainAttributes.keySet().iterator();
            while (entries.hasNext()) {
                Attributes.Name name = (Attributes.Name) entries.next();
                if (!name.equals(versionName)) {
                    writeEntry(out, name, manifest.mainAttributes.getValue(name), encoder, buffer);
                }
            }
        }
        out.write(LINE_SEPARATOR);
        Iterator<String> i = manifest.getEntries().keySet().iterator();
        while (i.hasNext()) {
            String key = i.next();
            writeEntry(out, Attributes.Name.NAME, key, encoder, buffer);
            Attributes attributes = manifest.entries.get(key);
            Iterator<?> entries = attributes.keySet().iterator();
            while (entries.hasNext()) {
                Attributes.Name name = (Attributes.Name) entries.next();
                writeEntry(out, name, attributes.getValue(name), encoder, buffer);
            }
            out.write(LINE_SEPARATOR);
        }
!!!8541701.java!!!	writeEntry(inout os : OutputStream, inout name : Attributes.Name, in value : String, inout encoder : CharsetEncoder, inout bBuf : ByteBuffer) : void
        String nameString = name.toString();
        os.write(nameString.getBytes(StandardCharsets.US_ASCII));
        os.write(VALUE_SEPARATOR);

        encoder.reset();
        bBuf.clear().limit(LINE_LENGTH_LIMIT - nameString.length() - 2);

        CharBuffer cBuf = CharBuffer.wrap(value);

        while (true) {
            CoderResult r = encoder.encode(cBuf, bBuf, true);
            if (CoderResult.UNDERFLOW == r) {
                r = encoder.flush(bBuf);
            }
            os.write(bBuf.array(), bBuf.arrayOffset(), bBuf.position());
            os.write(LINE_SEPARATOR);
            if (CoderResult.UNDERFLOW == r) {
                break;
            }
            os.write(' ');
            bBuf.clear().limit(LINE_LENGTH_LIMIT - 1);
        }
