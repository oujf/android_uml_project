class PackageSettingBase
!!!12204549.java!!!	PackageSettingBase(in name : String, in realName : String, inout codePath : File, inout resourcePath : File, in legacyNativeLibraryPathString : String, in primaryCpuAbiString : String, in secondaryCpuAbiString : String, in cpuAbiOverrideString : String, in pVersionCode : int, in pkgFlags : int, in pkgPrivateFlags : int, in parentPackageName : String, inout childPackageNames : List<String>, inout usesStaticLibraries : String [[]], inout usesStaticLibrariesVersions : int [[]])
        super(pkgFlags, pkgPrivateFlags);
        this.name = name;
        this.realName = realName;
        this.parentPackageName = parentPackageName;
        this.childPackageNames = (childPackageNames != null)
                ? new ArrayList<>(childPackageNames) : null;
        this.usesStaticLibraries = usesStaticLibraries;
        this.usesStaticLibrariesVersions = usesStaticLibrariesVersions;
        init(codePath, resourcePath, legacyNativeLibraryPathString, primaryCpuAbiString,
                secondaryCpuAbiString, cpuAbiOverrideString, pVersionCode);
!!!12204677.java!!!	PackageSettingBase(inout base : PackageSettingBase, in realName : String)
        super(base);
        name = base.name;
        this.realName = realName;
        doCopy(base);
!!!12204805.java!!!	init(inout codePath : File, inout resourcePath : File, in legacyNativeLibraryPathString : String, in primaryCpuAbiString : String, in secondaryCpuAbiString : String, in cpuAbiOverrideString : String, in pVersionCode : int) : void
        this.codePath = codePath;
        this.codePathString = codePath.toString();
        this.resourcePath = resourcePath;
        this.resourcePathString = resourcePath.toString();
        this.legacyNativeLibraryPathString = legacyNativeLibraryPathString;
        this.primaryCpuAbiString = primaryCpuAbiString;
        this.secondaryCpuAbiString = secondaryCpuAbiString;
        this.cpuAbiOverrideString = cpuAbiOverrideString;
        this.versionCode = pVersionCode;
        this.signatures = new PackageSignatures();
!!!12204933.java!!!	setInstallerPackageName(in packageName : String) : void
        installerPackageName = packageName;
!!!12205061.java!!!	getInstallerPackageName() : String
        return installerPackageName;
!!!12205189.java!!!	setVolumeUuid(in volumeUuid : String) : void
        this.volumeUuid = volumeUuid;
!!!12205317.java!!!	getVolumeUuid() : String
        return volumeUuid;
!!!12205445.java!!!	setInstallStatus(in newStatus : int) : void
        installStatus = newStatus;
!!!12205573.java!!!	getInstallStatus() : int
        return installStatus;
!!!12205701.java!!!	setTimeStamp(in newStamp : long) : void
        timeStamp = newStamp;
!!!12205829.java!!!	setUpdateAvailable(inout updateAvailable : boolean) : void
        this.updateAvailable = updateAvailable;
!!!12205957.java!!!	isUpdateAvailable() : boolean
        return updateAvailable;
!!!12206085.java!!!	copyFrom(inout orig : PackageSettingBase) : void
        super.copyFrom(orig);
        doCopy(orig);
!!!12206213.java!!!	doCopy(inout orig : PackageSettingBase) : void
        childPackageNames = (orig.childPackageNames != null)
                ? new ArrayList<>(orig.childPackageNames) : null;
        codePath = orig.codePath;
        codePathString = orig.codePathString;
        cpuAbiOverrideString = orig.cpuAbiOverrideString;
        firstInstallTime = orig.firstInstallTime;
        installPermissionsFixed = orig.installPermissionsFixed;
        installStatus = orig.installStatus;
        installerPackageName = orig.installerPackageName;
        isOrphaned = orig.isOrphaned;
        keySetData = orig.keySetData;
        lastUpdateTime = orig.lastUpdateTime;
        legacyNativeLibraryPathString = orig.legacyNativeLibraryPathString;
        // Intentionally skip oldCodePaths; it's not relevant for copies
        origPackage = orig.origPackage;
        parentPackageName = orig.parentPackageName;
        primaryCpuAbiString = orig.primaryCpuAbiString;
        resourcePath = orig.resourcePath;
        resourcePathString = orig.resourcePathString;
        secondaryCpuAbiString = orig.secondaryCpuAbiString;
        signatures = orig.signatures;
        timeStamp = orig.timeStamp;
        uidError = orig.uidError;
        userState.clear();
        for (int i=0; i<orig.userState.size(); i++) {
            userState.put(orig.userState.keyAt(i), orig.userState.valueAt(i));
        }
        verificationInfo = orig.verificationInfo;
        versionCode = orig.versionCode;
        volumeUuid = orig.volumeUuid;
        categoryHint = orig.categoryHint;
        usesStaticLibraries = orig.usesStaticLibraries != null
                ? Arrays.copyOf(orig.usesStaticLibraries,
                        orig.usesStaticLibraries.length) : null;
        usesStaticLibrariesVersions = orig.usesStaticLibrariesVersions != null
                ? Arrays.copyOf(orig.usesStaticLibrariesVersions,
                       orig.usesStaticLibrariesVersions.length) : null;
        updateAvailable = orig.updateAvailable;
!!!12206341.java!!!	modifyUserState(in userId : int) : PackageUserState
        PackageUserState state = userState.get(userId);
        if (state == null) {
            state = new PackageUserState();
            userState.put(userId, state);
        }
        return state;
!!!12206469.java!!!	readUserState(in userId : int) : PackageUserState
        PackageUserState state = userState.get(userId);
        if (state == null) {
            return DEFAULT_USER_STATE;
        }
        state.categoryHint = categoryHint;
        return state;
!!!12206597.java!!!	setEnabled(in state : int, in userId : int, in callingPackage : String) : void
        PackageUserState st = modifyUserState(userId);
        st.enabled = state;
        st.lastDisableAppCaller = callingPackage;
!!!12206725.java!!!	getEnabled(in userId : int) : int
        return readUserState(userId).enabled;
!!!12206853.java!!!	getLastDisabledAppCaller(in userId : int) : String
        return readUserState(userId).lastDisableAppCaller;
!!!12206981.java!!!	setInstalled(inout inst : boolean, in userId : int) : void
        modifyUserState(userId).installed = inst;
!!!12207109.java!!!	getInstalled(in userId : int) : boolean
        return readUserState(userId).installed;
!!!12207237.java!!!	getInstallReason(in userId : int) : int
        return readUserState(userId).installReason;
!!!12207365.java!!!	setInstallReason(in installReason : int, in userId : int) : void
        modifyUserState(userId).installReason = installReason;
!!!12207493.java!!!	setOverlayPaths(inout overlayPaths : List<String>, in userId : int) : void
        modifyUserState(userId).overlayPaths = overlayPaths == null ? null :
            overlayPaths.toArray(new String[overlayPaths.size()]);
!!!12207621.java!!!	getOverlayPaths(in userId : int) : String
        return readUserState(userId).overlayPaths;
!!!12207749.java!!!	getUserState() : SparseArray
        return userState;
!!!12207877.java!!!	isAnyInstalled(inout users : int [[]]) : boolean
        for (int user: users) {
            if (readUserState(user).installed) {
                return true;
            }
        }
        return false;
!!!12208005.java!!!	queryInstalledUsers(inout users : int [[]], inout installed : boolean) : int
        int num = 0;
        for (int user : users) {
            if (getInstalled(user) == installed) {
                num++;
            }
        }
        int[] res = new int[num];
        num = 0;
        for (int user : users) {
            if (getInstalled(user) == installed) {
                res[num] = user;
                num++;
            }
        }
        return res;
!!!12208133.java!!!	getCeDataInode(in userId : int) : long
        return readUserState(userId).ceDataInode;
!!!12208261.java!!!	setCeDataInode(in ceDataInode : long, in userId : int) : void
        modifyUserState(userId).ceDataInode = ceDataInode;
!!!12208389.java!!!	getStopped(in userId : int) : boolean
        return readUserState(userId).stopped;
!!!12208517.java!!!	setStopped(inout stop : boolean, in userId : int) : void
        modifyUserState(userId).stopped = stop;
!!!12208645.java!!!	getNotLaunched(in userId : int) : boolean
        return readUserState(userId).notLaunched;
!!!12208773.java!!!	setNotLaunched(inout stop : boolean, in userId : int) : void
        modifyUserState(userId).notLaunched = stop;
!!!12208901.java!!!	getHidden(in userId : int) : boolean
        return readUserState(userId).hidden;
!!!12209029.java!!!	setHidden(inout hidden : boolean, in userId : int) : void
        modifyUserState(userId).hidden = hidden;
!!!12209157.java!!!	getSuspended(in userId : int) : boolean
        return readUserState(userId).suspended;
!!!12209285.java!!!	setSuspended(inout suspended : boolean, in userId : int) : void
        modifyUserState(userId).suspended = suspended;
!!!12209413.java!!!	getInstantApp(in userId : int) : boolean
        return readUserState(userId).instantApp;
!!!12209541.java!!!	setInstantApp(inout instantApp : boolean, in userId : int) : void
        modifyUserState(userId).instantApp = instantApp;
!!!12209669.java!!!	setUserState(in userId : int, in ceDataInode : long, in enabled : int, inout installed : boolean, inout stopped : boolean, inout notLaunched : boolean, inout hidden : boolean, inout suspended : boolean, inout instantApp : boolean, in lastDisableAppCaller : String, inout enabledComponents : ArraySet, inout disabledComponents : ArraySet, in domainVerifState : int, in linkGeneration : int, in installReason : int) : void
        PackageUserState state = modifyUserState(userId);
        state.ceDataInode = ceDataInode;
        state.enabled = enabled;
        state.installed = installed;
        state.stopped = stopped;
        state.notLaunched = notLaunched;
        state.hidden = hidden;
        state.suspended = suspended;
        state.lastDisableAppCaller = lastDisableAppCaller;
        state.enabledComponents = enabledComponents;
        state.disabledComponents = disabledComponents;
        state.domainVerificationStatus = domainVerifState;
        state.appLinkGeneration = linkGeneration;
        state.installReason = installReason;
        state.instantApp = instantApp;
!!!12209797.java!!!	getEnabledComponents(in userId : int) : ArraySet
        return readUserState(userId).enabledComponents;
!!!12209925.java!!!	getDisabledComponents(in userId : int) : ArraySet
        return readUserState(userId).disabledComponents;
!!!12210053.java!!!	setEnabledComponents(inout components : ArraySet, in userId : int) : void
        modifyUserState(userId).enabledComponents = components;
!!!12210181.java!!!	setDisabledComponents(inout components : ArraySet, in userId : int) : void
        modifyUserState(userId).disabledComponents = components;
!!!12210309.java!!!	setEnabledComponentsCopy(inout components : ArraySet, in userId : int) : void
        modifyUserState(userId).enabledComponents = components != null
                ? new ArraySet<String>(components) : null;
!!!12210437.java!!!	setDisabledComponentsCopy(inout components : ArraySet, in userId : int) : void
        modifyUserState(userId).disabledComponents = components != null
                ? new ArraySet<String>(components) : null;
!!!12210565.java!!!	modifyUserStateComponents(in userId : int, inout disabled : boolean, inout enabled : boolean) : PackageUserState
        PackageUserState state = modifyUserState(userId);
        if (disabled && state.disabledComponents == null) {
            state.disabledComponents = new ArraySet<String>(1);
        }
        if (enabled && state.enabledComponents == null) {
            state.enabledComponents = new ArraySet<String>(1);
        }
        return state;
!!!12210693.java!!!	addDisabledComponent(in componentClassName : String, in userId : int) : void
        modifyUserStateComponents(userId, true, false).disabledComponents.add(componentClassName);
!!!12210821.java!!!	addEnabledComponent(in componentClassName : String, in userId : int) : void
        modifyUserStateComponents(userId, false, true).enabledComponents.add(componentClassName);
!!!12210949.java!!!	enableComponentLPw(in componentClassName : String, in userId : int) : boolean
        PackageUserState state = modifyUserStateComponents(userId, false, true);
        boolean changed = state.disabledComponents != null
                ? state.disabledComponents.remove(componentClassName) : false;
        changed |= state.enabledComponents.add(componentClassName);
        return changed;
!!!12211077.java!!!	disableComponentLPw(in componentClassName : String, in userId : int) : boolean
        PackageUserState state = modifyUserStateComponents(userId, true, false);
        boolean changed = state.enabledComponents != null
                ? state.enabledComponents.remove(componentClassName) : false;
        changed |= state.disabledComponents.add(componentClassName);
        return changed;
!!!12211205.java!!!	restoreComponentLPw(in componentClassName : String, in userId : int) : boolean
        PackageUserState state = modifyUserStateComponents(userId, true, true);
        boolean changed = state.disabledComponents != null
                ? state.disabledComponents.remove(componentClassName) : false;
        changed |= state.enabledComponents != null
                ? state.enabledComponents.remove(componentClassName) : false;
        return changed;
!!!12211333.java!!!	getCurrentEnabledStateLPr(in componentName : String, in userId : int) : int
        PackageUserState state = readUserState(userId);
        if (state.enabledComponents != null && state.enabledComponents.contains(componentName)) {
            return COMPONENT_ENABLED_STATE_ENABLED;
        } else if (state.disabledComponents != null
                && state.disabledComponents.contains(componentName)) {
            return COMPONENT_ENABLED_STATE_DISABLED;
        } else {
            return COMPONENT_ENABLED_STATE_DEFAULT;
        }
!!!12211461.java!!!	removeUser(in userId : int) : void
        userState.delete(userId);
!!!12211589.java!!!	getNotInstalledUserIds() : int
        int count = 0;
        int userStateCount = userState.size();
        for (int i = 0; i < userStateCount; i++) {
            if (userState.valueAt(i).installed == false) {
                count++;
            }
        }
        if (count == 0) return EMPTY_INT_ARRAY;
        int[] excludedUserIds = new int[count];
        int idx = 0;
        for (int i = 0; i < userStateCount; i++) {
            if (userState.valueAt(i).installed == false) {
                excludedUserIds[idx++] = userState.keyAt(i);
            }
        }
        return excludedUserIds;
!!!12211717.java!!!	getIntentFilterVerificationInfo() : IntentFilterVerificationInfo
        return verificationInfo;
!!!12211845.java!!!	setIntentFilterVerificationInfo(inout info : IntentFilterVerificationInfo) : void
        verificationInfo = info;
!!!12211973.java!!!	getDomainVerificationStatusForUser(in userId : int) : long
        PackageUserState state = readUserState(userId);
        long result = (long) state.appLinkGeneration;
        result |= ((long) state.domainVerificationStatus) << 32;
        return result;
!!!12212101.java!!!	setDomainVerificationStatusForUser(in status : int, in generation : int, in userId : int) : void
        PackageUserState state = modifyUserState(userId);
        state.domainVerificationStatus = status;
        if (status == PackageManager.INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS) {
            state.appLinkGeneration = generation;
        }
!!!12212229.java!!!	clearDomainVerificationStatusForUser(in userId : int) : void
        modifyUserState(userId).domainVerificationStatus =
                PackageManager.INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED;
!!!12212357.java!!!	writeUsersInfoToProto(inout proto : ProtoOutputStream, in fieldId : long) : void
        int count = userState.size();
        for (int i = 0; i < count; i++) {
            final long userToken = proto.start(fieldId);
            final int userId = userState.keyAt(i);
            final PackageUserState state = userState.valueAt(i);
            proto.write(PackageProto.UserInfoProto.ID, userId);
            final int installType;
            if (state.instantApp) {
                installType = PackageProto.UserInfoProto.INSTANT_APP_INSTALL;
            } else if (state.installed) {
                installType = PackageProto.UserInfoProto.FULL_APP_INSTALL;
            } else {
                installType = PackageProto.UserInfoProto.NOT_INSTALLED_FOR_USER;
            }
            proto.write(PackageProto.UserInfoProto.INSTALL_TYPE, installType);
            proto.write(PackageProto.UserInfoProto.IS_HIDDEN, state.hidden);
            proto.write(PackageProto.UserInfoProto.IS_SUSPENDED, state.suspended);
            proto.write(PackageProto.UserInfoProto.IS_STOPPED, state.stopped);
            proto.write(PackageProto.UserInfoProto.IS_LAUNCHED, !state.notLaunched);
            proto.write(PackageProto.UserInfoProto.ENABLED_STATE, state.enabled);
            proto.write(
                    PackageProto.UserInfoProto.LAST_DISABLED_APP_CALLER,
                    state.lastDisableAppCaller);
            proto.end(userToken);
        }
