class DockState
!!!3538565.java!!!	acceptsDrop(in x : int, in y : int, in width : int, in height : int, inout insets : Rect, inout isCurrentTarget : boolean) : boolean
            if (isCurrentTarget) {
                getMappedRect(expandedTouchDockArea, width, height, mTmpRect);
                return mTmpRect.contains(x, y);
            } else {
                getMappedRect(touchArea, width, height, mTmpRect);
                updateBoundsWithSystemInsets(mTmpRect, insets);
                return mTmpRect.contains(x, y);
            }
!!!3539205.java!!!	DockState(in dockSide : int, in createMode : int, in dockAreaAlpha : int, in hintTextAlpha : int, in hintTextOrientation : int, inout touchArea : RectF, inout dockArea : RectF, inout expandedTouchDockArea : RectF)
            this.dockSide = dockSide;
            this.createMode = createMode;
            this.viewState = new ViewState(dockAreaAlpha, hintTextAlpha, hintTextOrientation,
                    R.string.recents_drag_hint_message);
            this.dockArea = dockArea;
            this.touchArea = touchArea;
            this.expandedTouchDockArea = expandedTouchDockArea;
!!!3539333.java!!!	update(inout context : Context) : void
            viewState.update(context);
!!!3539461.java!!!	getPreDockedBounds(in width : int, in height : int, inout insets : Rect) : Rect
            getMappedRect(dockArea, width, height, mTmpRect);
            return updateBoundsWithSystemInsets(mTmpRect, insets);
!!!3539589.java!!!	getDockedBounds(in width : int, in height : int, in dividerSize : int, inout insets : Rect, inout res : Resources) : Rect
            // Calculate the docked task bounds
            boolean isHorizontalDivision =
                    res.getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;
            int position = DockedDividerUtils.calculateMiddlePosition(isHorizontalDivision,
                    insets, width, height, dividerSize);
            Rect newWindowBounds = new Rect();
            DockedDividerUtils.calculateBoundsForPosition(position, dockSide, newWindowBounds,
                    width, height, dividerSize);
            return newWindowBounds;
!!!3539717.java!!!	getDockedTaskStackBounds(inout displayRect : Rect, in width : int, in height : int, in dividerSize : int, inout insets : Rect, inout layoutAlgorithm : TaskStackLayoutAlgorithm, inout res : Resources, inout windowRectOut : Rect) : Rect
            // Calculate the inverse docked task bounds
            boolean isHorizontalDivision =
                    res.getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;
            int position = DockedDividerUtils.calculateMiddlePosition(isHorizontalDivision,
                    insets, width, height, dividerSize);
            DockedDividerUtils.calculateBoundsForPosition(position,
                    DockedDividerUtils.invertDockSide(dockSide), windowRectOut, width, height,
                    dividerSize);

            // Calculate the task stack bounds from the new window bounds
            Rect taskStackBounds = new Rect();
            // If the task stack bounds is specifically under the dock area, then ignore the top
            // inset
            int top = dockArea.bottom < 1f
                    ? 0
                    : insets.top;
            // For now, ignore the left insets since we always dock on the left and show Recents
            // on the right
            layoutAlgorithm.getTaskStackBounds(displayRect, windowRectOut, top, 0, insets.right,
                    taskStackBounds);
            return taskStackBounds;
!!!3539845.java!!!	updateBoundsWithSystemInsets(inout bounds : Rect, inout insets : Rect) : Rect
            if (dockSide == DOCKED_LEFT) {
                bounds.right += insets.left;
            } else if (dockSide == DOCKED_RIGHT) {
                bounds.left -= insets.right;
            }
            return bounds;
!!!3539973.java!!!	getMappedRect(inout bounds : RectF, in width : int, in height : int, inout out : Rect) : void
            out.set((int) (bounds.left * width), (int) (bounds.top * height),
                    (int) (bounds.right * width), (int) (bounds.bottom * height));
