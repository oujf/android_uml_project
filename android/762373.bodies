class KeyguardBouncer
!!!3926277.java!!!	KeyguardBouncer(inout context : Context, inout callback : ViewMediatorCallback, inout lockPatternUtils : LockPatternUtils, inout container : ViewGroup, inout dismissCallbackRegistry : DismissCallbackRegistry)
        mContext = context;
        mCallback = callback;
        mLockPatternUtils = lockPatternUtils;
        mContainer = container;
        KeyguardUpdateMonitor.getInstance(mContext).registerCallback(mUpdateMonitorCallback);
        mFalsingManager = FalsingManager.getInstance(mContext);
        mDismissCallbackRegistry = dismissCallbackRegistry;
        mHandler = new Handler();
!!!3926405.java!!!	show(inout resetSecuritySelection : boolean) : void
        final int keyguardUserId = KeyguardUpdateMonitor.getCurrentUser();
        if (keyguardUserId == UserHandle.USER_SYSTEM && UserManager.isSplitSystemUser()) {
            // In split system user mode, we never unlock system user.
            return;
        }
        mFalsingManager.onBouncerShown();
        ensureView();
        if (resetSecuritySelection) {
            // showPrimarySecurityScreen() updates the current security method. This is needed in
            // case we are already showing and the current security method changed.
            mKeyguardView.showPrimarySecurityScreen();
        }
        if (mRoot.getVisibility() == View.VISIBLE || mShowingSoon) {
            return;
        }

        final int activeUserId = ActivityManager.getCurrentUser();
        final boolean isSystemUser =
                UserManager.isSplitSystemUser() && activeUserId == UserHandle.USER_SYSTEM;
        final boolean allowDismissKeyguard = !isSystemUser && activeUserId == keyguardUserId;

        // If allowed, try to dismiss the Keyguard. If no security auth (password/pin/pattern) is
        // set, this will dismiss the whole Keyguard. Otherwise, show the bouncer.
        if (allowDismissKeyguard && mKeyguardView.dismiss(activeUserId)) {
            return;
        }

        // This condition may indicate an error on Android, so log it.
        if (!allowDismissKeyguard) {
            Slog.w(TAG, "User can't dismiss keyguard: " + activeUserId + " != " + keyguardUserId);
        }

        mShowingSoon = true;

        // Split up the work over multiple frames.
        DejankUtils.postAfterTraversal(mShowRunnable);
!!!3926533.java!!!	showPromptReason(in reason : int) : void
        mKeyguardView.showPromptReason(reason);
!!!3926661.java!!!	showMessage(in message : String, in color : int) : void
        mKeyguardView.showMessage(message, color);
!!!3926789.java!!!	cancelShowRunnable() : void
        DejankUtils.removeCallbacks(mShowRunnable);
        mShowingSoon = false;
!!!3926917.java!!!	showWithDismissAction(inout r : OnDismissAction, inout cancelAction : Runnable) : void
        ensureView();
        mKeyguardView.setOnDismissAction(r, cancelAction);
        show(false /* resetSecuritySelection */);
!!!3927045.java!!!	hide(inout destroyView : boolean) : void
        if (isShowing()) {
            mDismissCallbackRegistry.notifyDismissCancelled();
        }
        mFalsingManager.onBouncerHidden();
        cancelShowRunnable();
        if (mKeyguardView != null) {
            mKeyguardView.cancelDismissAction();
            mKeyguardView.cleanUp();
        }
        if (mRoot != null) {
            mRoot.setVisibility(View.INVISIBLE);
            if (destroyView) {

                // We have a ViewFlipper that unregisters a broadcast when being detached, which may
                // be slow because of AM lock contention during unlocking. We can delay it a bit.
                mHandler.postDelayed(mRemoveViewRunnable, 50);
            }
        }
!!!3927173.java!!!	startPreHideAnimation(inout runnable : Runnable) : void
        if (mKeyguardView != null) {
            mKeyguardView.startDisappearAnimation(runnable);
        } else if (runnable != null) {
            runnable.run();
        }
!!!3927301.java!!!	reset() : void
        cancelShowRunnable();
        inflateView();
        mFalsingManager.onBouncerHidden();
!!!3927429.java!!!	onScreenTurnedOff() : void
        if (mKeyguardView != null && mRoot != null && mRoot.getVisibility() == View.VISIBLE) {
            mKeyguardView.onPause();
        }
!!!3927557.java!!!	isShowing() : boolean
        return mShowingSoon || (mRoot != null && mRoot.getVisibility() == View.VISIBLE);
!!!3927685.java!!!	prepare() : void
        boolean wasInitialized = mRoot != null;
        ensureView();
        if (wasInitialized) {
            mKeyguardView.showPrimarySecurityScreen();
        }
        mBouncerPromptReason = mCallback.getBouncerPromptReason();
!!!3927813.java!!!	ensureView() : void
        mHandler.removeCallbacks(mRemoveViewRunnable);
        if (mRoot == null) {
            inflateView();
        }
!!!3927941.java!!!	inflateView() : void
        removeView();
        mHandler.removeCallbacks(mRemoveViewRunnable);
        mRoot = (ViewGroup) LayoutInflater.from(mContext).inflate(R.layout.keyguard_bouncer, null);
        mKeyguardView = (KeyguardHostView) mRoot.findViewById(R.id.keyguard_host_view);
        mKeyguardView.setLockPatternUtils(mLockPatternUtils);
        mKeyguardView.setViewMediatorCallback(mCallback);
        mContainer.addView(mRoot, mContainer.getChildCount());
        mRoot.setVisibility(View.INVISIBLE);
!!!3928069.java!!!	removeView() : void
        if (mRoot != null && mRoot.getParent() == mContainer) {
            mContainer.removeView(mRoot);
            mRoot = null;
        }
!!!3928197.java!!!	onBackPressed() : boolean
        return mKeyguardView != null && mKeyguardView.handleBackKey();
!!!3928325.java!!!	needsFullscreenBouncer() : boolean
        ensureView();
        if (mKeyguardView != null) {
            SecurityMode mode = mKeyguardView.getSecurityMode();
            return mode == SecurityMode.SimPin || mode == SecurityMode.SimPuk;
        }
        return false;
!!!3928453.java!!!	isFullscreenBouncer() : boolean
        if (mKeyguardView != null) {
            SecurityMode mode = mKeyguardView.getCurrentSecurityMode();
            return mode == SecurityMode.SimPin || mode == SecurityMode.SimPuk;
        }
        return false;
!!!3928581.java!!!	isSecure() : boolean
        return mKeyguardView == null || mKeyguardView.getSecurityMode() != SecurityMode.None;
!!!3928709.java!!!	shouldDismissOnMenuPressed() : boolean
        return mKeyguardView.shouldEnableMenuKey();
!!!3928837.java!!!	interceptMediaKey(inout event : KeyEvent) : boolean
        ensureView();
        return mKeyguardView.interceptMediaKey(event);
!!!3928965.java!!!	notifyKeyguardAuthenticated(inout strongAuth : boolean) : void
        ensureView();
        mKeyguardView.finish(strongAuth, KeyguardUpdateMonitor.getCurrentUser());
