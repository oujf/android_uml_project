class LinkAddress
!!!7127941.java!!!	scopeForUnicastAddress(inout addr : InetAddress) : int
        if (addr.isAnyLocalAddress()) {
            return RT_SCOPE_HOST;
        }

        if (addr.isLoopbackAddress() || addr.isLinkLocalAddress()) {
            return RT_SCOPE_LINK;
        }

        // isSiteLocalAddress() returns true for private IPv4 addresses, but RFC 6724 section 3.2
        // says that they are assigned global scope.
        if (!(addr instanceof Inet4Address) && addr.isSiteLocalAddress()) {
            return RT_SCOPE_SITE;
        }

        return RT_SCOPE_UNIVERSE;
!!!7128069.java!!!	isIPv6ULA() : boolean
        if (address != null && address instanceof Inet6Address) {
            byte[] bytes = address.getAddress();
            return ((bytes[0] & (byte)0xfe) == (byte)0xfc);
        }
        return false;
!!!7128197.java!!!	init(inout address : InetAddress, in prefixLength : int, in flags : int, in scope : int) : void
        if (address == null ||
                address.isMulticastAddress() ||
                prefixLength < 0 ||
                ((address instanceof Inet4Address) && prefixLength > 32) ||
                (prefixLength > 128)) {
            throw new IllegalArgumentException("Bad LinkAddress params " + address +
                    "/" + prefixLength);
        }
        this.address = address;
        this.prefixLength = prefixLength;
        this.flags = flags;
        this.scope = scope;
!!!7128325.java!!!	LinkAddress(inout address : InetAddress, in prefixLength : int, in flags : int, in scope : int)
        init(address, prefixLength, flags, scope);
!!!7128453.java!!!	LinkAddress(inout address : InetAddress, in prefixLength : int)
        this(address, prefixLength, 0, 0);
        this.scope = scopeForUnicastAddress(address);
!!!7128581.java!!!	LinkAddress(inout interfaceAddress : InterfaceAddress)
        this(interfaceAddress.getAddress(),
             interfaceAddress.getNetworkPrefixLength());
!!!7128709.java!!!	LinkAddress(in address : String)
        this(address, 0, 0);
        this.scope = scopeForUnicastAddress(this.address);
!!!7128837.java!!!	LinkAddress(in address : String, in flags : int, in scope : int)
        // This may throw an IllegalArgumentException; catching it is the caller's responsibility.
        Pair<InetAddress, Integer> ipAndMask = NetworkUtils.parseIpAndMask(address);
        init(ipAndMask.first, ipAndMask.second, flags, scope);
!!!7128965.java!!!	toString() : String
        return address.getHostAddress() + "/" + prefixLength;
!!!7129093.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof LinkAddress)) {
            return false;
        }
        LinkAddress linkAddress = (LinkAddress) obj;
        return this.address.equals(linkAddress.address) &&
            this.prefixLength == linkAddress.prefixLength &&
            this.flags == linkAddress.flags &&
            this.scope == linkAddress.scope;
!!!7129221.java!!!	hashCode() : int
        return address.hashCode() + 11 * prefixLength + 19 * flags + 43 * scope;
!!!7129349.java!!!	isSameAddressAs(inout other : LinkAddress) : boolean
        return address.equals(other.address) && prefixLength == other.prefixLength;
!!!7129477.java!!!	getAddress() : InetAddress
        return address;
!!!7129605.java!!!	getPrefixLength() : int
        return prefixLength;
!!!7129733.java!!!	getNetworkPrefixLength() : int
        return getPrefixLength();
!!!7129861.java!!!	getFlags() : int
        return flags;
!!!7129989.java!!!	getScope() : int
        return scope;
!!!7130117.java!!!	isGlobalPreferred() : boolean
        /**
         * Note that addresses flagged as IFA_F_OPTIMISTIC are
         * simultaneously flagged as IFA_F_TENTATIVE (when the tentative
         * state has cleared either DAD has succeeded or failed, and both
         * flags are cleared regardless).
         */
        return (scope == RT_SCOPE_UNIVERSE &&
                !isIPv6ULA() &&
                (flags & (IFA_F_DADFAILED | IFA_F_DEPRECATED)) == 0L &&
                ((flags & IFA_F_TENTATIVE) == 0L || (flags & IFA_F_OPTIMISTIC) != 0L));
!!!7130245.java!!!	describeContents() : int
        return 0;
!!!7130373.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeByteArray(address.getAddress());
        dest.writeInt(prefixLength);
        dest.writeInt(this.flags);
        dest.writeInt(scope);
