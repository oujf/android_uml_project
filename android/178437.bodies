class AudioPolicyService
!!!379909.cpp!!!	setDeviceConnectionState(in device : audio_devices_t, in state : audio_policy_dev_state_t, in device_address : char, in device_name : char) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    if (!settingsAllowed()) {
        return PERMISSION_DENIED;
    }
    if (state != AUDIO_POLICY_DEVICE_STATE_AVAILABLE &&
            state != AUDIO_POLICY_DEVICE_STATE_UNAVAILABLE) {
        return BAD_VALUE;
    }

    ALOGV("setDeviceConnectionState()");
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->setDeviceConnectionState(device, state,
                                                         device_address, device_name);
!!!380037.cpp!!!	getDeviceConnectionState(in device : audio_devices_t, in device_address : char) : audio_policy_dev_state_t
    if (mAudioPolicyManager == NULL) {
        return AUDIO_POLICY_DEVICE_STATE_UNAVAILABLE;
    }
    return mAudioPolicyManager->getDeviceConnectionState(device,
                                                      device_address);
!!!380165.cpp!!!	handleDeviceConfigChange(in device : audio_devices_t, in device_address : char, in device_name : char) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    if (!settingsAllowed()) {
        return PERMISSION_DENIED;
    }

    ALOGV("handleDeviceConfigChange()");
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->handleDeviceConfigChange(device, device_address,
                                                         device_name);
!!!380293.cpp!!!	setPhoneState(in state : audio_mode_t) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    if (!settingsAllowed()) {
        return PERMISSION_DENIED;
    }
    if (uint32_t(state) >= AUDIO_MODE_CNT) {
        return BAD_VALUE;
    }

    ALOGV("setPhoneState()");

    // acquire lock before calling setMode() so that setMode() + setPhoneState() are an atomic
    // operation from policy manager standpoint (no other operation (e.g track start or stop)
    // can be interleaved).
    Mutex::Autolock _l(mLock);

    // TODO: check if it is more appropriate to do it in platform specific policy manager
    AudioSystem::setMode(state);

    mAudioPolicyManager->setPhoneState(state);
    mPhoneState = state;
    return NO_ERROR;
!!!380421.cpp!!!	setForceUse(in usage : audio_policy_force_use_t, in config : audio_policy_forced_cfg_t) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    if (!settingsAllowed()) {
        return PERMISSION_DENIED;
    }
    if (usage < 0 || usage >= AUDIO_POLICY_FORCE_USE_CNT) {
        return BAD_VALUE;
    }
    if (config < 0 || config >= AUDIO_POLICY_FORCE_CFG_CNT) {
        return BAD_VALUE;
    }
    ALOGV("setForceUse()");
    Mutex::Autolock _l(mLock);
    mAudioPolicyManager->setForceUse(usage, config);
    return NO_ERROR;
!!!380549.cpp!!!	getForceUse(in usage : audio_policy_force_use_t) : audio_policy_forced_cfg_t
    if (mAudioPolicyManager == NULL) {
        return AUDIO_POLICY_FORCE_NONE;
    }
    if (usage < 0 || usage >= AUDIO_POLICY_FORCE_USE_CNT) {
        return AUDIO_POLICY_FORCE_NONE;
    }
    return mAudioPolicyManager->getForceUse(usage);
!!!380677.cpp!!!	getOutput(in stream : audio_stream_type_t, in samplingRate : uint32_t = 0, in format : audio_format_t = AUDIO_FORMAT_DEFAULT, in channelMask : audio_channel_mask_t = 0, in flags : audio_output_flags_t = AUDIO_OUTPUT_FLAG_NONE, in offloadInfo : audio_offload_info_t = NULL) : audio_io_handle_t
    if (uint32_t(stream) >= AUDIO_STREAM_PUBLIC_CNT) {
        return AUDIO_IO_HANDLE_NONE;
    }
    if (mAudioPolicyManager == NULL) {
        return AUDIO_IO_HANDLE_NONE;
    }
    ALOGV("getOutput()");
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->getOutput(stream, samplingRate,
                                    format, channelMask, flags, offloadInfo);
!!!380805.cpp!!!	getOutputForAttr(in attr : audio_attributes_t, inout output : audio_io_handle_t, in session : audio_session_t, inout stream : audio_stream_type_t, in uid : uid_t, in config : audio_config_t, in flags : audio_output_flags_t, in selectedDeviceId : audio_port_handle_t, inout portId : audio_port_handle_t) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    ALOGV("getOutput()");
    Mutex::Autolock _l(mLock);

    const uid_t callingUid = IPCThreadState::self()->getCallingUid();
    if (!isTrustedCallingUid(callingUid) || uid == (uid_t)-1) {
        ALOGW_IF(uid != (uid_t)-1 && uid != callingUid,
                "%s uid %d tried to pass itself off as %d", __FUNCTION__, callingUid, uid);
        uid = callingUid;
    }
    return mAudioPolicyManager->getOutputForAttr(attr, output, session, stream, uid,
                                                 config,
                                                 flags, selectedDeviceId, portId);
!!!380933.cpp!!!	startOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : audio_session_t) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) {
        return BAD_VALUE;
    }
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    ALOGV("startOutput()");
    sp<AudioPolicyEffects>audioPolicyEffects;
    {
        Mutex::Autolock _l(mLock);
        audioPolicyEffects = mAudioPolicyEffects;
    }
    if (audioPolicyEffects != 0) {
        // create audio processors according to stream
        status_t status = audioPolicyEffects->addOutputSessionEffects(output, stream, session);
        if (status != NO_ERROR && status != ALREADY_EXISTS) {
            ALOGW("Failed to add effects on session %d", session);
        }
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->startOutput(output, stream, session);
!!!381061.cpp!!!	stopOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : audio_session_t) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) {
        return BAD_VALUE;
    }
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    ALOGV("stopOutput()");
    mOutputCommandThread->stopOutputCommand(output, stream, session);
    return NO_ERROR;
!!!381189.cpp!!!	releaseOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : audio_session_t) : void
    if (mAudioPolicyManager == NULL) {
        return;
    }
    ALOGV("releaseOutput()");
    mOutputCommandThread->releaseOutputCommand(output, stream, session);
!!!381317.cpp!!!	getInputForAttr(in attr : audio_attributes_t, inout input : audio_io_handle_t, in session : audio_session_t, in pid : pid_t, in uid : uid_t, in config : audio_config_base_t, in flags : audio_input_flags_t, in selectedDeviceId : audio_port_handle_t = AUDIO_PORT_HANDLE_NONE, inout portId : audio_port_handle_t = NULL) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    // already checked by client, but double-check in case the client wrapper is bypassed
    if (attr->source >= AUDIO_SOURCE_CNT && attr->source != AUDIO_SOURCE_HOTWORD &&
        attr->source != AUDIO_SOURCE_FM_TUNER) {
        return BAD_VALUE;
    }

    if ((attr->source == AUDIO_SOURCE_HOTWORD) && !captureHotwordAllowed()) {
        return BAD_VALUE;
    }
    sp<AudioPolicyEffects>audioPolicyEffects;
    status_t status;
    AudioPolicyInterface::input_type_t inputType;

    bool updatePid = (pid == -1);
    const uid_t callingUid = IPCThreadState::self()->getCallingUid();
    if (!isTrustedCallingUid(callingUid)) {
        ALOGW_IF(uid != (uid_t)-1 && uid != callingUid,
                "%s uid %d tried to pass itself off as %d", __FUNCTION__, callingUid, uid);
        uid = callingUid;
        updatePid = true;
    }

    if (updatePid) {
        const pid_t callingPid = IPCThreadState::self()->getCallingPid();
        ALOGW_IF(pid != (pid_t)-1 && pid != callingPid,
                 "%s uid %d pid %d tried to pass itself off as pid %d",
                 __func__, callingUid, callingPid, pid);
        pid = callingPid;
    }

    {
        Mutex::Autolock _l(mLock);
        // the audio_in_acoustics_t parameter is ignored by get_input()
        status = mAudioPolicyManager->getInputForAttr(attr, input, session, uid,
                                                     config,
                                                     flags, selectedDeviceId,
                                                     &inputType, portId);
        audioPolicyEffects = mAudioPolicyEffects;

        if (status == NO_ERROR) {
            // enforce permission (if any) required for each type of input
            switch (inputType) {
            case AudioPolicyInterface::API_INPUT_LEGACY:
                break;
            case AudioPolicyInterface::API_INPUT_TELEPHONY_RX:
                // FIXME: use the same permission as for remote submix for now.
            case AudioPolicyInterface::API_INPUT_MIX_CAPTURE:
                if (!captureAudioOutputAllowed(pid, uid)) {
                    ALOGE("getInputForAttr() permission denied: capture not allowed");
                    status = PERMISSION_DENIED;
                }
                break;
            case AudioPolicyInterface::API_INPUT_MIX_EXT_POLICY_REROUTE:
                if (!modifyAudioRoutingAllowed()) {
                    ALOGE("getInputForAttr() permission denied: modify audio routing not allowed");
                    status = PERMISSION_DENIED;
                }
                break;
            case AudioPolicyInterface::API_INPUT_INVALID:
            default:
                LOG_ALWAYS_FATAL("getInputForAttr() encountered an invalid input type %d",
                        (int)inputType);
            }
        }

        if (status != NO_ERROR) {
            if (status == PERMISSION_DENIED) {
                mAudioPolicyManager->releaseInput(*input, session);
            }
            return status;
        }
    }

    if (audioPolicyEffects != 0) {
        // create audio pre processors according to input source
        status_t status = audioPolicyEffects->addInputEffects(*input, attr->source, session);
        if (status != NO_ERROR && status != ALREADY_EXISTS) {
            ALOGW("Failed to add effects on input %d", *input);
        }
    }
    return NO_ERROR;
!!!381445.cpp!!!	startInput(in input : audio_io_handle_t, in session : audio_session_t) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    Mutex::Autolock _l(mLock);
    AudioPolicyInterface::concurrency_type__mask_t concurrency;
    status_t status = mAudioPolicyManager->startInput(input, session, &concurrency);

    if (status == NO_ERROR) {
        LOG_ALWAYS_FATAL_IF(concurrency & ~AudioPolicyInterface::API_INPUT_CONCURRENCY_ALL,
                            "startInput(): invalid concurrency type %d", (int)concurrency);

        // enforce permission (if any) required for each type of concurrency
        if (concurrency & AudioPolicyInterface::API_INPUT_CONCURRENCY_CALL) {
            //TODO: check incall capture permission
        }
        if (concurrency & AudioPolicyInterface::API_INPUT_CONCURRENCY_CAPTURE) {
            //TODO: check concurrent capture permission
        }
    }

    return status;
!!!381573.cpp!!!	stopInput(in input : audio_io_handle_t, in session : audio_session_t) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    Mutex::Autolock _l(mLock);

    return mAudioPolicyManager->stopInput(input, session);
!!!381701.cpp!!!	releaseInput(in input : audio_io_handle_t, in session : audio_session_t) : void
    if (mAudioPolicyManager == NULL) {
        return;
    }
    sp<AudioPolicyEffects>audioPolicyEffects;
    {
        Mutex::Autolock _l(mLock);
        audioPolicyEffects = mAudioPolicyEffects;
    }
    if (audioPolicyEffects != 0) {
        // release audio processors from the input
        status_t status = audioPolicyEffects->releaseInputEffects(input, session);
        if(status != NO_ERROR) {
            ALOGW("Failed to release effects on input %d", input);
        }
    }
    {
        Mutex::Autolock _l(mLock);
        mAudioPolicyManager->releaseInput(input, session);
    }
!!!381829.cpp!!!	initStreamVolume(in stream : audio_stream_type_t, in indexMin : int, in indexMax : int) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    if (!settingsAllowed()) {
        return PERMISSION_DENIED;
    }
    if (uint32_t(stream) >= AUDIO_STREAM_PUBLIC_CNT) {
        return BAD_VALUE;
    }
    Mutex::Autolock _l(mLock);
    mAudioPolicyManager->initStreamVolume(stream, indexMin, indexMax);
    return NO_ERROR;
!!!381957.cpp!!!	setStreamVolumeIndex(in stream : audio_stream_type_t, in index : int, in device : audio_devices_t) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    if (!settingsAllowed()) {
        return PERMISSION_DENIED;
    }
    if (uint32_t(stream) >= AUDIO_STREAM_PUBLIC_CNT) {
        return BAD_VALUE;
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->setStreamVolumeIndex(stream,
                                                    index,
                                                    device);
!!!382085.cpp!!!	getStreamVolumeIndex(in stream : audio_stream_type_t, inout index : int, in device : audio_devices_t) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    if (uint32_t(stream) >= AUDIO_STREAM_PUBLIC_CNT) {
        return BAD_VALUE;
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->getStreamVolumeIndex(stream,
                                                    index,
                                                    device);
!!!382213.cpp!!!	getStrategyForStream(in stream : audio_stream_type_t) : uint32_t
    if (uint32_t(stream) >= AUDIO_STREAM_PUBLIC_CNT) {
        return 0;
    }
    if (mAudioPolicyManager == NULL) {
        return 0;
    }
    return mAudioPolicyManager->getStrategyForStream(stream);
!!!382341.cpp!!!	getDevicesForStream(in stream : audio_stream_type_t) : audio_devices_t
    if (uint32_t(stream) >= AUDIO_STREAM_PUBLIC_CNT) {
        return AUDIO_DEVICE_NONE;
    }
    if (mAudioPolicyManager == NULL) {
        return AUDIO_DEVICE_NONE;
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->getDevicesForStream(stream);
!!!382469.cpp!!!	getOutputForEffect(in desc : effect_descriptor_t) : audio_io_handle_t
    // FIXME change return type to status_t, and return NO_INIT here
    if (mAudioPolicyManager == NULL) {
        return 0;
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->getOutputForEffect(desc);
!!!382597.cpp!!!	registerEffect(in desc : effect_descriptor_t, in io : audio_io_handle_t, in strategy : uint32_t, in session : audio_session_t, in id : int) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    Mutex::Autolock _l(mEffectsLock);
    return mAudioPolicyManager->registerEffect(desc, io, strategy, session, id);
!!!382725.cpp!!!	unregisterEffect(in id : int) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    Mutex::Autolock _l(mEffectsLock);
    return mAudioPolicyManager->unregisterEffect(id);
!!!382853.cpp!!!	setEffectEnabled(in id : int, in enabled : bool) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    Mutex::Autolock _l(mEffectsLock);
    return mAudioPolicyManager->setEffectEnabled(id, enabled);
!!!382981.cpp!!!	isStreamActive(in stream : audio_stream_type_t, in inPastMs : uint32_t = 0) : bool
    if (uint32_t(stream) >= AUDIO_STREAM_PUBLIC_CNT) {
        return false;
    }
    if (mAudioPolicyManager == NULL) {
        return false;
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->isStreamActive(stream, inPastMs);
!!!383109.cpp!!!	isStreamActiveRemotely(in stream : audio_stream_type_t, in inPastMs : uint32_t = 0) : bool
    if (uint32_t(stream) >= AUDIO_STREAM_PUBLIC_CNT) {
        return false;
    }
    if (mAudioPolicyManager == NULL) {
        return false;
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->isStreamActiveRemotely(stream, inPastMs);
!!!383237.cpp!!!	isSourceActive(in source : audio_source_t) : bool
    if (mAudioPolicyManager == NULL) {
        return false;
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->isSourceActive(source);
!!!383365.cpp!!!	queryDefaultPreProcessing(in audioSession : audio_session_t, inout descriptors : effect_descriptor_t, inout count : uint32_t) : status_t
    if (mAudioPolicyManager == NULL) {
        *count = 0;
        return NO_INIT;
    }
    sp<AudioPolicyEffects>audioPolicyEffects;
    {
        Mutex::Autolock _l(mLock);
        audioPolicyEffects = mAudioPolicyEffects;
    }
    if (audioPolicyEffects == 0) {
        *count = 0;
        return NO_INIT;
    }
    return audioPolicyEffects->queryDefaultInputEffects(
            (audio_session_t)audioSession, descriptors, count);
!!!383493.cpp!!!	onTransact(in code : uint32_t, in data : Parcel, inout reply : Parcel, in flags : uint32_t) : status_t
    return BnAudioPolicyService::onTransact(code, data, reply, flags);
!!!383621.cpp!!!	binderDied(in who : wp<IBinder>) : void
    ALOGW("binderDied() %p, calling pid %d", who.unsafe_get(),
            IPCThreadState::self()->getCallingPid());
!!!383749.cpp!!!	onFirstRef() : void
    {
        Mutex::Autolock _l(mLock);

        // start tone playback thread
        mTonePlaybackThread = new AudioCommandThread(String8("ApmTone"), this);
        // start audio commands thread
        mAudioCommandThread = new AudioCommandThread(String8("ApmAudio"), this);
        // start output activity command thread
        mOutputCommandThread = new AudioCommandThread(String8("ApmOutput"), this);

        mAudioPolicyClient = new AudioPolicyClient(this);
        mAudioPolicyManager = createAudioPolicyManager(mAudioPolicyClient);
    }
    // load audio processing modules
    sp<AudioPolicyEffects>audioPolicyEffects = new AudioPolicyEffects();
    {
        Mutex::Autolock _l(mLock);
        mAudioPolicyEffects = audioPolicyEffects;
    }
!!!383877.cpp!!!	setParameters(in ioHandle : audio_io_handle_t, in keyValuePairs : char, in delayMs : int) : void
    mAudioCommandThread->parametersCommand(ioHandle, keyValuePairs,
                                           delayMs);
!!!384005.cpp!!!	setStreamVolume(in stream : audio_stream_type_t, in volume : float, in output : audio_io_handle_t, in delayMs : int = 0) : status_t
    return (int)mAudioCommandThread->volumeCommand(stream, volume,
                                                   output, delayMs);
!!!384133.cpp!!!	startTone(in tone : audio_policy_tone_t, in stream : audio_stream_type_t) : status_t
    if (tone != AUDIO_POLICY_TONE_IN_CALL_NOTIFICATION) {
        ALOGE("startTone: illegal tone requested (%d)", tone);
    }
    if (stream != AUDIO_STREAM_VOICE_CALL) {
        ALOGE("startTone: illegal stream (%d) requested for tone %d", stream,
            tone);
    }
    mTonePlaybackThread->startToneCommand(ToneGenerator::TONE_SUP_CALL_WAITING,
                                          AUDIO_STREAM_VOICE_CALL);
    return 0;
!!!384261.cpp!!!	stopTone() : status_t
    mTonePlaybackThread->stopToneCommand();
    return 0;
!!!384389.cpp!!!	setVoiceVolume(in volume : float, in delayMs : int = 0) : status_t
    return (int)mAudioCommandThread->voiceVolumeCommand(volume, delayMs);
!!!384517.cpp!!!	isOffloadSupported(in info : audio_offload_info_t) : bool
    if (mAudioPolicyManager == NULL) {
        ALOGV("mAudioPolicyManager == NULL");
        return false;
    }
    Mutex::Autolock _l(mLock);
    Mutex::Autolock _le(mEffectsLock); // isOffloadSupported queries for
                                      // non-offloadable effects
    return mAudioPolicyManager->isOffloadSupported(info);
!!!384645.cpp!!!	listAudioPorts(in role : audio_port_role_t, in type : audio_port_type_t, inout num_ports : uint, inout ports : audio_port, inout generation : uint) : status_t
    Mutex::Autolock _l(mLock);
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }

    return mAudioPolicyManager->listAudioPorts(role, type, num_ports, ports, generation);
!!!384773.cpp!!!	getAudioPort(inout port : audio_port) : status_t
    Mutex::Autolock _l(mLock);
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }

    return mAudioPolicyManager->getAudioPort(port);
!!!384901.cpp!!!	createAudioPatch(in patch : audio_patch, inout handle : audio_patch_handle_t) : status_t
    Mutex::Autolock _l(mLock);
    if(!modifyAudioRoutingAllowed()) {
        return PERMISSION_DENIED;
    }
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    return mAudioPolicyManager->createAudioPatch(patch, handle,
                                                  IPCThreadState::self()->getCallingUid());
!!!385029.cpp!!!	releaseAudioPatch(in handle : audio_patch_handle_t) : status_t
    Mutex::Autolock _l(mLock);
    if(!modifyAudioRoutingAllowed()) {
        return PERMISSION_DENIED;
    }
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }

    return mAudioPolicyManager->releaseAudioPatch(handle,
                                                     IPCThreadState::self()->getCallingUid());
!!!385157.cpp!!!	listAudioPatches(inout num_patches : uint, inout patches : audio_patch, inout generation : uint) : status_t
    Mutex::Autolock _l(mLock);
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }

    return mAudioPolicyManager->listAudioPatches(num_patches, patches, generation);
!!!385285.cpp!!!	setAudioPortConfig(in config : audio_port_config) : status_t
    Mutex::Autolock _l(mLock);
    if(!modifyAudioRoutingAllowed()) {
        return PERMISSION_DENIED;
    }
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }

    return mAudioPolicyManager->setAudioPortConfig(config);
!!!385413.cpp!!!	registerClient(in client : sp<IAudioPolicyServiceClient>) : void
    if (client == 0) {
        ALOGW("%s got NULL client", __FUNCTION__);
        return;
    }
    Mutex::Autolock _l(mNotificationClientsLock);

    uid_t uid = IPCThreadState::self()->getCallingUid();
    if (mNotificationClients.indexOfKey(uid) < 0) {
        sp<NotificationClient> notificationClient = new NotificationClient(this,
                                                                           client,
                                                                           uid);
        ALOGV("registerClient() client %p, uid %d", client.get(), uid);

        mNotificationClients.add(uid, notificationClient);

        sp<IBinder> binder = IInterface::asBinder(client);
        binder->linkToDeath(notificationClient);
    }
!!!385541.cpp!!!	setAudioPortCallbacksEnabled(in enabled : bool) : void
    Mutex::Autolock _l(mNotificationClientsLock);

    uid_t uid = IPCThreadState::self()->getCallingUid();
    if (mNotificationClients.indexOfKey(uid) < 0) {
        return;
    }
    mNotificationClients.valueFor(uid)->setAudioPortCallbacksEnabled(enabled);
!!!385669.cpp!!!	acquireSoundTriggerSession(inout session : audio_session_t, inout ioHandle : audio_io_handle_t, inout device : audio_devices_t) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }

    return mAudioPolicyManager->acquireSoundTriggerSession(session, ioHandle, device);
!!!385797.cpp!!!	releaseSoundTriggerSession(in session : audio_session_t) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }

    return mAudioPolicyManager->releaseSoundTriggerSession(session);
!!!385925.cpp!!!	getPhoneState() : audio_mode_t
    Mutex::Autolock _l(mLock);
    return mPhoneState;
!!!386053.cpp!!!	registerPolicyMixes(in mixes : Vector<AudioMix>, in registration : bool) : status_t
    Mutex::Autolock _l(mLock);
    if(!modifyAudioRoutingAllowed()) {
        return PERMISSION_DENIED;
    }
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    if (registration) {
        return mAudioPolicyManager->registerPolicyMixes(mixes);
    } else {
        return mAudioPolicyManager->unregisterPolicyMixes(mixes);
    }
!!!386181.cpp!!!	startAudioSource(in source : audio_port_config, in attributes : audio_attributes_t, inout handle : audio_patch_handle_t) : status_t
    Mutex::Autolock _l(mLock);
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }

    return mAudioPolicyManager->startAudioSource(source, attributes, handle,
                                                 IPCThreadState::self()->getCallingUid());
!!!386309.cpp!!!	stopAudioSource(in handle : audio_patch_handle_t) : status_t
    Mutex::Autolock _l(mLock);
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }

    return mAudioPolicyManager->stopAudioSource(handle);
!!!386437.cpp!!!	setMasterMono(in mono : bool) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    if (!settingsAllowed()) {
        return PERMISSION_DENIED;
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->setMasterMono(mono);
!!!386565.cpp!!!	getMasterMono(inout mono : bool) : status_t
    if (mAudioPolicyManager == NULL) {
        return NO_INIT;
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->getMasterMono(mono);
!!!386693.cpp!!!	doStopOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : audio_session_t) : status_t
    ALOGV("doStopOutput from tid %d", gettid());
    sp<AudioPolicyEffects>audioPolicyEffects;
    {
        Mutex::Autolock _l(mLock);
        audioPolicyEffects = mAudioPolicyEffects;
    }
    if (audioPolicyEffects != 0) {
        // release audio processors from the stream
        status_t status = audioPolicyEffects->releaseOutputSessionEffects(output, stream, session);
        if (status != NO_ERROR && status != ALREADY_EXISTS) {
            ALOGW("Failed to release effects on session %d", session);
        }
    }
    Mutex::Autolock _l(mLock);
    return mAudioPolicyManager->stopOutput(output, stream, session);
!!!386821.cpp!!!	doReleaseOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : audio_session_t) : void
    ALOGV("doReleaseOutput from tid %d", gettid());
    Mutex::Autolock _l(mLock);
    mAudioPolicyManager->releaseOutput(output, stream, session);
!!!386949.cpp!!!	clientCreateAudioPatch(in patch : audio_patch, inout handle : audio_patch_handle_t, in delayMs : int) : status_t
    return mAudioCommandThread->createAudioPatchCommand(patch, handle, delayMs);
!!!387077.cpp!!!	clientReleaseAudioPatch(in handle : audio_patch_handle_t, in delayMs : int) : status_t
    return mAudioCommandThread->releaseAudioPatchCommand(handle, delayMs);
!!!387205.cpp!!!	clientSetAudioPortConfig(in config : audio_port_config, in delayMs : int) : status_t
    return mAudioCommandThread->setAudioPortConfigCommand(config, delayMs);
!!!387333.cpp!!!	removeNotificationClient(in uid : uid_t) : void
    {
        Mutex::Autolock _l(mNotificationClientsLock);
        mNotificationClients.removeItem(uid);
    }
    {
        Mutex::Autolock _l(mLock);
        if (mAudioPolicyManager) {
            mAudioPolicyManager->releaseResourcesForUid(uid);
        }
    }
!!!387461.cpp!!!	onAudioPortListUpdate() : void
    mOutputCommandThread->updateAudioPortListCommand();
!!!387589.cpp!!!	doOnAudioPortListUpdate() : void
    Mutex::Autolock _l(mNotificationClientsLock);
    for (size_t i = 0; i < mNotificationClients.size(); i++) {
        mNotificationClients.valueAt(i)->onAudioPortListUpdate();
    }
!!!387717.cpp!!!	onAudioPatchListUpdate() : void
    mOutputCommandThread->updateAudioPatchListCommand();
!!!387845.cpp!!!	doOnAudioPatchListUpdate() : void
    Mutex::Autolock _l(mNotificationClientsLock);
    for (size_t i = 0; i < mNotificationClients.size(); i++) {
        mNotificationClients.valueAt(i)->onAudioPatchListUpdate();
    }
!!!387973.cpp!!!	onDynamicPolicyMixStateUpdate(in regId : String8, in state : int32_t) : void
    ALOGV("AudioPolicyService::onDynamicPolicyMixStateUpdate(%s, %d)",
            regId.string(), state);
    mOutputCommandThread->dynamicPolicyMixStateUpdateCommand(regId, state);
!!!388101.cpp!!!	doOnDynamicPolicyMixStateUpdate(in regId : String8, in state : int32_t) : void
    Mutex::Autolock _l(mNotificationClientsLock);
    for (size_t i = 0; i < mNotificationClients.size(); i++) {
        mNotificationClients.valueAt(i)->onDynamicPolicyMixStateUpdate(regId, state);
    }
!!!388229.cpp!!!	onRecordingConfigurationUpdate(in event : int, in session : audio_session_t, in source : audio_source_t, in clientConfig : audio_config_base_t, in deviceConfig : audio_config_base_t, in patchHandle : audio_patch_handle_t) : void
    mOutputCommandThread->recordingConfigurationUpdateCommand(event, session, source,
            clientConfig, deviceConfig, patchHandle);
!!!388357.cpp!!!	doOnRecordingConfigurationUpdate(in event : int, in session : audio_session_t, in source : audio_source_t, in clientConfig : audio_config_base_t, in deviceConfig : audio_config_base_t, in patchHandle : audio_patch_handle_t) : void
    Mutex::Autolock _l(mNotificationClientsLock);
    for (size_t i = 0; i < mNotificationClients.size(); i++) {
        mNotificationClients.valueAt(i)->onRecordingConfigurationUpdate(event, session, source,
                clientConfig, deviceConfig, patchHandle);
    }
!!!388613.cpp!!!	~AudioPolicyService()
    mTonePlaybackThread->exit();
    mAudioCommandThread->exit();
    mOutputCommandThread->exit();

    destroyAudioPolicyManager(mAudioPolicyManager);
    delete mAudioPolicyClient;

    mNotificationClients.clear();
    mAudioPolicyEffects.clear();
!!!388741.cpp!!!	dumpInternals(in fd : int) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;

    snprintf(buffer, SIZE, "AudioPolicyManager: %p\n", mAudioPolicyManager);
    result.append(buffer);
    snprintf(buffer, SIZE, "Command Thread: %p\n", mAudioCommandThread.get());
    result.append(buffer);
    snprintf(buffer, SIZE, "Tones Thread: %p\n", mTonePlaybackThread.get());
    result.append(buffer);

    write(fd, result.string(), result.size());
    return NO_ERROR;
!!!396933.cpp!!!	dumpPermissionDenial(in fd : int) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;
    snprintf(buffer, SIZE, "Permission Denial: "
            "can't dump AudioPolicyService from pid=%d, uid=%d\n",
            IPCThreadState::self()->getCallingPid(),
            IPCThreadState::self()->getCallingUid());
    result.append(buffer);
    write(fd, result.string(), result.size());
    return NO_ERROR;
