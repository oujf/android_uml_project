class MetricsLogger
!!!9948165.java!!!	getLogger() : MetricsLogger
        if (sMetricsLogger == null) {
            sMetricsLogger = new MetricsLogger();
        }
        return sMetricsLogger;
!!!9948293.java!!!	saveLog(inout rep : Object [[]]) : void
        EventLogTags.writeSysuiMultiAction(rep);
!!!9948421.java!!!	write(inout content : LogMaker) : void
        if (content.getType() == MetricsEvent.TYPE_UNKNOWN) {
            content.setType(MetricsEvent.TYPE_ACTION);
        }
        saveLog(content.serialize());
!!!9948549.java!!!	visible(in category : int) : void
        if (Build.IS_DEBUGGABLE && category == VIEW_UNKNOWN) {
            throw new IllegalArgumentException("Must define metric category");
        }
        EventLogTags.writeSysuiViewVisibility(category, 100);
        saveLog(new LogMaker(category)
                        .setType(MetricsEvent.TYPE_OPEN)
                        .serialize());
!!!9948677.java!!!	hidden(in category : int) : void
        if (Build.IS_DEBUGGABLE && category == VIEW_UNKNOWN) {
            throw new IllegalArgumentException("Must define metric category");
        }
        EventLogTags.writeSysuiViewVisibility(category, 0);
        saveLog(new LogMaker(category)
                        .setType(MetricsEvent.TYPE_CLOSE)
                        .serialize());
!!!9948805.java!!!	visibility(in category : int, inout visibile : boolean) : void
        if (visibile) {
            visible(category);
        } else {
            hidden(category);
        }
!!!9948933.java!!!	visibility(in category : int, in vis : int) : void
        visibility(category, vis == View.VISIBLE);
!!!9949061.java!!!	action(in category : int) : void
        EventLogTags.writeSysuiAction(category, "");
        saveLog(new LogMaker(category)
                        .setType(MetricsEvent.TYPE_ACTION)
                        .serialize());
!!!9949189.java!!!	action(in category : int, in value : int) : void
        EventLogTags.writeSysuiAction(category, Integer.toString(value));
        saveLog(new LogMaker(category)
                        .setType(MetricsEvent.TYPE_ACTION)
                        .setSubtype(value)
                        .serialize());
!!!9949317.java!!!	action(in category : int, inout value : boolean) : void
        EventLogTags.writeSysuiAction(category, Boolean.toString(value));
        saveLog(new LogMaker(category)
                        .setType(MetricsEvent.TYPE_ACTION)
                        .setSubtype(value ? 1 : 0)
                        .serialize());
!!!9949445.java!!!	action(in category : int, in pkg : String) : void
        if (Build.IS_DEBUGGABLE && category == VIEW_UNKNOWN) {
            throw new IllegalArgumentException("Must define metric category");
        }
        EventLogTags.writeSysuiAction(category, pkg);
        saveLog(new LogMaker(category)
                .setType(MetricsEvent.TYPE_ACTION)
                .setPackageName(pkg)
                .serialize());
!!!9949573.java!!!	count(in name : String, in value : int) : void
        EventLogTags.writeSysuiCount(name, value);
        saveLog(new LogMaker(MetricsEvent.RESERVED_FOR_LOGBUILDER_COUNTER)
                        .setCounterName(name)
                        .setCounterValue(value)
                        .serialize());
!!!9949701.java!!!	histogram(in name : String, in bucket : int) : void
        // see LogHistogram in system/core/libmetricslogger/metrics_logger.cpp
        EventLogTags.writeSysuiHistogram(name, bucket);
        saveLog(new LogMaker(MetricsEvent.RESERVED_FOR_LOGBUILDER_HISTOGRAM)
                        .setCounterName(name)
                        .setCounterBucket(bucket)
                        .setCounterValue(1)
                        .serialize());
!!!9949829.java!!!	visible(inout context : Context, in category : int) : void
        getLogger().visible(category);
!!!9949957.java!!!	hidden(inout context : Context, in category : int) : void
        getLogger().hidden(category);
!!!9950085.java!!!	visibility(inout context : Context, in category : int, inout visibile : boolean) : void
        getLogger().visibility(category, visibile);
!!!9950213.java!!!	visibility(inout context : Context, in category : int, in vis : int) : void
        visibility(context, category, vis == View.VISIBLE);
!!!9950341.java!!!	action(inout context : Context, in category : int) : void
        getLogger().action(category);
!!!9950469.java!!!	action(inout context : Context, in category : int, in value : int) : void
        getLogger().action(category, value);
!!!9950597.java!!!	action(inout context : Context, in category : int, inout value : boolean) : void
        getLogger().action(category, value);
!!!9950725.java!!!	action(inout content : LogMaker) : void
        getLogger().write(content);
!!!9950853.java!!!	action(inout context : Context, in category : int, in pkg : String) : void
        getLogger().action(category, pkg);
!!!9950981.java!!!	count(inout context : Context, in name : String, in value : int) : void
        getLogger().count(name, value);
!!!9951109.java!!!	histogram(inout context : Context, in name : String, in bucket : int) : void
        getLogger().histogram(name, bucket);
