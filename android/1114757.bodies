class Builder
!!!5880325.java!!!	Builder(in jobId : int, inout jobService : ComponentName)
            mJobService = jobService;
            mJobId = jobId;
!!!5880453.java!!!	setPriority(in priority : int) : JobInfo::Builder
            mPriority = priority;
            return this;
!!!5880581.java!!!	setFlags(in flags : int) : JobInfo::Builder
            mFlags = flags;
            return this;
!!!5880709.java!!!	setExtras(inout extras : PersistableBundle) : JobInfo::Builder
            mExtras = extras;
            return this;
!!!5880837.java!!!	setTransientExtras(inout extras : Bundle) : JobInfo::Builder
            mTransientExtras = extras;
            return this;
!!!5880965.java!!!	setClipData(inout clip : ClipData, in grantFlags : int) : JobInfo::Builder
            mClipData = clip;
            mClipGrantFlags = grantFlags;
            return this;
!!!5881093.java!!!	setRequiredNetworkType(in networkType : int) : JobInfo::Builder
            mNetworkType = networkType;
            return this;
!!!5881221.java!!!	setRequiresCharging(inout requiresCharging : boolean) : JobInfo::Builder
            mConstraintFlags = (mConstraintFlags&~CONSTRAINT_FLAG_CHARGING)
                    | (requiresCharging ? CONSTRAINT_FLAG_CHARGING : 0);
            return this;
!!!5881349.java!!!	setRequiresBatteryNotLow(inout batteryNotLow : boolean) : JobInfo::Builder
            mConstraintFlags = (mConstraintFlags&~CONSTRAINT_FLAG_BATTERY_NOT_LOW)
                    | (batteryNotLow ? CONSTRAINT_FLAG_BATTERY_NOT_LOW : 0);
            return this;
!!!5881477.java!!!	setRequiresDeviceIdle(inout requiresDeviceIdle : boolean) : JobInfo::Builder
            mConstraintFlags = (mConstraintFlags&~CONSTRAINT_FLAG_DEVICE_IDLE)
                    | (requiresDeviceIdle ? CONSTRAINT_FLAG_DEVICE_IDLE : 0);
            return this;
!!!5881605.java!!!	setRequiresStorageNotLow(inout storageNotLow : boolean) : JobInfo::Builder
            mConstraintFlags = (mConstraintFlags&~CONSTRAINT_FLAG_STORAGE_NOT_LOW)
                    | (storageNotLow ? CONSTRAINT_FLAG_STORAGE_NOT_LOW : 0);
            return this;
!!!5881733.java!!!	addTriggerContentUri(inout uri : JobInfo::TriggerContentUri) : JobInfo::Builder
            if (mTriggerContentUris == null) {
                mTriggerContentUris = new ArrayList<>();
            }
            mTriggerContentUris.add(uri);
            return this;
!!!5881861.java!!!	setTriggerContentUpdateDelay(in durationMs : long) : JobInfo::Builder
            mTriggerContentUpdateDelay = durationMs;
            return this;
!!!5881989.java!!!	setTriggerContentMaxDelay(in durationMs : long) : JobInfo::Builder
            mTriggerContentMaxDelay = durationMs;
            return this;
!!!5882117.java!!!	setPeriodic(in intervalMillis : long) : JobInfo::Builder
            return setPeriodic(intervalMillis, intervalMillis);
!!!5882245.java!!!	setPeriodic(in intervalMillis : long, in flexMillis : long) : JobInfo::Builder
            mIsPeriodic = true;
            mIntervalMillis = intervalMillis;
            mFlexMillis = flexMillis;
            mHasEarlyConstraint = mHasLateConstraint = true;
            return this;
!!!5882373.java!!!	setMinimumLatency(in minLatencyMillis : long) : JobInfo::Builder
            mMinLatencyMillis = minLatencyMillis;
            mHasEarlyConstraint = true;
            return this;
!!!5882501.java!!!	setOverrideDeadline(in maxExecutionDelayMillis : long) : JobInfo::Builder
            mMaxExecutionDelayMillis = maxExecutionDelayMillis;
            mHasLateConstraint = true;
            return this;
!!!5882629.java!!!	setBackoffCriteria(in initialBackoffMillis : long, in backoffPolicy : int) : JobInfo::Builder
            mBackoffPolicySet = true;
            mInitialBackoffMillis = initialBackoffMillis;
            mBackoffPolicy = backoffPolicy;
            return this;
!!!5882757.java!!!	setPersisted(inout isPersisted : boolean) : JobInfo::Builder
            mIsPersisted = isPersisted;
            return this;
!!!5882885.java!!!	build() : JobInfo
            // Allow jobs with no constraints - What am I, a database?
            if (!mHasEarlyConstraint && !mHasLateConstraint && mConstraintFlags == 0 &&
                    mNetworkType == NETWORK_TYPE_NONE &&
                    mTriggerContentUris == null) {
                throw new IllegalArgumentException("You're trying to build a job with no " +
                        "constraints, this is not allowed.");
            }
            // Check that a deadline was not set on a periodic job.
            if (mIsPeriodic) {
                if (mMaxExecutionDelayMillis != 0L) {
                    throw new IllegalArgumentException("Can't call setOverrideDeadline() on a " +
                            "periodic job.");
                }
                if (mMinLatencyMillis != 0L) {
                    throw new IllegalArgumentException("Can't call setMinimumLatency() on a " +
                            "periodic job");
                }
                if (mTriggerContentUris != null) {
                    throw new IllegalArgumentException("Can't call addTriggerContentUri() on a " +
                            "periodic job");
                }
            }
            if (mIsPersisted) {
                if (mTriggerContentUris != null) {
                    throw new IllegalArgumentException("Can't call addTriggerContentUri() on a " +
                            "persisted job");
                }
                if (!mTransientExtras.isEmpty()) {
                    throw new IllegalArgumentException("Can't call setTransientExtras() on a " +
                            "persisted job");
                }
                if (mClipData != null) {
                    throw new IllegalArgumentException("Can't call setClipData() on a " +
                            "persisted job");
                }
            }
            if (mBackoffPolicySet && (mConstraintFlags & CONSTRAINT_FLAG_DEVICE_IDLE) != 0) {
                throw new IllegalArgumentException("An idle mode job will not respect any" +
                        " back-off policy, so calling setBackoffCriteria with" +
                        " setRequiresDeviceIdle is an error.");
            }
            JobInfo job = new JobInfo(this);
            if (job.isPeriodic()) {
                if (job.intervalMillis != job.getIntervalMillis()) {
                    StringBuilder builder = new StringBuilder();
                    builder.append("Specified interval for ")
                            .append(String.valueOf(mJobId))
                            .append(" is ");
                    formatDuration(mIntervalMillis, builder);
                    builder.append(". Clamped to ");
                    formatDuration(job.getIntervalMillis(), builder);
                    Log.w(TAG, builder.toString());
                }
                if (job.flexMillis != job.getFlexMillis()) {
                    StringBuilder builder = new StringBuilder();
                    builder.append("Specified flex for ")
                            .append(String.valueOf(mJobId))
                            .append(" is ");
                    formatDuration(mFlexMillis, builder);
                    builder.append(". Clamped to ");
                    formatDuration(job.getFlexMillis(), builder);
                    Log.w(TAG, builder.toString());
                }
            }
            return job;
