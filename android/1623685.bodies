class ThreadPriorityBooster
!!!10880389.java!!!	ThreadPriorityBooster(in boostToPriority : int, in lockGuardIndex : int)
        mBoostToPriority = boostToPriority;
        mLockGuardIndex = lockGuardIndex;
!!!10880517.java!!!	boost() : void
        final int tid = myTid();
        final int prevPriority = getThreadPriority(tid);
        final PriorityState state = mThreadState.get();
        if (state.regionCounter == 0) {
            state.prevPriority = prevPriority;
            if (prevPriority > mBoostToPriority) {
                setThreadPriority(tid, mBoostToPriority);
            }
        }
        state.regionCounter++;
        if (LockGuard.ENABLED) {
            LockGuard.guard(mLockGuardIndex);
        }
!!!10880645.java!!!	reset() : void
        final PriorityState state = mThreadState.get();
        state.regionCounter--;
        final int currentPriority = getThreadPriority(myTid());
        if (state.regionCounter == 0 && state.prevPriority != currentPriority) {
            setThreadPriority(myTid(), state.prevPriority);
        }
!!!10880773.java!!!	setBoostToPriority(in priority : int) : void

        // We don't care about the other threads here, as long as they see the update of this
        // variable immediately.
        mBoostToPriority = priority;
        final PriorityState state = mThreadState.get();
        final int tid = myTid();
        final int prevPriority = getThreadPriority(tid);
        if (state.regionCounter != 0 && prevPriority != priority) {
            setThreadPriority(tid, priority);
        }
