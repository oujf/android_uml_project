class Base64InputStream
!!!8419077.java!!!	Base64InputStream(inout in : InputStream, in flags : int)
        this(in, flags, false);
!!!8419205.java!!!	Base64InputStream(inout in : InputStream, in flags : int, inout encode : boolean)
        super(in);
        eof = false;
        inputBuffer = new byte[BUFFER_SIZE];
        if (encode) {
            coder = new Base64.Encoder(flags, null);
        } else {
            coder = new Base64.Decoder(flags, null);
        }
        coder.output = new byte[coder.maxOutputSize(BUFFER_SIZE)];
        outputStart = 0;
        outputEnd = 0;
!!!8419333.java!!!	markSupported() : boolean
        return false;
!!!8419461.java!!!	mark(in readlimit : int) : void
        throw new UnsupportedOperationException();
!!!8419589.java!!!	reset() : void
        throw new UnsupportedOperationException();
!!!8419717.java!!!	close() : void
        in.close();
        inputBuffer = null;
!!!8419845.java!!!	available() : int
        return outputEnd - outputStart;
!!!8419973.java!!!	skip(in n : long) : long
        if (outputStart >= outputEnd) {
            refill();
        }
        if (outputStart >= outputEnd) {
            return 0;
        }
        long bytes = Math.min(n, outputEnd-outputStart);
        outputStart += bytes;
        return bytes;
!!!8420101.java!!!	read() : int
        if (outputStart >= outputEnd) {
            refill();
        }
        if (outputStart >= outputEnd) {
            return -1;
        } else {
            return coder.output[outputStart++] & 0xff;
        }
!!!8420229.java!!!	read(inout b : byte [[]], in off : int, in len : int) : int
        if (outputStart >= outputEnd) {
            refill();
        }
        if (outputStart >= outputEnd) {
            return -1;
        }
        int bytes = Math.min(len, outputEnd-outputStart);
        System.arraycopy(coder.output, outputStart, b, off, bytes);
        outputStart += bytes;
        return bytes;
!!!8420357.java!!!	refill() : void
        if (eof) return;
        int bytesRead = in.read(inputBuffer);
        boolean success;
        if (bytesRead == -1) {
            eof = true;
            success = coder.process(EMPTY, 0, 0, true);
        } else {
            success = coder.process(inputBuffer, 0, bytesRead, false);
        }
        if (!success) {
            throw new Base64DataException("bad base-64");
        }
        outputEnd = coder.op;
        outputStart = 0;
