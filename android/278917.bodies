class RingBufferParcelable
!!!666117.cpp!!!	setupMemory(in sharedMemoryIndex : int32_t, in dataMemoryOffset : int32_t, in dataSizeInBytes : int32_t, in readCounterOffset : int32_t, in writeCounterOffset : int32_t, in counterSizeBytes : int32_t) : void
    mReadCounterParcelable.setup(sharedMemoryIndex, readCounterOffset, counterSizeBytes);
    mWriteCounterParcelable.setup(sharedMemoryIndex, writeCounterOffset, counterSizeBytes);
    mDataParcelable.setup(sharedMemoryIndex, dataMemoryOffset, dataSizeInBytes);
!!!666245.cpp!!!	setupMemory(in sharedMemoryIndex : int32_t, in dataMemoryOffset : int32_t, in dataSizeInBytes : int32_t) : void
    mReadCounterParcelable.setup(sharedMemoryIndex, 0, 0);
    mWriteCounterParcelable.setup(sharedMemoryIndex, 0, 0);
    mDataParcelable.setup(sharedMemoryIndex, dataMemoryOffset, dataSizeInBytes);
!!!666373.cpp!!!	getBytesPerFrame() : int32_t
    return mBytesPerFrame;
!!!666501.cpp!!!	setBytesPerFrame(in bytesPerFrame : int32_t) : void
    mBytesPerFrame = bytesPerFrame;
!!!666629.cpp!!!	getFramesPerBurst() : int32_t
    return mFramesPerBurst;
!!!666757.cpp!!!	setFramesPerBurst(in framesPerBurst : int32_t) : void
    mFramesPerBurst = framesPerBurst;
!!!666885.cpp!!!	getCapacityInFrames() : int32_t
    return mCapacityInFrames;
!!!667013.cpp!!!	setCapacityInFrames(in capacityInFrames : int32_t) : void
    mCapacityInFrames = capacityInFrames;
!!!667269.cpp!!!	writeToParcel(inout parcel : Parcel) : status_t
    status_t status = parcel->writeInt32(mCapacityInFrames);
    if (status != NO_ERROR) goto error;
    if (mCapacityInFrames > 0) {
        status = parcel->writeInt32(mBytesPerFrame);
        if (status != NO_ERROR) goto error;
        status = parcel->writeInt32(mFramesPerBurst);
        if (status != NO_ERROR) goto error;
        status = parcel->writeInt32(mFlags);
        if (status != NO_ERROR) goto error;
        status = mReadCounterParcelable.writeToParcel(parcel);
        if (status != NO_ERROR) goto error;
        status = mWriteCounterParcelable.writeToParcel(parcel);
        if (status != NO_ERROR) goto error;
        status = mDataParcelable.writeToParcel(parcel);
        if (status != NO_ERROR) goto error;
    }
    return NO_ERROR;
error:
    ALOGE("RingBufferParcelable::writeToParcel() error = %d", status);
    return status;
!!!667397.cpp!!!	readFromParcel(in parcel : Parcel) : status_t
    status_t status = parcel->readInt32(&mCapacityInFrames);
    if (status != NO_ERROR) goto error;
    if (mCapacityInFrames > 0) {
        status = parcel->readInt32(&mBytesPerFrame);
        if (status != NO_ERROR) goto error;
        status = parcel->readInt32(&mFramesPerBurst);
        if (status != NO_ERROR) goto error;
        status = parcel->readInt32((int32_t *)&mFlags);
        if (status != NO_ERROR) goto error;
        status = mReadCounterParcelable.readFromParcel(parcel);
        if (status != NO_ERROR) goto error;
        status = mWriteCounterParcelable.readFromParcel(parcel);
        if (status != NO_ERROR) goto error;
        status = mDataParcelable.readFromParcel(parcel);
        if (status != NO_ERROR) goto error;
    }
    return NO_ERROR;
error:
    ALOGE("RingBufferParcelable::readFromParcel() error = %d", status);
    return status;
!!!667525.cpp!!!	resolve(inout memoryParcels : SharedMemoryParcelable, inout descriptor : RingBufferDescriptor) : aaudio_result_t
    aaudio_result_t result;

    result = mReadCounterParcelable.resolve(memoryParcels,
                                            (void **) &descriptor->readCounterAddress);
    if (result != AAUDIO_OK) {
        return result;
    }

    result = mWriteCounterParcelable.resolve(memoryParcels,
                                             (void **) &descriptor->writeCounterAddress);
    if (result != AAUDIO_OK) {
        return result;
    }

    result = mDataParcelable.resolve(memoryParcels, (void **) &descriptor->dataAddress);
    if (result != AAUDIO_OK) {
        return result;
    }

    descriptor->bytesPerFrame = mBytesPerFrame;
    descriptor->framesPerBurst = mFramesPerBurst;
    descriptor->capacityInFrames = mCapacityInFrames;
    descriptor->flags = mFlags;
    return AAUDIO_OK;
!!!667653.cpp!!!	validate() : aaudio_result_t
    aaudio_result_t result;
    if (mCapacityInFrames < 0 || mCapacityInFrames >= 32 * 1024) {
        ALOGE("RingBufferParcelable invalid mCapacityInFrames = %d", mCapacityInFrames);
        return AAUDIO_ERROR_INTERNAL;
    }
    if (mBytesPerFrame < 0 || mBytesPerFrame >= 256) {
        ALOGE("RingBufferParcelable invalid mBytesPerFrame = %d", mBytesPerFrame);
        return AAUDIO_ERROR_INTERNAL;
    }
    if (mFramesPerBurst < 0 || mFramesPerBurst >= 16 * 1024) {
        ALOGE("RingBufferParcelable invalid mFramesPerBurst = %d", mFramesPerBurst);
        return AAUDIO_ERROR_INTERNAL;
    }
    if ((result = mReadCounterParcelable.validate()) != AAUDIO_OK) {
        ALOGE("RingBufferParcelable invalid mReadCounterParcelable = %d", result);
        return result;
    }
    if ((result = mWriteCounterParcelable.validate()) != AAUDIO_OK) {
        ALOGE("RingBufferParcelable invalid mWriteCounterParcelable = %d", result);
        return result;
    }
    if ((result = mDataParcelable.validate()) != AAUDIO_OK) {
        ALOGE("RingBufferParcelable invalid mDataParcelable = %d", result);
        return result;
    }
    return AAUDIO_OK;
!!!667781.cpp!!!	dump() : void
    ALOGD("RingBufferParcelable mCapacityInFrames = %d ---------", mCapacityInFrames);
    if (mCapacityInFrames > 0) {
        ALOGD("RingBufferParcelable mBytesPerFrame = %d", mBytesPerFrame);
        ALOGD("RingBufferParcelable mFramesPerBurst = %d", mFramesPerBurst);
        ALOGD("RingBufferParcelable mFlags = %u", mFlags);
        mReadCounterParcelable.dump();
        mWriteCounterParcelable.dump();
        mDataParcelable.dump();
    }
