class SurfaceInterceptorTest
!!!15210245.cpp!!!	positionUpdateFound(in change : SurfaceChange, in foundPosition : bool) : bool
    // There should only be one position transaction with x and y = POSITION_UPDATE
    bool hasX(change.position().x() == POSITION_UPDATE);
    bool hasY(change.position().y() == POSITION_UPDATE);
    if (hasX && hasY && !foundPosition) {
        foundPosition = true;
    }
    // Failed because the position update was found a second time
    else if (hasX && hasY && foundPosition) {
        [] () { FAIL(); }();
    }
    return foundPosition;
!!!15210373.cpp!!!	sizeUpdateFound(in change : SurfaceChange, in foundSize : bool) : bool
    bool hasWidth(change.size().h() == SIZE_UPDATE);
    bool hasHeight(change.size().w() == SIZE_UPDATE);
    if (hasWidth && hasHeight && !foundSize) {
        foundSize = true;
    }
    else if (hasWidth && hasHeight && foundSize) {
        [] () { FAIL(); }();
    }
    return foundSize;
!!!15210501.cpp!!!	alphaUpdateFound(in change : SurfaceChange, in foundAlpha : bool) : bool
    bool hasAlpha(change.alpha().alpha() == ALPHA_UPDATE);
    if (hasAlpha && !foundAlpha) {
        foundAlpha = true;
    }
    else if (hasAlpha && foundAlpha) {
        [] () { FAIL(); }();
    }
    return foundAlpha;
!!!15210629.cpp!!!	layerUpdateFound(in change : SurfaceChange, in foundLayer : bool) : bool
    bool hasLayer(change.layer().layer() == LAYER_UPDATE);
    if (hasLayer && !foundLayer) {
        foundLayer = true;
    }
    else if (hasLayer && foundLayer) {
        [] () { FAIL(); }();
    }
    return foundLayer;
!!!15210757.cpp!!!	cropUpdateFound(in change : SurfaceChange, in foundCrop : bool) : bool
    bool hasLeft(change.crop().rectangle().left() == CROP_UPDATE.left);
    bool hasTop(change.crop().rectangle().top() == CROP_UPDATE.top);
    bool hasRight(change.crop().rectangle().right() == CROP_UPDATE.right);
    bool hasBottom(change.crop().rectangle().bottom() == CROP_UPDATE.bottom);
    if (hasLeft && hasRight && hasTop && hasBottom && !foundCrop) {
        foundCrop = true;
    }
    else if (hasLeft && hasRight && hasTop && hasBottom && foundCrop) {
        [] () { FAIL(); }();
    }
    return foundCrop;
!!!15210885.cpp!!!	finalCropUpdateFound(in change : SurfaceChange, in foundFinalCrop : bool) : bool
    bool hasLeft(change.final_crop().rectangle().left() == CROP_UPDATE.left);
    bool hasTop(change.final_crop().rectangle().top() == CROP_UPDATE.top);
    bool hasRight(change.final_crop().rectangle().right() == CROP_UPDATE.right);
    bool hasBottom(change.final_crop().rectangle().bottom() == CROP_UPDATE.bottom);
    if (hasLeft && hasRight && hasTop && hasBottom && !foundFinalCrop) {
        foundFinalCrop = true;
    }
    else if (hasLeft && hasRight && hasTop && hasBottom && foundFinalCrop) {
        [] () { FAIL(); }();
    }
    return foundFinalCrop;
!!!15211013.cpp!!!	matrixUpdateFound(in change : SurfaceChange, in foundMatrix : bool) : bool
    bool hasSx((float)change.matrix().dsdx() == (float)M_SQRT1_2);
    bool hasTx((float)change.matrix().dtdx() == (float)M_SQRT1_2);
    bool hasSy((float)change.matrix().dsdy() == (float)-M_SQRT1_2);
    bool hasTy((float)change.matrix().dtdy() == (float)M_SQRT1_2);
    if (hasSx && hasTx && hasSy && hasTy && !foundMatrix) {
        foundMatrix = true;
    }
    else if (hasSx && hasTx && hasSy && hasTy && foundMatrix) {
        [] () { FAIL(); }();
    }
    return foundMatrix;
!!!15211141.cpp!!!	scalingModeUpdateFound(in change : SurfaceChange, in foundScalingMode : bool) : bool
    bool hasScalingUpdate(change.override_scaling_mode().override_scaling_mode() == SCALING_UPDATE);
    if (hasScalingUpdate && !foundScalingMode) {
        foundScalingMode = true;
    }
    else if (hasScalingUpdate && foundScalingMode) {
        [] () { FAIL(); }();
    }
    return foundScalingMode;
!!!15211269.cpp!!!	transparentRegionHintUpdateFound(in change : SurfaceChange, in foundTransparentRegion : bool) : bool
    auto traceRegion = change.transparent_region_hint().region(0);
    bool hasLeft(traceRegion.left() == CROP_UPDATE.left);
    bool hasTop(traceRegion.top() == CROP_UPDATE.top);
    bool hasRight(traceRegion.right() == CROP_UPDATE.right);
    bool hasBottom(traceRegion.bottom() == CROP_UPDATE.bottom);
    if (hasLeft && hasRight && hasTop && hasBottom && !foundTransparentRegion) {
        foundTransparentRegion = true;
    }
    else if (hasLeft && hasRight && hasTop && hasBottom && foundTransparentRegion) {
        [] () { FAIL(); }();
    }
    return foundTransparentRegion;
!!!15211397.cpp!!!	layerStackUpdateFound(in change : SurfaceChange, in foundLayerStack : bool) : bool
    bool hasLayerStackUpdate(change.layer_stack().layer_stack() == STACK_UPDATE);
    if (hasLayerStackUpdate && !foundLayerStack) {
        foundLayerStack = true;
    }
    else if (hasLayerStackUpdate && foundLayerStack) {
        [] () { FAIL(); }();
    }
    return foundLayerStack;
!!!15211525.cpp!!!	hiddenFlagUpdateFound(in change : SurfaceChange, in foundHiddenFlag : bool) : bool
    bool hasHiddenFlag(change.hidden_flag().hidden_flag());
    if (hasHiddenFlag && !foundHiddenFlag) {
        foundHiddenFlag = true;
    }
    else if (hasHiddenFlag && foundHiddenFlag) {
        [] () { FAIL(); }();
    }
    return foundHiddenFlag;
!!!15211653.cpp!!!	opaqueFlagUpdateFound(in change : SurfaceChange, in foundOpaqueFlag : bool) : bool
    bool hasOpaqueFlag(change.opaque_flag().opaque_flag());
    if (hasOpaqueFlag && !foundOpaqueFlag) {
        foundOpaqueFlag = true;
    }
    else if (hasOpaqueFlag && foundOpaqueFlag) {
        [] () { FAIL(); }();
    }
    return foundOpaqueFlag;
!!!15211781.cpp!!!	secureFlagUpdateFound(in change : SurfaceChange, in foundSecureFlag : bool) : bool
    bool hasSecureFlag(change.secure_flag().secure_flag());
    if (hasSecureFlag && !foundSecureFlag) {
        foundSecureFlag = true;
    }
    else if (hasSecureFlag && foundSecureFlag) {
        [] () { FAIL(); }();
    }
    return foundSecureFlag;
!!!15211909.cpp!!!	deferredTransactionUpdateFound(in change : SurfaceChange, in foundDeferred : bool) : bool
    bool hasId(change.deferred_transaction().layer_id() == mBGLayerId);
    bool hasFrameNumber(change.deferred_transaction().frame_number() == DEFERRED_UPDATE);
    if (hasId && hasFrameNumber && !foundDeferred) {
        foundDeferred = true;
    }
    else if (hasId && hasFrameNumber && foundDeferred) {
        [] () { FAIL(); }();
    }
    return foundDeferred;
!!!15212037.cpp!!!	surfaceUpdateFound(inout trace : Trace, in changeCase : SurfaceChange::SurfaceChangeCase) : bool
    bool foundUpdate = false;
    for (const auto& increment : *trace->mutable_increment()) {
        if (increment.increment_case() == increment.kTransaction) {
            for (const auto& change : increment.transaction().surface_change()) {
                if (change.id() == mBGLayerId && change.SurfaceChange_case() == changeCase) {
                    switch (changeCase) {
                        case SurfaceChange::SurfaceChangeCase::kPosition:
                            // foundUpdate is sent for the tests to fail on duplicated increments
                            foundUpdate = positionUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kSize:
                            foundUpdate = sizeUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kAlpha:
                            foundUpdate = alphaUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kLayer:
                            foundUpdate = layerUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kCrop:
                            foundUpdate = cropUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kFinalCrop:
                            foundUpdate = finalCropUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kMatrix:
                            foundUpdate = matrixUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kOverrideScalingMode:
                            foundUpdate = scalingModeUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kTransparentRegionHint:
                            foundUpdate = transparentRegionHintUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kLayerStack:
                            foundUpdate = layerStackUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kHiddenFlag:
                            foundUpdate = hiddenFlagUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kOpaqueFlag:
                            foundUpdate = opaqueFlagUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kSecureFlag:
                            foundUpdate = secureFlagUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::kDeferredTransaction:
                            foundUpdate = deferredTransactionUpdateFound(change, foundUpdate);
                            break;
                        case SurfaceChange::SurfaceChangeCase::SURFACECHANGE_NOT_SET:
                            break;
                    }
                }
            }
        }
    }
    return foundUpdate;
!!!15212165.cpp!!!	assertAllUpdatesFound(inout trace : Trace) : void
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kPosition));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kSize));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kAlpha));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kLayer));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kCrop));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kFinalCrop));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kMatrix));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kOverrideScalingMode));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kTransparentRegionHint));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kLayerStack));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kHiddenFlag));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kOpaqueFlag));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kSecureFlag));
    ASSERT_TRUE(surfaceUpdateFound(trace, SurfaceChange::SurfaceChangeCase::kDeferredTransaction));
!!!15212293.cpp!!!	surfaceCreationFound(in increment : Increment, in foundSurface : bool) : bool
    bool isMatch(increment.surface_creation().name() == LAYER_NAME &&
            increment.surface_creation().w() == SIZE_UPDATE &&
            increment.surface_creation().h() == SIZE_UPDATE);
    if (isMatch && !foundSurface) {
        foundSurface = true;
    }
    else if (isMatch && foundSurface) {
        [] () { FAIL(); }();
    }
    return foundSurface;
!!!15212421.cpp!!!	surfaceDeletionFound(in increment : Increment, in foundSurface : bool) : bool
    bool isMatch(increment.surface_deletion().id() == mTargetId);
    if (isMatch && !foundSurface) {
        foundSurface = true;
    }
    else if (isMatch && foundSurface) {
        [] () { FAIL(); }();
    }
    return foundSurface;
!!!15212549.cpp!!!	displayCreationFound(in increment : Increment, in foundDisplay : bool) : bool
    bool isMatch(increment.display_creation().name() == DISPLAY_NAME.string() &&
            increment.display_creation().is_secure());
    if (isMatch && !foundDisplay) {
        foundDisplay = true;
    }
    else if (isMatch && foundDisplay) {
        [] () { FAIL(); }();
    }
    return foundDisplay;
!!!15212677.cpp!!!	displayDeletionFound(in increment : Increment, in foundDisplay : bool) : bool
    bool isMatch(increment.display_deletion().id() == mTargetId);
    if (isMatch && !foundDisplay) {
        foundDisplay = true;
    }
    else if (isMatch && foundDisplay) {
        [] () { FAIL(); }();
    }
    return foundDisplay;
!!!15212805.cpp!!!	singleIncrementFound(inout trace : Trace, in incrementCase : Increment::IncrementCase) : bool
    bool foundIncrement = false;
    for (const auto& increment : *trace->mutable_increment()) {
        if (increment.increment_case() == incrementCase) {
            switch (incrementCase) {
                case Increment::IncrementCase::kSurfaceCreation:
                    foundIncrement = surfaceCreationFound(increment, foundIncrement);
                    break;
                case Increment::IncrementCase::kSurfaceDeletion:
                    foundIncrement = surfaceDeletionFound(increment, foundIncrement);
                    break;
                case Increment::IncrementCase::kDisplayCreation:
                    foundIncrement = displayCreationFound(increment, foundIncrement);
                    break;
                case Increment::IncrementCase::kDisplayDeletion:
                    foundIncrement = displayDeletionFound(increment, foundIncrement);
                    break;
                default:
                    /* code */
                    break;
            }
        }
    }
    return foundIncrement;
!!!15212933.cpp!!!	bufferUpdatesFound(inout trace : Trace) : bool
    uint32_t updates = 0;
    for (const auto& inc : *trace->mutable_increment()) {
        if (inc.increment_case() == inc.kBufferUpdate && inc.buffer_update().id() == mBGLayerId) {
            updates++;
        }
    }
    return updates == BUFFER_UPDATES;
!!!15213061.cpp!!!	positionUpdate() : void
    mBGSurfaceControl->setPosition(POSITION_UPDATE, POSITION_UPDATE);
!!!15213189.cpp!!!	sizeUpdate() : void
    mBGSurfaceControl->setSize(SIZE_UPDATE, SIZE_UPDATE);
!!!15213317.cpp!!!	alphaUpdate() : void
    mBGSurfaceControl->setAlpha(ALPHA_UPDATE);
!!!15213445.cpp!!!	layerUpdate() : void
    mBGSurfaceControl->setLayer(LAYER_UPDATE);
!!!15213573.cpp!!!	cropUpdate() : void
    mBGSurfaceControl->setCrop(CROP_UPDATE);
!!!15213701.cpp!!!	finalCropUpdate() : void
    mBGSurfaceControl->setFinalCrop(CROP_UPDATE);
!!!15213829.cpp!!!	matrixUpdate() : void
    mBGSurfaceControl->setMatrix(M_SQRT1_2, M_SQRT1_2, -M_SQRT1_2, M_SQRT1_2);
!!!15213957.cpp!!!	overrideScalingModeUpdate() : void
    mBGSurfaceControl->setOverrideScalingMode(SCALING_UPDATE);
!!!15214085.cpp!!!	transparentRegionHintUpdate() : void
    Region region(CROP_UPDATE);
    mBGSurfaceControl->setTransparentRegionHint(region);
!!!15214213.cpp!!!	layerStackUpdate() : void
    mBGSurfaceControl->setLayerStack(STACK_UPDATE);
!!!15214341.cpp!!!	hiddenFlagUpdate() : void
    mBGSurfaceControl->setFlags(layer_state_t::eLayerHidden, layer_state_t::eLayerHidden);
!!!15214469.cpp!!!	opaqueFlagUpdate() : void
    mBGSurfaceControl->setFlags(layer_state_t::eLayerOpaque, layer_state_t::eLayerOpaque);
!!!15214597.cpp!!!	secureFlagUpdate() : void
    mBGSurfaceControl->setFlags(layer_state_t::eLayerSecure, layer_state_t::eLayerSecure);
!!!15214725.cpp!!!	deferredTransactionUpdate() : void
    mBGSurfaceControl->deferTransactionUntil(mBGSurfaceControl->getHandle(), DEFERRED_UPDATE);
!!!15214853.cpp!!!	runAllUpdates() : void
    runInTransaction(&SurfaceInterceptorTest::positionUpdate);
    runInTransaction(&SurfaceInterceptorTest::sizeUpdate);
    runInTransaction(&SurfaceInterceptorTest::alphaUpdate);
    runInTransaction(&SurfaceInterceptorTest::layerUpdate);
    runInTransaction(&SurfaceInterceptorTest::cropUpdate);
    runInTransaction(&SurfaceInterceptorTest::finalCropUpdate);
    runInTransaction(&SurfaceInterceptorTest::matrixUpdate);
    runInTransaction(&SurfaceInterceptorTest::overrideScalingModeUpdate);
    runInTransaction(&SurfaceInterceptorTest::transparentRegionHintUpdate);
    runInTransaction(&SurfaceInterceptorTest::layerStackUpdate);
    runInTransaction(&SurfaceInterceptorTest::hiddenFlagUpdate);
    runInTransaction(&SurfaceInterceptorTest::opaqueFlagUpdate);
    runInTransaction(&SurfaceInterceptorTest::secureFlagUpdate);
    runInTransaction(&SurfaceInterceptorTest::deferredTransactionUpdate);
!!!15214981.cpp!!!	surfaceCreation() : void
    mComposerClient->createSurface(String8(LAYER_NAME), SIZE_UPDATE, SIZE_UPDATE,
            PIXEL_FORMAT_RGBA_8888, 0);
!!!15215109.cpp!!!	nBufferUpdates() : void
    std::random_device rd;
    std::mt19937_64 gen(rd());
    // This makes testing fun
    std::uniform_int_distribution<uint8_t> dis;
    for (uint32_t i = 0; i < BUFFER_UPDATES; ++i) {
        fillSurfaceRGBA8(mBGSurfaceControl, dis(gen), dis(gen), dis(gen));
    }
!!!15215237.cpp!!!	displayCreation() : void
    sp<IBinder> testDisplay = SurfaceComposerClient::createDisplay(DISPLAY_NAME, true);
    SurfaceComposerClient::destroyDisplay(testDisplay);
!!!15215365.cpp!!!	displayDeletion() : void
    sp<IBinder> testDisplay = SurfaceComposerClient::createDisplay(DISPLAY_NAME, false);
    mTargetId = getDisplayId(DISPLAY_NAME.string());
    SurfaceComposerClient::destroyDisplay(testDisplay);
