format 214
"src" // source::frameworks::av::media::libaaudio::examples::loopback::src
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/media/libaaudio/examples/loopback/src/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/media/libaaudio/examples/loopback/src/"
  classview 153477 "src"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 285317 "AudioRecorder"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      operation 711173 "AudioRecorder"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 711301 "~AudioRecorder"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        delete[] mData;
    };
"
	
	
	
	
      end

      operation 711429 "allocate"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "maxFrames" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        delete[] mData;
        mData = new float[maxFrames];
        mMaxFrames = maxFrames;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 711557 "record"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "inputData" explicit_type "int16_t"
	  param in name "inputChannelCount" explicit_type "int"
	  param in name "numFrames" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        // stop at end of buffer
        if ((mFrameCounter + numFrames) > mMaxFrames) {
            numFrames = mMaxFrames - mFrameCounter;
        }
        for (int i = 0; i < numFrames; i++) {
            mData[mFrameCounter++] = inputData[i * inputChannelCount] * (1.0f / 32768);
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 711685 "record"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "inputData" explicit_type "float"
	  param in name "inputChannelCount" explicit_type "int"
	  param in name "numFrames" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        // stop at end of buffer
        if ((mFrameCounter + numFrames) > mMaxFrames) {
            numFrames = mMaxFrames - mFrameCounter;
        }
        for (int i = 0; i < numFrames; i++) {
            mData[mFrameCounter++] = inputData[i * inputChannelCount];
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 711813 "save"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "fileName" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        FILE *fid = fopen(fileName, \"wb\");
        if (fid == NULL) {
            return errno;
        }
        int written = fwrite(mData, sizeof(float), mFrameCounter, fid);
        fclose(fid);
        return written;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      attribute 465157 "mData"
	private explicit_type "float"
	init_value "=  NULL"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 465285 "mFrameCounter"
	private explicit_type "int32_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 465413 "mMaxFrames"
	private explicit_type "int32_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 285445 "LoopbackProcessor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ====================================================================================
 ========================= Loopback Processor =======================================
 ===================================================================================="
      operation 711941 "calculateAverageLatency"
	cpp_inline public explicit_return_type "double"
	nparams 1
	  param inout name "deviation" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (mLatencyCount <= 0) {
            return -1.0;
        }
        double sum = 0.0;
        for (int i = 0; i < mLatencyCount; i++) {
            sum += mLatencyArray[i];
        }
        double average = sum /  mLatencyCount;
        sum = 0.0;
        for (int i = 0; i < mLatencyCount; i++) {
            double error = average - mLatencyArray[i];
            sum += error * error; // squared
        }
        *deviation = sqrt(sum / mLatencyCount);
        return average;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Calculate mean and standard deviation."
      end

      operation 712069 "getMaxAmplitude"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mMaxAmplitude; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 712197 "getMeasurementCount"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mLatencyCount; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 712325 "getAverageAmplitude"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mAmplitudeTotal / mAmplitudeCount; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 712453 "process"
	cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "inputData" explicit_type "float"
	  param in name "inputChannelCount" explicit_type "int"
	  param inout name "outputData" explicit_type "float"
	  param in name "outputChannelCount" explicit_type "int"
	  param in name "numFrames" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        (void) outputChannelCount;

        // Measure peak and average amplitude.
        for (int i = 0; i < numFrames; i++) {
            float sample = inputData[i * inputChannelCount];
            if (sample > mMaxAmplitude) {
                mMaxAmplitude = sample;
            }
            if (sample < 0) {
                sample = 0 - sample;
            }
            mAmplitudeTotal += sample;
            mAmplitudeCount++;
        }

        // Clear output.
        memset(outputData, 0, numFrames * outputChannelCount * sizeof(float));

        // Wait a while between hearing the pulse and starting a new one.
        if (mState == STATE_SILENT) {
            mCounter += numFrames;
            if (mCounter > SILENCE_FRAMES) {
                //printf(\"LoopbackProcessor send impulse, burst #%d\\n\", mBurstCounter);
                // copy impulse
                for (float sample : mImpulse) {
                    *outputData = sample;
                    outputData += outputChannelCount;
                }
                mState = STATE_LISTENING;
                mCounter = 0;
            }
        }
        // Start listening as soon as we send the impulse.
        if (mState ==  STATE_LISTENING) {
            for (int i = 0; i < numFrames; i++) {
                float sample = inputData[i * inputChannelCount];
                if (sample >= INPUT_PEAK_THRESHOLD) {
                    mLatencyArray[mLatencyCount++] = mCounter;
                    if (mLatencyCount >= MAX_LATENCY_VALUES) {
                        mState = STATE_DONE;
                    } else {
                        mState = STATE_SILENT;
                    }
                    mCounter = 0;
                    break;
                } else {
                    mCounter++;
                }
            }
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " TODO Convert this to a feedback circuit and then use auto-correlation to measure the period."
      end

      operation 712581 "echo"
	cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "inputData" explicit_type "float"
	  param in name "inputChannelCount" explicit_type "int"
	  param inout name "outputData" explicit_type "float"
	  param in name "outputChannelCount" explicit_type "int"
	  param in name "numFrames" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        int channelsValid = (inputChannelCount < outputChannelCount)
            ? inputChannelCount : outputChannelCount;
        for (int i = 0; i < numFrames; i++) {
            int ic;
            for (ic = 0; ic < channelsValid; ic++) {
                outputData[ic] = inputData[ic];
            }
            for (ic = 0; ic < outputChannelCount; ic++) {
                outputData[ic] = 0;
            }
            inputData += inputChannelCount;
            outputData += outputChannelCount;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      class 285573 "anonymous11"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 465541 "STATE_SILENT"
	  public type class_ref 285573 // anonymous11
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 465669 "STATE_LISTENING"
	  public type class_ref 285573 // anonymous11
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 465797 "STATE_DONE"
	  public type class_ref 285573 // anonymous11
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 285701 "anonymous12"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 465925 "MAX_LATENCY_VALUES"
	  public type class_ref 285701 // anonymous12
	  init_value " 64
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 466053 "mState"
	private explicit_type "int"
	init_value "=  STATE_SILENT"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 466181 "mCounter"
	private explicit_type "int32_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 466309 "mLatencyArray"
	private explicit_type "int32_t"
	multiplicity "[MAX_LATENCY_VALUES]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 466437 "mLatencyCount"
	private explicit_type "int32_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 466565 "mMaxAmplitude"
	private explicit_type "float"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 466693 "mAmplitudeTotal"
	private explicit_type "float"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 466821 "mAmplitudeCount"
	private explicit_type "int32_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 466949 "mImpulse"
	class_attribute const_attribute private explicit_type "float"
	multiplicity "[5]"
	init_value "= {0.5f, 0.9f, 0.0f, -0.9f, -0.5f}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 285829 "LoopbackData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " TODO make this a class that manages its own buffer allocation"
      classrelation 322693 // inputStream (<unidirectional association>)
	relation 322693 --->
	  a role_name "inputStream" init_value "=  nullptr" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 322693 // inputStream (<unidirectional association>)
	  b parent class_ref 273669 // AAudioStream
      end

      attribute 467077 "inputFramesMaximum"
	public explicit_type "int32_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 467205 "inputData"
	public explicit_type "int16_t"
	init_value "=  nullptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 467333 "conversionBuffer"
	public explicit_type "float"
	init_value "=  nullptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 467461 "actualInputChannelCount"
	public explicit_type "int32_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 467589 "actualOutputChannelCount"
	public explicit_type "int32_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 467717 "inputBuffersToDiscard"
	public explicit_type "int32_t"
	init_value "=  10"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 322821 // inputError (<directional composition>)
	relation 322821 *-->
	  a role_name "inputError" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 322821 // inputError (<directional composition>)
	  b parent class_ref 273157 // aaudio_result_t
      end

      classrelation 322949 // loopbackProcessor (<directional composition>)
	relation 322949 *-->
	  a role_name "loopbackProcessor" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 322949 // loopbackProcessor (<directional composition>)
	  b parent class_ref 285445 // LoopbackProcessor
      end

      classrelation 323077 // audioRecorder (<directional composition>)
	relation 323077 *-->
	  a role_name "audioRecorder" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 323077 // audioRecorder (<directional composition>)
	  b parent class_ref 285317 // AudioRecorder
      end
    end
  end

  deploymentview 153733 "src"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 184197 "AudioRecorder"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 285317 // AudioRecorder
      end
    end

    artifact 184325 "LoopbackProcessor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 285445 // LoopbackProcessor
      end
    end

    artifact 184453 "LoopbackData"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 285829 // LoopbackData
      end
    end

    artifact 184581 "main"
      stereotype "source"
      cpp_src "// ====================================================================================
// TODO break up this large main() function into smaller functions

int main(int argc, const char **argv)
{
    aaudio_result_t result = AAUDIO_OK;
    LoopbackData loopbackData;
    AAudioStream *outputStream = nullptr;

    const int requestedInputChannelCount = 1;
    const int requestedOutputChannelCount = AAUDIO_UNSPECIFIED;
    const int requestedSampleRate = SAMPLE_RATE;
    int actualSampleRate = 0;
    const aaudio_format_t requestedInputFormat = AAUDIO_FORMAT_PCM_I16;
    const aaudio_format_t requestedOutputFormat = AAUDIO_FORMAT_PCM_FLOAT;
    aaudio_format_t actualInputFormat;
    aaudio_format_t actualOutputFormat;

    const aaudio_sharing_mode_t requestedSharingMode = AAUDIO_SHARING_MODE_EXCLUSIVE;
    //const aaudio_sharing_mode_t requestedSharingMode = AAUDIO_SHARING_MODE_SHARED;
    aaudio_sharing_mode_t       actualSharingMode;

    AAudioStreamBuilder  *builder = nullptr;
    aaudio_stream_state_t state = AAUDIO_STREAM_STATE_UNINITIALIZED;
    int32_t framesPerBurst = 0;
    float *outputData = NULL;
    double deviation;
    double latency;
    aaudio_performance_mode_t outputPerformanceLevel = AAUDIO_PERFORMANCE_MODE_LOW_LATENCY;
    aaudio_performance_mode_t inputPerformanceLevel = AAUDIO_PERFORMANCE_MODE_LOW_LATENCY;

    int32_t burstsPerBuffer = 1; // single buffered

    for (int i = 1; i < argc; i++) {
        const char *arg = argv[i];
        if (arg[0] == '-') {
            char option = arg[1];
            switch (option) {
                case 'b':
                    burstsPerBuffer = atoi(&arg[2]);
                    break;
                case 'p':
                    outputPerformanceLevel = parsePerformanceMode(arg[2]);
                    break;
                case 'P':
                    inputPerformanceLevel = parsePerformanceMode(arg[2]);
                    break;
                default:
                    usage();
                    break;
            }
        } else {
            break;
        }
    }

    loopbackData.audioRecorder.allocate(NUM_SECONDS * SAMPLE_RATE);

    // Make printf print immediately so that debug info is not stuck
    // in a buffer if we hang or crash.
    setvbuf(stdout, NULL, _IONBF, (size_t) 0);

    printf(\"%s - Audio loopback using AAudio\\n\", argv[0]);

    // Use an AAudioStreamBuilder to contain requested parameters.
    result = AAudio_createStreamBuilder(&builder);
    if (result < 0) {
        goto finish;
    }

    // Request common stream properties.
    AAudioStreamBuilder_setSampleRate(builder, requestedSampleRate);
    AAudioStreamBuilder_setFormat(builder, requestedInputFormat);
    AAudioStreamBuilder_setSharingMode(builder, requestedSharingMode);

    // Open the input stream.
    AAudioStreamBuilder_setDirection(builder, AAUDIO_DIRECTION_INPUT);
    AAudioStreamBuilder_setPerformanceMode(builder, inputPerformanceLevel);
    AAudioStreamBuilder_setChannelCount(builder, requestedInputChannelCount);

    result = AAudioStreamBuilder_openStream(builder, &loopbackData.inputStream);
    printf(\"AAudioStreamBuilder_openStream(input) returned %d = %s\\n\",
           result, AAudio_convertResultToText(result));
    if (result < 0) {
        goto finish;
    }

    // Create an output stream using the Builder.
    AAudioStreamBuilder_setDirection(builder, AAUDIO_DIRECTION_OUTPUT);
    AAudioStreamBuilder_setFormat(builder, requestedOutputFormat);
    AAudioStreamBuilder_setPerformanceMode(builder, outputPerformanceLevel);
    AAudioStreamBuilder_setChannelCount(builder, requestedOutputChannelCount);
    AAudioStreamBuilder_setDataCallback(builder, MyDataCallbackProc, &loopbackData);

    result = AAudioStreamBuilder_openStream(builder, &outputStream);
    printf(\"AAudioStreamBuilder_openStream(output) returned %d = %s\\n\",
           result, AAudio_convertResultToText(result));
    if (result != AAUDIO_OK) {
        goto finish;
    }

    printf(\"Stream INPUT ---------------------\\n\");
    loopbackData.actualInputChannelCount = AAudioStream_getChannelCount(loopbackData.inputStream);
    printf(\"    channelCount: requested = %d, actual = %d\\n\", requestedInputChannelCount,
           loopbackData.actualInputChannelCount);
    printf(\"    framesPerBurst = %d\\n\", AAudioStream_getFramesPerBurst(loopbackData.inputStream));

    actualInputFormat = AAudioStream_getFormat(loopbackData.inputStream);
    printf(\"    dataFormat: requested = %d, actual = %d\\n\", requestedInputFormat, actualInputFormat);
    assert(actualInputFormat == AAUDIO_FORMAT_PCM_I16);

    printf(\"Stream OUTPUT ---------------------\\n\");
    // Check to see what kind of stream we actually got.
    actualSampleRate = AAudioStream_getSampleRate(outputStream);
    printf(\"    sampleRate: requested = %d, actual = %d\\n\", requestedSampleRate, actualSampleRate);

    loopbackData.actualOutputChannelCount = AAudioStream_getChannelCount(outputStream);
    printf(\"    channelCount: requested = %d, actual = %d\\n\", requestedOutputChannelCount,
           loopbackData.actualOutputChannelCount);

    actualSharingMode = AAudioStream_getSharingMode(outputStream);
    printf(\"    sharingMode: requested = %d, actual = %d\\n\", requestedSharingMode, actualSharingMode);

    // This is the number of frames that are read in one chunk by a DMA controller
    // or a DSP or a mixer.
    framesPerBurst = AAudioStream_getFramesPerBurst(outputStream);
    printf(\"    framesPerBurst = %d\\n\", framesPerBurst);

    printf(\"    bufferCapacity = %d\\n\", AAudioStream_getBufferCapacityInFrames(outputStream));

    actualOutputFormat = AAudioStream_getFormat(outputStream);
    printf(\"    dataFormat: requested = %d, actual = %d\\n\", requestedOutputFormat, actualOutputFormat);
    assert(actualOutputFormat == AAUDIO_FORMAT_PCM_FLOAT);

    // Allocate a buffer for the audio data.
    loopbackData.inputFramesMaximum = 32 * framesPerBurst;

    loopbackData.inputData = new int16_t[loopbackData.inputFramesMaximum * loopbackData.actualInputChannelCount];
    loopbackData.conversionBuffer = new float[loopbackData.inputFramesMaximum *
                                              loopbackData.actualInputChannelCount];

    result = AAudioStream_setBufferSizeInFrames(outputStream, burstsPerBuffer * framesPerBurst);
    if (result < 0) { // may be positive buffer size
        fprintf(stderr, \"ERROR - AAudioStream_setBufferSize() returned %d\\n\", result);
        goto finish;
    }
    printf(\"AAudioStream_setBufferSize() actual = %d\\n\",result);

    // Start output first so input stream runs low.
    result = AAudioStream_requestStart(outputStream);
    if (result != AAUDIO_OK) {
        fprintf(stderr, \"ERROR - AAudioStream_requestStart(output) returned %d = %s\\n\",
                result, AAudio_convertResultToText(result));
        goto finish;
    }

    result = AAudioStream_requestStart(loopbackData.inputStream);
    if (result != AAUDIO_OK) {
        fprintf(stderr, \"ERROR - AAudioStream_requestStart(input) returned %d = %s\\n\",
                result, AAudio_convertResultToText(result));
        goto finish;
    }

    printf(\"------- sleep while the callback runs --------------\\n\");
    fflush(stdout);
    sleep(NUM_SECONDS);


    printf(\"input error = %d = %s\\n\",
                loopbackData.inputError, AAudio_convertResultToText(loopbackData.inputError));

    printf(\"AAudioStream_getXRunCount %d\\n\", AAudioStream_getXRunCount(outputStream));
    printf(\"framesRead    = %d\\n\", (int) AAudioStream_getFramesRead(outputStream));
    printf(\"framesWritten = %d\\n\", (int) AAudioStream_getFramesWritten(outputStream));

    latency = loopbackData.loopbackProcessor.calculateAverageLatency(&deviation);
    printf(\"measured peak    = %8.5f\\n\", loopbackData.loopbackProcessor.getMaxAmplitude());
    printf(\"threshold        = %8.5f\\n\", INPUT_PEAK_THRESHOLD);
    printf(\"measured average = %8.5f\\n\", loopbackData.loopbackProcessor.getAverageAmplitude());
    printf(\"# latency measurements = %d\\n\", loopbackData.loopbackProcessor.getMeasurementCount());
    printf(\"measured latency = %8.2f +/- %4.5f frames\\n\", latency, deviation);
    printf(\"measured latency = %8.2f msec  <===== !!\\n\", (1000.0 * latency / actualSampleRate));

    {
        int written = loopbackData.audioRecorder.save(FILENAME);
        printf(\"wrote %d samples to %s\\n\", written, FILENAME);
    }

finish:
    AAudioStream_close(outputStream);
    AAudioStream_close(loopbackData.inputStream);
    delete[] loopbackData.conversionBuffer;
    delete[] loopbackData.inputData;
    delete[] outputData;
    AAudioStreamBuilder_delete(builder);

    printf(\"exiting - AAudio result = %d = %s\\n\", result, AAudio_convertResultToText(result));
    return (result != AAUDIO_OK) ? EXIT_FAILURE : EXIT_SUCCESS;
}
"
      associated_elems
      end
    end
  end
end
