class TimePickerDialog
!!!5723141.java!!!	TimePickerDialog(inout context : Context, inout listener : TimePickerDialog::OnTimeSetListener, in hourOfDay : int, in minute : int, inout is24HourView : boolean)
        this(context, 0, listener, hourOfDay, minute, is24HourView);
!!!5723269.java!!!	resolveDialogTheme(inout context : Context, in resId : int) : int
        if (resId == 0) {
            final TypedValue outValue = new TypedValue();
            context.getTheme().resolveAttribute(R.attr.timePickerDialogTheme, outValue, true);
            return outValue.resourceId;
        } else {
            return resId;
        }
!!!5723397.java!!!	TimePickerDialog(inout context : Context, in themeResId : int, inout listener : TimePickerDialog::OnTimeSetListener, in hourOfDay : int, in minute : int, inout is24HourView : boolean)
        super(context, resolveDialogTheme(context, themeResId));

        mTimeSetListener = listener;
        mInitialHourOfDay = hourOfDay;
        mInitialMinute = minute;
        mIs24HourView = is24HourView;

        final Context themeContext = getContext();
        final LayoutInflater inflater = LayoutInflater.from(themeContext);
        final View view = inflater.inflate(R.layout.time_picker_dialog, null);
        setView(view);
        setButton(BUTTON_POSITIVE, themeContext.getString(R.string.ok), this);
        setButton(BUTTON_NEGATIVE, themeContext.getString(R.string.cancel), this);
        setButtonPanelLayoutHint(LAYOUT_HINT_SIDE);

        mTimePicker = (TimePicker) view.findViewById(R.id.timePicker);
        mTimePicker.setIs24HourView(mIs24HourView);
        mTimePicker.setCurrentHour(mInitialHourOfDay);
        mTimePicker.setCurrentMinute(mInitialMinute);
        mTimePicker.setOnTimeChangedListener(this);
!!!5723525.java!!!	getTimePicker() : TimePicker
        return mTimePicker;
!!!5723653.java!!!	onTimeChanged(inout view : TimePicker, in hourOfDay : int, in minute : int) : void
        /* do nothing */
!!!5723781.java!!!	show() : void
        super.show();
        getButton(BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (mTimePicker.validateInput()) {
                    TimePickerDialog.this.onClick(TimePickerDialog.this, BUTTON_POSITIVE);
                    dismiss();
                }
            }
        });
!!!5723909.java!!!	onClick(inout dialog : DialogInterface, in which : int) : void
        switch (which) {
            case BUTTON_POSITIVE:
                // Note this skips input validation and just uses the last valid time and hour
                // entry. This will only be invoked programmatically. User clicks on BUTTON_POSITIVE
                // are handled in show().
                if (mTimeSetListener != null) {
                    mTimeSetListener.onTimeSet(mTimePicker, mTimePicker.getCurrentHour(),
                            mTimePicker.getCurrentMinute());
                }
                break;
            case BUTTON_NEGATIVE:
                cancel();
                break;
        }
!!!5724037.java!!!	updateTime(in hourOfDay : int, in minuteOfHour : int) : void
        mTimePicker.setCurrentHour(hourOfDay);
        mTimePicker.setCurrentMinute(minuteOfHour);
!!!5724165.java!!!	onSaveInstanceState() : Bundle
        final Bundle state = super.onSaveInstanceState();
        state.putInt(HOUR, mTimePicker.getCurrentHour());
        state.putInt(MINUTE, mTimePicker.getCurrentMinute());
        state.putBoolean(IS_24_HOUR, mTimePicker.is24HourView());
        return state;
!!!5724293.java!!!	onRestoreInstanceState(inout savedInstanceState : Bundle) : void
        super.onRestoreInstanceState(savedInstanceState);
        final int hour = savedInstanceState.getInt(HOUR);
        final int minute = savedInstanceState.getInt(MINUTE);
        mTimePicker.setIs24HourView(savedInstanceState.getBoolean(IS_24_HOUR));
        mTimePicker.setCurrentHour(hour);
        mTimePicker.setCurrentMinute(minute);
