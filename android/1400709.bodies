class KeyValueListParser
!!!8454789.java!!!	KeyValueListParser(in delim : char)
        mSplitter = new TextUtils.SimpleStringSplitter(delim);
!!!8454917.java!!!	setString(in str : String) : void
        mValues.clear();
        if (str != null) {
            mSplitter.setString(str);
            for (String pair : mSplitter) {
                int sep = pair.indexOf('=');
                if (sep < 0) {
                    mValues.clear();
                    throw new IllegalArgumentException(
                            "'" + pair + "' in '" + str + "' is not a valid key-value pair");
                }
                mValues.put(pair.substring(0, sep).trim(), pair.substring(sep + 1).trim());
            }
        }
!!!8455045.java!!!	getInt(in key : String, in def : int) : int
        String value = mValues.get(key);
        if (value != null) {
            try {
                return Integer.parseInt(value);
            } catch (NumberFormatException e) {
                // fallthrough
            }
        }
        return def;
!!!8455173.java!!!	getLong(in key : String, in def : long) : long
        String value = mValues.get(key);
        if (value != null) {
            try {
                return Long.parseLong(value);
            } catch (NumberFormatException e) {
                // fallthrough
            }
        }
        return def;
!!!8455301.java!!!	getFloat(in key : String, in def : float) : float
        String value = mValues.get(key);
        if (value != null) {
            try {
                return Float.parseFloat(value);
            } catch (NumberFormatException e) {
                // fallthrough
            }
        }
        return def;
!!!8455429.java!!!	getString(in key : String, in def : String) : String
        String value = mValues.get(key);
        if (value != null) {
            return value;
        }
        return def;
!!!8455557.java!!!	getBoolean(in key : String, inout def : boolean) : boolean
        String value = mValues.get(key);
        if (value != null) {
            try {
                return Boolean.parseBoolean(value);
            } catch (NumberFormatException e) {
                // fallthrough
            }
        }
        return def;
