class FixedBlockReader
!!!706437.cpp!!!	FixedBlockReader(inout fixedBlockProcessor : FixedBlockProcessor)
    mPosition = mSize;
!!!706693.cpp!!!	open(in bytesPerFixedBlock : int32_t) : int32_t
    int32_t result = FixedBlockAdapter::open(bytesPerFixedBlock);
    mPosition = mSize; // Indicate no data in storage.
    return result;
!!!706821.cpp!!!	readFromStorage(inout buffer : uint8_t, in numBytes : int32_t) : int32_t
    int32_t bytesToRead = numBytes;
    int32_t dataAvailable = mSize - mPosition;
    if (bytesToRead > dataAvailable) {
        bytesToRead = dataAvailable;
    }
    memcpy(buffer, mStorage + mPosition, bytesToRead);
    mPosition += bytesToRead;
    return bytesToRead;
!!!706949.cpp!!!	processVariableBlock(inout buffer : uint8_t, in numBytes : int32_t) : int32_t
    int32_t result = 0;
    int32_t bytesLeft = numBytes;
    while(bytesLeft > 0 && result == 0) {
        if (mPosition < mSize) {
            // Use up bytes currently in storage.
            int32_t bytesRead = readFromStorage(buffer, bytesLeft);
            buffer += bytesRead;
            bytesLeft -= bytesRead;
        } else if (bytesLeft >= mSize) {
            // Read through if enough for a complete block.
            result = mFixedBlockProcessor.onProcessFixedBlock(buffer, mSize);
            buffer += mSize;
            bytesLeft -= mSize;
        } else {
            // Just need a partial block so we have to use storage.
            result = mFixedBlockProcessor.onProcessFixedBlock(mStorage, mSize);
            mPosition = 0;
        }
    }
    return result;
