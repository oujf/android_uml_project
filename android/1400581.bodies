class JsonWriter
!!!8451589.java!!!	JsonWriter(inout out : Writer)
        if (out == null) {
            throw new NullPointerException("out == null");
        }
        this.out = out;
!!!8451717.java!!!	setIndent(in indent : String) : void
        if (indent.isEmpty()) {
            this.indent = null;
            this.separator = ":";
        } else {
            this.indent = indent;
            this.separator = ": ";
        }
!!!8451845.java!!!	setLenient(inout lenient : boolean) : void
        this.lenient = lenient;
!!!8451973.java!!!	isLenient() : boolean
        return lenient;
!!!8452101.java!!!	beginArray() : JsonWriter
        return open(JsonScope.EMPTY_ARRAY, "[");
!!!8452229.java!!!	endArray() : JsonWriter
        return close(JsonScope.EMPTY_ARRAY, JsonScope.NONEMPTY_ARRAY, "]");
!!!8452357.java!!!	beginObject() : JsonWriter
        return open(JsonScope.EMPTY_OBJECT, "{");
!!!8452485.java!!!	endObject() : JsonWriter
        return close(JsonScope.EMPTY_OBJECT, JsonScope.NONEMPTY_OBJECT, "}");
!!!8452613.java!!!	open(inout empty : JsonScope, in openBracket : String) : JsonWriter
        beforeValue(true);
        stack.add(empty);
        out.write(openBracket);
        return this;
!!!8452741.java!!!	close(inout empty : JsonScope, inout nonempty : JsonScope, in closeBracket : String) : JsonWriter
        JsonScope context = peek();
        if (context != nonempty && context != empty) {
            throw new IllegalStateException("Nesting problem: " + stack);
        }

        stack.remove(stack.size() - 1);
        if (context == nonempty) {
            newline();
        }
        out.write(closeBracket);
        return this;
!!!8452869.java!!!	peek() : JsonScope
        return stack.get(stack.size() - 1);
!!!8452997.java!!!	replaceTop(inout topOfStack : JsonScope) : void
        stack.set(stack.size() - 1, topOfStack);
!!!8453125.java!!!	name(in name : String) : JsonWriter
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        beforeName();
        string(name);
        return this;
!!!8453253.java!!!	value(in value : String) : JsonWriter
        if (value == null) {
            return nullValue();
        }
        beforeValue(false);
        string(value);
        return this;
!!!8453381.java!!!	nullValue() : JsonWriter
        beforeValue(false);
        out.write("null");
        return this;
!!!8453509.java!!!	value(inout value : boolean) : JsonWriter
        beforeValue(false);
        out.write(value ? "true" : "false");
        return this;
!!!8453637.java!!!	value(in value : double) : JsonWriter
        if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {
            throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
        }
        beforeValue(false);
        out.append(Double.toString(value));
        return this;
!!!8453765.java!!!	value(in value : long) : JsonWriter
        beforeValue(false);
        out.write(Long.toString(value));
        return this;
!!!8453893.java!!!	value(inout value : Number) : JsonWriter
        if (value == null) {
            return nullValue();
        }

        String string = value.toString();
        if (!lenient &&
                (string.equals("-Infinity") || string.equals("Infinity") || string.equals("NaN"))) {
            throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
        }
        beforeValue(false);
        out.append(string);
        return this;
!!!8454021.java!!!	flush() : void
        out.flush();
!!!8454149.java!!!	close() : void
        out.close();

        if (peek() != JsonScope.NONEMPTY_DOCUMENT) {
            throw new IOException("Incomplete document");
        }
!!!8454277.java!!!	string(in value : String) : void
        out.write("\"");
        for (int i = 0, length = value.length(); i < length; i++) {
            char c = value.charAt(i);

            /*
             * From RFC 4627, "All Unicode characters may be placed within the
             * quotation marks except for the characters that must be escaped:
             * quotation mark, reverse solidus, and the control characters
             * (U+0000 through U+001F)."
             *
             * We also escape '\u2028' and '\u2029', which JavaScript interprets
             * as newline characters. This prevents eval() from failing with a
             * syntax error.
             * http://code.google.com/p/google-gson/issues/detail?id=341
             */
            switch (c) {
                case '"':
                case '\\':
                    out.write('\\');
                    out.write(c);
                    break;

                case '\t':
                    out.write("\\t");
                    break;

                case '\b':
                    out.write("\\b");
                    break;

                case '\n':
                    out.write("\\n");
                    break;

                case '\r':
                    out.write("\\r");
                    break;

                case '\f':
                    out.write("\\f");
                    break;

                case '\u2028':
                case '\u2029':
                    out.write(String.format("\\u%04x", (int) c));
                    break;

                default:
                    if (c <= 0x1F) {
                        out.write(String.format("\\u%04x", (int) c));
                    } else {
                        out.write(c);
                    }
                    break;
            }

        }
        out.write("\"");
!!!8454405.java!!!	newline() : void
        if (indent == null) {
            return;
        }

        out.write("\n");
        for (int i = 1; i < stack.size(); i++) {
            out.write(indent);
        }
!!!8454533.java!!!	beforeName() : void
        JsonScope context = peek();
        if (context == JsonScope.NONEMPTY_OBJECT) { // first in object
            out.write(',');
        } else if (context != JsonScope.EMPTY_OBJECT) { // not in an object!
            throw new IllegalStateException("Nesting problem: " + stack);
        }
        newline();
        replaceTop(JsonScope.DANGLING_NAME);
!!!8454661.java!!!	beforeValue(inout root : boolean) : void
        switch (peek()) {
            case EMPTY_DOCUMENT: // first in document
                if (!lenient && !root) {
                    throw new IllegalStateException(
                            "JSON must start with an array or an object.");
                }
                replaceTop(JsonScope.NONEMPTY_DOCUMENT);
                break;

            case EMPTY_ARRAY: // first in array
                replaceTop(JsonScope.NONEMPTY_ARRAY);
                newline();
                break;

            case NONEMPTY_ARRAY: // another in array
                out.append(',');
                newline();
                break;

            case DANGLING_NAME: // value for name
                out.append(separator);
                replaceTop(JsonScope.NONEMPTY_OBJECT);
                break;

            case NONEMPTY_DOCUMENT:
                throw new IllegalStateException(
                        "JSON must have only one top-level value.");

            default:
                throw new IllegalStateException("Nesting problem: " + stack);
        }
