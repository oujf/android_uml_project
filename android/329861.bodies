class Capabilities
!!!865029.cpp!!!	getSupportedProfileLevels(inout profileLevels : Vector<ProfileLevel>) : void
    profileLevels->clear();
    profileLevels->appendVector(mProfileLevels);
!!!865157.cpp!!!	getSupportedColorFormats(inout colorFormats : Vector<uint32_t>) : void
    colorFormats->clear();
    colorFormats->appendVector(mColorFormats);
!!!865285.cpp!!!	getFlags() : uint32_t
    return mFlags;
!!!865413.cpp!!!	getDetails() : sp<AMessage>
    return mDetails;
!!!865541.cpp!!!	Capabilities()
    mDetails = new AMessage;
!!!865669.cpp!!!	FromParcel(in parcel : Parcel) : sp<Capabilities>
    sp<MediaCodecInfo::Capabilities> caps = new Capabilities();
    size_t size = static_cast<size_t>(parcel.readInt32());
    for (size_t i = 0; i < size; i++) {
        ProfileLevel profileLevel;
        profileLevel.mProfile = static_cast<uint32_t>(parcel.readInt32());
        profileLevel.mLevel = static_cast<uint32_t>(parcel.readInt32());
        if (caps != NULL) {
            caps->mProfileLevels.push_back(profileLevel);
        }
    }
    size = static_cast<size_t>(parcel.readInt32());
    for (size_t i = 0; i < size; i++) {
        uint32_t color = static_cast<uint32_t>(parcel.readInt32());
        if (caps != NULL) {
            caps->mColorFormats.push_back(color);
        }
    }
    uint32_t flags = static_cast<uint32_t>(parcel.readInt32());
    sp<AMessage> details = AMessage::FromParcel(parcel);
    if (details == NULL)
        return NULL;
    if (caps != NULL) {
        caps->mFlags = flags;
        caps->mDetails = details;
    }
    return caps;
!!!865797.cpp!!!	writeToParcel(inout parcel : Parcel) : status_t
    CHECK_LE(mProfileLevels.size(), INT32_MAX);
    parcel->writeInt32(mProfileLevels.size());
    for (size_t i = 0; i < mProfileLevels.size(); i++) {
        parcel->writeInt32(mProfileLevels.itemAt(i).mProfile);
        parcel->writeInt32(mProfileLevels.itemAt(i).mLevel);
    }
    CHECK_LE(mColorFormats.size(), INT32_MAX);
    parcel->writeInt32(mColorFormats.size());
    for (size_t i = 0; i < mColorFormats.size(); i++) {
        parcel->writeInt32(mColorFormats.itemAt(i));
    }
    parcel->writeInt32(mFlags);
    mDetails->writeToParcel(parcel);
    return OK;
