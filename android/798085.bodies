class TileLayout
!!!3336453.java!!!	TileLayout(inout context : Context)
        this(context, null);
!!!3336581.java!!!	TileLayout(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        setFocusableInTouchMode(true);
        updateResources();
!!!3336709.java!!!	getOffsetTop(inout tile : QSPanel::TileRecord) : int
        return getTop();
!!!3336837.java!!!	setListening(inout listening : boolean) : void
        if (mListening == listening) return;
        mListening = listening;
        for (TileRecord record : mRecords) {
            record.tile.setListening(this, mListening);
        }
!!!3336965.java!!!	addTile(inout tile : QSPanel::TileRecord) : void
        mRecords.add(tile);
        tile.tile.setListening(this, mListening);
        addView(tile.tileView);
!!!3337093.java!!!	removeTile(inout tile : QSPanel::TileRecord) : void
        mRecords.remove(tile);
        tile.tile.setListening(this, false);
        removeView(tile.tileView);
!!!3337221.java!!!	removeAllViews() : void
        for (TileRecord record : mRecords) {
            record.tile.setListening(this, false);
        }
        mRecords.clear();
        super.removeAllViews();
!!!3337349.java!!!	updateResources() : boolean
        final Resources res = mContext.getResources();
        final int columns = Math.max(1, res.getInteger(R.integer.quick_settings_num_columns));
        mCellHeight = mContext.getResources().getDimensionPixelSize(R.dimen.qs_tile_height);
        mCellMargin = res.getDimensionPixelSize(R.dimen.qs_tile_margin);
        mCellMarginTop = res.getDimensionPixelSize(R.dimen.qs_tile_margin_top);
        if (mColumns != columns) {
            mColumns = columns;
            requestLayout();
            return true;
        }
        return false;
!!!3337477.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        final int numTiles = mRecords.size();
        final int width = MeasureSpec.getSize(widthMeasureSpec);
        final int rows = (numTiles + mColumns - 1) / mColumns;
        mCellWidth = (width - (mCellMargin * (mColumns + 1))) / mColumns;

        View previousView = this;
        for (TileRecord record : mRecords) {
            if (record.tileView.getVisibility() == GONE) continue;
            record.tileView.measure(exactly(mCellWidth), exactly(mCellHeight));
            previousView = record.tileView.updateAccessibilityOrder(previousView);
        }
        int height = (mCellHeight + mCellMargin) * rows + (mCellMarginTop - mCellMargin);
        if (height < 0) height = 0;
        setMeasuredDimension(width, height);
!!!3337605.java!!!	exactly(in size : int) : int
        return MeasureSpec.makeMeasureSpec(size, MeasureSpec.EXACTLY);
!!!3337733.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        final int w = getWidth();
        boolean isRtl = getLayoutDirection() == LAYOUT_DIRECTION_RTL;
        int row = 0;
        int column = 0;
        for (int i = 0; i < mRecords.size(); i++, column++) {
            if (column == mColumns) {
                row++;
                column -= mColumns;
            }
            TileRecord record = mRecords.get(i);
            int left = getColumnStart(column);
            final int top = getRowTop(row);
            int right;
            if (isRtl) {
                right = w - left;
                left = right - mCellWidth;
            } else {
                right = left + mCellWidth;
            }
            record.tileView.layout(left, top, right, top + record.tileView.getMeasuredHeight());
        }
!!!3337861.java!!!	getRowTop(in row : int) : int
        return row * (mCellHeight + mCellMargin) + mCellMarginTop;
!!!3337989.java!!!	getColumnStart(in column : int) : int
        return column * (mCellWidth + mCellMargin) + mCellMargin;
