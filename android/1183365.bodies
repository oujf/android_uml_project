class CaptureRequest
!!!6651653.java!!!	CaptureRequest()
        mSettings = new CameraMetadataNative();
        setNativeInstance(mSettings);
        mSurfaceSet = new HashSet<Surface>();
        mIsReprocess = false;
        mReprocessableSessionId = CameraCaptureSession.SESSION_ID_NONE;
!!!6651781.java!!!	CaptureRequest(inout source : CaptureRequest)
        mSettings = new CameraMetadataNative(source.mSettings);
        setNativeInstance(mSettings);
        mSurfaceSet = (HashSet<Surface>) source.mSurfaceSet.clone();
        mIsReprocess = source.mIsReprocess;
        mIsPartOfCHSRequestList = source.mIsPartOfCHSRequestList;
        mReprocessableSessionId = source.mReprocessableSessionId;
        mUserTag = source.mUserTag;
!!!6651909.java!!!	CaptureRequest(inout settings : CameraMetadataNative, inout isReprocess : boolean, in reprocessableSessionId : int)
        mSettings = CameraMetadataNative.move(settings);
        setNativeInstance(mSettings);
        mSurfaceSet = new HashSet<Surface>();
        mIsReprocess = isReprocess;
        if (isReprocess) {
            if (reprocessableSessionId == CameraCaptureSession.SESSION_ID_NONE) {
                throw new IllegalArgumentException("Create a reprocess capture request with an " +
                        "invalid session ID: " + reprocessableSessionId);
            }
            mReprocessableSessionId = reprocessableSessionId;
        } else {
            mReprocessableSessionId = CameraCaptureSession.SESSION_ID_NONE;
        }
!!!6652037.java!!!	get(inout key : CaptureRequest::Key) : T
        return mSettings.get(key);
!!!6652165.java!!!	getProtected(inout key : CaptureRequest::Key) : T
        return (T) mSettings.get(key);
!!!6652293.java!!!	getKeyClass() : CaptureRequest::Key
        Object thisClass = Key.class;
        return (Class<Key<?>>)thisClass;
!!!6652421.java!!!	getKeys() : CaptureRequest::Key
        // Force the javadoc for this function to show up on the CaptureRequest page
        return super.getKeys();
!!!6652549.java!!!	getTag() : Object
        return mUserTag;
!!!6652677.java!!!	isReprocess() : boolean
        return mIsReprocess;
!!!6652805.java!!!	isPartOfCRequestList() : boolean
        return mIsPartOfCHSRequestList;
!!!6652933.java!!!	getNativeCopy() : CameraMetadataNative
        return new CameraMetadataNative(mSettings);
!!!6653061.java!!!	getReprocessableSessionId() : int
        if (mIsReprocess == false ||
                mReprocessableSessionId == CameraCaptureSession.SESSION_ID_NONE) {
            throw new IllegalStateException("Getting the reprocessable session ID for a "+
                    "non-reprocess capture request is illegal.");
        }
        return mReprocessableSessionId;
!!!6653189.java!!!	equals(inout other : Object) : boolean
        return other instanceof CaptureRequest
                && equals((CaptureRequest)other);
!!!6653317.java!!!	equals(inout other : CaptureRequest) : boolean
        return other != null
                && Objects.equals(mUserTag, other.mUserTag)
                && mSurfaceSet.equals(other.mSurfaceSet)
                && mSettings.equals(other.mSettings)
                && mIsReprocess == other.mIsReprocess
                && mReprocessableSessionId == other.mReprocessableSessionId;
!!!6653445.java!!!	hashCode() : int
        return HashCodeHelpers.hashCodeGeneric(mSettings, mSurfaceSet, mUserTag);
!!!6653573.java!!!	readFromParcel(inout in : Parcel) : void
        mSettings.readFromParcel(in);
        setNativeInstance(mSettings);

        mSurfaceSet.clear();

        Parcelable[] parcelableArray = in.readParcelableArray(Surface.class.getClassLoader());

        if (parcelableArray == null) {
            return;
        }

        for (Parcelable p : parcelableArray) {
            Surface s = (Surface) p;
            mSurfaceSet.add(s);
        }

        mIsReprocess = (in.readInt() == 0) ? false : true;
        mReprocessableSessionId = CameraCaptureSession.SESSION_ID_NONE;
!!!6653701.java!!!	describeContents() : int
        return 0;
!!!6653829.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        mSettings.writeToParcel(dest, flags);
        dest.writeParcelableArray(mSurfaceSet.toArray(new Surface[mSurfaceSet.size()]), flags);
        dest.writeInt(mIsReprocess ? 1 : 0);
!!!6653957.java!!!	containsTarget(inout surface : Surface) : boolean
        return mSurfaceSet.contains(surface);
!!!6654085.java!!!	getTargets() : Surface
        return Collections.unmodifiableCollection(mSurfaceSet);
