class TaskGridRectInfo
!!!3612165.java!!!	TaskGridRectInfo(in taskCount : int)
            size = new Rect();
            xOffsets = new int[taskCount];
            yOffsets = new int[taskCount];

            int layoutTaskCount = Math.min(MAX_LAYOUT_TASK_COUNT, taskCount);
            tasksPerLine = getTasksPerLine(layoutTaskCount);
            lines = layoutTaskCount < 4 ? 1 : 2;

            // A couple of special cases.
            boolean landscapeWindow = mWindowRect.width() > mWindowRect.height();
            boolean landscapeTaskView = mAppAspectRatio > 1;
            // If we're in portrait but task views are landscape, show more lines of fewer tasks.
            if (!landscapeWindow && landscapeTaskView) {
                tasksPerLine = layoutTaskCount < 2 ? 1 : 2;
                lines = layoutTaskCount < 3 ? 1 : (
                        layoutTaskCount < 5 ? 2 : (
                                layoutTaskCount < 7 ? 3 : 4));
            }
            // If we're in landscape but task views are portrait, show fewer lines of more tasks.
            if (landscapeWindow && !landscapeTaskView) {
                tasksPerLine = layoutTaskCount < 7 ? layoutTaskCount : 6;
                lines = layoutTaskCount < 7 ? 1 : 2;
            }

            int taskWidth, taskHeight;
            int maxTaskWidth = (mWindowRect.width() - 2 * mPaddingLeftRight
                - (tasksPerLine - 1) * mPaddingTaskView) / tasksPerLine;
            int maxTaskHeight = (mWindowRect.height() - 2 * mPaddingTopBottom
                - (lines - 1) * mPaddingTaskView) / lines;

            if (maxTaskHeight >= maxTaskWidth / mAppAspectRatio + mTitleBarHeight) {
                // Width bound.
                taskWidth = maxTaskWidth;
                // Here we should round the height to the nearest integer.
                taskHeight = (int) (maxTaskWidth / mAppAspectRatio + mTitleBarHeight + 0.5);
            } else {
                // Height bound.
                taskHeight = maxTaskHeight;
                // Here we should round the width to the nearest integer.
                taskWidth = (int) ((taskHeight - mTitleBarHeight) * mAppAspectRatio + 0.5);
            }
            size.set(0, 0, taskWidth, taskHeight);

            int emptySpaceX = mWindowRect.width() - 2 * mPaddingLeftRight
                - (tasksPerLine * taskWidth) - (tasksPerLine - 1) * mPaddingTaskView;
            int emptySpaceY = mWindowRect.height() - 2 * mPaddingTopBottom
                - (lines * taskHeight) - (lines - 1) * mPaddingTaskView;
            for (int taskIndex = 0; taskIndex < taskCount; taskIndex++) {
                // We also need to invert the index in order to display the most recent tasks first.
                int taskLayoutIndex = taskCount - taskIndex - 1;

                int xIndex = taskLayoutIndex % tasksPerLine;
                int yIndex = taskLayoutIndex / tasksPerLine;
                xOffsets[taskIndex] = mWindowRect.left +
                    emptySpaceX / 2 + mPaddingLeftRight + (taskWidth + mPaddingTaskView) * xIndex;
                yOffsets[taskIndex] = mWindowRect.top +
                    emptySpaceY / 2 + mPaddingTopBottom + (taskHeight + mPaddingTaskView) * yIndex;
            }
!!!3612293.java!!!	getTasksPerLine(in taskCount : int) : int
            switch(taskCount) {
                case 0:
                    return 0;
                case 1:
                    return 1;
                case 2:
                case 4:
                    return 2;
                case 3:
                case 5:
                case 6:
                    return 3;
                case 7:
                case 8:
                    return 4;
                default:
                    throw new IllegalArgumentException("Unsupported task count " + taskCount);
            }
