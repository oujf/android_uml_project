class AudioPlaybackHandler
!!!8097413.java!!!	AudioPlaybackHandler()
        mHandlerThread = new Thread(new MessageLoop(), "TTS.AudioPlaybackThread");
!!!8097541.java!!!	start() : void
        mHandlerThread.start();
!!!8097669.java!!!	stop(inout item : PlaybackQueueItem) : void
        if (item == null) {
            return;
        }

        item.stop(TextToSpeech.STOPPED);
!!!8097797.java!!!	enqueue(inout item : PlaybackQueueItem) : void
        try {
            mQueue.put(item);
        } catch (InterruptedException ie) {
            // This exception will never be thrown, since we allow our queue
            // to be have an unbounded size. put() will therefore never block.
        }
!!!8097925.java!!!	stopForApp(inout callerIdentity : Object) : void
        if (DBG) Log.d(TAG, "Removing all callback items for : " + callerIdentity);
        removeWorkItemsFor(callerIdentity);

        final PlaybackQueueItem current = mCurrentWorkItem;
        if (current != null && (current.getCallerIdentity() == callerIdentity)) {
            stop(current);
        }
!!!8098053.java!!!	stop() : void
        if (DBG) Log.d(TAG, "Stopping all items");
        removeAllMessages();

        stop(mCurrentWorkItem);
!!!8098181.java!!!	isSpeaking() : boolean
        return (mQueue.peek() != null) || (mCurrentWorkItem != null);
!!!8098309.java!!!	quit() : void
        removeAllMessages();
        stop(mCurrentWorkItem);
        mHandlerThread.interrupt();
!!!8098437.java!!!	removeAllMessages() : void
        mQueue.clear();
!!!8098565.java!!!	removeWorkItemsFor(inout callerIdentity : Object) : void
        Iterator<PlaybackQueueItem> it = mQueue.iterator();

        while (it.hasNext()) {
            final PlaybackQueueItem item = it.next();
            if (item.getCallerIdentity() == callerIdentity) {
                it.remove();
            }
        }
