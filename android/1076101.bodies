class TestLooperManager
!!!7610629.java!!!	TestLooperManager(inout looper : Looper)
        synchronized (sHeldLoopers) {
            if (sHeldLoopers.contains(looper)) {
                throw new RuntimeException("TestLooperManager already held for this looper");
            }
            sHeldLoopers.add(looper);
        }
        mLooper = looper;
        mQueue = mLooper.getQueue();
        // Post a message that will keep the looper blocked as long as we are dispatching.
        new Handler(looper).post(new LooperHolder());
!!!7610757.java!!!	getMessageQueue() : MessageQueue
        checkReleased();
        return mQueue;
!!!7610885.java!!!	getQueue() : MessageQueue
        return getMessageQueue();
!!!7611013.java!!!	next() : Message
        // Wait for the looper block to come up, to make sure we don't accidentally get
        // the message for the block.
        while (!mLooperBlocked) {
            synchronized (this) {
                try {
                    wait();
                } catch (InterruptedException e) {
                }
            }
        }
        checkReleased();
        return mQueue.next();
!!!7611141.java!!!	release() : void
        synchronized (sHeldLoopers) {
            sHeldLoopers.remove(mLooper);
        }
        checkReleased();
        mReleased = true;
        mExecuteQueue.add(new MessageExecution());
!!!7611269.java!!!	execute(inout message : Message) : void
        checkReleased();
        if (Looper.myLooper() == mLooper) {
            // This is being called from the thread it should be executed on, we can just dispatch.
            message.target.dispatchMessage(message);
        } else {
            MessageExecution execution = new MessageExecution();
            execution.m = message;
            synchronized (execution) {
                mExecuteQueue.add(execution);
                // Wait for the message to be executed.
                try {
                    execution.wait();
                } catch (InterruptedException e) {
                }
                if (execution.response != null) {
                    throw new RuntimeException(execution.response);
                }
            }
        }
!!!7611397.java!!!	recycle(inout msg : Message) : void
        checkReleased();
        msg.recycleUnchecked();
!!!7611525.java!!!	hasMessages(inout h : Handler, inout object : Object, in what : int) : boolean
        checkReleased();
        return mQueue.hasMessages(h, what, object);
!!!7611653.java!!!	hasMessages(inout h : Handler, inout object : Object, inout r : Runnable) : boolean
        checkReleased();
        return mQueue.hasMessages(h, r, object);
!!!7611781.java!!!	checkReleased() : void
        if (mReleased) {
            throw new RuntimeException("release() has already be called");
        }
