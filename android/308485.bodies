class BufferingSettings
!!!801029.cpp!!!	IsValidBufferingMode(in mode : int) : bool
    return (mode >= BUFFERING_MODE_NONE && mode < BUFFERING_MODE_COUNT);
!!!801157.cpp!!!	IsTimeBasedBufferingMode(in mode : int) : bool
    return (mode == BUFFERING_MODE_TIME_ONLY || mode == BUFFERING_MODE_TIME_THEN_SIZE);
!!!801285.cpp!!!	IsSizeBasedBufferingMode(in mode : int) : bool
    return (mode == BUFFERING_MODE_SIZE_ONLY || mode == BUFFERING_MODE_TIME_THEN_SIZE);
!!!801541.cpp!!!	writeToParcel(inout parcel : Parcel) : status_t
    if (parcel == nullptr) {
        return BAD_VALUE;
    }
    parcel->writeInt32(mInitialBufferingMode);
    parcel->writeInt32(mRebufferingMode);
    parcel->writeInt32(mInitialWatermarkMs);
    parcel->writeInt32(mInitialWatermarkKB);
    parcel->writeInt32(mRebufferingWatermarkLowMs);
    parcel->writeInt32(mRebufferingWatermarkHighMs);
    parcel->writeInt32(mRebufferingWatermarkLowKB);
    parcel->writeInt32(mRebufferingWatermarkHighKB);

    return OK;
!!!801669.cpp!!!	readFromParcel(in parcel : Parcel) : status_t
    if (parcel == nullptr) {
        return BAD_VALUE;
    }
    mInitialBufferingMode = (BufferingMode)parcel->readInt32();
    mRebufferingMode = (BufferingMode)parcel->readInt32();
    mInitialWatermarkMs = parcel->readInt32();
    mInitialWatermarkKB = parcel->readInt32();
    mRebufferingWatermarkLowMs = parcel->readInt32();
    mRebufferingWatermarkHighMs = parcel->readInt32();
    mRebufferingWatermarkLowKB = parcel->readInt32();
    mRebufferingWatermarkHighKB = parcel->readInt32();

    return OK;
!!!801797.cpp!!!	toString() : String8
    String8 s;
    s.appendFormat("initialMode(%d), rebufferingMode(%d), "
            "initialMarks(%d ms, %d KB), rebufferingMarks(%d, %d)ms, (%d, %d)KB",
            mInitialBufferingMode, mRebufferingMode,
            mInitialWatermarkMs, mInitialWatermarkKB,
            mRebufferingWatermarkLowMs, mRebufferingWatermarkHighMs,
            mRebufferingWatermarkLowKB, mRebufferingWatermarkHighKB);
    return s;
