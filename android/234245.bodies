class HalDeathHandler
!!!630149.cpp!!!	registerAtExitHandler(inout cookie : void, in handler : HalDeathHandler::AtExitHandler) : void
    std::lock_guard<std::mutex> guard(mHandlersLock);
    mHandlers.insert({cookie, handler});
!!!630277.cpp!!!	unregisterAtExitHandler(inout cookie : void) : void
    std::lock_guard<std::mutex> guard(mHandlersLock);
    mHandlers.erase(cookie);
!!!630405.cpp!!!	serviceDied(in cookie : uint64_t, in who : wp<IBase>) : void
    // No matter which of the service objects has died,
    // we need to run all the registered handlers and crash our process.
    std::lock_guard<std::mutex> guard(mHandlersLock);
    for (const auto& handler : mHandlers) {
        handler.second();
    }
    LOG_ALWAYS_FATAL("HAL server crashed, need to restart");
!!!630533.cpp!!!	getInstance() : sp<HalDeathHandler>
    return &Singleton<HalDeathHandler>::getInstance();
