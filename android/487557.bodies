class ProcessInfo
!!!1363973.cpp!!!	getPriority(in pid : int, inout priority : int) : bool
    sp<IBinder> binder = defaultServiceManager()->getService(String16("processinfo"));
    sp<IProcessInfoService> service = interface_cast<IProcessInfoService>(binder);

    size_t length = 1;
    int32_t state;
    static const int32_t INVALID_ADJ = -10000;
    static const int32_t NATIVE_ADJ = -1000;
    int32_t score = INVALID_ADJ;
    status_t err = service->getProcessStatesAndOomScoresFromPids(length, &pid, &state, &score);
    if (err != OK) {
        ALOGE("getProcessStatesAndOomScoresFromPids failed");
        return false;
    }
    ALOGV("pid %d state %d score %d", pid, state, score);
    if (score <= NATIVE_ADJ) {
        ALOGE("pid %d invalid OOM adjustments value %d", pid, score);
        return false;
    }

    // Use OOM adjustments value as the priority. Lower the value, higher the priority.
    *priority = score;
    return true;
!!!1364101.cpp!!!	isValidPid(in pid : int) : bool
    int callingPid = IPCThreadState::self()->getCallingPid();
    // Trust it if this is called from the same process otherwise pid has to match the calling pid.
    return (callingPid == getpid()) || (callingPid == pid);
