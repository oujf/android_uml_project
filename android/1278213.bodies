class Process
!!!7560709.java!!!	start(in processClass : String, in niceName : String, in uid : int, in gid : int, inout gids : int [[]], in debugFlags : int, in mountExternal : int, in targetSdkVersion : int, in seInfo : String, in abi : String, in instructionSet : String, in appDataDir : String, in invokeWith : String, inout zygoteArgs : String [[]]) : Process::ProcessStartResult
        return zygoteProcess.start(processClass, niceName, uid, gid, gids,
                    debugFlags, mountExternal, targetSdkVersion, seInfo,
                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs);
!!!7560837.java!!!	startWebView(in processClass : String, in niceName : String, in uid : int, in gid : int, inout gids : int [[]], in debugFlags : int, in mountExternal : int, in targetSdkVersion : int, in seInfo : String, in abi : String, in instructionSet : String, in appDataDir : String, in invokeWith : String, inout zygoteArgs : String [[]]) : Process::ProcessStartResult
        return WebViewZygote.getProcess().start(processClass, niceName, uid, gid, gids,
                    debugFlags, mountExternal, targetSdkVersion, seInfo,
                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs);
!!!7561093.java!!!	getStartElapsedRealtime() : long
        return sStartElapsedRealtime;
!!!7561221.java!!!	getStartUptimeMillis() : long
        return sStartUptimeMillis;
!!!7561349.java!!!	setStartTimes(in elapsedRealtime : long, in uptimeMillis : long) : void
        sStartElapsedRealtime = elapsedRealtime;
        sStartUptimeMillis = uptimeMillis;
!!!7561477.java!!!	is64Bit() : boolean
        return VMRuntime.getRuntime().is64Bit();
!!!7561605.java!!!	myPid() : int
        return Os.getpid();
!!!7561733.java!!!	myPpid() : int
        return Os.getppid();
!!!7561861.java!!!	myTid() : int
        return Os.gettid();
!!!7561989.java!!!	myUid() : int
        return Os.getuid();
!!!7562117.java!!!	myUserHandle() : UserHandle
        return UserHandle.of(UserHandle.getUserId(myUid()));
!!!7562245.java!!!	isApplicationUid(in uid : int) : boolean
        return UserHandle.isApp(uid);
!!!7562373.java!!!	isIsolated() : boolean
        return isIsolated(myUid());
!!!7562501.java!!!	isIsolated(in uid : int) : boolean
        uid = UserHandle.getAppId(uid);
        return uid >= FIRST_ISOLATED_UID && uid <= LAST_ISOLATED_UID;
!!!7562885.java!!!	getUidForPid(in pid : int) : int
        String[] procStatusLabels = { "Uid:" };
        long[] procStatusValues = new long[1];
        procStatusValues[0] = -1;
        Process.readProcLines("/proc/" + pid + "/status", procStatusLabels, procStatusValues);
        return (int) procStatusValues[0];
!!!7563013.java!!!	getParentPid(in pid : int) : int
        String[] procStatusLabels = { "PPid:" };
        long[] procStatusValues = new long[1];
        procStatusValues[0] = -1;
        Process.readProcLines("/proc/" + pid + "/status", procStatusLabels, procStatusValues);
        return (int) procStatusValues[0];
!!!7563141.java!!!	getThreadGroupLeader(in tid : int) : int
        String[] procStatusLabels = { "Tgid:" };
        long[] procStatusValues = new long[1];
        procStatusValues[0] = -1;
        Process.readProcLines("/proc/" + tid + "/status", procStatusLabels, procStatusValues);
        return (int) procStatusValues[0];
!!!7564677.java!!!	supportsProcesses() : boolean
        return true;
!!!7565061.java!!!	killProcess(in pid : int) : void
        sendSignal(pid, SIGNAL_KILL);
!!!7565573.java!!!	killProcessQuiet(in pid : int) : void
        sendSignalQuiet(pid, SIGNAL_KILL);
!!!7567109.java!!!	isThreadInProcess(in tid : int, in pid : int) : boolean
        StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads();
        try {
            if (Os.access("/proc/" + tid + "/task/" + pid, OsConstants.F_OK)) {
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            return false;
        } finally {
            StrictMode.setThreadPolicy(oldPolicy);
        }

