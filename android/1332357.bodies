class Global
!!!7923845.java!!!	getBluetoothHeadsetPriorityKey(in address : String) : String
            return BLUETOOTH_HEADSET_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!7923973.java!!!	getBluetoothA2dpSinkPriorityKey(in address : String) : String
            return BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!7924101.java!!!	getBluetoothA2dpSrcPriorityKey(in address : String) : String
            return BLUETOOTH_A2DP_SRC_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!7924229.java!!!	getBluetoothA2dpSupportsOptionalCodecsKey(in address : String) : String
            return BLUETOOTH_A2DP_SUPPORTS_OPTIONAL_CODECS_PREFIX +
                    address.toUpperCase(Locale.ROOT);
!!!7924357.java!!!	getBluetoothA2dpOptionalCodecsEnabledKey(in address : String) : String
            return BLUETOOTH_A2DP_OPTIONAL_CODECS_ENABLED_PREFIX +
                    address.toUpperCase(Locale.ROOT);
!!!7924485.java!!!	getBluetoothInputDevicePriorityKey(in address : String) : String
            return BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!7924613.java!!!	getBluetoothPanPriorityKey(in address : String) : String
            return BLUETOOTH_PAN_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!7924741.java!!!	getBluetoothMapPriorityKey(in address : String) : String
            return BLUETOOTH_MAP_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!7924869.java!!!	getBluetoothMapClientPriorityKey(in address : String) : String
            return BLUETOOTH_MAP_CLIENT_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!7924997.java!!!	getBluetoothPbapClientPriorityKey(in address : String) : String
            return BLUETOOTH_PBAP_CLIENT_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!7925125.java!!!	getBluetoothSapPriorityKey(in address : String) : String
            return BLUETOOTH_SAP_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!7925253.java!!!	zenModeToString(in mode : int) : String
            if (mode == ZEN_MODE_IMPORTANT_INTERRUPTIONS) return "ZEN_MODE_IMPORTANT_INTERRUPTIONS";
            if (mode == ZEN_MODE_ALARMS) return "ZEN_MODE_ALARMS";
            if (mode == ZEN_MODE_NO_INTERRUPTIONS) return "ZEN_MODE_NO_INTERRUPTIONS";
            return "ZEN_MODE_OFF";
!!!7925381.java!!!	isValidZenMode(in value : int) : boolean
            switch (value) {
                case Global.ZEN_MODE_OFF:
                case Global.ZEN_MODE_IMPORTANT_INTERRUPTIONS:
                case Global.ZEN_MODE_ALARMS:
                case Global.ZEN_MODE_NO_INTERRUPTIONS:
                    return true;
                default:
                    return false;
            }
!!!7925509.java!!!	getMovedToSecureSettings(inout outKeySet : Set<String>) : void
            outKeySet.addAll(MOVED_TO_SECURE);
!!!7925637.java!!!	getString(inout resolver : ContentResolver, in name : String) : String
            return getStringForUser(resolver, name, UserHandle.myUserId());
!!!7925765.java!!!	getStringForUser(inout resolver : ContentResolver, in name : String, in userHandle : int) : String
            if (MOVED_TO_SECURE.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.Global"
                        + " to android.provider.Settings.Secure, returning read-only value.");
                return Secure.getStringForUser(resolver, name, userHandle);
            }
            return sNameValueCache.getStringForUser(resolver, name, userHandle);
!!!7925893.java!!!	putString(inout resolver : ContentResolver, in name : String, in value : String) : boolean
            return putStringForUser(resolver, name, value, null, false, UserHandle.myUserId());
!!!7926021.java!!!	putString(inout resolver : ContentResolver, in name : String, in value : String, in tag : String, inout makeDefault : boolean) : boolean
            return putStringForUser(resolver, name, value, tag, makeDefault,
                    UserHandle.myUserId());
!!!7926149.java!!!	resetToDefaults(inout resolver : ContentResolver, in tag : String) : void
            resetToDefaultsAsUser(resolver, tag, RESET_MODE_PACKAGE_DEFAULTS,
                    UserHandle.myUserId());
!!!7926277.java!!!	resetToDefaultsAsUser(inout resolver : ContentResolver, in tag : String, in mode : int, in userHandle : int) : void
            try {
                Bundle arg = new Bundle();
                arg.putInt(CALL_METHOD_USER_KEY, userHandle);
                if (tag != null) {
                    arg.putString(CALL_METHOD_TAG_KEY, tag);
                }
                arg.putInt(CALL_METHOD_RESET_MODE_KEY, mode);
                IContentProvider cp = sProviderHolder.getProvider(resolver);
                cp.call(resolver.getPackageName(), CALL_METHOD_RESET_GLOBAL, null, arg);
            } catch (RemoteException e) {
                Log.w(TAG, "Can't reset do defaults for " + CONTENT_URI, e);
            }
!!!7926405.java!!!	putStringForUser(inout resolver : ContentResolver, in name : String, in value : String, in userHandle : int) : boolean
            return putStringForUser(resolver, name, value, null, false, userHandle);
!!!7926533.java!!!	putStringForUser(inout resolver : ContentResolver, in name : String, in value : String, in tag : String, inout makeDefault : boolean, in userHandle : int) : boolean
            if (LOCAL_LOGV) {
                Log.v(TAG, "Global.putString(name=" + name + ", value=" + value
                        + " for " + userHandle);
            }
            // Global and Secure have the same access policy so we can forward writes
            if (MOVED_TO_SECURE.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.Global"
                        + " to android.provider.Settings.Secure, value is unchanged.");
                return Secure.putStringForUser(resolver, name, value, tag,
                        makeDefault, userHandle);
            }
            return sNameValueCache.putStringForUser(resolver, name, value, tag,
                    makeDefault, userHandle);
!!!7926661.java!!!	getUriFor(in name : String) : Uri
            return getUriFor(CONTENT_URI, name);
!!!7926789.java!!!	getInt(inout cr : ContentResolver, in name : String, in def : int) : int
            String v = getString(cr, name);
            try {
                return v != null ? Integer.parseInt(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!7926917.java!!!	getInt(inout cr : ContentResolver, in name : String) : int
            String v = getString(cr, name);
            try {
                return Integer.parseInt(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!7927045.java!!!	putInt(inout cr : ContentResolver, in name : String, in value : int) : boolean
            return putString(cr, name, Integer.toString(value));
!!!7927173.java!!!	getLong(inout cr : ContentResolver, in name : String, in def : long) : long
            String valString = getString(cr, name);
            long value;
            try {
                value = valString != null ? Long.parseLong(valString) : def;
            } catch (NumberFormatException e) {
                value = def;
            }
            return value;
!!!7927301.java!!!	getLong(inout cr : ContentResolver, in name : String) : long
            String valString = getString(cr, name);
            try {
                return Long.parseLong(valString);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!7927429.java!!!	putLong(inout cr : ContentResolver, in name : String, in value : long) : boolean
            return putString(cr, name, Long.toString(value));
!!!7927557.java!!!	getFloat(inout cr : ContentResolver, in name : String, in def : float) : float
            String v = getString(cr, name);
            try {
                return v != null ? Float.parseFloat(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!7927685.java!!!	getFloat(inout cr : ContentResolver, in name : String) : float
            String v = getString(cr, name);
            if (v == null) {
                throw new SettingNotFoundException(name);
            }
            try {
                return Float.parseFloat(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!7927813.java!!!	putFloat(inout cr : ContentResolver, in name : String, in value : float) : boolean
            return putString(cr, name, Float.toString(value));
