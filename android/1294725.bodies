class MultiCheckPreference
!!!7734277.java!!!	MultiCheckPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        TypedArray a = context.obtainStyledAttributes(
                attrs, com.android.internal.R.styleable.ListPreference, defStyleAttr, defStyleRes);
        mEntries = a.getTextArray(com.android.internal.R.styleable.ListPreference_entries);
        if (mEntries != null) {
            setEntries(mEntries);
        }
        setEntryValuesCS(a.getTextArray(
                com.android.internal.R.styleable.ListPreference_entryValues));
        a.recycle();

        /* Retrieve the Preference summary attribute since it's private
         * in the Preference class.
         */
        a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.Preference, 0, 0);
        mSummary = a.getString(com.android.internal.R.styleable.Preference_summary);
        a.recycle();
!!!7734405.java!!!	MultiCheckPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!7734533.java!!!	MultiCheckPreference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.dialogPreferenceStyle);
!!!7734661.java!!!	MultiCheckPreference(inout context : Context)
        this(context, null);
!!!7734789.java!!!	setEntries(inout entries : CharSequence [[]]) : void
        mEntries = entries;
        mSetValues = new boolean[entries.length];
        mOrigValues = new boolean[entries.length];
!!!7734917.java!!!	setEntries(in entriesResId : int) : void
        setEntries(getContext().getResources().getTextArray(entriesResId));
!!!7735045.java!!!	getEntries() : CharSequence
        return mEntries;
!!!7735173.java!!!	setEntryValues(inout entryValues : String [[]]) : void
        mEntryValues = entryValues;
        Arrays.fill(mSetValues, false);
        Arrays.fill(mOrigValues, false);
!!!7735301.java!!!	setEntryValues(in entryValuesResId : int) : void
        setEntryValuesCS(getContext().getResources().getTextArray(entryValuesResId));
!!!7735429.java!!!	setEntryValuesCS(inout values : CharSequence [[]]) : void
        setValues(null);
        if (values != null) {
            mEntryValues = new String[values.length];
            for (int i=0; i<values.length; i++) {
                mEntryValues[i] = values[i].toString();
            }
        }
!!!7735557.java!!!	getEntryValues() : String
        return mEntryValues;
!!!7735685.java!!!	getValue(in index : int) : boolean
        return mSetValues[index];
!!!7735813.java!!!	setValue(in index : int, inout state : boolean) : void
        mSetValues[index] = state;
!!!7735941.java!!!	setValues(inout values : boolean [[]]) : void
        if (mSetValues != null) {
            Arrays.fill(mSetValues, false);
            Arrays.fill(mOrigValues, false);
            if (values != null) {
                System.arraycopy(values, 0, mSetValues, 0,
                        values.length < mSetValues.length ? values.length : mSetValues.length);
            }
        }
!!!7736069.java!!!	getSummary() : CharSequence
        if (mSummary == null) {
            return super.getSummary();
        } else {
            return mSummary;
        }
!!!7736197.java!!!	setSummary(inout summary : CharSequence) : void
        super.setSummary(summary);
        if (summary == null && mSummary != null) {
            mSummary = null;
        } else if (summary != null && !summary.equals(mSummary)) {
            mSummary = summary.toString();
        }
!!!7736325.java!!!	getValues() : boolean
        return mSetValues;
!!!7736453.java!!!	findIndexOfValue(in value : String) : int
        if (value != null && mEntryValues != null) {
            for (int i = mEntryValues.length - 1; i >= 0; i--) {
                if (mEntryValues[i].equals(value)) {
                    return i;
                }
            }
        }
        return -1;
!!!7736581.java!!!	onPrepareDialogBuilder(inout builder : AlertDialog::Builder) : void
        super.onPrepareDialogBuilder(builder);
        
        if (mEntries == null || mEntryValues == null) {
            throw new IllegalStateException(
                    "ListPreference requires an entries array and an entryValues array.");
        }

        mOrigValues = Arrays.copyOf(mSetValues, mSetValues.length);
        builder.setMultiChoiceItems(mEntries, mSetValues,
                new DialogInterface.OnMultiChoiceClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which, boolean isChecked) {
                        mSetValues[which] = isChecked;
                    }
        });
!!!7736709.java!!!	onDialogClosed(inout positiveResult : boolean) : void
        super.onDialogClosed(positiveResult);

        if (positiveResult) {
            if (callChangeListener(getValues())) {
                return;
            }
        }
        System.arraycopy(mOrigValues, 0, mSetValues, 0, mSetValues.length);
!!!7736837.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return a.getString(index);
!!!7737093.java!!!	onSaveInstanceState() : Parcelable
        final Parcelable superState = super.onSaveInstanceState();
        if (isPersistent()) {
            // No need to save instance state since it's persistent
            return superState;
        }
        
        final SavedState myState = new SavedState(superState);
        myState.values = getValues();
        return myState;
!!!7737221.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (state == null || !state.getClass().equals(SavedState.class)) {
            // Didn't save state for us in onSaveInstanceState
            super.onRestoreInstanceState(state);
            return;
        }
         
        SavedState myState = (SavedState) state;
        super.onRestoreInstanceState(myState.getSuperState());
        setValues(myState.values);
