class TimestampScheduler
!!!545797.cpp!!!	start(in startTime : int64_t) : void
    mStartTime = startTime;
    mLastTime = startTime;
!!!545925.cpp!!!	nextAbsoluteTime() : int64_t
    int64_t periodsElapsed = (mLastTime - mStartTime) / mBurstPeriod;
    // This is an arbitrary schedule that could probably be improved.
    // It starts out sending a timestamp on every period because we want to
    // get an accurate picture when the stream starts. Then it slows down
    // to the occasional timestamps needed to detect a slow drift.
    int64_t minPeriodsToDelay = (periodsElapsed < 10) ? 1 :
        (periodsElapsed < 100) ? 3 :
        (periodsElapsed < 1000) ? 10 : 50;
    int64_t sleepTime = minPeriodsToDelay * mBurstPeriod;
    // Generate a random rectangular distribution one burst wide so that we get
    // an uncorrelated sampling of the MMAP pointer.
    sleepTime += (int64_t)(random() * mBurstPeriod / RAND_MAX);
    mLastTime += sleepTime;
    return mLastTime;
