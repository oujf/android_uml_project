class SignalClusterView
!!!3770245.java!!!	SignalClusterView(inout context : Context)
        this(context, null);
!!!3770373.java!!!	SignalClusterView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!3770501.java!!!	SignalClusterView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        Resources res = getResources();
        mMobileSignalGroupEndPadding =
                res.getDimensionPixelSize(R.dimen.mobile_signal_group_end_padding);
        mMobileDataIconStartPadding =
                res.getDimensionPixelSize(R.dimen.mobile_data_icon_start_padding);
        mWideTypeIconStartPadding = res.getDimensionPixelSize(R.dimen.wide_type_icon_start_padding);
        mSecondaryTelephonyPadding = res.getDimensionPixelSize(R.dimen.secondary_telephony_padding);
        mEndPadding = res.getDimensionPixelSize(R.dimen.signal_cluster_battery_padding);
        mEndPaddingNothingVisible = res.getDimensionPixelSize(
                R.dimen.no_signal_cluster_battery_padding);

        TypedValue typedValue = new TypedValue();
        res.getValue(R.dimen.status_bar_icon_scale_factor, typedValue, true);
        mIconScaleFactor = typedValue.getFloat();
        mNetworkController = Dependency.get(NetworkController.class);
        mSecurityController = Dependency.get(SecurityController.class);
        updateActivityEnabled();
!!!3770629.java!!!	setForceBlockWifi() : void
        mForceBlockWifi = true;
        mBlockWifi = true;
        if (isAttachedToWindow()) {
            // Re-register to get new callbacks.
            mNetworkController.removeCallback(this);
            mNetworkController.addCallback(this);
        }
!!!3770757.java!!!	onTuningChanged(in key : String, in newValue : String) : void
        if (!StatusBarIconController.ICON_BLACKLIST.equals(key)) {
            return;
        }
        ArraySet<String> blockList = StatusBarIconController.getIconBlacklist(newValue);
        boolean blockAirplane = blockList.contains(SLOT_AIRPLANE);
        boolean blockMobile = blockList.contains(SLOT_MOBILE);
        boolean blockWifi = blockList.contains(SLOT_WIFI);
        boolean blockEthernet = blockList.contains(SLOT_ETHERNET);

        if (blockAirplane != mBlockAirplane || blockMobile != mBlockMobile
                || blockEthernet != mBlockEthernet || blockWifi != mBlockWifi) {
            mBlockAirplane = blockAirplane;
            mBlockMobile = blockMobile;
            mBlockEthernet = blockEthernet;
            mBlockWifi = blockWifi || mForceBlockWifi;
            // Re-register to get new callbacks.
            mNetworkController.removeCallback(this);
            mNetworkController.addCallback(this);
        }
!!!3770885.java!!!	onFinishInflate() : void
        super.onFinishInflate();

        mVpn            = findViewById(R.id.vpn);
        mEthernetGroup  = findViewById(R.id.ethernet_combo);
        mEthernet       = findViewById(R.id.ethernet);
        mEthernetDark   = findViewById(R.id.ethernet_dark);
        mWifiGroup      = findViewById(R.id.wifi_combo);
        mWifi           = findViewById(R.id.wifi_signal);
        mWifiDark       = findViewById(R.id.wifi_signal_dark);
        mWifiActivityIn = findViewById(R.id.wifi_in);
        mWifiActivityOut= findViewById(R.id.wifi_out);
        mAirplane       = findViewById(R.id.airplane);
        mNoSims         = findViewById(R.id.no_sims);
        mNoSimsDark     = findViewById(R.id.no_sims_dark);
        mNoSimsCombo    =             findViewById(R.id.no_sims_combo);
        mWifiAirplaneSpacer =         findViewById(R.id.wifi_airplane_spacer);
        mWifiSignalSpacer =           findViewById(R.id.wifi_signal_spacer);
        mMobileSignalGroup =          findViewById(R.id.mobile_signal_group);

        maybeScaleVpnAndNoSimsIcons();
!!!3771013.java!!!	maybeScaleVpnAndNoSimsIcons() : void
        if (mIconScaleFactor == 1.f) {
            return;
        }

        mVpn.setImageDrawable(new ScalingDrawableWrapper(mVpn.getDrawable(), mIconScaleFactor));

        mNoSims.setImageDrawable(
                new ScalingDrawableWrapper(mNoSims.getDrawable(), mIconScaleFactor));
        mNoSimsDark.setImageDrawable(
                new ScalingDrawableWrapper(mNoSimsDark.getDrawable(), mIconScaleFactor));
!!!3771141.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
        mVpnVisible = mSecurityController.isVpnEnabled();
        mVpnIconId = currentVpnIconId(mSecurityController.isVpnBranded());

        for (PhoneState state : mPhoneStates) {
            if (state.mMobileGroup.getParent() == null) {
                mMobileSignalGroup.addView(state.mMobileGroup);
            }
        }

        int endPadding = mMobileSignalGroup.getChildCount() > 0 ? mMobileSignalGroupEndPadding : 0;
        mMobileSignalGroup.setPaddingRelative(0, 0, endPadding, 0);

        Dependency.get(TunerService.class).addTunable(this, StatusBarIconController.ICON_BLACKLIST);

        apply();
        applyIconTint();
        mNetworkController.addCallback(this);
        mSecurityController.addCallback(this);
!!!3771269.java!!!	onDetachedFromWindow() : void
        mMobileSignalGroup.removeAllViews();
        Dependency.get(TunerService.class).removeTunable(this);
        mSecurityController.removeCallback(this);
        mNetworkController.removeCallback(this);

        super.onDetachedFromWindow();
!!!3771397.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        super.onLayout(changed, l, t, r, b);

        // Re-run all checks against the tint area for all icons
        applyIconTint();
!!!3771525.java!!!	onStateChanged() : void
        post(new Runnable() {
            @Override
            public void run() {
                mVpnVisible = mSecurityController.isVpnEnabled();
                mVpnIconId = currentVpnIconId(mSecurityController.isVpnBranded());
                apply();
            }
        });
!!!3771653.java!!!	updateActivityEnabled() : void
        mActivityEnabled = mContext.getResources().getBoolean(R.bool.config_showActivity);
!!!3771781.java!!!	setWifiIndicators(inout enabled : boolean, inout statusIcon : NetworkController::IconState, inout qsIcon : NetworkController::IconState, inout activityIn : boolean, inout activityOut : boolean, in description : String, inout isTransient : boolean) : void
        mWifiVisible = statusIcon.visible && !mBlockWifi;
        mWifiStrengthId = statusIcon.icon;
        mWifiBadgeId = statusIcon.iconOverlay;
        mWifiDescription = statusIcon.contentDescription;
        mWifiIn = activityIn && mActivityEnabled && mWifiVisible;
        mWifiOut = activityOut && mActivityEnabled && mWifiVisible;

        apply();
!!!3771909.java!!!	setMobileDataIndicators(inout statusIcon : NetworkController::IconState, inout qsIcon : NetworkController::IconState, in statusType : int, in qsType : int, inout activityIn : boolean, inout activityOut : boolean, in typeContentDescription : String, in description : String, inout isWide : boolean, in subId : int, inout roaming : boolean) : void
        PhoneState state = getState(subId);
        if (state == null) {
            return;
        }
        state.mMobileVisible = statusIcon.visible && !mBlockMobile;
        state.mMobileStrengthId = statusIcon.icon;
        state.mMobileTypeId = statusType;
        state.mMobileDescription = statusIcon.contentDescription;
        state.mMobileTypeDescription = typeContentDescription;
        state.mIsMobileTypeIconWide = statusType != 0 && isWide;
        state.mRoaming = roaming;
        state.mActivityIn = activityIn && mActivityEnabled;
        state.mActivityOut = activityOut && mActivityEnabled;

        apply();
!!!3772037.java!!!	setEthernetIndicators(inout state : NetworkController::IconState) : void
        mEthernetVisible = state.visible && !mBlockEthernet;
        mEthernetIconId = state.icon;
        mEthernetDescription = state.contentDescription;

        apply();
!!!3772165.java!!!	setNoSims(inout show : boolean) : void
        mNoSimsVisible = show && !mBlockMobile;
        apply();
!!!3772293.java!!!	setSubs(inout subs : List<SubscriptionInfo>) : void
        if (hasCorrectSubs(subs)) {
            return;
        }
        mPhoneStates.clear();
        if (mMobileSignalGroup != null) {
            mMobileSignalGroup.removeAllViews();
        }
        final int n = subs.size();
        for (int i = 0; i < n; i++) {
            inflatePhoneState(subs.get(i).getSubscriptionId());
        }
        if (isAttachedToWindow()) {
            applyIconTint();
        }
!!!3772421.java!!!	hasCorrectSubs(inout subs : List<SubscriptionInfo>) : boolean
        final int N = subs.size();
        if (N != mPhoneStates.size()) {
            return false;
        }
        for (int i = 0; i < N; i++) {
            if (mPhoneStates.get(i).mSubId != subs.get(i).getSubscriptionId()) {
                return false;
            }
        }
        return true;
!!!3772549.java!!!	getState(in subId : int) : SignalClusterView::PhoneState
        for (PhoneState state : mPhoneStates) {
            if (state.mSubId == subId) {
                return state;
            }
        }
        Log.e(TAG, "Unexpected subscription " + subId);
        return null;
!!!3772677.java!!!	inflatePhoneState(in subId : int) : SignalClusterView::PhoneState
        PhoneState state = new PhoneState(subId, mContext);
        if (mMobileSignalGroup != null) {
            mMobileSignalGroup.addView(state.mMobileGroup);
        }
        mPhoneStates.add(state);
        return state;
!!!3772805.java!!!	setIsAirplaneMode(inout icon : NetworkController::IconState) : void
        mIsAirplaneMode = icon.visible && !mBlockAirplane;
        mAirplaneIconId = icon.icon;
        mAirplaneContentDescription = icon.contentDescription;

        apply();
!!!3772933.java!!!	setMobileDataEnabled(inout enabled : boolean) : void
        // Don't care.
!!!3773061.java!!!	dispatchPopulateAccessibilityEventInternal(inout event : AccessibilityEvent) : boolean
        // Standard group layout onPopulateAccessibilityEvent() implementations
        // ignore content description, so populate manually
        if (mEthernetVisible && mEthernetGroup != null &&
                mEthernetGroup.getContentDescription() != null)
            event.getText().add(mEthernetGroup.getContentDescription());
        if (mWifiVisible && mWifiGroup != null && mWifiGroup.getContentDescription() != null)
            event.getText().add(mWifiGroup.getContentDescription());
        for (PhoneState state : mPhoneStates) {
            state.populateAccessibilityEvent(event);
        }
        return super.dispatchPopulateAccessibilityEventInternal(event);
!!!3773189.java!!!	onRtlPropertiesChanged(in layoutDirection : int) : void
        super.onRtlPropertiesChanged(layoutDirection);

        if (mEthernet != null) {
            mEthernet.setImageDrawable(null);
            mEthernetDark.setImageDrawable(null);
            mLastEthernetIconId = -1;
        }

        if (mWifi != null) {
            mWifi.setImageDrawable(null);
            mWifiDark.setImageDrawable(null);
            mLastWifiStrengthId = -1;
            mLastWifiBadgeId = -1;
        }

        for (PhoneState state : mPhoneStates) {
            if (state.mMobileType != null) {
                state.mMobileType.setImageDrawable(null);
                state.mLastMobileTypeId = -1;
            }
        }

        if (mAirplane != null) {
            mAirplane.setImageDrawable(null);
            mLastAirplaneIconId = -1;
        }

        apply();
!!!3773317.java!!!	hasOverlappingRendering() : boolean
        return false;
!!!3773445.java!!!	apply() : void
        if (mWifiGroup == null) return;

        mVpn.setVisibility(mVpnVisible ? View.VISIBLE : View.GONE);
        if (mVpnVisible) {
            if (mLastVpnIconId != mVpnIconId) {
                setIconForView(mVpn, mVpnIconId);
                mLastVpnIconId = mVpnIconId;
            }
            mVpn.setVisibility(View.VISIBLE);
        } else {
            mVpn.setVisibility(View.GONE);
        }
        if (DEBUG) Log.d(TAG, String.format("vpn: %s", mVpnVisible ? "VISIBLE" : "GONE"));

        if (mEthernetVisible) {
            if (mLastEthernetIconId != mEthernetIconId) {
                setIconForView(mEthernet, mEthernetIconId);
                setIconForView(mEthernetDark, mEthernetIconId);
                mLastEthernetIconId = mEthernetIconId;
            }
            mEthernetGroup.setContentDescription(mEthernetDescription);
            mEthernetGroup.setVisibility(View.VISIBLE);
        } else {
            mEthernetGroup.setVisibility(View.GONE);
        }

        if (DEBUG) Log.d(TAG,
                String.format("ethernet: %s",
                    (mEthernetVisible ? "VISIBLE" : "GONE")));

        if (mWifiVisible) {
            if (mWifiStrengthId != mLastWifiStrengthId || mWifiBadgeId != mLastWifiBadgeId) {
                if (mWifiBadgeId == -1) {
                    setIconForView(mWifi, mWifiStrengthId);
                    setIconForView(mWifiDark, mWifiStrengthId);
                } else {
                    setBadgedWifiIconForView(mWifi, mWifiStrengthId, mWifiBadgeId);
                    setBadgedWifiIconForView(mWifiDark, mWifiStrengthId, mWifiBadgeId);
                }
                mLastWifiStrengthId = mWifiStrengthId;
                mLastWifiBadgeId = mWifiBadgeId;
            }
            mWifiGroup.setContentDescription(mWifiDescription);
            mWifiGroup.setVisibility(View.VISIBLE);
        } else {
            mWifiGroup.setVisibility(View.GONE);
        }

        if (DEBUG) Log.d(TAG,
                String.format("wifi: %s sig=%d",
                    (mWifiVisible ? "VISIBLE" : "GONE"),
                    mWifiStrengthId));

        mWifiActivityIn.setVisibility(mWifiIn ? View.VISIBLE : View.GONE);
        mWifiActivityOut.setVisibility(mWifiOut ? View.VISIBLE : View.GONE);

        boolean anyMobileVisible = false;
        int firstMobileTypeId = 0;
        for (PhoneState state : mPhoneStates) {
            if (state.apply(anyMobileVisible)) {
                if (!anyMobileVisible) {
                    firstMobileTypeId = state.mMobileTypeId;
                    anyMobileVisible = true;
                }
            }
        }

        if (mIsAirplaneMode) {
            if (mLastAirplaneIconId != mAirplaneIconId) {
                setIconForView(mAirplane, mAirplaneIconId);
                mLastAirplaneIconId = mAirplaneIconId;
            }
            mAirplane.setContentDescription(mAirplaneContentDescription);
            mAirplane.setVisibility(View.VISIBLE);
        } else {
            mAirplane.setVisibility(View.GONE);
        }

        if (mIsAirplaneMode && mWifiVisible) {
            mWifiAirplaneSpacer.setVisibility(View.VISIBLE);
        } else {
            mWifiAirplaneSpacer.setVisibility(View.GONE);
        }

        if (((anyMobileVisible && firstMobileTypeId != 0) || mNoSimsVisible) && mWifiVisible) {
            mWifiSignalSpacer.setVisibility(View.VISIBLE);
        } else {
            mWifiSignalSpacer.setVisibility(View.GONE);
        }

        mNoSimsCombo.setVisibility(mNoSimsVisible ? View.VISIBLE : View.GONE);

        boolean anythingVisible = mNoSimsVisible || mWifiVisible || mIsAirplaneMode
                || anyMobileVisible || mVpnVisible || mEthernetVisible;
        setPaddingRelative(0, 0, anythingVisible ? mEndPadding : mEndPaddingNothingVisible, 0);
!!!3773573.java!!!	setIconForView(inout imageView : ImageView, in iconId : int) : void
        // Using the imageView's context to retrieve the Drawable so that theme is preserved.
        Drawable icon = imageView.getContext().getDrawable(iconId);

        setScaledIcon(imageView, icon);
!!!3773701.java!!!	setScaledIcon(inout imageView : ImageView, inout icon : Drawable) : void
        if (mIconScaleFactor == 1.f) {
            imageView.setImageDrawable(icon);
        } else {
            imageView.setImageDrawable(new ScalingDrawableWrapper(icon, mIconScaleFactor));
        }
!!!3773829.java!!!	setBadgedWifiIconForView(inout imageView : ImageView, in wifiPieId : int, in badgeId : int) : void
        // Using the imageView's context to retrieve the Drawable so that theme is preserved.;
        LayerDrawable icon = new LayerDrawable(new Drawable[] {
                imageView.getContext().getDrawable(wifiPieId),
                imageView.getContext().getDrawable(badgeId)});

        // The LayerDrawable shares an underlying state so we must mutate the object to change the
        // color between the light and dark themes.
        icon.mutate().setTint(getColorAttr(imageView.getContext(), R.attr.singleToneColor));

        setScaledIcon(imageView, icon);
!!!3773957.java!!!	getColorAttr(inout context : Context, in attr : int) : int
        TypedArray ta = context.obtainStyledAttributes(new int[] {attr});
        @ColorInt int colorAccent = ta.getColor(0, Color.WHITE);
        ta.recycle();
        return colorAccent;
!!!3774085.java!!!	onDarkChanged(inout tintArea : Rect, in darkIntensity : float, in tint : int) : void
        boolean changed = tint != mIconTint || darkIntensity != mDarkIntensity
                || !mTintArea.equals(tintArea);
        mIconTint = tint;
        mDarkIntensity = darkIntensity;
        mTintArea.set(tintArea);
        if (changed && isAttachedToWindow()) {
            applyIconTint();
        }
!!!3774213.java!!!	applyIconTint() : void
        setTint(mVpn, DarkIconDispatcher.getTint(mTintArea, mVpn, mIconTint));
        setTint(mAirplane, DarkIconDispatcher.getTint(mTintArea, mAirplane, mIconTint));
        applyDarkIntensity(
                DarkIconDispatcher.getDarkIntensity(mTintArea, mNoSims, mDarkIntensity),
                mNoSims, mNoSimsDark);
        applyDarkIntensity(
                DarkIconDispatcher.getDarkIntensity(mTintArea, mWifi, mDarkIntensity),
                mWifi, mWifiDark);
        setTint(mWifiActivityIn,
                DarkIconDispatcher.getTint(mTintArea, mWifiActivityIn, mIconTint));
        setTint(mWifiActivityOut,
                DarkIconDispatcher.getTint(mTintArea, mWifiActivityOut, mIconTint));
        applyDarkIntensity(
                DarkIconDispatcher.getDarkIntensity(mTintArea, mEthernet, mDarkIntensity),
                mEthernet, mEthernetDark);
        for (int i = 0; i < mPhoneStates.size(); i++) {
            mPhoneStates.get(i).setIconTint(mIconTint, mDarkIntensity, mTintArea);
        }
!!!3774341.java!!!	applyDarkIntensity(in darkIntensity : float, inout lightIcon : View, inout darkIcon : View) : void
        lightIcon.setAlpha(1 - darkIntensity);
        darkIcon.setAlpha(darkIntensity);
!!!3774469.java!!!	setTint(inout v : ImageView, in tint : int) : void
        v.setImageTintList(ColorStateList.valueOf(tint));
!!!3774597.java!!!	currentVpnIconId(inout isBranded : boolean) : int
        return isBranded ? R.drawable.stat_sys_branded_vpn : R.drawable.stat_sys_vpn_ic;
