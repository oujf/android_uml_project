format 214
"mediaextractor" // source::frameworks::av::services::mediaextractor::mediaextractor
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/services/mediaextractor/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/services/mediaextractor/"
  deploymentview 140805 "mediaextractor"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 157957 "main"
      stereotype "source"
      cpp_src "int main(int argc __unused, char** argv)
{
    limitProcessMemory(
        \"ro.media.maxmem\", /* property that defines limit */
        SIZE_MAX, /* upper limit in bytes */
        20 /* upper limit as percentage of physical RAM */);

    signal(SIGPIPE, SIG_IGN);

    //b/62255959: this forces libutis.so to dlopen vendor version of libutils.so
    //before minijail is on. This is dirty but required since some syscalls such
    //as pread64 are used by linker but aren't allowed in the minijail. By
    //calling the function before entering minijail, we can force dlopen.
    android::report_sysprop_change();

    SetUpMinijail(kSystemSeccompPolicyPath, kVendorSeccompPolicyPath);

    InitializeIcuOrDie();

    strcpy(argv[0], \"media.extractor\");
    sp<ProcessState> proc(ProcessState::self());
    sp<IServiceManager> sm = defaultServiceManager();
    MediaExtractorService::instantiate();
    ProcessState::self()->startThreadPool();
    IPCThreadState::self()->joinThreadPool();
}
"
      associated_elems
      end
    end
  end
end
