class CellularTile
!!!3430661.java!!!	CellularTile(inout host : QSHost)
        super(host);
        mController = Dependency.get(NetworkController.class);
        mActivityStarter = Dependency.get(ActivityStarter.class);
        mDataController = mController.getMobileDataController();
        mDetailAdapter = new CellularDetailAdapter();
!!!3430789.java!!!	newTileState() : SignalState
        return new SignalState();
!!!3430917.java!!!	getDetailAdapter() : DetailAdapter
        return mDetailAdapter;
!!!3431045.java!!!	setListening(inout listening : boolean) : void
        if (listening) {
            mController.addCallback(mSignalCallback);
        } else {
            mController.removeCallback(mSignalCallback);
        }
!!!3431173.java!!!	createTileView(inout context : Context) : QSIconView
        return new CellTileView(context);
!!!3431301.java!!!	getLongClickIntent() : Intent
        return CELLULAR_SETTINGS;
!!!3431429.java!!!	handleClick() : void
        mDataController.setMobileDataEnabled(!mDataController.isMobileDataEnabled());
!!!3431557.java!!!	handleSecondaryClick() : void
        if (mDataController.isMobileDataSupported()) {
            showDetail(true);
        } else {
            mActivityStarter.postStartActivityDismissingKeyguard(CELLULAR_SETTINGS, 0);
        }
!!!3431685.java!!!	getTileLabel() : CharSequence
        return mContext.getString(R.string.quick_settings_cellular_detail_title);
!!!3431813.java!!!	handleUpdateState(inout state : SignalState, inout arg : Object) : void
        CallbackInfo cb = (CallbackInfo) arg;
        if (cb == null) {
            cb = mSignalCallback.mInfo;
        }

        final Resources r = mContext.getResources();
        state.activityIn = cb.enabled && cb.activityIn;
        state.activityOut = cb.enabled && cb.activityOut;
        state.isOverlayIconWide = cb.isDataTypeIconWide;
        state.overlayIconId = cb.dataTypeIconId;

        state.label = r.getString(R.string.mobile_data);

        final String signalContentDesc = cb.enabled && (cb.mobileSignalIconId > 0)
                ? cb.signalContentDescription
                : r.getString(R.string.accessibility_no_signal);
        if (cb.noSim) {
            state.contentDescription = state.label;
        } else {
            state.contentDescription = signalContentDesc + ", " + state.label;
        }

        state.expandedAccessibilityClassName = Switch.class.getName();
        state.value = mDataController.isMobileDataSupported()
                && mDataController.isMobileDataEnabled();
        state.icon = new SignalIcon(cb.mobileSignalIconId);
        if (cb.airplaneModeEnabled) {
            state.state = Tile.STATE_INACTIVE;
        } else {
            state.state = Tile.STATE_ACTIVE;
        }
!!!3431941.java!!!	getMetricsCategory() : int
        return MetricsEvent.QS_CELLULAR;
!!!3432069.java!!!	isAvailable() : boolean
        return mController.hasMobileDataFeature();
!!!3432197.java!!!	removeTrailingPeriod(in string : String) : String
        if (string == null) return null;
        final int length = string.length();
        if (string.endsWith(".")) {
            return string.substring(0, length - 1);
        }
        return string;
