class SurfaceControl
!!!14328965.cpp!!!	isSameSurface(in lhs : sp<SurfaceControl>, in rhs : sp<SurfaceControl>) : bool
    if (lhs == 0 || rhs == 0)
        return false;
    return lhs->mHandle == rhs->mHandle;
!!!14329093.cpp!!!	clear() : void
    // here, the window manager tells us explicitly that we should destroy
    // the surface's resource. Soon after this call, it will also release
    // its last reference (which will call the dtor); however, it is possible
    // that a client living in the same process still holds references which
    // would delay the call to the dtor -- that is why we need this explicit
    // "clear()" call.
    destroy();
!!!14329221.cpp!!!	disconnect() : void
    if (mGraphicBufferProducer != NULL) {
        mGraphicBufferProducer->disconnect(
                BufferQueueCore::CURRENTLY_CONNECTED_API);
    }
!!!14329349.cpp!!!	setLayerStack(in layerStack : uint32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setLayerStack(mHandle, layerStack);
!!!14329477.cpp!!!	setLayer(in layer : int32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setLayer(mHandle, layer);
!!!14329605.cpp!!!	setRelativeLayer(in relativeTo : sp<IBinder>, in layer : int32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setRelativeLayer(mHandle, relativeTo, layer);
!!!14329733.cpp!!!	setPosition(in x : float, in y : float) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setPosition(mHandle, x, y);
!!!14329861.cpp!!!	setSize(in w : uint32_t, in h : uint32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setSize(mHandle, w, h);
!!!14329989.cpp!!!	hide() : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->hide(mHandle);
!!!14330117.cpp!!!	show() : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->show(mHandle);
!!!14330245.cpp!!!	setFlags(in flags : uint32_t, in mask : uint32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setFlags(mHandle, flags, mask);
!!!14330373.cpp!!!	setTransparentRegionHint(in transparent : Region) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setTransparentRegionHint(mHandle, transparent);
!!!14330501.cpp!!!	setAlpha(in alpha : float = 1.0f) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setAlpha(mHandle, alpha);
!!!14330629.cpp!!!	setMatrix(in dsdx : float, in dtdx : float, in dtdy : float, in dsdy : float) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setMatrix(mHandle, dsdx, dtdx, dtdy, dsdy);
!!!14330757.cpp!!!	setCrop(in crop : Rect) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setCrop(mHandle, crop);
!!!14330885.cpp!!!	setFinalCrop(in crop : Rect) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setFinalCrop(mHandle, crop);
!!!14331013.cpp!!!	setGeometryAppliesWithResize() : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setGeometryAppliesWithResize(mHandle);
!!!14331141.cpp!!!	deferTransactionUntil(in handle : sp<IBinder>, in frameNumber : uint64_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->deferTransactionUntil(mHandle, handle, frameNumber);
!!!14331269.cpp!!!	deferTransactionUntil(in handle : sp<Surface>, in frameNumber : uint64_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->deferTransactionUntil(mHandle, handle, frameNumber);
!!!14331397.cpp!!!	reparentChildren(in newParentHandle : sp<IBinder>) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->reparentChildren(mHandle, newParentHandle);
!!!14331525.cpp!!!	detachChildren() : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->detachChildren(mHandle);
!!!14331653.cpp!!!	setOverrideScalingMode(in overrideScalingMode : int32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    return mClient->setOverrideScalingMode(mHandle, overrideScalingMode);
!!!14331781.cpp!!!	writeSurfaceToParcel(in control : sp<SurfaceControl>, inout parcel : Parcel) : status_t
    sp<IGraphicBufferProducer> bp;
    if (control != NULL) {
        bp = control->mGraphicBufferProducer;
    }
    return parcel->writeStrongBinder(IInterface::asBinder(bp));
!!!14331909.cpp!!!	getSurface() : sp<Surface>
    Mutex::Autolock _l(mLock);
    if (mSurfaceData == 0) {
        return generateSurfaceLocked();
    }
    return mSurfaceData;
!!!14332037.cpp!!!	createSurface() : sp<Surface>
    Mutex::Autolock _l(mLock);
    return generateSurfaceLocked();
!!!14332165.cpp!!!	getHandle() : sp<IBinder>
    Mutex::Autolock lock(mLock);
    return mHandle;
!!!14332293.cpp!!!	clearLayerFrameStats() : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->clearLayerFrameStats(mHandle);
!!!14332421.cpp!!!	getLayerFrameStats(inout outStats : FrameStats) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->getLayerFrameStats(mHandle, outStats);
!!!14332933.cpp!!!	~SurfaceControl()
    destroy();
!!!14333061.cpp!!!	generateSurfaceLocked() : sp<Surface>
    // This surface is always consumed by SurfaceFlinger, so the
    // producerControlledByApp value doesn't matter; using false.
    mSurfaceData = new Surface(mGraphicBufferProducer, false);

    return mSurfaceData;
!!!14333189.cpp!!!	validate() : status_t
    if (mHandle==0 || mClient==0) {
        ALOGE("invalid handle (%p) or client (%p)",
                mHandle.get(), mClient.get());
        return NO_INIT;
    }
    return NO_ERROR;
!!!14333317.cpp!!!	destroy() : void
    if (isValid()) {
        mClient->destroySurface(mHandle);
    }
    // clear all references and trigger an IPC now, to make sure things
    // happen without delay, since these resources are quite heavy.
    mClient.clear();
    mHandle.clear();
    mGraphicBufferProducer.clear();
    IPCThreadState::self()->flushCommands();
