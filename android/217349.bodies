class ModuleClient
!!!557445.cpp!!!	~ModuleClient()
    if (mClient != 0) {
        IInterface::asBinder(mClient)->unlinkToDeath(this);
        mClient.clear();
    }
    if (mCallbackThread != 0) {
        mCallbackThread->exit();
    }
!!!557573.cpp!!!	detach() : void
    ALOGV("%s", __FUNCTION__);
    sp<ModuleClient> strongMe = this;
    {
        AutoMutex lock(mLock);
        if (mClient != 0) {
            IInterface::asBinder(mClient)->unlinkToDeath(this);
            mClient.clear();
        }
    }
    sp<Module> module = mModule.promote();
    if (module == 0) {
        return;
    }
    module->removeClient(this);
!!!557701.cpp!!!	setConfiguration(in config : radio_band_config) : status_t
    if (!PermissionCache::checkCallingPermission(RADIO_PERMISSION)) {
        return PERMISSION_DENIED;
    }
    AutoMutex lock(mLock);
    status_t status = NO_ERROR;
    ALOGV("%s locked", __FUNCTION__);

    if (mTuner != 0) {
        struct radio_hal_band_config halConfig;
        halConfig = config->band;
        status = (status_t)mTuner->setConfiguration(&halConfig);
        if (status == NO_ERROR) {
            mConfig = *config;
        }
    } else {
        mConfig = *config;
        status = INVALID_OPERATION;
    }

    return status;
!!!557829.cpp!!!	getConfiguration(inout config : radio_band_config) : status_t
    if (!PermissionCache::checkCallingPermission(RADIO_PERMISSION)) {
        return PERMISSION_DENIED;
    }
    AutoMutex lock(mLock);
    status_t status = NO_ERROR;
    ALOGV("%s locked", __FUNCTION__);

    if (mTuner != 0) {
        struct radio_hal_band_config halConfig;
        status = (status_t)mTuner->getConfiguration(&halConfig);
        if (status == NO_ERROR) {
            mConfig.band = halConfig;
        }
    }
    *config = mConfig;

    return status;
!!!557957.cpp!!!	setMute(in mute : bool) : status_t
    if (!PermissionCache::checkCallingPermission(RADIO_PERMISSION)) {
        return PERMISSION_DENIED;
    }
    sp<Module> module;
    {
        Mutex::Autolock _l(mLock);
        ALOGV("%s locked", __FUNCTION__);
        if (mTuner == 0 || !mAudio) {
            return INVALID_OPERATION;
        }
        module = mModule.promote();
        if (module == 0) {
            return NO_INIT;
        }
    }
    module->setMute(mute);
    return NO_ERROR;
!!!558085.cpp!!!	getMute(inout mute : bool) : status_t
    if (!PermissionCache::checkCallingPermission(RADIO_PERMISSION)) {
        return PERMISSION_DENIED;
    }
    sp<Module> module;
    {
        Mutex::Autolock _l(mLock);
        ALOGV("%s locked", __FUNCTION__);
        module = mModule.promote();
        if (module == 0) {
            return NO_INIT;
        }
    }
    return module->getMute(mute);
!!!558213.cpp!!!	scan(in direction : radio_direction_t, in skipSubChannel : bool) : status_t
    if (!PermissionCache::checkCallingPermission(RADIO_PERMISSION)) {
        return PERMISSION_DENIED;
    }
    AutoMutex lock(mLock);
    ALOGV("%s locked", __FUNCTION__);
    status_t status;
    if (mTuner != 0) {
        status = (status_t)mTuner->scan(direction, skipSubChannel);
    } else {
        status = INVALID_OPERATION;
    }
    return status;
!!!558341.cpp!!!	step(in direction : radio_direction_t, in skipSubChannel : bool) : status_t
    if (!PermissionCache::checkCallingPermission(RADIO_PERMISSION)) {
        return PERMISSION_DENIED;
    }
    AutoMutex lock(mLock);
    ALOGV("%s locked", __FUNCTION__);
    status_t status;
    if (mTuner != 0) {
        status = (status_t)mTuner->step(direction, skipSubChannel);
    } else {
        status = INVALID_OPERATION;
    }
    return status;
!!!558597.cpp!!!	cancel() : status_t
    if (!PermissionCache::checkCallingPermission(RADIO_PERMISSION)) {
        return PERMISSION_DENIED;
    }
    AutoMutex lock(mLock);
    ALOGV("%s locked", __FUNCTION__);
    status_t status;
    if (mTuner != 0) {
        status = (status_t)mTuner->cancel();
    } else {
        status = INVALID_OPERATION;
    }
    return status;
!!!558725.cpp!!!	getProgramInformation(inout info : radio_program_info) : status_t
    if (!PermissionCache::checkCallingPermission(RADIO_PERMISSION)) {
        return PERMISSION_DENIED;
    }
    AutoMutex lock(mLock);
    ALOGV("%s locked", __FUNCTION__);
    status_t status;
    if (mTuner != NULL) {
        status = (status_t)mTuner->getProgramInformation(info);
    } else {
        status = INVALID_OPERATION;
    }

    return status;
!!!558853.cpp!!!	hasControl(inout hasControl : bool) : status_t
    if (!PermissionCache::checkCallingPermission(RADIO_PERMISSION)) {
        return PERMISSION_DENIED;
    }
    Mutex::Autolock lock(mLock);
    ALOGV("%s locked", __FUNCTION__);
    *hasControl = mTuner != 0;
    return NO_ERROR;
!!!559365.cpp!!!	halConfig() : radio_hal_band_config_t
    AutoMutex lock(mLock);
    ALOGV("%s locked", __FUNCTION__);
    return mConfig.band;
!!!559621.cpp!!!	setTuner(inout tuner : sp<TunerInterface>) : void
    ALOGV("%s %p", __FUNCTION__, this);

    AutoMutex lock(mLock);
    mTuner = tuner;
    ALOGV("%s locked", __FUNCTION__);

    radio_hal_event_t event;
    event.type = RADIO_EVENT_CONTROL;
    event.status = 0;
    event.on = mTuner != 0;
    mCallbackThread->sendEvent(&event);
    ALOGV("%s DONE", __FUNCTION__);

!!!559749.cpp!!!	getTuner() : sp<TunerInterface>
    AutoMutex lock(mLock);
    ALOGV("%s locked", __FUNCTION__);
    return mTuner;
!!!560005.cpp!!!	onCallbackEvent(in eventMemory : sp<IMemory>) : void
    if (eventMemory == 0 || eventMemory->pointer() == NULL) {
        return;
    }

    sp<IRadioClient> client;
    {
        AutoMutex lock(mLock);
        ALOGV("%s locked", __FUNCTION__);
        radio_event_t *event = (radio_event_t *)eventMemory->pointer();
        switch (event->type) {
        case RADIO_EVENT_CONFIG:
            mConfig.band = event->config.band;
            event->config.region = mConfig.region;
            break;
        default:
            break;
        }

        client = mClient;
    }
    if (client != 0) {
        client->onEvent(eventMemory);
    }
!!!560133.cpp!!!	onFirstRef() : void
    mCallbackThread = new CallbackThread(this);
    IInterface::asBinder(mClient)->linkToDeath(this);
!!!560389.cpp!!!	onEvent(inout halEvent : radio_hal_event_t) : void
    mCallbackThread->sendEvent(halEvent);
