class Preference
!!!7696261.java!!!	Preference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        mContext = context;

        final TypedArray a = context.obtainStyledAttributes(
                attrs, com.android.internal.R.styleable.Preference, defStyleAttr, defStyleRes);
        for (int i = a.getIndexCount() - 1; i >= 0; i--) {
            int attr = a.getIndex(i);
            switch (attr) {
                case com.android.internal.R.styleable.Preference_icon:
                    mIconResId = a.getResourceId(attr, 0);
                    break;

                case com.android.internal.R.styleable.Preference_key:
                    mKey = a.getString(attr);
                    break;

                case com.android.internal.R.styleable.Preference_title:
                    mTitleRes = a.getResourceId(attr, 0);
                    mTitle = a.getText(attr);
                    break;

                case com.android.internal.R.styleable.Preference_summary:
                    mSummary = a.getText(attr);
                    break;

                case com.android.internal.R.styleable.Preference_order:
                    mOrder = a.getInt(attr, mOrder);
                    break;

                case com.android.internal.R.styleable.Preference_fragment:
                    mFragment = a.getString(attr);
                    break;

                case com.android.internal.R.styleable.Preference_layout:
                    mLayoutResId = a.getResourceId(attr, mLayoutResId);
                    break;

                case com.android.internal.R.styleable.Preference_widgetLayout:
                    mWidgetLayoutResId = a.getResourceId(attr, mWidgetLayoutResId);
                    break;

                case com.android.internal.R.styleable.Preference_enabled:
                    mEnabled = a.getBoolean(attr, true);
                    break;

                case com.android.internal.R.styleable.Preference_selectable:
                    mSelectable = a.getBoolean(attr, true);
                    break;

                case com.android.internal.R.styleable.Preference_persistent:
                    mPersistent = a.getBoolean(attr, mPersistent);
                    break;

                case com.android.internal.R.styleable.Preference_dependency:
                    mDependencyKey = a.getString(attr);
                    break;

                case com.android.internal.R.styleable.Preference_defaultValue:
                    mDefaultValue = onGetDefaultValue(a, attr);
                    break;

                case com.android.internal.R.styleable.Preference_shouldDisableView:
                    mShouldDisableView = a.getBoolean(attr, mShouldDisableView);
                    break;

                case com.android.internal.R.styleable.Preference_recycleEnabled:
                    mRecycleEnabled = a.getBoolean(attr, mRecycleEnabled);
                    break;

                case com.android.internal.R.styleable.Preference_singleLineTitle:
                    mSingleLineTitle = a.getBoolean(attr, mSingleLineTitle);
                    mHasSingleLineTitleAttr = true;
                    break;

                case com.android.internal.R.styleable.Preference_iconSpaceReserved:
                    mIconSpaceReserved = a.getBoolean(attr, mIconSpaceReserved);
                    break;
           }
        }
        a.recycle();
!!!7696389.java!!!	Preference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!7696517.java!!!	Preference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.preferenceStyle);
!!!7696645.java!!!	Preference(inout context : Context)
        this(context, null);
!!!7696773.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return null;
!!!7696901.java!!!	setIntent(inout intent : Intent) : void
        mIntent = intent;
!!!7697029.java!!!	getIntent() : Intent
        return mIntent;
!!!7697157.java!!!	setFragment(in fragment : String) : void
        mFragment = fragment;
!!!7697285.java!!!	getFragment() : String
        return mFragment;
!!!7697413.java!!!	setPreferenceDataStore(inout dataStore : PreferenceDataStore) : void
        mPreferenceDataStore = dataStore;
!!!7697541.java!!!	getPreferenceDataStore() : PreferenceDataStore
        if (mPreferenceDataStore != null) {
            return mPreferenceDataStore;
        } else if (mPreferenceManager != null) {
            return mPreferenceManager.getPreferenceDataStore();
        }

        return null;
!!!7697669.java!!!	getExtras() : Bundle
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        return mExtras;
!!!7697797.java!!!	peekExtras() : Bundle
        return mExtras;
!!!7697925.java!!!	setLayoutResource(in layoutResId : int) : void
        if (layoutResId != mLayoutResId) {
            // Layout changed
            mRecycleEnabled = false;
        }

        mLayoutResId = layoutResId;
!!!7698053.java!!!	getLayoutResource() : int
        return mLayoutResId;
!!!7698181.java!!!	setWidgetLayoutResource(in widgetLayoutResId : int) : void
        if (widgetLayoutResId != mWidgetLayoutResId) {
            // Layout changed
            mRecycleEnabled = false;
        }
        mWidgetLayoutResId = widgetLayoutResId;
!!!7698309.java!!!	getWidgetLayoutResource() : int
        return mWidgetLayoutResId;
!!!7698437.java!!!	getView(inout convertView : View, inout parent : ViewGroup) : View
        if (convertView == null) {
            convertView = onCreateView(parent);
        }
        onBindView(convertView);
        return convertView;
!!!7698565.java!!!	onCreateView(inout parent : ViewGroup) : View
        final LayoutInflater layoutInflater =
                (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        final View layout = layoutInflater.inflate(mLayoutResId, parent, false);

        final ViewGroup widgetFrame = (ViewGroup) layout
                .findViewById(com.android.internal.R.id.widget_frame);
        if (widgetFrame != null) {
            if (mWidgetLayoutResId != 0) {
                layoutInflater.inflate(mWidgetLayoutResId, widgetFrame);
            } else {
                widgetFrame.setVisibility(View.GONE);
            }
        }
        return layout;
!!!7698693.java!!!	onBindView(inout view : View) : void
        final TextView titleView = (TextView) view.findViewById(com.android.internal.R.id.title);
        if (titleView != null) {
            final CharSequence title = getTitle();
            if (!TextUtils.isEmpty(title)) {
                titleView.setText(title);
                titleView.setVisibility(View.VISIBLE);
                if (mHasSingleLineTitleAttr) {
                    titleView.setSingleLine(mSingleLineTitle);
                }
            } else {
                titleView.setVisibility(View.GONE);
            }
        }

        final TextView summaryView = (TextView) view.findViewById(
                com.android.internal.R.id.summary);
        if (summaryView != null) {
            final CharSequence summary = getSummary();
            if (!TextUtils.isEmpty(summary)) {
                summaryView.setText(summary);
                summaryView.setVisibility(View.VISIBLE);
            } else {
                summaryView.setVisibility(View.GONE);
            }
        }

        final ImageView imageView = (ImageView) view.findViewById(com.android.internal.R.id.icon);
        if (imageView != null) {
            if (mIconResId != 0 || mIcon != null) {
                if (mIcon == null) {
                    mIcon = getContext().getDrawable(mIconResId);
                }
                if (mIcon != null) {
                    imageView.setImageDrawable(mIcon);
                }
            }
            if (mIcon != null) {
                imageView.setVisibility(View.VISIBLE);
            } else {
                imageView.setVisibility(mIconSpaceReserved ? View.INVISIBLE : View.GONE);
            }
        }

        final View imageFrame = view.findViewById(com.android.internal.R.id.icon_frame);
        if (imageFrame != null) {
            if (mIcon != null) {
                imageFrame.setVisibility(View.VISIBLE);
            } else {
                imageFrame.setVisibility(mIconSpaceReserved ? View.INVISIBLE : View.GONE);
            }
        }

        if (mShouldDisableView) {
            setEnabledStateOnViews(view, isEnabled());
        }
!!!7698821.java!!!	setEnabledStateOnViews(inout v : View, inout enabled : boolean) : void
        v.setEnabled(enabled);

        if (v instanceof ViewGroup) {
            final ViewGroup vg = (ViewGroup) v;
            for (int i = vg.getChildCount() - 1; i >= 0; i--) {
                setEnabledStateOnViews(vg.getChildAt(i), enabled);
            }
        }
!!!7698949.java!!!	setOrder(in order : int) : void
        if (order != mOrder) {
            mOrder = order;

            // Reorder the list
            notifyHierarchyChanged();
        }
!!!7699077.java!!!	getOrder() : int
        return mOrder;
!!!7699205.java!!!	setTitle(inout title : CharSequence) : void
        if (title == null && mTitle != null || title != null && !title.equals(mTitle)) {
            mTitleRes = 0;
            mTitle = title;
            notifyChanged();
        }
!!!7699333.java!!!	setTitle(in titleResId : int) : void
        setTitle(mContext.getString(titleResId));
        mTitleRes = titleResId;
!!!7699461.java!!!	getTitleRes() : int
        return mTitleRes;
!!!7699589.java!!!	getTitle() : CharSequence
        return mTitle;
!!!7699717.java!!!	setIcon(inout icon : Drawable) : void
        if ((icon == null && mIcon != null) || (icon != null && mIcon != icon)) {
            mIcon = icon;

            notifyChanged();
        }
!!!7699845.java!!!	setIcon(in iconResId : int) : void
        if (mIconResId != iconResId) {
            mIconResId = iconResId;
            setIcon(mContext.getDrawable(iconResId));
        }
!!!7699973.java!!!	getIcon() : Drawable
        if (mIcon == null && mIconResId != 0) {
            mIcon = getContext().getDrawable(mIconResId);
        }
        return mIcon;
!!!7700101.java!!!	getSummary() : CharSequence
        return mSummary;
!!!7700229.java!!!	setSummary(inout summary : CharSequence) : void
        if (summary == null && mSummary != null || summary != null && !summary.equals(mSummary)) {
            mSummary = summary;
            notifyChanged();
        }
!!!7700357.java!!!	setSummary(in summaryResId : int) : void
        setSummary(mContext.getString(summaryResId));
!!!7700485.java!!!	setEnabled(inout enabled : boolean) : void
        if (mEnabled != enabled) {
            mEnabled = enabled;

            // Enabled state can change dependent preferences' states, so notify
            notifyDependencyChange(shouldDisableDependents());

            notifyChanged();
        }
!!!7700613.java!!!	isEnabled() : boolean
        return mEnabled && mDependencyMet && mParentDependencyMet;
!!!7700741.java!!!	setSelectable(inout selectable : boolean) : void
        if (mSelectable != selectable) {
            mSelectable = selectable;
            notifyChanged();
        }
!!!7700869.java!!!	isSelectable() : boolean
        return mSelectable;
!!!7700997.java!!!	setShouldDisableView(inout shouldDisableView : boolean) : void
        mShouldDisableView = shouldDisableView;
        notifyChanged();
!!!7701125.java!!!	getShouldDisableView() : boolean
        return mShouldDisableView;
!!!7701253.java!!!	setRecycleEnabled(inout enabled : boolean) : void
        mRecycleEnabled = enabled;
        notifyChanged();
!!!7701381.java!!!	isRecycleEnabled() : boolean
        return mRecycleEnabled;
!!!7701509.java!!!	setSingleLineTitle(inout singleLineTitle : boolean) : void
        mSingleLineTitle = singleLineTitle;
        notifyChanged();
!!!7701637.java!!!	isSingleLineTitle() : boolean
        return mSingleLineTitle;
!!!7701765.java!!!	setIconSpaceReserved(inout iconSpaceReserved : boolean) : void
        mIconSpaceReserved = iconSpaceReserved;
        notifyChanged();
!!!7701893.java!!!	isIconSpaceReserved() : boolean
        return mIconSpaceReserved;
!!!7702021.java!!!	getId() : long
        return mId;
!!!7702277.java!!!	setKey(in key : String) : void
        mKey = key;

        if (mRequiresKey && !hasKey()) {
            requireKey();
        }
!!!7702405.java!!!	getKey() : String
        return mKey;
!!!7702533.java!!!	requireKey() : void
        if (mKey == null) {
            throw new IllegalStateException("Preference does not have a key assigned.");
        }

        mRequiresKey = true;
!!!7702661.java!!!	hasKey() : boolean
        return !TextUtils.isEmpty(mKey);
!!!7702789.java!!!	isPersistent() : boolean
        return mPersistent;
!!!7702917.java!!!	shouldPersist() : boolean
        return mPreferenceManager != null && isPersistent() && hasKey();
!!!7703045.java!!!	setPersistent(inout persistent : boolean) : void
        mPersistent = persistent;
!!!7703173.java!!!	callChangeListener(inout newValue : Object) : boolean
        return mOnChangeListener == null || mOnChangeListener.onPreferenceChange(this, newValue);
!!!7703301.java!!!	setOnPreferenceChangeListener(inout onPreferenceChangeListener : Preference::OnPreferenceChangeListener) : void
        mOnChangeListener = onPreferenceChangeListener;
!!!7703429.java!!!	getOnPreferenceChangeListener() : Preference::OnPreferenceChangeListener
        return mOnChangeListener;
!!!7703557.java!!!	setOnPreferenceClickListener(inout onPreferenceClickListener : Preference::OnPreferenceClickListener) : void
        mOnClickListener = onPreferenceClickListener;
!!!7703685.java!!!	getOnPreferenceClickListener() : Preference::OnPreferenceClickListener
        return mOnClickListener;
!!!7703813.java!!!	performClick(inout preferenceScreen : PreferenceScreen) : void

        if (!isEnabled()) {
            return;
        }

        onClick();

        if (mOnClickListener != null && mOnClickListener.onPreferenceClick(this)) {
            return;
        }

        PreferenceManager preferenceManager = getPreferenceManager();
        if (preferenceManager != null) {
            PreferenceManager.OnPreferenceTreeClickListener listener = preferenceManager
                    .getOnPreferenceTreeClickListener();
            if (preferenceScreen != null && listener != null
                    && listener.onPreferenceTreeClick(preferenceScreen, this)) {
                return;
            }
        }

        if (mIntent != null) {
            Context context = getContext();
            context.startActivity(mIntent);
        }
!!!7703941.java!!!	onKey(inout v : View, in keyCode : int, inout event : KeyEvent) : boolean
        return false;
!!!7704069.java!!!	getContext() : Context
        return mContext;
!!!7704197.java!!!	getSharedPreferences() : SharedPreferences
        if (mPreferenceManager == null || getPreferenceDataStore() != null) {
            return null;
        }

        return mPreferenceManager.getSharedPreferences();
!!!7704325.java!!!	getEditor() : SharedPreferences::Editor
        if (mPreferenceManager == null || getPreferenceDataStore() != null) {
            return null;
        }

        return mPreferenceManager.getEditor();
!!!7704453.java!!!	shouldCommit() : boolean
        if (mPreferenceManager == null) {
            return false;
        }

        return mPreferenceManager.shouldCommit();
!!!7704581.java!!!	compareTo(inout another : Preference) : int
        if (mOrder != another.mOrder) {
            // Do order comparison
            return mOrder - another.mOrder;
        } else if (mTitle == another.mTitle) {
            // If titles are null or share same object comparison
            return 0;
        } else if (mTitle == null) {
            return 1;
        } else if (another.mTitle == null) {
            return -1;
        } else {
            // Do name comparison
            return CharSequences.compareToIgnoreCase(mTitle, another.mTitle);
        }
!!!7704709.java!!!	setOnPreferenceChangeInternalListener(inout listener : Preference::OnPreferenceChangeInternalListener) : void
        mListener = listener;
!!!7704837.java!!!	notifyChanged() : void
        if (mListener != null) {
            mListener.onPreferenceChange(this);
        }
!!!7704965.java!!!	notifyHierarchyChanged() : void
        if (mListener != null) {
            mListener.onPreferenceHierarchyChange(this);
        }
!!!7705093.java!!!	getPreferenceManager() : PreferenceManager
        return mPreferenceManager;
!!!7705221.java!!!	onAttachedToHierarchy(inout preferenceManager : PreferenceManager) : void
        mPreferenceManager = preferenceManager;

        mId = preferenceManager.getNextId();

        dispatchSetInitialValue();
!!!7705349.java!!!	onAttachedToActivity() : void
        // At this point, the hierarchy that this preference is in is connected
        // with all other preferences.
        registerDependency();
!!!7705477.java!!!	assignParent(inout parentGroup : PreferenceGroup) : void
        mParentGroup = parentGroup;
!!!7705605.java!!!	registerDependency() : void

        if (TextUtils.isEmpty(mDependencyKey)) return;

        Preference preference = findPreferenceInHierarchy(mDependencyKey);
        if (preference != null) {
            preference.registerDependent(this);
        } else {
            throw new IllegalStateException("Dependency \"" + mDependencyKey
                    + "\" not found for preference \"" + mKey + "\" (title: \"" + mTitle + "\"");
        }
!!!7705733.java!!!	unregisterDependency() : void
        if (mDependencyKey != null) {
            final Preference oldDependency = findPreferenceInHierarchy(mDependencyKey);
            if (oldDependency != null) {
                oldDependency.unregisterDependent(this);
            }
        }
!!!7705861.java!!!	findPreferenceInHierarchy(in key : String) : Preference
        if (TextUtils.isEmpty(key) || mPreferenceManager == null) {
            return null;
        }

        return mPreferenceManager.findPreference(key);
!!!7705989.java!!!	registerDependent(inout dependent : Preference) : void
        if (mDependents == null) {
            mDependents = new ArrayList<Preference>();
        }

        mDependents.add(dependent);

        dependent.onDependencyChanged(this, shouldDisableDependents());
!!!7706117.java!!!	unregisterDependent(inout dependent : Preference) : void
        if (mDependents != null) {
            mDependents.remove(dependent);
        }
!!!7706245.java!!!	notifyDependencyChange(inout disableDependents : boolean) : void
        final List<Preference> dependents = mDependents;

        if (dependents == null) {
            return;
        }

        final int dependentsCount = dependents.size();
        for (int i = 0; i < dependentsCount; i++) {
            dependents.get(i).onDependencyChanged(this, disableDependents);
        }
!!!7706373.java!!!	onDependencyChanged(inout dependency : Preference, inout disableDependent : boolean) : void
        if (mDependencyMet == disableDependent) {
            mDependencyMet = !disableDependent;

            // Enabled state can change dependent preferences' states, so notify
            notifyDependencyChange(shouldDisableDependents());

            notifyChanged();
        }
!!!7706501.java!!!	onParentChanged(inout parent : Preference, inout disableChild : boolean) : void
        if (mParentDependencyMet == disableChild) {
            mParentDependencyMet = !disableChild;

            // Enabled state can change dependent preferences' states, so notify
            notifyDependencyChange(shouldDisableDependents());

            notifyChanged();
        }
!!!7706629.java!!!	shouldDisableDependents() : boolean
        return !isEnabled();
!!!7706757.java!!!	setDependency(in dependencyKey : String) : void
        // Unregister the old dependency, if we had one
        unregisterDependency();

        // Register the new
        mDependencyKey = dependencyKey;
        registerDependency();
!!!7706885.java!!!	getDependency() : String
        return mDependencyKey;
!!!7707013.java!!!	getParent() : PreferenceGroup
        return mParentGroup;
!!!7707141.java!!!	onPrepareForRemoval() : void
        unregisterDependency();
!!!7707269.java!!!	setDefaultValue(inout defaultValue : Object) : void
        mDefaultValue = defaultValue;
!!!7707397.java!!!	dispatchSetInitialValue() : void
        if (getPreferenceDataStore() != null) {
            onSetInitialValue(true, mDefaultValue);
            return;
        }

        // By now, we know if we are persistent.
        final boolean shouldPersist = shouldPersist();
        if (!shouldPersist || !getSharedPreferences().contains(mKey)) {
            if (mDefaultValue != null) {
                onSetInitialValue(false, mDefaultValue);
            }
        } else {
            onSetInitialValue(true, null);
        }
!!!7707653.java!!!	tryCommit(inout editor : SharedPreferences::Editor) : void
        if (mPreferenceManager.shouldCommit()) {
            try {
                editor.apply();
            } catch (AbstractMethodError unused) {
                // The app injected its own pre-Gingerbread
                // SharedPreferences.Editor implementation without
                // an apply method.
                editor.commit();
            }
        }
!!!7707781.java!!!	persistString(in value : String) : boolean
        if (!shouldPersist()) {
            return false;
        }

        // Shouldn't store null
        if (TextUtils.equals(value, getPersistedString(null))) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putString(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putString(mKey, value);
            tryCommit(editor);
        }
        return true;
!!!7707909.java!!!	getPersistedString(in defaultReturnValue : String) : String
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            return dataStore.getString(mKey, defaultReturnValue);
        }

        return mPreferenceManager.getSharedPreferences().getString(mKey, defaultReturnValue);
!!!7708037.java!!!	persistStringSet(inout values : Set<String>) : boolean
        if (!shouldPersist()) {
            return false;
        }

        // Shouldn't store null
        if (values.equals(getPersistedStringSet(null))) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putStringSet(mKey, values);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putStringSet(mKey, values);
            tryCommit(editor);
        }
        return true;
!!!7708165.java!!!	getPersistedStringSet(inout defaultReturnValue : Set<String>) : Set<String>
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            return dataStore.getStringSet(mKey, defaultReturnValue);
        }

        return mPreferenceManager.getSharedPreferences().getStringSet(mKey, defaultReturnValue);
!!!7708293.java!!!	persistInt(in value : int) : boolean
        if (!shouldPersist()) {
            return false;
        }

        if (value == getPersistedInt(~value)) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putInt(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putInt(mKey, value);
            tryCommit(editor);
        }
        return true;
!!!7708421.java!!!	getPersistedInt(in defaultReturnValue : int) : int
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            return dataStore.getInt(mKey, defaultReturnValue);
        }

        return mPreferenceManager.getSharedPreferences().getInt(mKey, defaultReturnValue);
!!!7708549.java!!!	persistFloat(in value : float) : boolean
        if (!shouldPersist()) {
            return false;
        }

        if (value == getPersistedFloat(Float.NaN)) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putFloat(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putFloat(mKey, value);
            tryCommit(editor);
        }
        return true;
!!!7708677.java!!!	getPersistedFloat(in defaultReturnValue : float) : float
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            return dataStore.getFloat(mKey, defaultReturnValue);
        }

        return mPreferenceManager.getSharedPreferences().getFloat(mKey, defaultReturnValue);
!!!7708805.java!!!	persistLong(in value : long) : boolean
        if (!shouldPersist()) {
            return false;
        }

        if (value == getPersistedLong(~value)) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putLong(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putLong(mKey, value);
            tryCommit(editor);
        }
        return true;
!!!7708933.java!!!	getPersistedLong(in defaultReturnValue : long) : long
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            return dataStore.getLong(mKey, defaultReturnValue);
        }

        return mPreferenceManager.getSharedPreferences().getLong(mKey, defaultReturnValue);
!!!7709061.java!!!	persistBoolean(inout value : boolean) : boolean
        if (!shouldPersist()) {
            return false;
        }

        if (value == getPersistedBoolean(!value)) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putBoolean(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putBoolean(mKey, value);
            tryCommit(editor);
        }
        return true;
!!!7709189.java!!!	getPersistedBoolean(inout defaultReturnValue : boolean) : boolean
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            return dataStore.getBoolean(mKey, defaultReturnValue);
        }

        return mPreferenceManager.getSharedPreferences().getBoolean(mKey, defaultReturnValue);
!!!7709317.java!!!	toString() : String
        return getFilterableStringBuilder().toString();
!!!7709445.java!!!	getFilterableStringBuilder() : StringBuilder
        StringBuilder sb = new StringBuilder();
        CharSequence title = getTitle();
        if (!TextUtils.isEmpty(title)) {
            sb.append(title).append(' ');
        }
        CharSequence summary = getSummary();
        if (!TextUtils.isEmpty(summary)) {
            sb.append(summary).append(' ');
        }
        if (sb.length() > 0) {
            // Drop the last space
            sb.setLength(sb.length() - 1);
        }
        return sb;
!!!7709573.java!!!	saveHierarchyState(inout container : Bundle) : void
        dispatchSaveInstanceState(container);
!!!7709701.java!!!	dispatchSaveInstanceState(inout container : Bundle) : void
        if (hasKey()) {
            mBaseMethodCalled = false;
            Parcelable state = onSaveInstanceState();
            if (!mBaseMethodCalled) {
                throw new IllegalStateException(
                        "Derived class did not call super.onSaveInstanceState()");
            }
            if (state != null) {
                container.putParcelable(mKey, state);
            }
        }
!!!7709829.java!!!	onSaveInstanceState() : Parcelable
        mBaseMethodCalled = true;
        return BaseSavedState.EMPTY_STATE;
!!!7709957.java!!!	restoreHierarchyState(inout container : Bundle) : void
        dispatchRestoreInstanceState(container);
!!!7710085.java!!!	dispatchRestoreInstanceState(inout container : Bundle) : void
        if (hasKey()) {
            Parcelable state = container.getParcelable(mKey);
            if (state != null) {
                mBaseMethodCalled = false;
                onRestoreInstanceState(state);
                if (!mBaseMethodCalled) {
                    throw new IllegalStateException(
                            "Derived class did not call super.onRestoreInstanceState()");
                }
            }
        }
!!!7710213.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        mBaseMethodCalled = true;
        if (state != BaseSavedState.EMPTY_STATE && state != null) {
            throw new IllegalArgumentException("Wrong state class -- expecting Preference State");
        }
