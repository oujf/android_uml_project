class TaskKeyCache
!!!3533061.java!!!	get(inout key : Task::TaskKey) : V
        return getCacheEntry(key.id);
!!!3533189.java!!!	getAndInvalidateIfModified(inout key : Task::TaskKey) : V
        Task.TaskKey lastKey = mKeys.get(key.id);
        if (lastKey != null) {
            if ((lastKey.stackId != key.stackId) ||
                    (lastKey.lastActiveTime != key.lastActiveTime)) {
                // The task has updated (been made active since the last time it was put into the
                // LRU cache) or the stack id for the task has changed, invalidate that cache item
                remove(key);
                return null;
            }
        }
        // Either the task does not exist in the cache, or the last active time is the same as
        // the key specified, so return what is in the cache
        return getCacheEntry(key.id);
!!!3533317.java!!!	put(inout key : Task::TaskKey, inout value : V) : void
        if (key == null || value == null) {
            Log.e(TAG, "Unexpected null key or value: " + key + ", " + value);
            return;
        }
        mKeys.put(key.id, key);
        putCacheEntry(key.id, value);
!!!3533445.java!!!	remove(inout key : Task::TaskKey) : void
        // Remove the key after the cache value because we need it to make the callback
        removeCacheEntry(key.id);
        mKeys.remove(key.id);
!!!3533573.java!!!	evictAll() : void
        evictAllCache();
        mKeys.clear();
