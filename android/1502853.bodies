class ChooserTargetInfo
!!!9787909.java!!!	ChooserTargetInfo(inout sourceInfo : ResolverActivity::DisplayResolveInfo, inout chooserTarget : ChooserTarget, in modifiedScore : float)
            mSourceInfo = sourceInfo;
            mChooserTarget = chooserTarget;
            mModifiedScore = modifiedScore;
            if (sourceInfo != null) {
                final ResolveInfo ri = sourceInfo.getResolveInfo();
                if (ri != null) {
                    final ActivityInfo ai = ri.activityInfo;
                    if (ai != null && ai.applicationInfo != null) {
                        final PackageManager pm = getPackageManager();
                        mBadgeIcon = pm.getApplicationIcon(ai.applicationInfo);
                        mBadgeContentDescription = pm.getApplicationLabel(ai.applicationInfo);
                    }
                }
            }
            final Icon icon = chooserTarget.getIcon();
            // TODO do this in the background
            mDisplayIcon = icon != null ? icon.loadDrawable(ChooserActivity.this) : null;

            if (sourceInfo != null) {
                mBackupResolveInfo = null;
            } else {
                mBackupResolveInfo = getPackageManager().resolveActivity(getResolvedIntent(), 0);
            }

            mFillInIntent = null;
            mFillInFlags = 0;
!!!9788037.java!!!	ChooserTargetInfo(inout other : ChooserActivity::ChooserTargetInfo, inout fillInIntent : Intent, in flags : int)
            mSourceInfo = other.mSourceInfo;
            mBackupResolveInfo = other.mBackupResolveInfo;
            mChooserTarget = other.mChooserTarget;
            mBadgeIcon = other.mBadgeIcon;
            mBadgeContentDescription = other.mBadgeContentDescription;
            mDisplayIcon = other.mDisplayIcon;
            mFillInIntent = fillInIntent;
            mFillInFlags = flags;
            mModifiedScore = other.mModifiedScore;
!!!9788165.java!!!	getModifiedScore() : float
            return mModifiedScore;
!!!9788293.java!!!	getResolvedIntent() : Intent
            if (mSourceInfo != null) {
                return mSourceInfo.getResolvedIntent();
            }

            final Intent targetIntent = new Intent(getTargetIntent());
            targetIntent.setComponent(mChooserTarget.getComponentName());
            targetIntent.putExtras(mChooserTarget.getIntentExtras());
            return targetIntent;
!!!9788421.java!!!	getResolvedComponentName() : ComponentName
            if (mSourceInfo != null) {
                return mSourceInfo.getResolvedComponentName();
            } else if (mBackupResolveInfo != null) {
                return new ComponentName(mBackupResolveInfo.activityInfo.packageName,
                        mBackupResolveInfo.activityInfo.name);
            }
            return null;
!!!9788549.java!!!	getBaseIntentToSend() : Intent
            Intent result = getResolvedIntent();
            if (result == null) {
                Log.e(TAG, "ChooserTargetInfo: no base intent available to send");
            } else {
                result = new Intent(result);
                if (mFillInIntent != null) {
                    result.fillIn(mFillInIntent, mFillInFlags);
                }
                result.fillIn(mReferrerFillInIntent, 0);
            }
            return result;
!!!9788677.java!!!	start(inout activity : Activity, inout options : Bundle) : boolean
            throw new RuntimeException("ChooserTargets should be started as caller.");
!!!9788805.java!!!	startAsCaller(inout activity : Activity, inout options : Bundle, in userId : int) : boolean
            final Intent intent = getBaseIntentToSend();
            if (intent == null) {
                return false;
            }
            intent.setComponent(mChooserTarget.getComponentName());
            intent.putExtras(mChooserTarget.getIntentExtras());

            // Important: we will ignore the target security checks in ActivityManager
            // if and only if the ChooserTarget's target package is the same package
            // where we got the ChooserTargetService that provided it. This lets a
            // ChooserTargetService provide a non-exported or permission-guarded target
            // to the chooser for the user to pick.
            //
            // If mSourceInfo is null, we got this ChooserTarget from the caller or elsewhere
            // so we'll obey the caller's normal security checks.
            final boolean ignoreTargetSecurity = mSourceInfo != null
                    && mSourceInfo.getResolvedComponentName().getPackageName()
                    .equals(mChooserTarget.getComponentName().getPackageName());
            activity.startActivityAsCaller(intent, options, ignoreTargetSecurity, userId);
            return true;
!!!9788933.java!!!	startAsUser(inout activity : Activity, inout options : Bundle, inout user : UserHandle) : boolean
            throw new RuntimeException("ChooserTargets should be started as caller.");
!!!9789061.java!!!	getResolveInfo() : ResolveInfo
            return mSourceInfo != null ? mSourceInfo.getResolveInfo() : mBackupResolveInfo;
!!!9789189.java!!!	getDisplayLabel() : CharSequence
            return mChooserTarget.getTitle();
!!!9789317.java!!!	getExtendedInfo() : CharSequence
            // ChooserTargets have badge icons, so we won't show the extended info to disambiguate.
            return null;
!!!9789445.java!!!	getDisplayIcon() : Drawable
            return mDisplayIcon;
!!!9789573.java!!!	getBadgeIcon() : Drawable
            return mBadgeIcon;
!!!9789701.java!!!	getBadgeContentDescription() : CharSequence
            return mBadgeContentDescription;
!!!9789829.java!!!	cloneFilledIn(inout fillInIntent : Intent, in flags : int) : ResolverActivity::TargetInfo
            return new ChooserTargetInfo(this, fillInIntent, flags);
!!!9789957.java!!!	getAllSourceIntents() : Intent
            final List<Intent> results = new ArrayList<>();
            if (mSourceInfo != null) {
                // We only queried the service for the first one in our sourceinfo.
                results.add(mSourceInfo.getAllSourceIntents().get(0));
            }
            return results;
!!!9790085.java!!!	isPinned() : boolean
            return mSourceInfo != null ? mSourceInfo.isPinned() : false;
