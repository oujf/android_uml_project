class BluetoothLeDeviceFilter
!!!6078725.java!!!	BluetoothLeDeviceFilter(inout namePattern : Pattern, inout scanFilter : ScanFilter, inout rawDataFilter : byte [[]], inout rawDataFilterMask : byte [[]], in renamePrefix : String, in renameSuffix : String, in renameBytesFrom : int, in renameBytesLength : int, in renameNameFrom : int, in renameNameLength : int, inout renameBytesReverseOrder : boolean)
        mNamePattern = namePattern;
        mScanFilter = ObjectUtils.firstNotNull(scanFilter, ScanFilter.EMPTY);
        mRawDataFilter = rawDataFilter;
        mRawDataFilterMask = rawDataFilterMask;
        mRenamePrefix = renamePrefix;
        mRenameSuffix = renameSuffix;
        mRenameBytesFrom = renameBytesFrom;
        mRenameBytesLength = renameBytesLength;
        mRenameNameFrom = renameNameFrom;
        mRenameNameLength = renameNameLength;
        mRenameBytesReverseOrder = renameBytesReverseOrder;
!!!6078853.java!!!	getNamePattern() : Pattern
        return mNamePattern;
!!!6078981.java!!!	getScanFilter() : ScanFilter
        return mScanFilter;
!!!6079109.java!!!	getRawDataFilter() : byte
        return mRawDataFilter;
!!!6079237.java!!!	getRawDataFilterMask() : byte
        return mRawDataFilterMask;
!!!6079365.java!!!	getRenamePrefix() : String
        return mRenamePrefix;
!!!6079493.java!!!	getRenameSuffix() : String
        return mRenameSuffix;
!!!6079621.java!!!	getRenameBytesFrom() : int
        return mRenameBytesFrom;
!!!6079749.java!!!	getRenameBytesLength() : int
        return mRenameBytesLength;
!!!6079877.java!!!	isRenameBytesReverseOrder() : boolean
        return mRenameBytesReverseOrder;
!!!6080005.java!!!	getDeviceDisplayName(inout sr : ScanResult) : String
        if (mRenameBytesFrom < 0 && mRenameNameFrom < 0) {
            return getDeviceDisplayNameInternal(sr.getDevice());
        }
        final StringBuilder sb = new StringBuilder(TextUtils.emptyIfNull(mRenamePrefix));
        if (mRenameBytesFrom >= 0) {
            final byte[] bytes = sr.getScanRecord().getBytes();
            int startInclusive = mRenameBytesFrom;
            int endInclusive = mRenameBytesFrom + mRenameBytesLength -1;
            int initial = mRenameBytesReverseOrder ? endInclusive : startInclusive;
            int step = mRenameBytesReverseOrder ? -1 : 1;
            for (int i = initial; startInclusive <= i && i <= endInclusive; i += step) {
                sb.append(Byte.toHexString(bytes[i], true));
            }
        } else {
            sb.append(
                    getDeviceDisplayNameInternal(sr.getDevice())
                            .substring(mRenameNameFrom, mRenameNameFrom + mRenameNameLength));
        }
        return sb.append(TextUtils.emptyIfNull(mRenameSuffix)).toString();
!!!6080133.java!!!	matches(inout device : ScanResult) : boolean
        boolean result = matches(device.getDevice())
                && (mRawDataFilter == null
                    || BitUtils.maskedEquals(device.getScanRecord().getBytes(),
                            mRawDataFilter, mRawDataFilterMask));
        if (DEBUG) Log.i(LOG_TAG, "matches(this = " + this + ", device = " + device +
                ") -> " + result);
        return result;
!!!6080261.java!!!	matches(inout device : BluetoothDevice) : boolean
        return BluetoothDeviceFilterUtils.matches(getScanFilter(), device)
                && BluetoothDeviceFilterUtils.matchesName(getNamePattern(), device);
!!!6080389.java!!!	getMediumType() : int
        return DeviceFilter.MEDIUM_TYPE_BLUETOOTH_LE;
!!!6080517.java!!!	equals(inout o : Object) : boolean
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BluetoothLeDeviceFilter that = (BluetoothLeDeviceFilter) o;
        return mRenameBytesFrom == that.mRenameBytesFrom &&
                mRenameBytesLength == that.mRenameBytesLength &&
                mRenameNameFrom == that.mRenameNameFrom &&
                mRenameNameLength == that.mRenameNameLength &&
                mRenameBytesReverseOrder == that.mRenameBytesReverseOrder &&
                Objects.equals(mNamePattern, that.mNamePattern) &&
                Objects.equals(mScanFilter, that.mScanFilter) &&
                Arrays.equals(mRawDataFilter, that.mRawDataFilter) &&
                Arrays.equals(mRawDataFilterMask, that.mRawDataFilterMask) &&
                Objects.equals(mRenamePrefix, that.mRenamePrefix) &&
                Objects.equals(mRenameSuffix, that.mRenameSuffix);
!!!6080645.java!!!	hashCode() : int
        return Objects.hash(mNamePattern, mScanFilter, mRawDataFilter, mRawDataFilterMask,
                mRenamePrefix, mRenameSuffix, mRenameBytesFrom, mRenameBytesLength,
                mRenameNameFrom, mRenameNameLength, mRenameBytesReverseOrder);
!!!6080773.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeString(patternToString(getNamePattern()));
        dest.writeParcelable(mScanFilter, flags);
        dest.writeByteArray(mRawDataFilter);
        dest.writeByteArray(mRawDataFilterMask);
        dest.writeString(mRenamePrefix);
        dest.writeString(mRenameSuffix);
        dest.writeInt(mRenameBytesFrom);
        dest.writeInt(mRenameBytesLength);
        dest.writeInt(mRenameNameFrom);
        dest.writeInt(mRenameNameLength);
        dest.writeBoolean(mRenameBytesReverseOrder);
!!!6080901.java!!!	describeContents() : int
        return 0;
!!!6081029.java!!!	toString() : String
        return "BluetoothLEDeviceFilter{" +
                "mNamePattern=" + mNamePattern +
                ", mScanFilter=" + mScanFilter +
                ", mRawDataFilter=" + Arrays.toString(mRawDataFilter) +
                ", mRawDataFilterMask=" + Arrays.toString(mRawDataFilterMask) +
                ", mRenamePrefix='" + mRenamePrefix + '\'' +
                ", mRenameSuffix='" + mRenameSuffix + '\'' +
                ", mRenameBytesFrom=" + mRenameBytesFrom +
                ", mRenameBytesLength=" + mRenameBytesLength +
                ", mRenameNameFrom=" + mRenameNameFrom +
                ", mRenameNameLength=" + mRenameNameLength +
                ", mRenameBytesReverseOrder=" + mRenameBytesReverseOrder +
                '}';
!!!6081157.java!!!	getRenamePrefixLengthLimit() : int
        return RENAME_PREFIX_LENGTH_LIMIT;
