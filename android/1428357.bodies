class OverlayViewGroup
!!!8862341.java!!!	OverlayViewGroup(inout context : Context, inout hostView : View)
            super(context);
            mHostView = hostView;
            mAttachInfo = mHostView.mAttachInfo;

            mRight = hostView.getWidth();
            mBottom = hostView.getHeight();
            // pass right+bottom directly to RenderNode, since not going through setters
            mRenderNode.setLeftTopRightBottom(0, 0, mRight, mBottom);
!!!8862469.java!!!	add(inout drawable : Drawable) : void
            if (drawable == null) {
                throw new IllegalArgumentException("drawable must be non-null");
            }
            if (mDrawables == null) {
                mDrawables = new ArrayList<>();
            }
            if (!mDrawables.contains(drawable)) {
                // Make each drawable unique in the overlay; can't add it more than once
                mDrawables.add(drawable);
                invalidate(drawable.getBounds());
                drawable.setCallback(this);
            }
!!!8862597.java!!!	remove(inout drawable : Drawable) : void
            if (drawable == null) {
                throw new IllegalArgumentException("drawable must be non-null");
            }
            if (mDrawables != null) {
                mDrawables.remove(drawable);
                invalidate(drawable.getBounds());
                drawable.setCallback(null);
            }
!!!8862725.java!!!	verifyDrawable(inout who : Drawable) : boolean
            return super.verifyDrawable(who) || (mDrawables != null && mDrawables.contains(who));
!!!8862853.java!!!	add(inout child : View) : void
            if (child == null) {
                throw new IllegalArgumentException("view must be non-null");
            }

            if (child.getParent() instanceof ViewGroup) {
                ViewGroup parent = (ViewGroup) child.getParent();
                if (parent != mHostView && parent.getParent() != null &&
                        parent.mAttachInfo != null) {
                    // Moving to different container; figure out how to position child such that
                    // it is in the same location on the screen
                    int[] parentLocation = new int[2];
                    int[] hostViewLocation = new int[2];
                    parent.getLocationOnScreen(parentLocation);
                    mHostView.getLocationOnScreen(hostViewLocation);
                    child.offsetLeftAndRight(parentLocation[0] - hostViewLocation[0]);
                    child.offsetTopAndBottom(parentLocation[1] - hostViewLocation[1]);
                }
                parent.removeView(child);
                if (parent.getLayoutTransition() != null) {
                    // LayoutTransition will cause the child to delay removal - cancel it
                    parent.getLayoutTransition().cancel(LayoutTransition.DISAPPEARING);
                }
                // fail-safe if view is still attached for any reason
                if (child.getParent() != null) {
                    child.mParent = null;
                }
            }
            super.addView(child);
!!!8862981.java!!!	remove(inout view : View) : void
            if (view == null) {
                throw new IllegalArgumentException("view must be non-null");
            }

            super.removeView(view);
!!!8863109.java!!!	clear() : void
            removeAllViews();
            if (mDrawables != null) {
                for (Drawable drawable : mDrawables) {
                    drawable.setCallback(null);
                }
                mDrawables.clear();
            }
!!!8863237.java!!!	isEmpty() : boolean
            if (getChildCount() == 0 &&
                    (mDrawables == null || mDrawables.size() == 0)) {
                return true;
            }
            return false;
!!!8863365.java!!!	invalidateDrawable(inout drawable : Drawable) : void
            invalidate(drawable.getBounds());
!!!8863493.java!!!	dispatchDraw(inout canvas : Canvas) : void
            /*
             * The OverlayViewGroup doesn't draw with a DisplayList, because
             * draw(Canvas, View, long) is never called on it. This is fine, since it doesn't need
             * RenderNode/DisplayList features, and can just draw into the owner's Canvas.
             *
             * This means that we need to insert reorder barriers manually though, so that children
             * of the OverlayViewGroup can cast shadows and Z reorder with each other.
             */
            canvas.insertReorderBarrier();

            super.dispatchDraw(canvas);

            canvas.insertInorderBarrier();
            final int numDrawables = (mDrawables == null) ? 0 : mDrawables.size();
            for (int i = 0; i < numDrawables; ++i) {
                mDrawables.get(i).draw(canvas);
            }
!!!8863621.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
            // Noop: children are positioned absolutely
!!!8863749.java!!!	invalidate(inout dirty : Rect) : void
            super.invalidate(dirty);
            if (mHostView != null) {
                mHostView.invalidate(dirty);
            }
!!!8863877.java!!!	invalidate(in l : int, in t : int, in r : int, in b : int) : void
            super.invalidate(l, t, r, b);
            if (mHostView != null) {
                mHostView.invalidate(l, t, r, b);
            }
!!!8864005.java!!!	invalidate() : void
            super.invalidate();
            if (mHostView != null) {
                mHostView.invalidate();
            }
!!!8864133.java!!!	invalidate(inout invalidateCache : boolean) : void
            super.invalidate(invalidateCache);
            if (mHostView != null) {
                mHostView.invalidate(invalidateCache);
            }
!!!8864261.java!!!	invalidateViewProperty(inout invalidateParent : boolean, inout forceRedraw : boolean) : void
            super.invalidateViewProperty(invalidateParent, forceRedraw);
            if (mHostView != null) {
                mHostView.invalidateViewProperty(invalidateParent, forceRedraw);
            }
!!!8864389.java!!!	invalidateParentCaches() : void
            super.invalidateParentCaches();
            if (mHostView != null) {
                mHostView.invalidateParentCaches();
            }
!!!8864517.java!!!	invalidateParentIfNeeded() : void
            super.invalidateParentIfNeeded();
            if (mHostView != null) {
                mHostView.invalidateParentIfNeeded();
            }
!!!8864645.java!!!	onDescendantInvalidated(inout child : View, inout target : View) : void
            if (mHostView != null) {
                if (mHostView instanceof ViewGroup) {
                    // Propagate invalidate through the host...
                    ((ViewGroup) mHostView).onDescendantInvalidated(mHostView, target);

                    // ...and also this view, since it will hold the descendant, and must later
                    // propagate the calls to update display lists if dirty
                    super.onDescendantInvalidated(child, target);
                } else {
                    // Can't use onDescendantInvalidated because host isn't a ViewGroup - fall back
                    // to invalidating.
                    invalidate();
                }
            }
!!!8864773.java!!!	invalidateChildInParent(inout location : int [[]], inout dirty : Rect) : ViewParent
            if (mHostView != null) {
                dirty.offset(location[0], location[1]);
                if (mHostView instanceof ViewGroup) {
                    location[0] = 0;
                    location[1] = 0;
                    super.invalidateChildInParent(location, dirty);
                    return ((ViewGroup) mHostView).invalidateChildInParent(location, dirty);
                } else {
                    invalidate(dirty);
                }
            }
            return null;
