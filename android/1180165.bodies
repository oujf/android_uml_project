class Sensor
!!!6609157.java!!!	getReportingMode() : int
        return ((mFlags & REPORTING_MODE_MASK) >> REPORTING_MODE_SHIFT);
!!!6609285.java!!!	getHighestDirectReportRateLevel() : int
        int rateLevel = ((mFlags & DIRECT_REPORT_MASK) >> DIRECT_REPORT_SHIFT);
        return rateLevel <= SensorDirectChannel.RATE_VERY_FAST
                ? rateLevel : SensorDirectChannel.RATE_VERY_FAST;
!!!6609413.java!!!	isDirectChannelTypeSupported(in sharedMemType : int) : boolean
        switch (sharedMemType) {
            case SensorDirectChannel.TYPE_MEMORY_FILE:
                return (mFlags & (1 << DIRECT_CHANNEL_SHIFT)) > 0;
            case SensorDirectChannel.TYPE_HARDWARE_BUFFER:
                return (mFlags & (1 << DIRECT_CHANNEL_SHIFT + 1)) > 0;
            default:
                return false;
        }
!!!6609541.java!!!	getMaxLengthValuesArray(inout sensor : Sensor, in sdkLevel : int) : int
        // RotationVector length has changed to 3 to 5 for API level 18
        // Set it to 3 for backward compatibility.
        if (sensor.mType == Sensor.TYPE_ROTATION_VECTOR &&
                sdkLevel <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            return 3;
        }
        int offset = sensor.mType;
        if (offset >= sSensorReportingModes.length) {
            // we don't know about this sensor, so this is probably a vendor-defined sensor, in that
            // case, we don't know how many value it has so we return the maximum and assume the app
            // will know.
            // FIXME: sensor HAL should advertise how much data is returned per sensor
            return 16;
        }
        return sSensorReportingModes[offset];
!!!6609797.java!!!	getName() : String
        return mName;
!!!6609925.java!!!	getVendor() : String
        return mVendor;
!!!6610053.java!!!	getType() : int
        return mType;
!!!6610181.java!!!	getVersion() : int
        return mVersion;
!!!6610309.java!!!	getMaximumRange() : float
        return mMaxRange;
!!!6610437.java!!!	getResolution() : float
        return mResolution;
!!!6610565.java!!!	getPower() : float
        return mPower;
!!!6610693.java!!!	getMinDelay() : int
        return mMinDelay;
!!!6610821.java!!!	getFifoReservedEventCount() : int
        return mFifoReservedEventCount;
!!!6610949.java!!!	getFifoMaxEventCount() : int
        return mFifoMaxEventCount;
!!!6611077.java!!!	getStringType() : String
        return mStringType;
!!!6611205.java!!!	getUuid() : java.util.UUID
        throw new UnsupportedOperationException();
!!!6611333.java!!!	getId() : int
        return mId;
!!!6611461.java!!!	getRequiredPermission() : String
        return mRequiredPermission;
!!!6611589.java!!!	getHandle() : int
        return mHandle;
!!!6611717.java!!!	getMaxDelay() : int
        return mMaxDelay;
!!!6611845.java!!!	isWakeUpSensor() : boolean
        return (mFlags & SENSOR_FLAG_WAKE_UP_SENSOR) != 0;
!!!6611973.java!!!	isDynamicSensor() : boolean
        return (mFlags & DYNAMIC_SENSOR_MASK) != 0;
!!!6612101.java!!!	isAdditionalInfoSupported() : boolean
        return (mFlags & ADDITIONAL_INFO_MASK) != 0;
!!!6612229.java!!!	isDataInjectionSupported() : boolean
        return (((mFlags & DATA_INJECTION_MASK) >> DATA_INJECTION_SHIFT)) != 0;
!!!6612357.java!!!	setRange(in max : float, in res : float) : void
        mMaxRange = max;
        mResolution = res;
!!!6612485.java!!!	toString() : String
        return "{Sensor name=\"" + mName + "\", vendor=\"" + mVendor + "\", version=" + mVersion
                + ", type=" + mType + ", maxRange=" + mMaxRange + ", resolution=" + mResolution
                + ", power=" + mPower + ", minDelay=" + mMinDelay + "}";
!!!6612613.java!!!	setType(in value : int) : boolean
        mType = value;
        switch (mType) {
            case TYPE_ACCELEROMETER:
                mStringType = STRING_TYPE_ACCELEROMETER;
                return true;
            case TYPE_AMBIENT_TEMPERATURE:
                mStringType = STRING_TYPE_AMBIENT_TEMPERATURE;
                return true;
            case TYPE_GAME_ROTATION_VECTOR:
                mStringType = STRING_TYPE_GAME_ROTATION_VECTOR;
                return true;
            case TYPE_GEOMAGNETIC_ROTATION_VECTOR:
                mStringType = STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR;
                return true;
            case TYPE_GLANCE_GESTURE:
                mStringType = STRING_TYPE_GLANCE_GESTURE;
                return true;
            case TYPE_GRAVITY:
                mStringType = STRING_TYPE_GRAVITY;
                return true;
            case TYPE_GYROSCOPE:
                mStringType = STRING_TYPE_GYROSCOPE;
                return true;
            case TYPE_GYROSCOPE_UNCALIBRATED:
                mStringType = STRING_TYPE_GYROSCOPE_UNCALIBRATED;
                return true;
            case TYPE_HEART_RATE:
                mStringType = STRING_TYPE_HEART_RATE;
                return true;
            case TYPE_LIGHT:
                mStringType = STRING_TYPE_LIGHT;
                return true;
            case TYPE_LINEAR_ACCELERATION:
                mStringType = STRING_TYPE_LINEAR_ACCELERATION;
                return true;
            case TYPE_MAGNETIC_FIELD:
                mStringType = STRING_TYPE_MAGNETIC_FIELD;
                return true;
            case TYPE_MAGNETIC_FIELD_UNCALIBRATED:
                mStringType = STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED;
                return true;
            case TYPE_PICK_UP_GESTURE:
                mStringType = STRING_TYPE_PICK_UP_GESTURE;
                return true;
            case TYPE_PRESSURE:
                mStringType = STRING_TYPE_PRESSURE;
                return true;
            case TYPE_PROXIMITY:
                mStringType = STRING_TYPE_PROXIMITY;
                return true;
            case TYPE_RELATIVE_HUMIDITY:
                mStringType = STRING_TYPE_RELATIVE_HUMIDITY;
                return true;
            case TYPE_ROTATION_VECTOR:
                mStringType = STRING_TYPE_ROTATION_VECTOR;
                return true;
            case TYPE_SIGNIFICANT_MOTION:
                mStringType = STRING_TYPE_SIGNIFICANT_MOTION;
                return true;
            case TYPE_STEP_COUNTER:
                mStringType = STRING_TYPE_STEP_COUNTER;
                return true;
            case TYPE_STEP_DETECTOR:
                mStringType = STRING_TYPE_STEP_DETECTOR;
                return true;
            case TYPE_TILT_DETECTOR:
                mStringType = SENSOR_STRING_TYPE_TILT_DETECTOR;
                return true;
            case TYPE_WAKE_GESTURE:
                mStringType = STRING_TYPE_WAKE_GESTURE;
                return true;
            case TYPE_ORIENTATION:
                mStringType = STRING_TYPE_ORIENTATION;
                return true;
            case TYPE_TEMPERATURE:
                mStringType = STRING_TYPE_TEMPERATURE;
                return true;
            case TYPE_DEVICE_ORIENTATION:
                mStringType = STRING_TYPE_DEVICE_ORIENTATION;
                return true;
            case TYPE_DYNAMIC_SENSOR_META:
                mStringType = STRING_TYPE_DYNAMIC_SENSOR_META;
                return true;
            case TYPE_LOW_LATENCY_OFFBODY_DETECT:
                mStringType = STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT;
                return true;
            case TYPE_ACCELEROMETER_UNCALIBRATED:
                mStringType = STRING_TYPE_ACCELEROMETER_UNCALIBRATED;
                return true;
            default:
                return false;
        }
!!!6612741.java!!!	setUuid(in msb : long, in lsb : long) : void
        // TODO(b/29547335): Rename this method to setId.
        mId = (int)msb;
