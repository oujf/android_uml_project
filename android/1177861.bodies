class Parameters
!!!6585989.java!!!	Parameters()
            mMap = new LinkedHashMap<String, String>(/*initialCapacity*/64);
!!!6586117.java!!!	copyFrom(inout other : Camera::Parameters) : void
            if (other == null) {
                throw new NullPointerException("other must not be null");
            }

            mMap.putAll(other.mMap);
!!!6586245.java!!!	getOuter() : Camera
            return Camera.this;
!!!6586373.java!!!	same(inout other : Camera::Parameters) : boolean
            if (this == other) {
                return true;
            }
            return other != null && Parameters.this.mMap.equals(other.mMap);
!!!6586501.java!!!	dump() : void
            Log.e(TAG, "dump: size=" + mMap.size());
            for (String k : mMap.keySet()) {
                Log.e(TAG, "dump: " + k + "=" + mMap.get(k));
            }
!!!6586629.java!!!	flatten() : String
            StringBuilder flattened = new StringBuilder(128);
            for (String k : mMap.keySet()) {
                flattened.append(k);
                flattened.append("=");
                flattened.append(mMap.get(k));
                flattened.append(";");
            }
            // chop off the extra semicolon at the end
            flattened.deleteCharAt(flattened.length()-1);
            return flattened.toString();
!!!6586757.java!!!	unflatten(in flattened : String) : void
            mMap.clear();

            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(';');
            splitter.setString(flattened);
            for (String kv : splitter) {
                int pos = kv.indexOf('=');
                if (pos == -1) {
                    continue;
                }
                String k = kv.substring(0, pos);
                String v = kv.substring(pos + 1);
                mMap.put(k, v);
            }
!!!6586885.java!!!	remove(in key : String) : void
            mMap.remove(key);
!!!6587013.java!!!	set(in key : String, in value : String) : void
            if (key.indexOf('=') != -1 || key.indexOf(';') != -1 || key.indexOf(0) != -1) {
                Log.e(TAG, "Key \"" + key + "\" contains invalid character (= or ; or \\0)");
                return;
            }
            if (value.indexOf('=') != -1 || value.indexOf(';') != -1 || value.indexOf(0) != -1) {
                Log.e(TAG, "Value \"" + value + "\" contains invalid character (= or ; or \\0)");
                return;
            }

            put(key, value);
!!!6587141.java!!!	set(in key : String, in value : int) : void
            put(key, Integer.toString(value));
!!!6587269.java!!!	put(in key : String, in value : String) : void
            /*
             * Remove the key if it already exists.
             *
             * This way setting a new value for an already existing key will always move
             * that key to be ordered the latest in the map.
             */
            mMap.remove(key);
            mMap.put(key, value);
!!!6587397.java!!!	set(in key : String, inout areas : List<Area>) : void
            if (areas == null) {
                set(key, "(0,0,0,0,0)");
            } else {
                StringBuilder buffer = new StringBuilder();
                for (int i = 0; i < areas.size(); i++) {
                    Area area = areas.get(i);
                    Rect rect = area.rect;
                    buffer.append('(');
                    buffer.append(rect.left);
                    buffer.append(',');
                    buffer.append(rect.top);
                    buffer.append(',');
                    buffer.append(rect.right);
                    buffer.append(',');
                    buffer.append(rect.bottom);
                    buffer.append(',');
                    buffer.append(area.weight);
                    buffer.append(')');
                    if (i != areas.size() - 1) buffer.append(',');
                }
                set(key, buffer.toString());
            }
!!!6587525.java!!!	get(in key : String) : String
            return mMap.get(key);
!!!6587653.java!!!	getInt(in key : String) : int
            return Integer.parseInt(mMap.get(key));
!!!6587781.java!!!	setPreviewSize(in width : int, in height : int) : void
            String v = Integer.toString(width) + "x" + Integer.toString(height);
            set(KEY_PREVIEW_SIZE, v);
!!!6587909.java!!!	getPreviewSize() : Camera::Size
            String pair = get(KEY_PREVIEW_SIZE);
            return strToSize(pair);
!!!6588037.java!!!	getSupportedPreviewSizes() : Camera::Size
            String str = get(KEY_PREVIEW_SIZE + SUPPORTED_VALUES_SUFFIX);
            return splitSize(str);
!!!6588165.java!!!	getSupportedVideoSizes() : Camera::Size
            String str = get(KEY_VIDEO_SIZE + SUPPORTED_VALUES_SUFFIX);
            return splitSize(str);
!!!6588293.java!!!	getPreferredPreviewSizeForVideo() : Camera::Size
            String pair = get(KEY_PREFERRED_PREVIEW_SIZE_FOR_VIDEO);
            return strToSize(pair);
!!!6588421.java!!!	setJpegThumbnailSize(in width : int, in height : int) : void
            set(KEY_JPEG_THUMBNAIL_WIDTH, width);
            set(KEY_JPEG_THUMBNAIL_HEIGHT, height);
!!!6588549.java!!!	getJpegThumbnailSize() : Camera::Size
            return new Size(getInt(KEY_JPEG_THUMBNAIL_WIDTH),
                            getInt(KEY_JPEG_THUMBNAIL_HEIGHT));
!!!6588677.java!!!	getSupportedJpegThumbnailSizes() : Camera::Size
            String str = get(KEY_JPEG_THUMBNAIL_SIZE + SUPPORTED_VALUES_SUFFIX);
            return splitSize(str);
!!!6588805.java!!!	setJpegThumbnailQuality(in quality : int) : void
            set(KEY_JPEG_THUMBNAIL_QUALITY, quality);
!!!6588933.java!!!	getJpegThumbnailQuality() : int
            return getInt(KEY_JPEG_THUMBNAIL_QUALITY);
!!!6589061.java!!!	setJpegQuality(in quality : int) : void
            set(KEY_JPEG_QUALITY, quality);
!!!6589189.java!!!	getJpegQuality() : int
            return getInt(KEY_JPEG_QUALITY);
!!!6589317.java!!!	setPreviewFrameRate(in fps : int) : void
            set(KEY_PREVIEW_FRAME_RATE, fps);
!!!6589445.java!!!	getPreviewFrameRate() : int
            return getInt(KEY_PREVIEW_FRAME_RATE);
!!!6589573.java!!!	getSupportedPreviewFrameRates() : List<Integer>
            String str = get(KEY_PREVIEW_FRAME_RATE + SUPPORTED_VALUES_SUFFIX);
            return splitInt(str);
!!!6589701.java!!!	setPreviewFpsRange(in min : int, in max : int) : void
            set(KEY_PREVIEW_FPS_RANGE, "" + min + "," + max);
!!!6589829.java!!!	getPreviewFpsRange(inout range : int [[]]) : void
            if (range == null || range.length != 2) {
                throw new IllegalArgumentException(
                        "range must be an array with two elements.");
            }
            splitInt(get(KEY_PREVIEW_FPS_RANGE), range);
!!!6589957.java!!!	getSupportedPreviewFpsRange() : List<int[]>
            String str = get(KEY_PREVIEW_FPS_RANGE + SUPPORTED_VALUES_SUFFIX);
            return splitRange(str);
!!!6590085.java!!!	setPreviewFormat(in pixel_format : int) : void
            String s = cameraFormatForPixelFormat(pixel_format);
            if (s == null) {
                throw new IllegalArgumentException(
                        "Invalid pixel_format=" + pixel_format);
            }

            set(KEY_PREVIEW_FORMAT, s);
!!!6590213.java!!!	getPreviewFormat() : int
            return pixelFormatForCameraFormat(get(KEY_PREVIEW_FORMAT));
!!!6590341.java!!!	getSupportedPreviewFormats() : List<Integer>
            String str = get(KEY_PREVIEW_FORMAT + SUPPORTED_VALUES_SUFFIX);
            ArrayList<Integer> formats = new ArrayList<Integer>();
            for (String s : split(str)) {
                int f = pixelFormatForCameraFormat(s);
                if (f == ImageFormat.UNKNOWN) continue;
                formats.add(f);
            }
            return formats;
!!!6590469.java!!!	setPictureSize(in width : int, in height : int) : void
            String v = Integer.toString(width) + "x" + Integer.toString(height);
            set(KEY_PICTURE_SIZE, v);
!!!6590597.java!!!	getPictureSize() : Camera::Size
            String pair = get(KEY_PICTURE_SIZE);
            return strToSize(pair);
!!!6590725.java!!!	getSupportedPictureSizes() : Camera::Size
            String str = get(KEY_PICTURE_SIZE + SUPPORTED_VALUES_SUFFIX);
            return splitSize(str);
!!!6590853.java!!!	setPictureFormat(in pixel_format : int) : void
            String s = cameraFormatForPixelFormat(pixel_format);
            if (s == null) {
                throw new IllegalArgumentException(
                        "Invalid pixel_format=" + pixel_format);
            }

            set(KEY_PICTURE_FORMAT, s);
!!!6590981.java!!!	getPictureFormat() : int
            return pixelFormatForCameraFormat(get(KEY_PICTURE_FORMAT));
!!!6591109.java!!!	getSupportedPictureFormats() : List<Integer>
            String str = get(KEY_PICTURE_FORMAT + SUPPORTED_VALUES_SUFFIX);
            ArrayList<Integer> formats = new ArrayList<Integer>();
            for (String s : split(str)) {
                int f = pixelFormatForCameraFormat(s);
                if (f == ImageFormat.UNKNOWN) continue;
                formats.add(f);
            }
            return formats;
!!!6591237.java!!!	cameraFormatForPixelFormat(in pixel_format : int) : String
            switch(pixel_format) {
            case ImageFormat.NV16:      return PIXEL_FORMAT_YUV422SP;
            case ImageFormat.NV21:      return PIXEL_FORMAT_YUV420SP;
            case ImageFormat.YUY2:      return PIXEL_FORMAT_YUV422I;
            case ImageFormat.YV12:      return PIXEL_FORMAT_YUV420P;
            case ImageFormat.RGB_565:   return PIXEL_FORMAT_RGB565;
            case ImageFormat.JPEG:      return PIXEL_FORMAT_JPEG;
            default:                    return null;
            }
!!!6591365.java!!!	pixelFormatForCameraFormat(in format : String) : int
            if (format == null)
                return ImageFormat.UNKNOWN;

            if (format.equals(PIXEL_FORMAT_YUV422SP))
                return ImageFormat.NV16;

            if (format.equals(PIXEL_FORMAT_YUV420SP))
                return ImageFormat.NV21;

            if (format.equals(PIXEL_FORMAT_YUV422I))
                return ImageFormat.YUY2;

            if (format.equals(PIXEL_FORMAT_YUV420P))
                return ImageFormat.YV12;

            if (format.equals(PIXEL_FORMAT_RGB565))
                return ImageFormat.RGB_565;

            if (format.equals(PIXEL_FORMAT_JPEG))
                return ImageFormat.JPEG;

            return ImageFormat.UNKNOWN;
!!!6591493.java!!!	setRotation(in rotation : int) : void
            if (rotation == 0 || rotation == 90 || rotation == 180
                    || rotation == 270) {
                set(KEY_ROTATION, Integer.toString(rotation));
            } else {
                throw new IllegalArgumentException(
                        "Invalid rotation=" + rotation);
            }
!!!6591621.java!!!	setGpsLatitude(in latitude : double) : void
            set(KEY_GPS_LATITUDE, Double.toString(latitude));
!!!6591749.java!!!	setGpsLongitude(in longitude : double) : void
            set(KEY_GPS_LONGITUDE, Double.toString(longitude));
!!!6591877.java!!!	setGpsAltitude(in altitude : double) : void
            set(KEY_GPS_ALTITUDE, Double.toString(altitude));
!!!6592005.java!!!	setGpsTimestamp(in timestamp : long) : void
            set(KEY_GPS_TIMESTAMP, Long.toString(timestamp));
!!!6592133.java!!!	setGpsProcessingMethod(in processing_method : String) : void
            set(KEY_GPS_PROCESSING_METHOD, processing_method);
!!!6592261.java!!!	removeGpsData() : void
            remove(KEY_GPS_LATITUDE);
            remove(KEY_GPS_LONGITUDE);
            remove(KEY_GPS_ALTITUDE);
            remove(KEY_GPS_TIMESTAMP);
            remove(KEY_GPS_PROCESSING_METHOD);
!!!6592389.java!!!	getWhiteBalance() : String
            return get(KEY_WHITE_BALANCE);
!!!6592517.java!!!	setWhiteBalance(in value : String) : void
            String oldValue = get(KEY_WHITE_BALANCE);
            if (same(value, oldValue)) return;
            set(KEY_WHITE_BALANCE, value);
            set(KEY_AUTO_WHITEBALANCE_LOCK, FALSE);
!!!6592645.java!!!	getSupportedWhiteBalance() : List<String>
            String str = get(KEY_WHITE_BALANCE + SUPPORTED_VALUES_SUFFIX);
            return split(str);
!!!6592773.java!!!	getColorEffect() : String
            return get(KEY_EFFECT);
!!!6592901.java!!!	setColorEffect(in value : String) : void
            set(KEY_EFFECT, value);
!!!6593029.java!!!	getSupportedColorEffects() : List<String>
            String str = get(KEY_EFFECT + SUPPORTED_VALUES_SUFFIX);
            return split(str);
!!!6593157.java!!!	getAntibanding() : String
            return get(KEY_ANTIBANDING);
!!!6593285.java!!!	setAntibanding(in antibanding : String) : void
            set(KEY_ANTIBANDING, antibanding);
!!!6593413.java!!!	getSupportedAntibanding() : List<String>
            String str = get(KEY_ANTIBANDING + SUPPORTED_VALUES_SUFFIX);
            return split(str);
!!!6593541.java!!!	getSceneMode() : String
            return get(KEY_SCENE_MODE);
!!!6593669.java!!!	setSceneMode(in value : String) : void
            set(KEY_SCENE_MODE, value);
!!!6593797.java!!!	getSupportedSceneModes() : List<String>
            String str = get(KEY_SCENE_MODE + SUPPORTED_VALUES_SUFFIX);
            return split(str);
!!!6593925.java!!!	getFlashMode() : String
            return get(KEY_FLASH_MODE);
!!!6594053.java!!!	setFlashMode(in value : String) : void
            set(KEY_FLASH_MODE, value);
!!!6594181.java!!!	getSupportedFlashModes() : List<String>
            String str = get(KEY_FLASH_MODE + SUPPORTED_VALUES_SUFFIX);
            return split(str);
!!!6594309.java!!!	getFocusMode() : String
            return get(KEY_FOCUS_MODE);
!!!6594437.java!!!	setFocusMode(in value : String) : void
            set(KEY_FOCUS_MODE, value);
!!!6594565.java!!!	getSupportedFocusModes() : List<String>
            String str = get(KEY_FOCUS_MODE + SUPPORTED_VALUES_SUFFIX);
            return split(str);
!!!6594693.java!!!	getFocalLength() : float
            return Float.parseFloat(get(KEY_FOCAL_LENGTH));
!!!6594821.java!!!	getHorizontalViewAngle() : float
            return Float.parseFloat(get(KEY_HORIZONTAL_VIEW_ANGLE));
!!!6594949.java!!!	getVerticalViewAngle() : float
            return Float.parseFloat(get(KEY_VERTICAL_VIEW_ANGLE));
!!!6595077.java!!!	getExposureCompensation() : int
            return getInt(KEY_EXPOSURE_COMPENSATION, 0);
!!!6595205.java!!!	setExposureCompensation(in value : int) : void
            set(KEY_EXPOSURE_COMPENSATION, value);
!!!6595333.java!!!	getMaxExposureCompensation() : int
            return getInt(KEY_MAX_EXPOSURE_COMPENSATION, 0);
!!!6595461.java!!!	getMinExposureCompensation() : int
            return getInt(KEY_MIN_EXPOSURE_COMPENSATION, 0);
!!!6595589.java!!!	getExposureCompensationStep() : float
            return getFloat(KEY_EXPOSURE_COMPENSATION_STEP, 0);
!!!6595717.java!!!	setAutoExposureLock(inout toggle : boolean) : void
            set(KEY_AUTO_EXPOSURE_LOCK, toggle ? TRUE : FALSE);
!!!6595845.java!!!	getAutoExposureLock() : boolean
            String str = get(KEY_AUTO_EXPOSURE_LOCK);
            return TRUE.equals(str);
!!!6595973.java!!!	isAutoExposureLockSupported() : boolean
            String str = get(KEY_AUTO_EXPOSURE_LOCK_SUPPORTED);
            return TRUE.equals(str);
!!!6596101.java!!!	setAutoWhiteBalanceLock(inout toggle : boolean) : void
            set(KEY_AUTO_WHITEBALANCE_LOCK, toggle ? TRUE : FALSE);
!!!6596229.java!!!	getAutoWhiteBalanceLock() : boolean
            String str = get(KEY_AUTO_WHITEBALANCE_LOCK);
            return TRUE.equals(str);
!!!6596357.java!!!	isAutoWhiteBalanceLockSupported() : boolean
            String str = get(KEY_AUTO_WHITEBALANCE_LOCK_SUPPORTED);
            return TRUE.equals(str);
!!!6596485.java!!!	getZoom() : int
            return getInt(KEY_ZOOM, 0);
!!!6596613.java!!!	setZoom(in value : int) : void
            set(KEY_ZOOM, value);
!!!6596741.java!!!	isZoomSupported() : boolean
            String str = get(KEY_ZOOM_SUPPORTED);
            return TRUE.equals(str);
!!!6596869.java!!!	getMaxZoom() : int
            return getInt(KEY_MAX_ZOOM, 0);
!!!6596997.java!!!	getZoomRatios() : List<Integer>
            return splitInt(get(KEY_ZOOM_RATIOS));
!!!6597125.java!!!	isSmoothZoomSupported() : boolean
            String str = get(KEY_SMOOTH_ZOOM_SUPPORTED);
            return TRUE.equals(str);
!!!6597253.java!!!	getFocusDistances(inout output : float [[]]) : void
            if (output == null || output.length != 3) {
                throw new IllegalArgumentException(
                        "output must be a float array with three elements.");
            }
            splitFloat(get(KEY_FOCUS_DISTANCES), output);
!!!6597381.java!!!	getMaxNumFocusAreas() : int
            return getInt(KEY_MAX_NUM_FOCUS_AREAS, 0);
!!!6597509.java!!!	getFocusAreas() : Camera::Area
            return splitArea(get(KEY_FOCUS_AREAS));
!!!6597637.java!!!	setFocusAreas(inout focusAreas : List<Area>) : void
            set(KEY_FOCUS_AREAS, focusAreas);
!!!6597765.java!!!	getMaxNumMeteringAreas() : int
            return getInt(KEY_MAX_NUM_METERING_AREAS, 0);
!!!6597893.java!!!	getMeteringAreas() : Camera::Area
            return splitArea(get(KEY_METERING_AREAS));
!!!6598021.java!!!	setMeteringAreas(inout meteringAreas : List<Area>) : void
            set(KEY_METERING_AREAS, meteringAreas);
!!!6598149.java!!!	getMaxNumDetectedFaces() : int
            return getInt(KEY_MAX_NUM_DETECTED_FACES_HW, 0);
!!!6598277.java!!!	setRecordingHint(inout hint : boolean) : void
            set(KEY_RECORDING_HINT, hint ? TRUE : FALSE);
!!!6598405.java!!!	isVideoSnapshotSupported() : boolean
            String str = get(KEY_VIDEO_SNAPSHOT_SUPPORTED);
            return TRUE.equals(str);
!!!6598533.java!!!	setVideoStabilization(inout toggle : boolean) : void
            set(KEY_VIDEO_STABILIZATION, toggle ? TRUE : FALSE);
!!!6598661.java!!!	getVideoStabilization() : boolean
            String str = get(KEY_VIDEO_STABILIZATION);
            return TRUE.equals(str);
!!!6598789.java!!!	isVideoStabilizationSupported() : boolean
            String str = get(KEY_VIDEO_STABILIZATION_SUPPORTED);
            return TRUE.equals(str);
!!!6598917.java!!!	split(in str : String) : ArrayList<String>
            if (str == null) return null;

            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
            splitter.setString(str);
            ArrayList<String> substrings = new ArrayList<String>();
            for (String s : splitter) {
                substrings.add(s);
            }
            return substrings;
!!!6599045.java!!!	splitInt(in str : String) : ArrayList<Integer>
            if (str == null) return null;

            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
            splitter.setString(str);
            ArrayList<Integer> substrings = new ArrayList<Integer>();
            for (String s : splitter) {
                substrings.add(Integer.parseInt(s));
            }
            if (substrings.size() == 0) return null;
            return substrings;
!!!6599173.java!!!	splitInt(in str : String, inout output : int [[]]) : void
            if (str == null) return;

            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
            splitter.setString(str);
            int index = 0;
            for (String s : splitter) {
                output[index++] = Integer.parseInt(s);
            }
!!!6599301.java!!!	splitFloat(in str : String, inout output : float [[]]) : void
            if (str == null) return;

            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
            splitter.setString(str);
            int index = 0;
            for (String s : splitter) {
                output[index++] = Float.parseFloat(s);
            }
!!!6599429.java!!!	getFloat(in key : String, in defaultValue : float) : float
            try {
                return Float.parseFloat(mMap.get(key));
            } catch (NumberFormatException ex) {
                return defaultValue;
            }
!!!6599557.java!!!	getInt(in key : String, in defaultValue : int) : int
            try {
                return Integer.parseInt(mMap.get(key));
            } catch (NumberFormatException ex) {
                return defaultValue;
            }
!!!6599685.java!!!	splitSize(in str : String) : Camera::Size
            if (str == null) return null;

            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
            splitter.setString(str);
            ArrayList<Size> sizeList = new ArrayList<Size>();
            for (String s : splitter) {
                Size size = strToSize(s);
                if (size != null) sizeList.add(size);
            }
            if (sizeList.size() == 0) return null;
            return sizeList;
!!!6599813.java!!!	strToSize(in str : String) : Camera::Size
            if (str == null) return null;

            int pos = str.indexOf('x');
            if (pos != -1) {
                String width = str.substring(0, pos);
                String height = str.substring(pos + 1);
                return new Size(Integer.parseInt(width),
                                Integer.parseInt(height));
            }
            Log.e(TAG, "Invalid size parameter string=" + str);
            return null;
!!!6599941.java!!!	splitRange(in str : String) : ArrayList<int[]>
            if (str == null || str.charAt(0) != '('
                    || str.charAt(str.length() - 1) != ')') {
                Log.e(TAG, "Invalid range list string=" + str);
                return null;
            }

            ArrayList<int[]> rangeList = new ArrayList<int[]>();
            int endIndex, fromIndex = 1;
            do {
                int[] range = new int[2];
                endIndex = str.indexOf("),(", fromIndex);
                if (endIndex == -1) endIndex = str.length() - 1;
                splitInt(str.substring(fromIndex, endIndex), range);
                rangeList.add(range);
                fromIndex = endIndex + 3;
            } while (endIndex != str.length() - 1);

            if (rangeList.size() == 0) return null;
            return rangeList;
!!!6600069.java!!!	splitArea(in str : String) : Camera::Area
            if (str == null || str.charAt(0) != '('
                    || str.charAt(str.length() - 1) != ')') {
                Log.e(TAG, "Invalid area string=" + str);
                return null;
            }

            ArrayList<Area> result = new ArrayList<Area>();
            int endIndex, fromIndex = 1;
            int[] array = new int[5];
            do {
                endIndex = str.indexOf("),(", fromIndex);
                if (endIndex == -1) endIndex = str.length() - 1;
                splitInt(str.substring(fromIndex, endIndex), array);
                Rect rect = new Rect(array[0], array[1], array[2], array[3]);
                result.add(new Area(rect, array[4]));
                fromIndex = endIndex + 3;
            } while (endIndex != str.length() - 1);

            if (result.size() == 0) return null;

            if (result.size() == 1) {
                Area area = result.get(0);
                Rect rect = area.rect;
                if (rect.left == 0 && rect.top == 0 && rect.right == 0
                        && rect.bottom == 0 && area.weight == 0) {
                    return null;
                }
            }

            return result;
!!!6600197.java!!!	same(in s1 : String, in s2 : String) : boolean
            if (s1 == null && s2 == null) return true;
            if (s1 != null && s1.equals(s2)) return true;
            return false;
