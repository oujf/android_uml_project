class ActivityManager
!!!4988293.java!!!	isProcStateBackground(in procState : int) : boolean
        return procState >= PROCESS_STATE_TRANSIENT_BACKGROUND;
!!!4988421.java!!!	ActivityManager(inout context : Context, inout handler : Handler)
        mContext = context;
!!!4988549.java!!!	isStartResultSuccessful(in result : int) : boolean
        return FIRST_START_SUCCESS_CODE <= result && result <= LAST_START_SUCCESS_CODE;
!!!4988677.java!!!	isStartResultFatalError(in result : int) : boolean
        return FIRST_START_FATAL_ERROR_CODE <= result && result <= LAST_START_FATAL_ERROR_CODE;
!!!4992645.java!!!	getFrontActivityScreenCompatMode() : int
        try {
            return getService().getFrontActivityScreenCompatMode();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!4992773.java!!!	setFrontActivityScreenCompatMode(in mode : int) : void
        try {
            getService().setFrontActivityScreenCompatMode(mode);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!4992901.java!!!	getPackageScreenCompatMode(in packageName : String) : int
        try {
            return getService().getPackageScreenCompatMode(packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!4993029.java!!!	setPackageScreenCompatMode(in packageName : String, in mode : int) : void
        try {
            getService().setPackageScreenCompatMode(packageName, mode);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!4993157.java!!!	getPackageAskScreenCompat(in packageName : String) : boolean
        try {
            return getService().getPackageAskScreenCompat(packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!4993285.java!!!	setPackageAskScreenCompat(in packageName : String, inout ask : boolean) : void
        try {
            getService().setPackageAskScreenCompat(packageName, ask);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!4993413.java!!!	getMemoryClass() : int
        return staticGetMemoryClass();
!!!4993541.java!!!	staticGetMemoryClass() : int
        // Really brain dead right now -- just take this from the configured
        // vm heap size, and assume it is in megabytes and thus ends with "m".
        String vmHeapSize = SystemProperties.get("dalvik.vm.heapgrowthlimit", "");
        if (vmHeapSize != null && !"".equals(vmHeapSize)) {
            return Integer.parseInt(vmHeapSize.substring(0, vmHeapSize.length()-1));
        }
        return staticGetLargeMemoryClass();
!!!4993669.java!!!	getLargeMemoryClass() : int
        return staticGetLargeMemoryClass();
!!!4993797.java!!!	staticGetLargeMemoryClass() : int
        // Really brain dead right now -- just take this from the configured
        // vm heap size, and assume it is in megabytes and thus ends with "m".
        String vmHeapSize = SystemProperties.get("dalvik.vm.heapsize", "16m");
        return Integer.parseInt(vmHeapSize.substring(0, vmHeapSize.length() - 1));
!!!4993925.java!!!	isLowRamDevice() : boolean
        return isLowRamDeviceStatic();
!!!4994053.java!!!	isLowRamDeviceStatic() : boolean
        return RoSystemProperties.CONFIG_LOW_RAM;
!!!4994181.java!!!	isHighEndGfx() : boolean
        return !isLowRamDeviceStatic() &&
                !Resources.getSystem().getBoolean(com.android.internal.R.bool.config_avoidGfxAccel);
!!!4994309.java!!!	getMaxRecentTasksStatic() : int
        if (gMaxRecentTasks < 0) {
            return gMaxRecentTasks = isLowRamDeviceStatic() ? 36 : 48;
        }
        return gMaxRecentTasks;
!!!4994437.java!!!	getDefaultAppRecentsLimitStatic() : int
        return getMaxRecentTasksStatic() / 6;
!!!4994565.java!!!	getMaxAppRecentsLimitStatic() : int
        return getMaxRecentTasksStatic() / 2;
!!!4994693.java!!!	supportsMultiWindow(inout context : Context) : boolean
        // On watches, multi-window is used to present essential system UI, and thus it must be
        // supported regardless of device memory characteristics.
        boolean isWatch = context.getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_WATCH);
        return (!isLowRamDeviceStatic() || isWatch)
                && Resources.getSystem().getBoolean(
                    com.android.internal.R.bool.config_supportsMultiWindow);
!!!4994821.java!!!	supportsSplitScreenMultiWindow(inout context : Context) : boolean
        return supportsMultiWindow(context)
                && Resources.getSystem().getBoolean(
                    com.android.internal.R.bool.config_supportsSplitScreenMultiWindow);
!!!4994949.java!!!	getMaxNumPictureInPictureActions() : int
        return 3;
!!!4999685.java!!!	getRecentTasks(in maxNum : int, in flags : int) : ActivityManager::RecentTaskInfo
        try {
            return getService().getRecentTasks(maxNum,
                    flags, UserHandle.myUserId()).getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!4999813.java!!!	getRecentTasksForUser(in maxNum : int, in flags : int, in userId : int) : ActivityManager::RecentTaskInfo
        try {
            return getService().getRecentTasks(maxNum,
                    flags, userId).getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5000581.java!!!	getAppTasks() : ActivityManager::AppTask
        ArrayList<AppTask> tasks = new ArrayList<AppTask>();
        List<IBinder> appTasks;
        try {
            appTasks = getService().getAppTasks(mContext.getPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        int numAppTasks = appTasks.size();
        for (int i = 0; i < numAppTasks; i++) {
            tasks.add(new AppTask(IAppTask.Stub.asInterface(appTasks.get(i))));
        }
        return tasks;
!!!5000709.java!!!	getAppTaskThumbnailSize() : Size
        synchronized (this) {
            ensureAppTaskThumbnailSizeLocked();
            return new Size(mAppTaskThumbnailSize.x, mAppTaskThumbnailSize.y);
        }
!!!5000837.java!!!	ensureAppTaskThumbnailSizeLocked() : void
        if (mAppTaskThumbnailSize == null) {
            try {
                mAppTaskThumbnailSize = getService().getAppTaskThumbnailSize();
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!5000965.java!!!	addAppTask(inout activity : Activity, inout intent : Intent, inout description : ActivityManager::TaskDescription, inout thumbnail : Bitmap) : int
        Point size;
        synchronized (this) {
            ensureAppTaskThumbnailSizeLocked();
            size = mAppTaskThumbnailSize;
        }
        final int tw = thumbnail.getWidth();
        final int th = thumbnail.getHeight();
        if (tw != size.x || th != size.y) {
            Bitmap bm = Bitmap.createBitmap(size.x, size.y, thumbnail.getConfig());

            // Use ScaleType.CENTER_CROP, except we leave the top edge at the top.
            float scale;
            float dx = 0, dy = 0;
            if (tw * size.x > size.y * th) {
                scale = (float) size.x / (float) th;
                dx = (size.y - tw * scale) * 0.5f;
            } else {
                scale = (float) size.y / (float) tw;
                dy = (size.x - th * scale) * 0.5f;
            }
            Matrix matrix = new Matrix();
            matrix.setScale(scale, scale);
            matrix.postTranslate((int) (dx + 0.5f), 0);

            Canvas canvas = new Canvas(bm);
            canvas.drawBitmap(thumbnail, matrix, null);
            canvas.setBitmap(null);

            thumbnail = bm;
        }
        if (description == null) {
            description = new TaskDescription();
        }
        try {
            return getService().addAppTask(activity.getActivityToken(),
                    intent, description, thumbnail);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5001093.java!!!	getRunningTasks(in maxNum : int) : ActivityManager::RunningTaskInfo
        try {
            return getService().getTasks(maxNum, 0);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5001221.java!!!	removeTask(in taskId : int) : boolean
        try {
            return getService().removeTask(taskId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5004421.java!!!	getTaskThumbnail(in id : int) : ActivityManager::TaskThumbnail
        try {
            return getService().getTaskThumbnail(id);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5004549.java!!!	moveTaskToFront(in taskId : int, in flags : int) : void
        moveTaskToFront(taskId, flags, null);
!!!5004677.java!!!	moveTaskToFront(in taskId : int, in flags : int, inout options : Bundle) : void
        try {
            getService().moveTaskToFront(taskId, flags, options);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5005445.java!!!	getRunningServices(in maxNum : int) : ActivityManager::RunningServiceInfo
        try {
            return getService()
                    .getServices(maxNum, 0);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5005573.java!!!	getRunningServiceControlPanel(inout service : ComponentName) : PendingIntent
        try {
            return getService()
                    .getRunningServiceControlPanel(service);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5006341.java!!!	getMemoryInfo(inout outInfo : ActivityManager::MemoryInfo) : void
        try {
            getService().getMemoryInfo(outInfo);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5007365.java!!!	clearApplicationUserData(in packageName : String, inout observer : IPackageDataObserver) : boolean
        try {
            return getService().clearApplicationUserData(packageName,
                    observer, UserHandle.myUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5007493.java!!!	clearApplicationUserData() : boolean
        return clearApplicationUserData(mContext.getPackageName(), null);
!!!5007621.java!!!	getGrantedUriPermissions(in packageName : String) : ParceledListSlice
        try {
            return getService().getGrantedUriPermissions(packageName,
                    UserHandle.myUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5007749.java!!!	clearGrantedUriPermissions(in packageName : String) : void
        try {
            getService().clearGrantedUriPermissions(packageName,
                    UserHandle.myUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5008517.java!!!	getProcessesInErrorState() : ActivityManager::ProcessErrorStateInfo
        try {
            return getService().getProcessesInErrorState();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5009925.java!!!	getRunningExternalApplications() : ApplicationInfo
        try {
            return getService().getRunningExternalApplications();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5010053.java!!!	setProcessMemoryTrimLevel(in process : String, in userId : int, in level : int) : boolean
        try {
            return getService().setProcessMemoryTrimLevel(process, userId,
                    level);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5010181.java!!!	getRunningAppProcesses() : ActivityManager::RunningAppProcessInfo
        try {
            return getService().getRunningAppProcesses();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5010309.java!!!	getPackageImportance(in packageName : String) : int
        try {
            int procState = getService().getPackageProcessState(packageName,
                    mContext.getOpPackageName());
            return RunningAppProcessInfo.procStateToImportanceForClient(procState, mContext);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5010437.java!!!	getUidImportance(in uid : int) : int
        try {
            int procState = getService().getUidProcessState(uid,
                    mContext.getOpPackageName());
            return RunningAppProcessInfo.procStateToImportanceForClient(procState, mContext);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5010693.java!!!	addOnUidImportanceListener(inout listener : ActivityManager::OnUidImportanceListener, in importanceCutpoint : int) : void
        synchronized (this) {
            if (mImportanceListeners.containsKey(listener)) {
                throw new IllegalArgumentException("Listener already registered: " + listener);
            }
            // TODO: implement the cut point in the system process to avoid IPCs.
            UidObserver observer = new UidObserver(listener, mContext);
            try {
                getService().registerUidObserver(observer,
                        UID_OBSERVER_PROCSTATE | UID_OBSERVER_GONE,
                        RunningAppProcessInfo.importanceToProcState(importanceCutpoint),
                        mContext.getOpPackageName());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
            mImportanceListeners.put(listener, observer);
        }
!!!5010821.java!!!	removeOnUidImportanceListener(inout listener : ActivityManager::OnUidImportanceListener) : void
        synchronized (this) {
            UidObserver observer = mImportanceListeners.remove(listener);
            if (observer == null) {
                throw new IllegalArgumentException("Listener not registered: " + listener);
            }
            try {
                getService().unregisterUidObserver(observer);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!5010949.java!!!	getMyMemoryState(inout outState : ActivityManager::RunningAppProcessInfo) : void
        try {
            getService().getMyMemoryState(outState);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5011077.java!!!	getProcessMemoryInfo(inout pids : int [[]]) : Debug::MemoryInfo
        try {
            return getService().getProcessMemoryInfo(pids);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5011205.java!!!	restartPackage(in packageName : String) : void
        killBackgroundProcesses(packageName);
!!!5011333.java!!!	killBackgroundProcesses(in packageName : String) : void
        try {
            getService().killBackgroundProcesses(packageName,
                    UserHandle.myUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5011461.java!!!	killUid(in uid : int, in reason : String) : void
        try {
            getService().killUid(UserHandle.getAppId(uid),
                    UserHandle.getUserId(uid), reason);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5011589.java!!!	forceStopPackageAsUser(in packageName : String, in userId : int) : void
        try {
            getService().forceStopPackage(packageName, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5011717.java!!!	forceStopPackage(in packageName : String) : void
        forceStopPackageAsUser(packageName, UserHandle.myUserId());
!!!5011845.java!!!	getDeviceConfigurationInfo() : ConfigurationInfo
        try {
            return getService().getDeviceConfigurationInfo();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5011973.java!!!	getLauncherLargeIconDensity() : int
        final Resources res = mContext.getResources();
        final int density = res.getDisplayMetrics().densityDpi;
        final int sw = res.getConfiguration().smallestScreenWidthDp;

        if (sw < 600) {
            // Smaller than approx 7" tablets, use the regular icon size.
            return density;
        }

        switch (density) {
            case DisplayMetrics.DENSITY_LOW:
                return DisplayMetrics.DENSITY_MEDIUM;
            case DisplayMetrics.DENSITY_MEDIUM:
                return DisplayMetrics.DENSITY_HIGH;
            case DisplayMetrics.DENSITY_TV:
                return DisplayMetrics.DENSITY_XHIGH;
            case DisplayMetrics.DENSITY_HIGH:
                return DisplayMetrics.DENSITY_XHIGH;
            case DisplayMetrics.DENSITY_XHIGH:
                return DisplayMetrics.DENSITY_XXHIGH;
            case DisplayMetrics.DENSITY_XXHIGH:
                return DisplayMetrics.DENSITY_XHIGH * 2;
            default:
                // The density is some abnormal value.  Return some other
                // abnormal value that is a reasonable scaling of it.
                return (int)((density*1.5f)+.5f);
        }
!!!5012101.java!!!	getLauncherLargeIconSize() : int
        return getLauncherLargeIconSizeInner(mContext);
!!!5012229.java!!!	getLauncherLargeIconSizeInner(inout context : Context) : int
        final Resources res = context.getResources();
        final int size = res.getDimensionPixelSize(android.R.dimen.app_icon_size);
        final int sw = res.getConfiguration().smallestScreenWidthDp;

        if (sw < 600) {
            // Smaller than approx 7" tablets, use the regular icon size.
            return size;
        }

        final int density = res.getDisplayMetrics().densityDpi;

        switch (density) {
            case DisplayMetrics.DENSITY_LOW:
                return (size * DisplayMetrics.DENSITY_MEDIUM) / DisplayMetrics.DENSITY_LOW;
            case DisplayMetrics.DENSITY_MEDIUM:
                return (size * DisplayMetrics.DENSITY_HIGH) / DisplayMetrics.DENSITY_MEDIUM;
            case DisplayMetrics.DENSITY_TV:
                return (size * DisplayMetrics.DENSITY_XHIGH) / DisplayMetrics.DENSITY_HIGH;
            case DisplayMetrics.DENSITY_HIGH:
                return (size * DisplayMetrics.DENSITY_XHIGH) / DisplayMetrics.DENSITY_HIGH;
            case DisplayMetrics.DENSITY_XHIGH:
                return (size * DisplayMetrics.DENSITY_XXHIGH) / DisplayMetrics.DENSITY_XHIGH;
            case DisplayMetrics.DENSITY_XXHIGH:
                return (size * DisplayMetrics.DENSITY_XHIGH*2) / DisplayMetrics.DENSITY_XXHIGH;
            default:
                // The density is some abnormal value.  Return some other
                // abnormal value that is a reasonable scaling of it.
                return (int)((size*1.5f) + .5f);
        }
!!!5012357.java!!!	isUserAMonkey() : boolean
        try {
            return getService().isUserAMonkey();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5012485.java!!!	isRunningInTestHarness() : boolean
        return SystemProperties.getBoolean("ro.test_harness", false);
!!!5012613.java!!!	checkComponentPermission(in permission : String, in uid : int, in owningUid : int, inout exported : boolean) : int
        // Root, system server get to do everything.
        final int appId = UserHandle.getAppId(uid);
        if (appId == Process.ROOT_UID || appId == Process.SYSTEM_UID) {
            return PackageManager.PERMISSION_GRANTED;
        }
        // Isolated processes don't get any permissions.
        if (UserHandle.isIsolated(uid)) {
            return PackageManager.PERMISSION_DENIED;
        }
        // If there is a uid that owns whatever is being accessed, it has
        // blanket access to it regardless of the permissions it requires.
        if (owningUid >= 0 && UserHandle.isSameApp(uid, owningUid)) {
            return PackageManager.PERMISSION_GRANTED;
        }
        // If the target is not exported, then nobody else can get to it.
        if (!exported) {
            /*
            RuntimeException here = new RuntimeException("here");
            here.fillInStackTrace();
            Slog.w(TAG, "Permission denied: checkComponentPermission() owningUid=" + owningUid,
                    here);
            */
            return PackageManager.PERMISSION_DENIED;
        }
        if (permission == null) {
            return PackageManager.PERMISSION_GRANTED;
        }
        try {
            return AppGlobals.getPackageManager()
                    .checkUidPermission(permission, uid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5012741.java!!!	checkUidPermission(in permission : String, in uid : int) : int
        try {
            return AppGlobals.getPackageManager()
                    .checkUidPermission(permission, uid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5012869.java!!!	handleIncomingUser(in callingPid : int, in callingUid : int, in userId : int, inout allowAll : boolean, inout requireFull : boolean, in name : String, in callerPackage : String) : int
        if (UserHandle.getUserId(callingUid) == userId) {
            return userId;
        }
        try {
            return getService().handleIncomingUser(callingPid,
                    callingUid, userId, allowAll, requireFull, name, callerPackage);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5012997.java!!!	getCurrentUser() : int
        UserInfo ui;
        try {
            ui = getService().getCurrentUser();
            return ui != null ? ui.id : 0;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5013125.java!!!	switchUser(in userid : int) : boolean
        try {
            return getService().switchUser(userid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5013253.java!!!	logoutCurrentUser() : void
        int currentUser = ActivityManager.getCurrentUser();
        if (currentUser != UserHandle.USER_SYSTEM) {
            try {
                getService().switchUser(UserHandle.USER_SYSTEM);
                getService().stopUser(currentUser, /* force= */ false, null);
            } catch (RemoteException e) {
                e.rethrowFromSystemServer();
            }
        }
!!!5013381.java!!!	isUserRunning(in userId : int) : boolean
        try {
            return getService().isUserRunning(userId, 0);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5013509.java!!!	isVrModePackageEnabled(inout component : ComponentName) : boolean
        try {
            return getService().isVrModePackageEnabled(component);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5013637.java!!!	dumpPackageState(inout fd : FileDescriptor, in packageName : String) : void
        dumpPackageStateStatic(fd, packageName);
!!!5013765.java!!!	dumpPackageStateStatic(inout fd : FileDescriptor, in packageName : String) : void
        FileOutputStream fout = new FileOutputStream(fd);
        PrintWriter pw = new FastPrintWriter(fout);
        dumpService(pw, fd, "package", new String[] { packageName });
        pw.println();
        dumpService(pw, fd, Context.ACTIVITY_SERVICE, new String[] {
                "-a", "package", packageName });
        pw.println();
        dumpService(pw, fd, "meminfo", new String[] { "--local", "--package", packageName });
        pw.println();
        dumpService(pw, fd, ProcessStats.SERVICE_NAME, new String[] { packageName });
        pw.println();
        dumpService(pw, fd, "usagestats", new String[] { "--packages", packageName });
        pw.println();
        dumpService(pw, fd, BatteryStats.SERVICE_NAME, new String[] { packageName });
        pw.flush();
!!!5013893.java!!!	isSystemReady() : boolean
        if (!sSystemReady) {
            if (ActivityThread.isSystem()) {
                sSystemReady =
                        LocalServices.getService(ActivityManagerInternal.class).isSystemReady();
            } else {
                // Since this is being called from outside system server, system should be
                // ready by now.
                sSystemReady = true;
            }
        }
        return sSystemReady;
!!!5014021.java!!!	broadcastStickyIntent(inout intent : Intent, in userId : int) : void
        broadcastStickyIntent(intent, AppOpsManager.OP_NONE, userId);
!!!5014149.java!!!	broadcastStickyIntent(inout intent : Intent, in appOp : int, in userId : int) : void
        try {
            getService().broadcastIntent(
                    null, intent, null, null, Activity.RESULT_OK, null, null,
                    null /*permission*/, appOp, null, false, true, userId);
        } catch (RemoteException ex) {
        }
!!!5014277.java!!!	noteWakeupAlarm(inout ps : PendingIntent, in sourceUid : int, in sourcePkg : String, in tag : String) : void
        try {
            getService().noteWakeupAlarm((ps != null) ? ps.getTarget() : null,
                    sourceUid, sourcePkg, tag);
        } catch (RemoteException ex) {
        }
!!!5014405.java!!!	noteAlarmStart(inout ps : PendingIntent, in sourceUid : int, in tag : String) : void
        try {
            getService().noteAlarmStart((ps != null) ? ps.getTarget() : null, sourceUid, tag);
        } catch (RemoteException ex) {
        }
!!!5014533.java!!!	noteAlarmFinish(inout ps : PendingIntent, in sourceUid : int, in tag : String) : void
        try {
            getService().noteAlarmFinish((ps != null) ? ps.getTarget() : null, sourceUid, tag);
        } catch (RemoteException ex) {
        }
!!!5014661.java!!!	getService() : IActivityManager
        return IActivityManagerSingleton.get();
!!!5014789.java!!!	dumpService(inout pw : PrintWriter, inout fd : FileDescriptor, in name : String, inout args : String [[]]) : void
        pw.print("DUMP OF SERVICE "); pw.print(name); pw.println(":");
        IBinder service = ServiceManager.checkService(name);
        if (service == null) {
            pw.println("  (Service not found)");
            return;
        }
        TransferPipe tp = null;
        try {
            pw.flush();
            tp = new TransferPipe();
            tp.setBufferPrefix("  ");
            service.dumpAsync(tp.getWriteFd().getFileDescriptor(), args);
            tp.go(fd, 10000);
        } catch (Throwable e) {
            if (tp != null) {
                tp.kill();
            }
            pw.println("Failure dumping service:");
            e.printStackTrace(pw);
        }
!!!5014917.java!!!	setWatchHeapLimit(in pssSize : long) : void
        try {
            getService().setDumpHeapDebugLimit(null, 0, pssSize,
                    mContext.getPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5015045.java!!!	clearWatchHeapLimit() : void
        try {
            getService().setDumpHeapDebugLimit(null, 0, 0, null);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5015173.java!!!	startLockTaskMode(in taskId : int) : void
        try {
            getService().startLockTaskModeById(taskId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5015301.java!!!	stopLockTaskMode() : void
        try {
            getService().stopLockTaskMode();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5015429.java!!!	isInLockTaskMode() : boolean
        return getLockTaskModeState() != LOCK_TASK_MODE_NONE;
!!!5015557.java!!!	getLockTaskModeState() : int
        try {
            return getService().getLockTaskModeState();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!5015685.java!!!	setVrThread(in tid : int) : void
        try {
            getService().setVrThread(tid);
        } catch (RemoteException e) {
            // pass
        }
!!!5015813.java!!!	setPersistentVrThread(in tid : int) : void
        try {
            getService().setPersistentVrThread(tid);
        } catch (RemoteException e) {
            // pass
        }
