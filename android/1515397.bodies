class Target
!!!9924613.java!!!	Target()
        setTargetDefaultValues(mSaturationTargets);
        setTargetDefaultValues(mLightnessTargets);
        setDefaultWeights();
!!!9924741.java!!!	Target(inout from : Target)
        System.arraycopy(from.mSaturationTargets, 0, mSaturationTargets, 0,
                mSaturationTargets.length);
        System.arraycopy(from.mLightnessTargets, 0, mLightnessTargets, 0,
                mLightnessTargets.length);
        System.arraycopy(from.mWeights, 0, mWeights, 0, mWeights.length);
!!!9924869.java!!!	getMinimumSaturation() : float
        return mSaturationTargets[INDEX_MIN];
!!!9924997.java!!!	getTargetSaturation() : float
        return mSaturationTargets[INDEX_TARGET];
!!!9925125.java!!!	getMaximumSaturation() : float
        return mSaturationTargets[INDEX_MAX];
!!!9925253.java!!!	getMinimumLightness() : float
        return mLightnessTargets[INDEX_MIN];
!!!9925381.java!!!	getTargetLightness() : float
        return mLightnessTargets[INDEX_TARGET];
!!!9925509.java!!!	getMaximumLightness() : float
        return mLightnessTargets[INDEX_MAX];
!!!9925637.java!!!	getSaturationWeight() : float
        return mWeights[INDEX_WEIGHT_SAT];
!!!9925765.java!!!	getLightnessWeight() : float
        return mWeights[INDEX_WEIGHT_LUMA];
!!!9925893.java!!!	getPopulationWeight() : float
        return mWeights[INDEX_WEIGHT_POP];
!!!9926021.java!!!	isExclusive() : boolean
        return mIsExclusive;
!!!9926149.java!!!	setTargetDefaultValues(in values : float [[]]) : void
        values[INDEX_MIN] = 0f;
        values[INDEX_TARGET] = 0.5f;
        values[INDEX_MAX] = 1f;
!!!9926277.java!!!	setDefaultWeights() : void
        mWeights[INDEX_WEIGHT_SAT] = WEIGHT_SATURATION;
        mWeights[INDEX_WEIGHT_LUMA] = WEIGHT_LUMA;
        mWeights[INDEX_WEIGHT_POP] = WEIGHT_POPULATION;
!!!9926405.java!!!	normalizeWeights() : void
        float sum = 0;
        for (int i = 0, z = mWeights.length; i < z; i++) {
            float weight = mWeights[i];
            if (weight > 0) {
                sum += weight;
            }
        }
        if (sum != 0) {
            for (int i = 0, z = mWeights.length; i < z; i++) {
                if (mWeights[i] > 0) {
                    mWeights[i] /= sum;
                }
            }
        }
!!!9926533.java!!!	setDefaultDarkLightnessValues(inout target : Target) : void
        target.mLightnessTargets[INDEX_TARGET] = TARGET_DARK_LUMA;
        target.mLightnessTargets[INDEX_MAX] = MAX_DARK_LUMA;
!!!9926661.java!!!	setDefaultNormalLightnessValues(inout target : Target) : void
        target.mLightnessTargets[INDEX_MIN] = MIN_NORMAL_LUMA;
        target.mLightnessTargets[INDEX_TARGET] = TARGET_NORMAL_LUMA;
        target.mLightnessTargets[INDEX_MAX] = MAX_NORMAL_LUMA;
!!!9926789.java!!!	setDefaultLightLightnessValues(inout target : Target) : void
        target.mLightnessTargets[INDEX_MIN] = MIN_LIGHT_LUMA;
        target.mLightnessTargets[INDEX_TARGET] = TARGET_LIGHT_LUMA;
!!!9926917.java!!!	setDefaultVibrantSaturationValues(inout target : Target) : void
        target.mSaturationTargets[INDEX_MIN] = MIN_VIBRANT_SATURATION;
        target.mSaturationTargets[INDEX_TARGET] = TARGET_VIBRANT_SATURATION;
!!!9927045.java!!!	setDefaultMutedSaturationValues(inout target : Target) : void
        target.mSaturationTargets[INDEX_TARGET] = TARGET_MUTED_SATURATION;
        target.mSaturationTargets[INDEX_MAX] = MAX_MUTED_SATURATION;
