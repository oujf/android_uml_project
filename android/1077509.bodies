class JobInfo
!!!5874437.java!!!	getMinPeriodMillis() : long
        return MIN_PERIOD_MILLIS;
!!!5874565.java!!!	getMinFlexMillis() : long
        return MIN_FLEX_MILLIS;
!!!5874693.java!!!	getMinBackoffMillis() : long
        return MIN_BACKOFF_MILLIS;
!!!5874821.java!!!	getId() : int
        return jobId;
!!!5874949.java!!!	getExtras() : PersistableBundle
        return extras;
!!!5875077.java!!!	getTransientExtras() : Bundle
        return transientExtras;
!!!5875205.java!!!	getClipData() : ClipData
        return clipData;
!!!5875333.java!!!	getClipGrantFlags() : int
        return clipGrantFlags;
!!!5875461.java!!!	getService() : ComponentName
        return service;
!!!5875589.java!!!	getPriority() : int
        return priority;
!!!5875717.java!!!	getFlags() : int
        return flags;
!!!5875845.java!!!	isRequireCharging() : boolean
        return (constraintFlags & CONSTRAINT_FLAG_CHARGING) != 0;
!!!5875973.java!!!	isRequireBatteryNotLow() : boolean
        return (constraintFlags & CONSTRAINT_FLAG_BATTERY_NOT_LOW) != 0;
!!!5876101.java!!!	isRequireDeviceIdle() : boolean
        return (constraintFlags & CONSTRAINT_FLAG_DEVICE_IDLE) != 0;
!!!5876229.java!!!	isRequireStorageNotLow() : boolean
        return (constraintFlags & CONSTRAINT_FLAG_STORAGE_NOT_LOW) != 0;
!!!5876357.java!!!	getConstraintFlags() : int
        return constraintFlags;
!!!5876485.java!!!	getTriggerContentUris() : JobInfo::TriggerContentUri
        return triggerContentUris;
!!!5876613.java!!!	getTriggerContentUpdateDelay() : long
        return triggerContentUpdateDelay;
!!!5876741.java!!!	getTriggerContentMaxDelay() : long
        return triggerContentMaxDelay;
!!!5876869.java!!!	getNetworkType() : int
        return networkType;
!!!5876997.java!!!	getMinLatencyMillis() : long
        return minLatencyMillis;
!!!5877125.java!!!	getMaxExecutionDelayMillis() : long
        return maxExecutionDelayMillis;
!!!5877253.java!!!	isPeriodic() : boolean
        return isPeriodic;
!!!5877381.java!!!	isPersisted() : boolean
        return isPersisted;
!!!5877509.java!!!	getIntervalMillis() : long
        final long minInterval = getMinPeriodMillis();
        return intervalMillis >= minInterval ? intervalMillis : minInterval;
!!!5877637.java!!!	getFlexMillis() : long
        long interval = getIntervalMillis();
        long percentClamp = 5 * interval / 100;
        long clampedFlex = Math.max(flexMillis, Math.max(percentClamp, getMinFlexMillis()));
        return clampedFlex <= interval ? clampedFlex : interval;
!!!5877765.java!!!	getInitialBackoffMillis() : long
        final long minBackoff = getMinBackoffMillis();
        return initialBackoffMillis >= minBackoff ? initialBackoffMillis : minBackoff;
!!!5877893.java!!!	getBackoffPolicy() : int
        return backoffPolicy;
!!!5878021.java!!!	hasEarlyConstraint() : boolean
        return hasEarlyConstraint;
!!!5878149.java!!!	hasLateConstraint() : boolean
        return hasLateConstraint;
!!!5878277.java!!!	kindofEqualsBundle(inout a : BaseBundle, inout b : BaseBundle) : boolean
        return (a == b) || (a != null && a.kindofEquals(b));
!!!5878405.java!!!	equals(inout o : Object) : boolean
        if (!(o instanceof JobInfo)) {
            return false;
        }
        JobInfo j = (JobInfo) o;
        if (jobId != j.jobId) {
            return false;
        }
        // XXX won't be correct if one is parcelled and the other not.
        if (!kindofEqualsBundle(extras, j.extras)) {
            return false;
        }
        // XXX won't be correct if one is parcelled and the other not.
        if (!kindofEqualsBundle(transientExtras, j.transientExtras)) {
            return false;
        }
        // XXX for now we consider two different clip data objects to be different,
        // regardless of whether their contents are the same.
        if (clipData != j.clipData) {
            return false;
        }
        if (clipGrantFlags != j.clipGrantFlags) {
            return false;
        }
        if (!Objects.equals(service, j.service)) {
            return false;
        }
        if (constraintFlags != j.constraintFlags) {
            return false;
        }
        if (!Arrays.equals(triggerContentUris, j.triggerContentUris)) {
            return false;
        }
        if (triggerContentUpdateDelay != j.triggerContentUpdateDelay) {
            return false;
        }
        if (triggerContentMaxDelay != j.triggerContentMaxDelay) {
            return false;
        }
        if (hasEarlyConstraint != j.hasEarlyConstraint) {
            return false;
        }
        if (hasLateConstraint != j.hasLateConstraint) {
            return false;
        }
        if (networkType != j.networkType) {
            return false;
        }
        if (minLatencyMillis != j.minLatencyMillis) {
            return false;
        }
        if (maxExecutionDelayMillis != j.maxExecutionDelayMillis) {
            return false;
        }
        if (isPeriodic != j.isPeriodic) {
            return false;
        }
        if (isPersisted != j.isPersisted) {
            return false;
        }
        if (intervalMillis != j.intervalMillis) {
            return false;
        }
        if (flexMillis != j.flexMillis) {
            return false;
        }
        if (initialBackoffMillis != j.initialBackoffMillis) {
            return false;
        }
        if (backoffPolicy != j.backoffPolicy) {
            return false;
        }
        if (priority != j.priority) {
            return false;
        }
        if (flags != j.flags) {
            return false;
        }
        return true;
!!!5878533.java!!!	hashCode() : int
        int hashCode = jobId;
        if (extras != null) {
            hashCode = 31 * hashCode + extras.hashCode();
        }
        if (transientExtras != null) {
            hashCode = 31 * hashCode + transientExtras.hashCode();
        }
        if (clipData != null) {
            hashCode = 31 * hashCode + clipData.hashCode();
        }
        hashCode = 31*hashCode + clipGrantFlags;
        if (service != null) {
            hashCode = 31 * hashCode + service.hashCode();
        }
        hashCode = 31 * hashCode + constraintFlags;
        if (triggerContentUris != null) {
            hashCode = 31 * hashCode + Arrays.hashCode(triggerContentUris);
        }
        hashCode = 31 * hashCode + Long.hashCode(triggerContentUpdateDelay);
        hashCode = 31 * hashCode + Long.hashCode(triggerContentMaxDelay);
        hashCode = 31 * hashCode + Boolean.hashCode(hasEarlyConstraint);
        hashCode = 31 * hashCode + Boolean.hashCode(hasLateConstraint);
        hashCode = 31 * hashCode + networkType;
        hashCode = 31 * hashCode + Long.hashCode(minLatencyMillis);
        hashCode = 31 * hashCode + Long.hashCode(maxExecutionDelayMillis);
        hashCode = 31 * hashCode + Boolean.hashCode(isPeriodic);
        hashCode = 31 * hashCode + Boolean.hashCode(isPersisted);
        hashCode = 31 * hashCode + Long.hashCode(intervalMillis);
        hashCode = 31 * hashCode + Long.hashCode(flexMillis);
        hashCode = 31 * hashCode + Long.hashCode(initialBackoffMillis);
        hashCode = 31 * hashCode + backoffPolicy;
        hashCode = 31 * hashCode + priority;
        hashCode = 31 * hashCode + flags;
        return hashCode;
!!!5878661.java!!!	JobInfo(inout in : Parcel)
        jobId = in.readInt();
        extras = in.readPersistableBundle();
        transientExtras = in.readBundle();
        if (in.readInt() != 0) {
            clipData = ClipData.CREATOR.createFromParcel(in);
            clipGrantFlags = in.readInt();
        } else {
            clipData = null;
            clipGrantFlags = 0;
        }
        service = in.readParcelable(null);
        constraintFlags = in.readInt();
        triggerContentUris = in.createTypedArray(TriggerContentUri.CREATOR);
        triggerContentUpdateDelay = in.readLong();
        triggerContentMaxDelay = in.readLong();
        networkType = in.readInt();
        minLatencyMillis = in.readLong();
        maxExecutionDelayMillis = in.readLong();
        isPeriodic = in.readInt() == 1;
        isPersisted = in.readInt() == 1;
        intervalMillis = in.readLong();
        flexMillis = in.readLong();
        initialBackoffMillis = in.readLong();
        backoffPolicy = in.readInt();
        hasEarlyConstraint = in.readInt() == 1;
        hasLateConstraint = in.readInt() == 1;
        priority = in.readInt();
        flags = in.readInt();
!!!5878789.java!!!	JobInfo(inout b : JobInfo::Builder)
        jobId = b.mJobId;
        extras = b.mExtras.deepCopy();
        transientExtras = b.mTransientExtras.deepCopy();
        clipData = b.mClipData;
        clipGrantFlags = b.mClipGrantFlags;
        service = b.mJobService;
        constraintFlags = b.mConstraintFlags;
        triggerContentUris = b.mTriggerContentUris != null
                ? b.mTriggerContentUris.toArray(new TriggerContentUri[b.mTriggerContentUris.size()])
                : null;
        triggerContentUpdateDelay = b.mTriggerContentUpdateDelay;
        triggerContentMaxDelay = b.mTriggerContentMaxDelay;
        networkType = b.mNetworkType;
        minLatencyMillis = b.mMinLatencyMillis;
        maxExecutionDelayMillis = b.mMaxExecutionDelayMillis;
        isPeriodic = b.mIsPeriodic;
        isPersisted = b.mIsPersisted;
        intervalMillis = b.mIntervalMillis;
        flexMillis = b.mFlexMillis;
        initialBackoffMillis = b.mInitialBackoffMillis;
        backoffPolicy = b.mBackoffPolicy;
        hasEarlyConstraint = b.mHasEarlyConstraint;
        hasLateConstraint = b.mHasLateConstraint;
        priority = b.mPriority;
        flags = b.mFlags;
!!!5878917.java!!!	describeContents() : int
        return 0;
!!!5879045.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeInt(jobId);
        out.writePersistableBundle(extras);
        out.writeBundle(transientExtras);
        if (clipData != null) {
            out.writeInt(1);
            clipData.writeToParcel(out, flags);
            out.writeInt(clipGrantFlags);
        } else {
            out.writeInt(0);
        }
        out.writeParcelable(service, flags);
        out.writeInt(constraintFlags);
        out.writeTypedArray(triggerContentUris, flags);
        out.writeLong(triggerContentUpdateDelay);
        out.writeLong(triggerContentMaxDelay);
        out.writeInt(networkType);
        out.writeLong(minLatencyMillis);
        out.writeLong(maxExecutionDelayMillis);
        out.writeInt(isPeriodic ? 1 : 0);
        out.writeInt(isPersisted ? 1 : 0);
        out.writeLong(intervalMillis);
        out.writeLong(flexMillis);
        out.writeLong(initialBackoffMillis);
        out.writeInt(backoffPolicy);
        out.writeInt(hasEarlyConstraint ? 1 : 0);
        out.writeInt(hasLateConstraint ? 1 : 0);
        out.writeInt(priority);
        out.writeInt(this.flags);
!!!5879173.java!!!	toString() : String
        return "(job:" + jobId + "/" + service.flattenToShortString() + ")";
