class AsyncQueryHandler
!!!6089093.java!!!	AsyncQueryHandler(inout cr : ContentResolver)
        super();
        mResolver = new WeakReference<ContentResolver>(cr);
        synchronized (AsyncQueryHandler.class) {
            if (sLooper == null) {
                HandlerThread thread = new HandlerThread("AsyncQueryWorker");
                thread.start();

                sLooper = thread.getLooper();
            }
        }
        mWorkerThreadHandler = createHandler(sLooper);
!!!6089221.java!!!	createHandler(inout looper : Looper) : Handler
        return new WorkerHandler(looper);
!!!6089349.java!!!	startQuery(in token : int, inout cookie : Object, inout uri : Uri, inout projection : String [[]], in selection : String, inout selectionArgs : String [[]], in orderBy : String) : void
        // Use the token as what so cancelOperations works properly
        Message msg = mWorkerThreadHandler.obtainMessage(token);
        msg.arg1 = EVENT_ARG_QUERY;

        WorkerArgs args = new WorkerArgs();
        args.handler = this;
        args.uri = uri;
        args.projection = projection;
        args.selection = selection;
        args.selectionArgs = selectionArgs;
        args.orderBy = orderBy;
        args.cookie = cookie;
        msg.obj = args;

        mWorkerThreadHandler.sendMessage(msg);
!!!6089477.java!!!	cancelOperation(in token : int) : void
        mWorkerThreadHandler.removeMessages(token);
!!!6089605.java!!!	startInsert(in token : int, inout cookie : Object, inout uri : Uri, inout initialValues : ContentValues) : void
        // Use the token as what so cancelOperations works properly
        Message msg = mWorkerThreadHandler.obtainMessage(token);
        msg.arg1 = EVENT_ARG_INSERT;

        WorkerArgs args = new WorkerArgs();
        args.handler = this;
        args.uri = uri;
        args.cookie = cookie;
        args.values = initialValues;
        msg.obj = args;

        mWorkerThreadHandler.sendMessage(msg);
!!!6089733.java!!!	startUpdate(in token : int, inout cookie : Object, inout uri : Uri, inout values : ContentValues, in selection : String, inout selectionArgs : String [[]]) : void
        // Use the token as what so cancelOperations works properly
        Message msg = mWorkerThreadHandler.obtainMessage(token);
        msg.arg1 = EVENT_ARG_UPDATE;

        WorkerArgs args = new WorkerArgs();
        args.handler = this;
        args.uri = uri;
        args.cookie = cookie;
        args.values = values;
        args.selection = selection;
        args.selectionArgs = selectionArgs;
        msg.obj = args;

        mWorkerThreadHandler.sendMessage(msg);
!!!6089861.java!!!	startDelete(in token : int, inout cookie : Object, inout uri : Uri, in selection : String, inout selectionArgs : String [[]]) : void
        // Use the token as what so cancelOperations works properly
        Message msg = mWorkerThreadHandler.obtainMessage(token);
        msg.arg1 = EVENT_ARG_DELETE;

        WorkerArgs args = new WorkerArgs();
        args.handler = this;
        args.uri = uri;
        args.cookie = cookie;
        args.selection = selection;
        args.selectionArgs = selectionArgs;
        msg.obj = args;

        mWorkerThreadHandler.sendMessage(msg);
!!!6089989.java!!!	onQueryComplete(in token : int, inout cookie : Object, inout cursor : Cursor) : void
        // Empty
!!!6090117.java!!!	onInsertComplete(in token : int, inout cookie : Object, inout uri : Uri) : void
        // Empty
!!!6090245.java!!!	onUpdateComplete(in token : int, inout cookie : Object, in result : int) : void
        // Empty
!!!6090373.java!!!	onDeleteComplete(in token : int, inout cookie : Object, in result : int) : void
        // Empty
!!!6090501.java!!!	handleMessage(inout msg : Message) : void
        WorkerArgs args = (WorkerArgs) msg.obj;

        if (localLOGV) {
            Log.d(TAG, "AsyncQueryHandler.handleMessage: msg.what=" + msg.what
                    + ", msg.arg1=" + msg.arg1);
        }

        int token = msg.what;
        int event = msg.arg1;

        // pass token back to caller on each callback.
        switch (event) {
            case EVENT_ARG_QUERY:
                onQueryComplete(token, args.cookie, (Cursor) args.result);
                break;

            case EVENT_ARG_INSERT:
                onInsertComplete(token, args.cookie, (Uri) args.result);
                break;

            case EVENT_ARG_UPDATE:
                onUpdateComplete(token, args.cookie, (Integer) args.result);
                break;

            case EVENT_ARG_DELETE:
                onDeleteComplete(token, args.cookie, (Integer) args.result);
                break;
        }
