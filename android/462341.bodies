class MetaData
!!!1315717.cpp!!!	clear() : void
    mItems.clear();
!!!1315845.cpp!!!	remove(in key : uint32_t) : bool
    ssize_t i = mItems.indexOfKey(key);

    if (i < 0) {
        return false;
    }

    mItems.removeItemsAt(i);

    return true;
!!!1315973.cpp!!!	setCString(in key : uint32_t, in value : char) : bool
    return setData(key, TYPE_C_STRING, value, strlen(value) + 1);
!!!1316101.cpp!!!	setInt32(in key : uint32_t, in value : int32_t) : bool
    return setData(key, TYPE_INT32, &value, sizeof(value));
!!!1316229.cpp!!!	setInt64(in key : uint32_t, in value : int64_t) : bool
    return setData(key, TYPE_INT64, &value, sizeof(value));
!!!1316357.cpp!!!	setFloat(in key : uint32_t, in value : float) : bool
    return setData(key, TYPE_FLOAT, &value, sizeof(value));
!!!1316485.cpp!!!	setPointer(in key : uint32_t, inout value : void) : bool
    return setData(key, TYPE_POINTER, &value, sizeof(value));
!!!1316613.cpp!!!	setRect(in key : uint32_t, in left : int32_t, in top : int32_t, in right : int32_t, in bottom : int32_t) : bool
    Rect r;
    r.mLeft = left;
    r.mTop = top;
    r.mRight = right;
    r.mBottom = bottom;

    return setData(key, TYPE_RECT, &r, sizeof(r));
!!!1316741.cpp!!!	findCString(in key : uint32_t, in value : char) : bool
    uint32_t type;
    const void *data;
    size_t size;
    if (!findData(key, &type, &data, &size) || type != TYPE_C_STRING) {
        return false;
    }

    *value = (const char *)data;

    return true;
!!!1316869.cpp!!!	findInt32(in key : uint32_t, inout value : int32_t) : bool
    uint32_t type = 0;
    const void *data;
    size_t size;
    if (!findData(key, &type, &data, &size) || type != TYPE_INT32) {
        return false;
    }

    CHECK_EQ(size, sizeof(*value));

    *value = *(int32_t *)data;

    return true;
!!!1316997.cpp!!!	findInt64(in key : uint32_t, inout value : int64_t) : bool
    uint32_t type = 0;
    const void *data;
    size_t size;
    if (!findData(key, &type, &data, &size) || type != TYPE_INT64) {
        return false;
    }

    CHECK_EQ(size, sizeof(*value));

    *value = *(int64_t *)data;

    return true;
!!!1317125.cpp!!!	findFloat(in key : uint32_t, inout value : float) : bool
    uint32_t type = 0;
    const void *data;
    size_t size;
    if (!findData(key, &type, &data, &size) || type != TYPE_FLOAT) {
        return false;
    }

    CHECK_EQ(size, sizeof(*value));

    *value = *(float *)data;

    return true;
!!!1317253.cpp!!!	findPointer(in key : uint32_t, inout value : void) : bool
    uint32_t type = 0;
    const void *data;
    size_t size;
    if (!findData(key, &type, &data, &size) || type != TYPE_POINTER) {
        return false;
    }

    CHECK_EQ(size, sizeof(*value));

    *value = *(void **)data;

    return true;
!!!1317381.cpp!!!	findRect(in key : uint32_t, inout left : int32_t, inout top : int32_t, inout right : int32_t, inout bottom : int32_t) : bool
    uint32_t type = 0;
    const void *data;
    size_t size;
    if (!findData(key, &type, &data, &size) || type != TYPE_RECT) {
        return false;
    }

    CHECK_EQ(size, sizeof(Rect));

    const Rect *r = (const Rect *)data;
    *left = r->mLeft;
    *top = r->mTop;
    *right = r->mRight;
    *bottom = r->mBottom;

    return true;
!!!1317509.cpp!!!	setData(in key : uint32_t, in type : uint32_t, in data : void, in size : size_t) : bool
    bool overwrote_existing = true;

    ssize_t i = mItems.indexOfKey(key);
    if (i < 0) {
        typed_data item;
        i = mItems.add(key, item);

        overwrote_existing = false;
    }

    typed_data &item = mItems.editValueAt(i);

    item.setData(type, data, size);

    return overwrote_existing;
!!!1317637.cpp!!!	findData(in key : uint32_t, inout type : uint32_t, in data : void, inout size : size_t) : bool
    ssize_t i = mItems.indexOfKey(key);

    if (i < 0) {
        return false;
    }

    const typed_data &item = mItems.valueAt(i);

    item.getData(type, data, size);

    return true;
!!!1317765.cpp!!!	hasData(in key : uint32_t) : bool
    ssize_t i = mItems.indexOfKey(key);

    if (i < 0) {
        return false;
    }

    return true;
!!!1317893.cpp!!!	toString() : String8
    String8 s;
    for (int i = mItems.size(); --i >= 0;) {
        int32_t key = mItems.keyAt(i);
        char cc[5];
        MakeFourCCString(key, cc);
        const typed_data &item = mItems.valueAt(i);
        s.appendFormat("%s: %s", cc, item.asString(false).string());
        if (i != 0) {
            s.append(", ");
        }
    }
    return s;
!!!1318021.cpp!!!	dumpToLog() : void
    for (int i = mItems.size(); --i >= 0;) {
        int32_t key = mItems.keyAt(i);
        char cc[5];
        MakeFourCCString(key, cc);
        const typed_data &item = mItems.valueAt(i);
        ALOGI("%s: %s", cc, item.asString(true /* verbose */).string());
    }
!!!1318149.cpp!!!	writeToParcel(inout parcel : Parcel) : status_t
    status_t ret;
    size_t numItems = mItems.size();
    ret = parcel.writeUint32(uint32_t(numItems));
    if (ret) {
        return ret;
    }
    for (size_t i = 0; i < numItems; i++) {
        int32_t key = mItems.keyAt(i);
        const typed_data &item = mItems.valueAt(i);
        uint32_t type;
        const void *data;
        size_t size;
        item.getData(&type, &data, &size);
        ret = parcel.writeInt32(key);
        if (ret) {
            return ret;
        }
        ret = parcel.writeUint32(type);
        if (ret) {
            return ret;
        }
        if (type == TYPE_NONE) {
            android::Parcel::WritableBlob blob;
            ret = parcel.writeUint32(static_cast<uint32_t>(size));
            if (ret) {
                return ret;
            }
            ret = parcel.writeBlob(size, false, &blob);
            if (ret) {
                return ret;
            }
            memcpy(blob.data(), data, size);
            blob.release();
        } else {
            ret = parcel.writeByteArray(size, (uint8_t*)data);
            if (ret) {
                return ret;
            }
        }
    }
    return OK;
!!!1318277.cpp!!!	updateFromParcel(in parcel : Parcel) : status_t
    uint32_t numItems;
    if (parcel.readUint32(&numItems) == OK) {

        for (size_t i = 0; i < numItems; i++) {
            int32_t key;
            uint32_t type;
            uint32_t size;
            status_t ret = parcel.readInt32(&key);
            ret |= parcel.readUint32(&type);
            ret |= parcel.readUint32(&size);
            if (ret != OK) {
                break;
            }
            // copy data from Blob, which may be inline in Parcel storage,
            // then advance position
            if (type == TYPE_NONE) {
                android::Parcel::ReadableBlob blob;
                ret = parcel.readBlob(size, &blob);
                if (ret != OK) {
                    break;
                }
                setData(key, type, blob.data(), size);
                blob.release();
            } else {
                // copy data directly from Parcel storage, then advance position
                setData(key, type, parcel.readInplace(size), size);
            }
         }

        return OK;
    }
    ALOGW("no metadata in parcel");
    return UNKNOWN_ERROR;
!!!1318405.cpp!!!	createFromParcel(in parcel : Parcel) : sp<MetaData>

    sp<MetaData> meta = new MetaData();
    meta->updateFromParcel(parcel);
    return meta;
!!!1318533.cpp!!!	~MetaData()
    clear();
