class PermissionsState
!!!12218245.java!!!	PermissionsState()
        /* do nothing */
!!!12218373.java!!!	PermissionsState(inout prototype : PermissionsState)
        copyFrom(prototype);
!!!12218501.java!!!	setGlobalGids(inout globalGids : int [[]]) : void
        if (!ArrayUtils.isEmpty(globalGids)) {
            mGlobalGids = Arrays.copyOf(globalGids, globalGids.length);
        }
!!!12218629.java!!!	copyFrom(inout other : PermissionsState) : void
        if (other == this) {
            return;
        }
        if (mPermissions != null) {
            if (other.mPermissions == null) {
                mPermissions = null;
            } else {
                mPermissions.clear();
            }
        }
        if (other.mPermissions != null) {
            if (mPermissions == null) {
                mPermissions = new ArrayMap<>();
            }
            final int permissionCount = other.mPermissions.size();
            for (int i = 0; i < permissionCount; i++) {
                String name = other.mPermissions.keyAt(i);
                PermissionData permissionData = other.mPermissions.valueAt(i);
                mPermissions.put(name, new PermissionData(permissionData));
            }
        }

        mGlobalGids = NO_GIDS;
        if (other.mGlobalGids != NO_GIDS) {
            mGlobalGids = Arrays.copyOf(other.mGlobalGids,
                    other.mGlobalGids.length);
        }

        if (mPermissionReviewRequired != null) {
            if (other.mPermissionReviewRequired == null) {
                mPermissionReviewRequired = null;
            } else {
                mPermissionReviewRequired.clear();
            }
        }
        if (other.mPermissionReviewRequired != null) {
            if (mPermissionReviewRequired == null) {
                mPermissionReviewRequired = new SparseBooleanArray();
            }
            final int userCount = other.mPermissionReviewRequired.size();
            for (int i = 0; i < userCount; i++) {
                final boolean reviewRequired = other.mPermissionReviewRequired.valueAt(i);
                mPermissionReviewRequired.put(i, reviewRequired);
            }
        }
!!!12218757.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final PermissionsState other = (PermissionsState) obj;

        if (mPermissions == null) {
            if (other.mPermissions != null) {
                return false;
            }
        } else if (!mPermissions.equals(other.mPermissions)) {
            return false;
        }
        if (mPermissionReviewRequired == null) {
            if (other.mPermissionReviewRequired != null) {
                return false;
            }
        } else if (!mPermissionReviewRequired.equals(other.mPermissionReviewRequired)) {
            return false;
        }
        return Arrays.equals(mGlobalGids, other.mGlobalGids);
!!!12218885.java!!!	isPermissionReviewRequired(in userId : int) : boolean
        return mPermissionReviewRequired != null && mPermissionReviewRequired.get(userId);
!!!12219013.java!!!	grantInstallPermission(inout permission : BasePermission) : int
        return grantPermission(permission, UserHandle.USER_ALL);
!!!12219141.java!!!	revokeInstallPermission(inout permission : BasePermission) : int
        return revokePermission(permission, UserHandle.USER_ALL);
!!!12219269.java!!!	grantRuntimePermission(inout permission : BasePermission, in userId : int) : int
        enforceValidUserId(userId);
        if (userId == UserHandle.USER_ALL) {
            return PERMISSION_OPERATION_FAILURE;
        }
        return grantPermission(permission, userId);
!!!12219397.java!!!	revokeRuntimePermission(inout permission : BasePermission, in userId : int) : int
        enforceValidUserId(userId);
        if (userId == UserHandle.USER_ALL) {
            return PERMISSION_OPERATION_FAILURE;
        }
        return revokePermission(permission, userId);
!!!12219525.java!!!	hasRuntimePermission(in name : String, in userId : int) : boolean
        enforceValidUserId(userId);
        return !hasInstallPermission(name) && hasPermission(name, userId);
!!!12219653.java!!!	hasInstallPermission(in name : String) : boolean
        return hasPermission(name, UserHandle.USER_ALL);
!!!12219781.java!!!	hasPermission(in name : String, in userId : int) : boolean
        enforceValidUserId(userId);

        if (mPermissions == null) {
            return false;
        }

        PermissionData permissionData = mPermissions.get(name);
        return permissionData != null && permissionData.isGranted(userId);
!!!12219909.java!!!	hasRequestedPermission(inout names : ArraySet) : boolean
        if (mPermissions == null) {
            return false;
        }
        for (int i=names.size()-1; i>=0; i--) {
            if (mPermissions.get(names.valueAt(i)) != null) {
                return true;
            }
        }
        return false;
!!!12220037.java!!!	getPermissions(in userId : int) : Set<String>
        enforceValidUserId(userId);

        if (mPermissions == null) {
            return Collections.emptySet();
        }

        Set<String> permissions = new ArraySet<>(mPermissions.size());

        final int permissionCount = mPermissions.size();
        for (int i = 0; i < permissionCount; i++) {
            String permission = mPermissions.keyAt(i);

            if (hasInstallPermission(permission)) {
                permissions.add(permission);
                continue;
            }

            if (userId != UserHandle.USER_ALL) {
                if (hasRuntimePermission(permission, userId)) {
                    permissions.add(permission);
                }
            }
        }

        return permissions;
!!!12220165.java!!!	getInstallPermissionState(in name : String) : PermissionsState::PermissionState
        return getPermissionState(name, UserHandle.USER_ALL);
!!!12220293.java!!!	getRuntimePermissionState(in name : String, in userId : int) : PermissionsState::PermissionState
        enforceValidUserId(userId);
        return getPermissionState(name, userId);
!!!12220421.java!!!	getInstallPermissionStates() : PermissionsState::PermissionState
        return getPermissionStatesInternal(UserHandle.USER_ALL);
!!!12220549.java!!!	getRuntimePermissionStates(in userId : int) : PermissionsState::PermissionState
        enforceValidUserId(userId);
        return getPermissionStatesInternal(userId);
!!!12220677.java!!!	getPermissionFlags(in name : String, in userId : int) : int
        PermissionState installPermState = getInstallPermissionState(name);
        if (installPermState != null) {
            return installPermState.getFlags();
        }
        PermissionState runtimePermState = getRuntimePermissionState(name, userId);
        if (runtimePermState != null) {
            return runtimePermState.getFlags();
        }
        return 0;
!!!12220805.java!!!	updatePermissionFlags(inout permission : BasePermission, in userId : int, in flagMask : int, in flagValues : int) : boolean
        enforceValidUserId(userId);

        final boolean mayChangeFlags = flagValues != 0 || flagMask != 0;

        if (mPermissions == null) {
            if (!mayChangeFlags) {
                return false;
            }
            ensurePermissionData(permission);
        }

        PermissionData permissionData = mPermissions.get(permission.name);
        if (permissionData == null) {
            if (!mayChangeFlags) {
                return false;
            }
            permissionData = ensurePermissionData(permission);
        }

        final int oldFlags = permissionData.getFlags(userId);

        final boolean updated = permissionData.updateFlags(userId, flagMask, flagValues);
        if (updated) {
            final int newFlags = permissionData.getFlags(userId);
            if ((oldFlags & PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == 0
                    && (newFlags & PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != 0) {
                if (mPermissionReviewRequired == null) {
                    mPermissionReviewRequired = new SparseBooleanArray();
                }
                mPermissionReviewRequired.put(userId, true);
            } else if ((oldFlags & PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != 0
                    && (newFlags & PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == 0) {
                if (mPermissionReviewRequired != null) {
                    mPermissionReviewRequired.delete(userId);
                    if (mPermissionReviewRequired.size() <= 0) {
                        mPermissionReviewRequired = null;
                    }
                }
            }
        }
        return updated;
!!!12220933.java!!!	updatePermissionFlagsForAllPermissions(in userId : int, in flagMask : int, in flagValues : int) : boolean
        enforceValidUserId(userId);

        if (mPermissions == null) {
            return false;
        }
        boolean changed = false;
        final int permissionCount = mPermissions.size();
        for (int i = 0; i < permissionCount; i++) {
            PermissionData permissionData = mPermissions.valueAt(i);
            changed |= permissionData.updateFlags(userId, flagMask, flagValues);
        }
        return changed;
!!!12221061.java!!!	computeGids(in userId : int) : int
        enforceValidUserId(userId);

        int[] gids = mGlobalGids;

        if (mPermissions != null) {
            final int permissionCount = mPermissions.size();
            for (int i = 0; i < permissionCount; i++) {
                String permission = mPermissions.keyAt(i);
                if (!hasPermission(permission, userId)) {
                    continue;
                }
                PermissionData permissionData = mPermissions.valueAt(i);
                final int[] permGids = permissionData.computeGids(userId);
                if (permGids != NO_GIDS) {
                    gids = appendInts(gids, permGids);
                }
            }
        }

        return gids;
!!!12221189.java!!!	computeGids(inout userIds : int [[]]) : int
        int[] gids = mGlobalGids;

        for (int userId : userIds) {
            final int[] userGids = computeGids(userId);
            gids = appendInts(gids, userGids);
        }

        return gids;
!!!12221317.java!!!	reset() : void
        mGlobalGids = NO_GIDS;
        mPermissions = null;
        mPermissionReviewRequired = null;
!!!12221445.java!!!	getPermissionState(in name : String, in userId : int) : PermissionsState::PermissionState
        if (mPermissions == null) {
            return null;
        }
        PermissionData permissionData = mPermissions.get(name);
        if (permissionData == null) {
            return null;
        }
        return permissionData.getPermissionState(userId);
!!!12221573.java!!!	getPermissionStatesInternal(in userId : int) : PermissionsState::PermissionState
        enforceValidUserId(userId);

        if (mPermissions == null) {
            return Collections.emptyList();
        }

        List<PermissionState> permissionStates = new ArrayList<>();

        final int permissionCount = mPermissions.size();
        for (int i = 0; i < permissionCount; i++) {
            PermissionData permissionData = mPermissions.valueAt(i);

            PermissionState permissionState = permissionData.getPermissionState(userId);
            if (permissionState != null) {
                permissionStates.add(permissionState);
            }
        }

        return permissionStates;
!!!12221701.java!!!	grantPermission(inout permission : BasePermission, in userId : int) : int
        if (hasPermission(permission.name, userId)) {
            return PERMISSION_OPERATION_FAILURE;
        }

        final boolean hasGids = !ArrayUtils.isEmpty(permission.computeGids(userId));
        final int[] oldGids = hasGids ? computeGids(userId) : NO_GIDS;

        PermissionData permissionData = ensurePermissionData(permission);

        if (!permissionData.grant(userId)) {
            return PERMISSION_OPERATION_FAILURE;
        }

        if (hasGids) {
            final int[] newGids = computeGids(userId);
            if (oldGids.length != newGids.length) {
                return PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED;
            }
        }

        return PERMISSION_OPERATION_SUCCESS;
!!!12221829.java!!!	revokePermission(inout permission : BasePermission, in userId : int) : int
        if (!hasPermission(permission.name, userId)) {
            return PERMISSION_OPERATION_FAILURE;
        }

        final boolean hasGids = !ArrayUtils.isEmpty(permission.computeGids(userId));
        final int[] oldGids = hasGids ? computeGids(userId) : NO_GIDS;

        PermissionData permissionData = mPermissions.get(permission.name);

        if (!permissionData.revoke(userId)) {
            return PERMISSION_OPERATION_FAILURE;
        }

        if (permissionData.isDefault()) {
            ensureNoPermissionData(permission.name);
        }

        if (hasGids) {
            final int[] newGids = computeGids(userId);
            if (oldGids.length != newGids.length) {
                return PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED;
            }
        }

        return PERMISSION_OPERATION_SUCCESS;
!!!12221957.java!!!	appendInts(inout current : int [[]], inout added : int [[]]) : int
        if (current != null && added != null) {
            for (int guid : added) {
                current = ArrayUtils.appendInt(current, guid);
            }
        }
        return current;
!!!12222085.java!!!	enforceValidUserId(in userId : int) : void
        if (userId != UserHandle.USER_ALL && userId < 0) {
            throw new IllegalArgumentException("Invalid userId:" + userId);
        }
!!!12222213.java!!!	ensurePermissionData(inout permission : BasePermission) : PermissionsState::PermissionData
        if (mPermissions == null) {
            mPermissions = new ArrayMap<>();
        }
        PermissionData permissionData = mPermissions.get(permission.name);
        if (permissionData == null) {
            permissionData = new PermissionData(permission);
            mPermissions.put(permission.name, permissionData);
        }
        return permissionData;
!!!12222341.java!!!	ensureNoPermissionData(in name : String) : void
        if (mPermissions == null) {
            return;
        }
        mPermissions.remove(name);
        if (mPermissions.isEmpty()) {
            mPermissions = null;
        }
