class PreloadsFileCacheExpirationJobService
!!!10816261.java!!!	schedule(inout context : Context) : void
        int keepPreloadsMinDays = Resources.getSystem().getInteger(
                R.integer.config_keepPreloadsMinDays); // Default is 1 week
        long keepPreloadsMinTimeoutMs = DEBUG ? TimeUnit.MINUTES.toMillis(2)
                : TimeUnit.DAYS.toMillis(keepPreloadsMinDays);
        long keepPreloadsMaxTimeoutMs = DEBUG ? TimeUnit.MINUTES.toMillis(3)
                : TimeUnit.DAYS.toMillis(keepPreloadsMinDays + 1);

        if (DEBUG) {
            StringBuilder sb = new StringBuilder("Scheduling expiration job to run in ");
            TimeUtils.formatDuration(keepPreloadsMinTimeoutMs, sb);
            Slog.i(TAG, sb.toString());
        }
        JobInfo expirationJob = new JobInfo.Builder(JOB_ID,
                new ComponentName(context, PreloadsFileCacheExpirationJobService.class))
                .setPersisted(true)
                .setMinimumLatency(keepPreloadsMinTimeoutMs)
                .setOverrideDeadline(keepPreloadsMaxTimeoutMs)
                .build();

        JobScheduler jobScheduler = context.getSystemService(JobScheduler.class);
        jobScheduler.schedule(expirationJob);
!!!10816389.java!!!	onStartJob(inout params : JobParameters) : boolean
        SystemProperties.set(PERSIST_SYS_PRELOADS_FILE_CACHE_EXPIRED, "1");
        Slog.i(TAG, "Set " + PERSIST_SYS_PRELOADS_FILE_CACHE_EXPIRED + "=1");
        return false;
!!!10816517.java!!!	onStopJob(inout params : JobParameters) : boolean
        return false;
