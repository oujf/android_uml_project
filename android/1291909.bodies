class PreferenceManager
!!!7714309.java!!!	PreferenceManager(inout activity : Activity, in firstRequestCode : int)
        mActivity = activity;
        mNextRequestCode = firstRequestCode;

        init(activity);
!!!7714437.java!!!	PreferenceManager(inout context : Context)
        init(context);
!!!7714565.java!!!	init(inout context : Context) : void
        mContext = context;

        setSharedPreferencesName(getDefaultSharedPreferencesName(context));
!!!7714693.java!!!	setFragment(inout fragment : PreferenceFragment) : void
        mFragment = fragment;
!!!7714821.java!!!	getFragment() : PreferenceFragment
        return mFragment;
!!!7714949.java!!!	setPreferenceDataStore(inout dataStore : PreferenceDataStore) : void
        mPreferenceDataStore = dataStore;
!!!7715077.java!!!	getPreferenceDataStore() : PreferenceDataStore
        return mPreferenceDataStore;
!!!7715205.java!!!	queryIntentActivities(inout queryIntent : Intent) : ResolveInfo
        return mContext.getPackageManager().queryIntentActivities(queryIntent,
                PackageManager.GET_META_DATA);
!!!7715333.java!!!	inflateFromIntent(inout queryIntent : Intent, inout rootPreferences : PreferenceScreen) : PreferenceScreen
        final List<ResolveInfo> activities = queryIntentActivities(queryIntent);
        final HashSet<String> inflatedRes = new HashSet<String>();

        for (int i = activities.size() - 1; i >= 0; i--) {
            final ActivityInfo activityInfo = activities.get(i).activityInfo;
            final Bundle metaData = activityInfo.metaData;

            if ((metaData == null) || !metaData.containsKey(METADATA_KEY_PREFERENCES)) {
                continue;
            }

            // Need to concat the package with res ID since the same res ID
            // can be re-used across contexts
            final String uniqueResId = activityInfo.packageName + ":"
                    + activityInfo.metaData.getInt(METADATA_KEY_PREFERENCES);

            if (!inflatedRes.contains(uniqueResId)) {
                inflatedRes.add(uniqueResId);

                final Context context;
                try {
                    context = mContext.createPackageContext(activityInfo.packageName, 0);
                } catch (NameNotFoundException e) {
                    Log.w(TAG, "Could not create context for " + activityInfo.packageName + ": "
                            + Log.getStackTraceString(e));
                    continue;
                }

                final PreferenceInflater inflater = new PreferenceInflater(context, this);
                final XmlResourceParser parser = activityInfo.loadXmlMetaData(context
                        .getPackageManager(), METADATA_KEY_PREFERENCES);
                rootPreferences = (PreferenceScreen) inflater
                        .inflate(parser, rootPreferences, true);
                parser.close();
            }
        }

        rootPreferences.onAttachedToHierarchy(this);

        return rootPreferences;
!!!7715461.java!!!	inflateFromResource(inout context : Context, in resId : int, inout rootPreferences : PreferenceScreen) : PreferenceScreen
        // Block commits
        setNoCommit(true);

        final PreferenceInflater inflater = new PreferenceInflater(context, this);
        rootPreferences = (PreferenceScreen) inflater.inflate(resId, rootPreferences, true);
        rootPreferences.onAttachedToHierarchy(this);

        // Unblock commits
        setNoCommit(false);

        return rootPreferences;
!!!7715589.java!!!	createPreferenceScreen(inout context : Context) : PreferenceScreen
        final PreferenceScreen preferenceScreen = new PreferenceScreen(context, null);
        preferenceScreen.onAttachedToHierarchy(this);
        return preferenceScreen;
!!!7715717.java!!!	getNextId() : long
        synchronized (this) {
            return mNextId++;
        }
!!!7715845.java!!!	getSharedPreferencesName() : String
        return mSharedPreferencesName;
!!!7715973.java!!!	setSharedPreferencesName(in sharedPreferencesName : String) : void
        mSharedPreferencesName = sharedPreferencesName;
        mSharedPreferences = null;
!!!7716101.java!!!	getSharedPreferencesMode() : int
        return mSharedPreferencesMode;
!!!7716229.java!!!	setSharedPreferencesMode(in sharedPreferencesMode : int) : void
        mSharedPreferencesMode = sharedPreferencesMode;
        mSharedPreferences = null;
!!!7716357.java!!!	setStorageDefault() : void
        mStorage = STORAGE_DEFAULT;
        mSharedPreferences = null;
!!!7716485.java!!!	setStorageDeviceProtected() : void
        mStorage = STORAGE_DEVICE_PROTECTED;
        mSharedPreferences = null;
!!!7716613.java!!!	setStorageCredentialProtected() : void
        mStorage = STORAGE_CREDENTIAL_PROTECTED;
        mSharedPreferences = null;
!!!7716741.java!!!	isStorageDefault() : boolean
        return mStorage == STORAGE_DEFAULT;
!!!7716869.java!!!	isStorageDeviceProtected() : boolean
        return mStorage == STORAGE_DEVICE_PROTECTED;
!!!7716997.java!!!	isStorageCredentialProtected() : boolean
        return mStorage == STORAGE_CREDENTIAL_PROTECTED;
!!!7717125.java!!!	getSharedPreferences() : SharedPreferences
        if (mPreferenceDataStore != null) {
            return null;
        }

        if (mSharedPreferences == null) {
            final Context storageContext;
            switch (mStorage) {
                case STORAGE_DEVICE_PROTECTED:
                    storageContext = mContext.createDeviceProtectedStorageContext();
                    break;
                case STORAGE_CREDENTIAL_PROTECTED:
                    storageContext = mContext.createCredentialProtectedStorageContext();
                    break;
                default:
                    storageContext = mContext;
                    break;
            }

            mSharedPreferences = storageContext.getSharedPreferences(mSharedPreferencesName,
                    mSharedPreferencesMode);
        }

        return mSharedPreferences;
!!!7717253.java!!!	getDefaultSharedPreferences(inout context : Context) : SharedPreferences
        return context.getSharedPreferences(getDefaultSharedPreferencesName(context),
                getDefaultSharedPreferencesMode());
!!!7717381.java!!!	getDefaultSharedPreferencesName(inout context : Context) : String
        return context.getPackageName() + "_preferences";
!!!7717509.java!!!	getDefaultSharedPreferencesMode() : int
        return Context.MODE_PRIVATE;
!!!7717637.java!!!	getPreferenceScreen() : PreferenceScreen
        return mPreferenceScreen;
!!!7717765.java!!!	setPreferences(inout preferenceScreen : PreferenceScreen) : boolean
        if (preferenceScreen != mPreferenceScreen) {
            mPreferenceScreen = preferenceScreen;
            return true;
        }

        return false;
!!!7717893.java!!!	findPreference(inout key : CharSequence) : Preference
        if (mPreferenceScreen == null) {
            return null;
        }

        return mPreferenceScreen.findPreference(key);
!!!7718021.java!!!	setDefaultValues(inout context : Context, in resId : int, inout readAgain : boolean) : void

        // Use the default shared preferences name and mode
        setDefaultValues(context, getDefaultSharedPreferencesName(context),
                getDefaultSharedPreferencesMode(), resId, readAgain);
!!!7718149.java!!!	setDefaultValues(inout context : Context, in sharedPreferencesName : String, in sharedPreferencesMode : int, in resId : int, inout readAgain : boolean) : void
        final SharedPreferences defaultValueSp = context.getSharedPreferences(
                KEY_HAS_SET_DEFAULT_VALUES, Context.MODE_PRIVATE);

        if (readAgain || !defaultValueSp.getBoolean(KEY_HAS_SET_DEFAULT_VALUES, false)) {
            final PreferenceManager pm = new PreferenceManager(context);
            pm.setSharedPreferencesName(sharedPreferencesName);
            pm.setSharedPreferencesMode(sharedPreferencesMode);
            pm.inflateFromResource(context, resId, null);

            SharedPreferences.Editor editor =
                    defaultValueSp.edit().putBoolean(KEY_HAS_SET_DEFAULT_VALUES, true);
            try {
                editor.apply();
            } catch (AbstractMethodError unused) {
                // The app injected its own pre-Gingerbread
                // SharedPreferences.Editor implementation without
                // an apply method.
                editor.commit();
            }
        }
!!!7718277.java!!!	getEditor() : SharedPreferences::Editor
        if (mPreferenceDataStore != null) {
            return null;
        }

        if (mNoCommit) {
            if (mEditor == null) {
                mEditor = getSharedPreferences().edit();
            }

            return mEditor;
        } else {
            return getSharedPreferences().edit();
        }
!!!7718405.java!!!	shouldCommit() : boolean
        return !mNoCommit;
!!!7718533.java!!!	setNoCommit(inout noCommit : boolean) : void
        if (!noCommit && mEditor != null) {
            try {
                mEditor.apply();
            } catch (AbstractMethodError unused) {
                // The app injected its own pre-Gingerbread
                // SharedPreferences.Editor implementation without
                // an apply method.
                mEditor.commit();
            }
        }
        mNoCommit = noCommit;
!!!7718661.java!!!	getActivity() : Activity
        return mActivity;
!!!7718789.java!!!	getContext() : Context
        return mContext;
!!!7718917.java!!!	registerOnActivityResultListener(inout listener : PreferenceManager::OnActivityResultListener) : void
        synchronized (this) {
            if (mActivityResultListeners == null) {
                mActivityResultListeners = new ArrayList<OnActivityResultListener>();
            }

            if (!mActivityResultListeners.contains(listener)) {
                mActivityResultListeners.add(listener);
            }
        }
!!!7719045.java!!!	unregisterOnActivityResultListener(inout listener : PreferenceManager::OnActivityResultListener) : void
        synchronized (this) {
            if (mActivityResultListeners != null) {
                mActivityResultListeners.remove(listener);
            }
        }
!!!7719173.java!!!	dispatchActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        List<OnActivityResultListener> list;

        synchronized (this) {
            if (mActivityResultListeners == null) return;
            list = new ArrayList<OnActivityResultListener>(mActivityResultListeners);
        }

        final int N = list.size();
        for (int i = 0; i < N; i++) {
            if (list.get(i).onActivityResult(requestCode, resultCode, data)) {
                break;
            }
        }
!!!7719301.java!!!	registerOnActivityStopListener(inout listener : PreferenceManager::OnActivityStopListener) : void
        synchronized (this) {
            if (mActivityStopListeners == null) {
                mActivityStopListeners = new ArrayList<OnActivityStopListener>();
            }

            if (!mActivityStopListeners.contains(listener)) {
                mActivityStopListeners.add(listener);
            }
        }
!!!7719429.java!!!	unregisterOnActivityStopListener(inout listener : PreferenceManager::OnActivityStopListener) : void
        synchronized (this) {
            if (mActivityStopListeners != null) {
                mActivityStopListeners.remove(listener);
            }
        }
!!!7719557.java!!!	dispatchActivityStop() : void
        List<OnActivityStopListener> list;

        synchronized (this) {
            if (mActivityStopListeners == null) return;
            list = new ArrayList<OnActivityStopListener>(mActivityStopListeners);
        }

        final int N = list.size();
        for (int i = 0; i < N; i++) {
            list.get(i).onActivityStop();
        }
!!!7719685.java!!!	registerOnActivityDestroyListener(inout listener : PreferenceManager::OnActivityDestroyListener) : void
        synchronized (this) {
            if (mActivityDestroyListeners == null) {
                mActivityDestroyListeners = new ArrayList<OnActivityDestroyListener>();
            }

            if (!mActivityDestroyListeners.contains(listener)) {
                mActivityDestroyListeners.add(listener);
            }
        }
!!!7719813.java!!!	unregisterOnActivityDestroyListener(inout listener : PreferenceManager::OnActivityDestroyListener) : void
        synchronized (this) {
            if (mActivityDestroyListeners != null) {
                mActivityDestroyListeners.remove(listener);
            }
        }
!!!7719941.java!!!	dispatchActivityDestroy() : void
        List<OnActivityDestroyListener> list = null;

        synchronized (this) {
            if (mActivityDestroyListeners != null) {
                list = new ArrayList<OnActivityDestroyListener>(mActivityDestroyListeners);
            }
        }

        if (list != null) {
            final int N = list.size();
            for (int i = 0; i < N; i++) {
                list.get(i).onActivityDestroy();
            }
        }

        // Dismiss any PreferenceScreens still showing
        dismissAllScreens();
!!!7720069.java!!!	getNextRequestCode() : int
        synchronized (this) {
            return mNextRequestCode++;
        }
!!!7720197.java!!!	addPreferencesScreen(inout screen : DialogInterface) : void
        synchronized (this) {

            if (mPreferencesScreens == null) {
                mPreferencesScreens = new ArrayList<DialogInterface>();
            }

            mPreferencesScreens.add(screen);
        }
!!!7720325.java!!!	removePreferencesScreen(inout screen : DialogInterface) : void
        synchronized (this) {

            if (mPreferencesScreens == null) {
                return;
            }

            mPreferencesScreens.remove(screen);
        }
!!!7720453.java!!!	dispatchNewIntent(inout intent : Intent) : void
        dismissAllScreens();
!!!7720581.java!!!	dismissAllScreens() : void
        // Remove any of the previously shown preferences screens
        ArrayList<DialogInterface> screensToDismiss;

        synchronized (this) {

            if (mPreferencesScreens == null) {
                return;
            }

            screensToDismiss = new ArrayList<DialogInterface>(mPreferencesScreens);
            mPreferencesScreens.clear();
        }

        for (int i = screensToDismiss.size() - 1; i >= 0; i--) {
            screensToDismiss.get(i).dismiss();
        }
!!!7720709.java!!!	setOnPreferenceTreeClickListener(inout listener : PreferenceManager::OnPreferenceTreeClickListener) : void
        mOnPreferenceTreeClickListener = listener;
!!!7720837.java!!!	getOnPreferenceTreeClickListener() : PreferenceManager::OnPreferenceTreeClickListener
        return mOnPreferenceTreeClickListener;
