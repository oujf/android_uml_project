format 214
"android" // source::frameworks::av::media::libcpustats::include::cpustats::android
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/media/libcpustats/include/cpustats/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/media/libcpustats/include/cpustats/"
  cpp_namespace "android"
  classview 155269 "cpustats"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 307333 "ThreadCpuUsage"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Track CPU usage for the current thread.
 Units are in per-thread CPU ns, as reported by
 clock_gettime(CLOCK_THREAD_CPUTIME_ID).  Simple usage: for cyclic
 threads where you want to measure the execution time of the whole
 cycle, just call sampleAndEnable() at the start of each cycle.
 For acyclic threads, or for cyclic threads where you want to measure/track
 only part of each cycle, call enable(), disable(), and/or setEnabled()
 to demarcate the region(s) of interest, and then call sample() periodically.
 This class is not thread-safe for concurrent calls from multiple threads;
 the methods of this class may only be called by the current thread
 which constructed the object."
      operation 799365 "ThreadCpuUsage"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        mIsEnabled(false),
        mWasEverEnabled(false),
        mAccumulator(0),
        // mPreviousTs
        // mMonotonicTs
        mMonotonicKnown(false)
        {
            (void) pthread_once(&sOnceControl, &init);
            for (int i = 0; i < sKernelMax; ++i) {
                mCurrentkHz[i] = (uint32_t) ~0;   // unknown
            }
        };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 799493 "~ThreadCpuUsage"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} { };
"
	
	
	
	
      end

      operation 799621 "isEnabled"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIsEnabled; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Return whether currently tracking CPU usage by current thread"
      end

      operation 799749 "enable"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return setEnabled(true); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Enable tracking of CPU usage by current thread;
 any CPU used from this point forward will be tracked.
 Returns the previous enabled status."
      end

      operation 799877 "disable"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return setEnabled(false); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Disable tracking of CPU usage by current thread;
 any CPU used from this point forward will be ignored.
 Returns the previous enabled status."
      end

      operation 800005 "setEnabled"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "isEnabled" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Set the enabled status and return the previous enabled status.
 This method is intended to be used for safe nested enable/disabling."
      end

      operation 800133 "sampleAndEnable"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param inout name "ns" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Add a sample point, and also enable tracking if needed.
 If tracking has never been enabled, then this call enables tracking but
 does _not_ add a sample -- it is not possible to add a sample the
 first time because there is no previous point to subtract from.
 Otherwise, if tracking is enabled,
 then adds a sample for tracked CPU ns since the previous
 sample, or since the first call to sampleAndEnable(), enable(), or
 setEnabled(true).  If there was a previous sample but tracking is
 now disabled, then adds a sample for the tracked CPU ns accumulated
 up until the most recent disable(), resets this accumulator, and then
 enables tracking.  Calling this method rather than enable() followed
 by sample() avoids a race condition for the first sample.
 Returns true if the sample 'ns' is valid, or false if invalid.
 Note that 'ns' is an output parameter passed by reference.
 The caller does not need to initialize this variable.
 The units are CPU nanoseconds consumed by current thread."
      end

      operation 800261 "sample"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param inout name "ns" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Add a sample point, but do not
 change the tracking enabled status.  If tracking has either never been
 enabled, or has never been enabled since the last sample, then log a warning
 and don't add sample.  Otherwise, adds a sample for tracked CPU ns since
 the previous sample or since the first call to sampleAndEnable(),
 enable(), or setEnabled(true) if no previous sample.
 Returns true if the sample is valid, or false if invalid.
 Note that 'ns' is an output parameter passed by reference.
 The caller does not need to initialize this variable.
 The units are CPU nanoseconds consumed by current thread."
      end

      operation 800389 "elapsed"
	preserve_cpp_body_indent const public explicit_return_type "long long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Return the elapsed delta wall clock ns since initial enable or reset,
 as reported by clock_gettime(CLOCK_MONOTONIC)."
      end

      operation 800517 "resetElapsed"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Reset elapsed wall clock.  Has no effect on tracking or accumulator."
      end

      operation 800645 "getCpukHz"
	preserve_cpp_body_indent public explicit_return_type "uint32_t"
	nparams 1
	  param in name "cpuNum" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Return current clock frequency for specified CPU, in kHz.
 You can get your CPU number using sched_getcpu(2).  Note that, unless CPU affinity
 has been configured appropriately, the CPU number can change.
 Also note that, unless the CPU governor has been configured appropriately,
 the CPU frequency can change.  And even if the CPU frequency is locked down
 to a particular value, that the frequency might still be adjusted
 to prevent thermal overload.  Therefore you should poll for your thread's
 current CPU number and clock frequency periodically."
      end

      attribute 571013 "mIsEnabled"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " whether tracking is currently enabled"
      end

      attribute 571141 "mWasEverEnabled"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " whether tracking was ever enabled"
      end

      attribute 571269 "mAccumulator"
	private explicit_type "long long"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " accumulated thread CPU time since last sample, in ns"
      end

      attribute 571397 "mPreviousTs"
	private explicit_type "timespec"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " most recent thread CPU time, valid only if mIsEnabled is true"
      end

      attribute 571525 "mMonotonicTs"
	private explicit_type "timespec"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " most recent monotonic time"
      end

      attribute 571653 "mMonotonicKnown"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " whether mMonotonicTs has been set"
      end

      attribute 571781 "MAX_CPU"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  8"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 571909 "sScalingFds"
	class_attribute private explicit_type "int"
	multiplicity "[MAX_CPU]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " file descriptor per CPU for reading scaling_cur_freq"
      end

      attribute 572037 "mCurrentkHz"
	private explicit_type "uint32_t"
	multiplicity "[MAX_CPU]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " current CPU frequency in kHz, not static to avoid a race"
      end

      attribute 572165 "sOnceControl"
	class_attribute private explicit_type "pthread_once_t"
	init_value "= PTHREAD_ONCE_INIT"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 572293 "sKernelMax"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " like MAX_CPU, but determined at runtime == cpu/kernel_max + 1"
      end

      operation 800773 "init"
	class_operation preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//static

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      attribute 572421 "sMutex"
	class_attribute private explicit_type "pthread_mutex_t"
	init_value "= PTHREAD_MUTEX_INITIALIZER"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " called once at first ThreadCpuUsage construction
 protects sScalingFds[] after initialization"
      end
    end
  end

  deploymentview 155653 "android"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 194949 "ThreadCpuUsage"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 307333 // ThreadCpuUsage
      end
    end
  end
end
