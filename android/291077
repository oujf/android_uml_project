format 214
"editor" // source::frameworks::native::include::media::editor
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/include/media/editor/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/include/media/editor/"
  classview 275205 "editor"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 2048389 "II420ColorConverter"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 8822917 "getDecoderOutputFormat"
	public explicit_type "/* * getDecoderOutputFormat * Returns the color format (OMX_COLOR_FORMATTYPE) of the decoder output. * If it is I420 (OMX_COLOR_FormatYUV420Planar), no conversion is needed, * and convertDecoderOutputToI420() can be a no-op. */ int (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}

    /*
     * getDecoderOutputFormat
     * Returns the color format (OMX_COLOR_FORMATTYPE) of the decoder output.
     * If it is I420 (OMX_COLOR_FormatYUV420Planar), no conversion is needed,
     * and convertDecoderOutputToI420() can be a no-op.
     */
    int (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "getDecoderOutputFormat
Returns the color format (OMX_COLOR_FORMATTYPE) of the decoder output.
If it is I420 (OMX_COLOR_FormatYUV420Planar), no conversion is needed,
and convertDecoderOutputToI420() can be a no-op.

"
      end

      attribute 8823045 "convertDecoderOutputToI420"
	public explicit_type "/* * convertDecoderOutputToI420 * @Desc Converts from the decoder output format to I420 format. * @note Caller (e.g. VideoEditor) owns the buffers * @param decoderBits (IN) Pointer to the buffer contains decoder output * @param decoderWidth (IN) Buffer width, as reported by the decoder * metadata (kKeyWidth) * @param decoderHeight (IN) Buffer height, as reported by the decoder * metadata (kKeyHeight) * @param decoderRect (IN) The rectangle of the actual frame, as * reported by decoder metadata (kKeyCropRect) * @param dstBits (OUT) Pointer to the output I420 buffer * @return -1 Any error * @return 0 No Error */ int (*)( void* decoderBits, int decoderWidth, int decoderHeight, ARect decoderRect, void* dstBits)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * convertDecoderOutputToI420
     * @Desc     Converts from the decoder output format to I420 format.
     * @note     Caller (e.g. VideoEditor) owns the buffers
     * @param    decoderBits   (IN) Pointer to the buffer contains decoder output
     * @param    decoderWidth  (IN) Buffer width, as reported by the decoder
     *                              metadata (kKeyWidth)
     * @param    decoderHeight (IN) Buffer height, as reported by the decoder
     *                              metadata (kKeyHeight)
     * @param    decoderRect   (IN) The rectangle of the actual frame, as
     *                              reported by decoder metadata (kKeyCropRect)
     * @param    dstBits      (OUT) Pointer to the output I420 buffer
     * @return   -1 Any error
     * @return   0  No Error
     */
    int (*${name})(
        void* decoderBits, int decoderWidth, int decoderHeight,
        ARect decoderRect, void* dstBits)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "convertDecoderOutputToI420
@Desc     Converts from the decoder output format to I420 format.
@note     Caller (e.g. VideoEditor) owns the buffers
@param    decoderBits   (IN) Pointer to the buffer contains decoder output
@param    decoderWidth  (IN) Buffer width, as reported by the decoder
                             metadata (kKeyWidth)
@param    decoderHeight (IN) Buffer height, as reported by the decoder
                             metadata (kKeyHeight)
@param    decoderRect   (IN) The rectangle of the actual frame, as
                             reported by decoder metadata (kKeyCropRect)
@param    dstBits      (OUT) Pointer to the output I420 buffer
@return   -1 Any error
@return   0  No Error

"
      end

      attribute 8823173 "getEncoderInputFormat"
	public explicit_type "/* * getEncoderIntputFormat * Returns the color format (OMX_COLOR_FORMATTYPE) of the encoder input. * If it is I420 (OMX_COLOR_FormatYUV420Planar), no conversion is needed, * and convertI420ToEncoderInput() and getEncoderInputBufferInfo() can * be no-ops. */ int (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * getEncoderIntputFormat
     * Returns the color format (OMX_COLOR_FORMATTYPE) of the encoder input.
     * If it is I420 (OMX_COLOR_FormatYUV420Planar), no conversion is needed,
     * and convertI420ToEncoderInput() and getEncoderInputBufferInfo() can
     * be no-ops.
     */
    int (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "getEncoderIntputFormat
Returns the color format (OMX_COLOR_FORMATTYPE) of the encoder input.
If it is I420 (OMX_COLOR_FormatYUV420Planar), no conversion is needed,
and convertI420ToEncoderInput() and getEncoderInputBufferInfo() can
be no-ops.

"
      end

      attribute 8823301 "convertI420ToEncoderInput"
	public explicit_type "/* convertI420ToEncoderInput * @Desc This function converts from I420 to the encoder input format * @note Caller (e.g. VideoEditor) owns the buffers * @param srcBits (IN) Pointer to the input I420 buffer * @param srcWidth (IN) Width of the I420 frame * @param srcHeight (IN) Height of the I420 frame * @param encoderWidth (IN) Encoder buffer width, as calculated by * getEncoderBufferInfo() * @param encoderHeight (IN) Encoder buffer height, as calculated by * getEncoderBufferInfo() * @param encoderRect (IN) Rect coordinates of the actual frame inside * the encoder buffer, as calculated by * getEncoderBufferInfo(). * @param encoderBits (OUT) Pointer to the output buffer. The size of * this buffer is calculated by * getEncoderBufferInfo() * @return -1 Any error * @return 0 No Error */ int (*)( void* srcBits, int srcWidth, int srcHeight, int encoderWidth, int encoderHeight, ARect encoderRect, void* encoderBits)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* convertI420ToEncoderInput
     * @Desc     This function converts from I420 to the encoder input format
     * @note     Caller (e.g. VideoEditor) owns the buffers
     * @param    srcBits       (IN) Pointer to the input I420 buffer
     * @param    srcWidth      (IN) Width of the I420 frame
     * @param    srcHeight     (IN) Height of the I420 frame
     * @param    encoderWidth  (IN) Encoder buffer width, as calculated by
     *                              getEncoderBufferInfo()
     * @param    encoderHeight (IN) Encoder buffer height, as calculated by
     *                              getEncoderBufferInfo()
     * @param    encoderRect   (IN) Rect coordinates of the actual frame inside
     *                              the encoder buffer, as calculated by
     *                              getEncoderBufferInfo().
     * @param    encoderBits  (OUT) Pointer to the output buffer. The size of
     *                              this buffer is calculated by
     *                              getEncoderBufferInfo()
     * @return   -1 Any error
     * @return   0  No Error
     */
    int (*${name})(
        void* srcBits, int srcWidth, int srcHeight,
        int encoderWidth, int encoderHeight, ARect encoderRect,
        void* encoderBits)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " convertI420ToEncoderInput
@Desc     This function converts from I420 to the encoder input format
@note     Caller (e.g. VideoEditor) owns the buffers
@param    srcBits       (IN) Pointer to the input I420 buffer
@param    srcWidth      (IN) Width of the I420 frame
@param    srcHeight     (IN) Height of the I420 frame
@param    encoderWidth  (IN) Encoder buffer width, as calculated by
                             getEncoderBufferInfo()
@param    encoderHeight (IN) Encoder buffer height, as calculated by
                             getEncoderBufferInfo()
@param    encoderRect   (IN) Rect coordinates of the actual frame inside
                             the encoder buffer, as calculated by
                             getEncoderBufferInfo().
@param    encoderBits  (OUT) Pointer to the output buffer. The size of
                             this buffer is calculated by
                             getEncoderBufferInfo()
@return   -1 Any error
@return   0  No Error

"
      end

      attribute 8823429 "getEncoderInputBufferInfo"
	public explicit_type "/* getEncoderInputBufferInfo * @Desc This function returns metadata for the encoder input buffer * based on the actual I420 frame width and height. * @note This API should be be used to obtain the necessary information * before calling convertI420ToEncoderInput(). * VideoEditor knows only the width and height of the I420 buffer, * but it also needs know the width, height, and size of the * encoder input buffer. The encoder input buffer width and height * are used to set the metadata for the encoder. * @param srcWidth (IN) Width of the I420 frame * @param srcHeight (IN) Height of the I420 frame * @param encoderWidth (OUT) Encoder buffer width needed * @param encoderHeight (OUT) Encoder buffer height needed * @param encoderRect (OUT) Rect coordinates of the actual frame inside * the encoder buffer * @param encoderBufferSize (OUT) The size of the buffer that need to be * allocated by the caller before invoking * convertI420ToEncoderInput(). * @return -1 Any error * @return 0 No Error */ int (*)( int srcWidth, int srcHeight, int* encoderWidth, int* encoderHeight, ARect* encoderRect, int* encoderBufferSize)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* getEncoderInputBufferInfo
     * @Desc     This function returns metadata for the encoder input buffer
     *           based on the actual I420 frame width and height.
     * @note     This API should be be used to obtain the necessary information
     *           before calling convertI420ToEncoderInput().
     *           VideoEditor knows only the width and height of the I420 buffer,
     *           but it also needs know the width, height, and size of the
     *           encoder input buffer. The encoder input buffer width and height
     *           are used to set the metadata for the encoder.
     * @param    srcWidth      (IN) Width of the I420 frame
     * @param    srcHeight     (IN) Height of the I420 frame
     * @param    encoderWidth  (OUT) Encoder buffer width needed
     * @param    encoderHeight (OUT) Encoder buffer height needed
     * @param    encoderRect   (OUT) Rect coordinates of the actual frame inside
     *                               the encoder buffer
     * @param    encoderBufferSize  (OUT) The size of the buffer that need to be
     *                              allocated by the caller before invoking
     *                              convertI420ToEncoderInput().
     * @return   -1 Any error
     * @return   0  No Error
     */
    int (*${name})(
        int srcWidth, int srcHeight,
        int* encoderWidth, int* encoderHeight,
        ARect* encoderRect, int* encoderBufferSize)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " getEncoderInputBufferInfo
@Desc     This function returns metadata for the encoder input buffer
          based on the actual I420 frame width and height.
@note     This API should be be used to obtain the necessary information
          before calling convertI420ToEncoderInput().
          VideoEditor knows only the width and height of the I420 buffer,
          but it also needs know the width, height, and size of the
          encoder input buffer. The encoder input buffer width and height
          are used to set the metadata for the encoder.
@param    srcWidth      (IN) Width of the I420 frame
@param    srcHeight     (IN) Height of the I420 frame
@param    encoderWidth  (OUT) Encoder buffer width needed
@param    encoderHeight (OUT) Encoder buffer height needed
@param    encoderRect   (OUT) Rect coordinates of the actual frame inside
                              the encoder buffer
@param    encoderBufferSize  (OUT) The size of the buffer that need to be
                             allocated by the caller before invoking
                             convertI420ToEncoderInput().
@return   -1 Any error
@return   0  No Error

"
      end
    end
  end

  deploymentview 238597 "editor"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1004293 "II420ColorConverter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 2048389 // II420ColorConverter
      end
    end
  end
end
