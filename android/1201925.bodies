class MarshalerPrimitive
!!!6759813.java!!!	MarshalerPrimitive(inout typeReference : TypeReference, in nativeType : int)
            super(MarshalQueryablePrimitive.this, typeReference, nativeType);

            // Turn primitives into wrappers, otherwise int.class.cast(Integer) will fail
            mClass = wrapClassIfPrimitive((Class<T>)typeReference.getRawType());
!!!6759941.java!!!	unmarshal(inout buffer : ByteBuffer) : T
            return mClass.cast(unmarshalObject(buffer));
!!!6760069.java!!!	calculateMarshalSize(inout value : T) : int
            return getPrimitiveTypeSize(mNativeType);
!!!6760197.java!!!	marshal(inout value : T, inout buffer : ByteBuffer) : void
            if (value instanceof Integer) {
                checkNativeTypeEquals(TYPE_INT32, mNativeType);
                final int val = (Integer) value;
                marshalPrimitive(val, buffer);
            } else if (value instanceof Float) {
                checkNativeTypeEquals(TYPE_FLOAT, mNativeType);
                final float val = (Float) value;
                marshalPrimitive(val, buffer);
            } else if (value instanceof Long) {
                checkNativeTypeEquals(TYPE_INT64, mNativeType);
                final long val = (Long) value;
                marshalPrimitive(val, buffer);
            } else if (value instanceof Rational) {
                checkNativeTypeEquals(TYPE_RATIONAL, mNativeType);
                marshalPrimitive((Rational) value, buffer);
            } else if (value instanceof Double) {
                checkNativeTypeEquals(TYPE_DOUBLE, mNativeType);
                final double val = (Double) value;
                marshalPrimitive(val, buffer);
            } else if (value instanceof Byte) {
                checkNativeTypeEquals(TYPE_BYTE, mNativeType);
                final byte val = (Byte) value;
                marshalPrimitive(val, buffer);
            } else {
                throw new UnsupportedOperationException(
                        "Can't marshal managed type " + mTypeReference);
            }
!!!6760325.java!!!	marshalPrimitive(in value : int, inout buffer : ByteBuffer) : void
            buffer.putInt(value);
!!!6760453.java!!!	marshalPrimitive(in value : float, inout buffer : ByteBuffer) : void
            buffer.putFloat(value);
!!!6760581.java!!!	marshalPrimitive(in value : double, inout buffer : ByteBuffer) : void
            buffer.putDouble(value);
!!!6760709.java!!!	marshalPrimitive(in value : long, inout buffer : ByteBuffer) : void
            buffer.putLong(value);
!!!6760837.java!!!	marshalPrimitive(inout value : Rational, inout buffer : ByteBuffer) : void
            buffer.putInt(value.getNumerator());
            buffer.putInt(value.getDenominator());
!!!6760965.java!!!	marshalPrimitive(in value : byte, inout buffer : ByteBuffer) : void
            buffer.put(value);
!!!6761093.java!!!	unmarshalObject(inout buffer : ByteBuffer) : Object
            switch (mNativeType) {
                case TYPE_INT32:
                    return buffer.getInt();
                case TYPE_FLOAT:
                    return buffer.getFloat();
                case TYPE_INT64:
                    return buffer.getLong();
                case TYPE_RATIONAL:
                    int numerator = buffer.getInt();
                    int denominator = buffer.getInt();
                    return new Rational(numerator, denominator);
                case TYPE_DOUBLE:
                    return buffer.getDouble();
                case TYPE_BYTE:
                    return buffer.get(); // getByte
                default:
                    throw new UnsupportedOperationException(
                            "Can't unmarshal native type " + mNativeType);
            }
!!!6761221.java!!!	getNativeSize() : int
            return getPrimitiveTypeSize(mNativeType);
