class UserManager
!!!7626373.java!!!	get(inout context : Context) : UserManager
        return (UserManager) context.getSystemService(Context.USER_SERVICE);
!!!7626501.java!!!	UserManager(inout context : Context, inout service : IUserManager)
        mService = service;
        mContext = context.getApplicationContext();
!!!7626629.java!!!	supportsMultipleUsers() : boolean
        return getMaxSupportedUsers() > 1
                && SystemProperties.getBoolean("fw.show_multiuserui",
                Resources.getSystem().getBoolean(R.bool.config_enableMultiUserUI));
!!!7626757.java!!!	isSplitSystemUser() : boolean
        return RoSystemProperties.FW_SYSTEM_USER_SPLIT;
!!!7626885.java!!!	isGuestUserEphemeral() : boolean
        return Resources.getSystem()
                .getBoolean(com.android.internal.R.bool.config_guestUserEphemeral);
!!!7627013.java!!!	canSwitchUsers() : boolean
        boolean allowUserSwitchingWhenSystemUserLocked = Settings.Global.getInt(
                mContext.getContentResolver(),
                Settings.Global.ALLOW_USER_SWITCHING_WHEN_SYSTEM_USER_LOCKED, 0) != 0;
        boolean isSystemUserUnlocked = isUserUnlocked(UserHandle.SYSTEM);
        boolean inCall = TelephonyManager.getDefault().getCallState()
                != TelephonyManager.CALL_STATE_IDLE;
        return (allowUserSwitchingWhenSystemUserLocked || isSystemUserUnlocked) && !inCall;
!!!7627141.java!!!	getUserHandle() : int
        return UserHandle.myUserId();
!!!7627269.java!!!	getUserName() : String
        try {
            return mService.getUserInfo(getUserHandle()).name;
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7627397.java!!!	isUserNameSet() : boolean
        try {
            return mService.isUserNameSet(getUserHandle());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7627525.java!!!	isUserAGoat() : boolean
        return mContext.getPackageManager()
                .isPackageAvailable("com.coffeestainstudios.goatsimulator");
!!!7627653.java!!!	isPrimaryUser() : boolean
        UserInfo user = getUserInfo(UserHandle.myUserId());
        return user != null && user.isPrimary();
!!!7627781.java!!!	isSystemUser() : boolean
        return UserHandle.myUserId() == UserHandle.USER_SYSTEM;
!!!7627909.java!!!	isAdminUser() : boolean
        return isUserAdmin(UserHandle.myUserId());
!!!7628037.java!!!	isUserAdmin(in userId : int) : boolean
        UserInfo user = getUserInfo(userId);
        return user != null && user.isAdmin();
!!!7628165.java!!!	isLinkedUser() : boolean
        try {
            return mService.isRestricted();
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7628293.java!!!	canHaveRestrictedProfile(in userId : int) : boolean
        try {
            return mService.canHaveRestrictedProfile(userId);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7628421.java!!!	isGuestUser(in id : int) : boolean
        UserInfo user = getUserInfo(id);
        return user != null && user.isGuest();
!!!7628549.java!!!	isGuestUser() : boolean
        UserInfo user = getUserInfo(UserHandle.myUserId());
        return user != null && user.isGuest();
!!!7628677.java!!!	isDemoUser() : boolean
        try {
            return mService.isDemoUser(UserHandle.myUserId());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7628805.java!!!	isManagedProfile() : boolean
        // No need for synchronization.  Once it becomes non-null, it'll be non-null forever.
        // Worst case we might end up calling the AIDL method multiple times but that's fine.
        if (mIsManagedProfileCached != null) {
            return mIsManagedProfileCached;
        }
        try {
            mIsManagedProfileCached = mService.isManagedProfile(UserHandle.myUserId());
            return mIsManagedProfileCached;
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7628933.java!!!	isManagedProfile(in userId : int) : boolean
        if (userId == UserHandle.myUserId()) {
            return isManagedProfile();
        }
        try {
            return mService.isManagedProfile(userId);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7629061.java!!!	getManagedProfileBadge(in userId : int) : int
        try {
            return mService.getManagedProfileBadge(userId);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7629189.java!!!	isEphemeralUser() : boolean
        return isUserEphemeral(UserHandle.myUserId());
!!!7629317.java!!!	isUserEphemeral(in userId : int) : boolean
        final UserInfo user = getUserInfo(userId);
        return user != null && user.isEphemeral();
!!!7629445.java!!!	isUserRunning(inout user : UserHandle) : boolean
        return isUserRunning(user.getIdentifier());
!!!7629573.java!!!	isUserRunning(in userId : int) : boolean
        try {
            return mService.isUserRunning(userId);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7629701.java!!!	isUserRunningOrStopping(inout user : UserHandle) : boolean
        try {
            // TODO: reconcile stopped vs stopping?
            return ActivityManager.getService().isUserRunning(
                    user.getIdentifier(), ActivityManager.FLAG_OR_STOPPED);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7629829.java!!!	isUserUnlocked() : boolean
        return isUserUnlocked(Process.myUserHandle());
!!!7629957.java!!!	isUserUnlocked(inout user : UserHandle) : boolean
        return isUserUnlocked(user.getIdentifier());
!!!7630085.java!!!	isUserUnlocked(in userId : int) : boolean
        try {
            return mService.isUserUnlocked(userId);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7630213.java!!!	isUserUnlockingOrUnlocked(inout user : UserHandle) : boolean
        return isUserUnlockingOrUnlocked(user.getIdentifier());
!!!7630341.java!!!	isUserUnlockingOrUnlocked(in userId : int) : boolean
        try {
            return mService.isUserUnlockingOrUnlocked(userId);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7630469.java!!!	getUserInfo(in userHandle : int) : UserInfo
        try {
            return mService.getUserInfo(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7630597.java!!!	getUserRestrictionSource(in restrictionKey : String, inout userHandle : UserHandle) : int
        try {
            return mService.getUserRestrictionSource(restrictionKey, userHandle.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7630725.java!!!	getUserRestrictionSources(in restrictionKey : String, inout userHandle : UserHandle) : UserManager::EnforcingUser
        try {
            return mService.getUserRestrictionSources(restrictionKey, userHandle.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7630853.java!!!	getUserRestrictions() : Bundle
        return getUserRestrictions(Process.myUserHandle());
!!!7630981.java!!!	getUserRestrictions(inout userHandle : UserHandle) : Bundle
        try {
            return mService.getUserRestrictions(userHandle.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7631109.java!!!	hasBaseUserRestriction(in restrictionKey : String, inout userHandle : UserHandle) : boolean
        try {
            return mService.hasBaseUserRestriction(restrictionKey, userHandle.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7631237.java!!!	setUserRestrictions(inout restrictions : Bundle) : void
        throw new UnsupportedOperationException("This method is no longer supported");
!!!7631365.java!!!	setUserRestrictions(inout restrictions : Bundle, inout userHandle : UserHandle) : void
        throw new UnsupportedOperationException("This method is no longer supported");
!!!7631493.java!!!	setUserRestriction(in key : String, inout value : boolean) : void
        setUserRestriction(key, value, Process.myUserHandle());
!!!7631621.java!!!	setUserRestriction(in key : String, inout value : boolean, inout userHandle : UserHandle) : void
        try {
            mService.setUserRestriction(key, value, userHandle.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7631749.java!!!	hasUserRestriction(in restrictionKey : String) : boolean
        return hasUserRestriction(restrictionKey, Process.myUserHandle());
!!!7631877.java!!!	hasUserRestriction(in restrictionKey : String, inout userHandle : UserHandle) : boolean
        try {
            return mService.hasUserRestriction(restrictionKey,
                    userHandle.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7632005.java!!!	getSerialNumberForUser(inout user : UserHandle) : long
        return getUserSerialNumber(user.getIdentifier());
!!!7632133.java!!!	getUserForSerialNumber(in serialNumber : long) : UserHandle
        int ident = getUserHandle((int) serialNumber);
        return ident >= 0 ? new UserHandle(ident) : null;
!!!7632261.java!!!	createUser(in name : String, in flags : int) : UserInfo
        UserInfo user = null;
        try {
            user = mService.createUser(name, flags);
            // TODO: Keep this in sync with
            // UserManagerService.LocalService.createUserEvenWhenDisallowed
            if (user != null && !user.isAdmin()) {
                mService.setUserRestriction(DISALLOW_SMS, true, user.id);
                mService.setUserRestriction(DISALLOW_OUTGOING_CALLS, true, user.id);
            }
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
        return user;
!!!7632389.java!!!	createGuest(inout context : Context, in name : String) : UserInfo
        UserInfo guest = null;
        try {
            guest = mService.createUser(name, UserInfo.FLAG_GUEST);
            if (guest != null) {
                Settings.Secure.putStringForUser(context.getContentResolver(),
                        Settings.Secure.SKIP_FIRST_USE_HINTS, "1", guest.id);
            }
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
        return guest;
!!!7632517.java!!!	createProfileForUser(in name : String, in flags : int, in userHandle : int) : UserInfo
        return createProfileForUser(name, flags, userHandle, null);
!!!7632645.java!!!	createProfileForUser(in name : String, in flags : int, in userHandle : int, inout disallowedPackages : String [[]]) : UserInfo
        try {
            return mService.createProfileForUser(name, flags, userHandle, disallowedPackages);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7632773.java!!!	createProfileForUserEvenWhenDisallowed(in name : String, in flags : int, in userHandle : int, inout disallowedPackages : String [[]]) : UserInfo
        try {
            return mService.createProfileForUserEvenWhenDisallowed(name, flags, userHandle,
                    disallowedPackages);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7632901.java!!!	createRestrictedProfile(in name : String) : UserInfo
        try {
            UserHandle parentUserHandle = Process.myUserHandle();
            UserInfo user = mService.createRestrictedProfile(name,
                    parentUserHandle.getIdentifier());
            if (user != null) {
                AccountManager.get(mContext).addSharedAccountsFromParentUser(parentUserHandle,
                        UserHandle.of(user.id));
            }
            return user;
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7633029.java!!!	createUserCreationIntent(in userName : String, in accountName : String, in accountType : String, inout accountOptions : PersistableBundle) : Intent
        Intent intent = new Intent(ACTION_CREATE_USER);
        if (userName != null) {
            intent.putExtra(EXTRA_USER_NAME, userName);
        }
        if (accountName != null && accountType == null) {
            throw new IllegalArgumentException("accountType must be specified if accountName is "
                    + "specified");
        }
        if (accountName != null) {
            intent.putExtra(EXTRA_USER_ACCOUNT_NAME, accountName);
        }
        if (accountType != null) {
            intent.putExtra(EXTRA_USER_ACCOUNT_TYPE, accountType);
        }
        if (accountOptions != null) {
            intent.putExtra(EXTRA_USER_ACCOUNT_OPTIONS, accountOptions);
        }
        return intent;
!!!7633157.java!!!	getSeedAccountName() : String
        try {
            return mService.getSeedAccountName();
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7633285.java!!!	getSeedAccountType() : String
        try {
            return mService.getSeedAccountType();
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7633413.java!!!	getSeedAccountOptions() : PersistableBundle
        try {
            return mService.getSeedAccountOptions();
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7633541.java!!!	setSeedAccountData(in userId : int, in accountName : String, in accountType : String, inout accountOptions : PersistableBundle) : void
        try {
            mService.setSeedAccountData(userId, accountName, accountType, accountOptions,
                    /* persist= */ true);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7633669.java!!!	clearSeedAccountData() : void
        try {
            mService.clearSeedAccountData();
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7633797.java!!!	markGuestForDeletion(in userHandle : int) : boolean
        try {
            return mService.markGuestForDeletion(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7633925.java!!!	setUserEnabled(in userHandle : int) : void
        try {
            mService.setUserEnabled(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7634053.java!!!	evictCredentialEncryptionKey(in userHandle : int) : void
        try {
            mService.evictCredentialEncryptionKey(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7634181.java!!!	getUserCount() : int
        List<UserInfo> users = getUsers();
        return users != null ? users.size() : 1;
!!!7634309.java!!!	getUsers() : UserInfo
        try {
            return mService.getUsers(false);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7634437.java!!!	getSerialNumbersOfUsers(inout excludeDying : boolean) : long
        try {
            List<UserInfo> users = mService.getUsers(excludeDying);
            long[] result = new long[users.size()];
            for (int i = 0; i < result.length; i++) {
                result[i] = users.get(i).serialNumber;
            }
            return result;
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7634565.java!!!	getUserAccount(in userHandle : int) : String
        try {
            return mService.getUserAccount(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7634693.java!!!	setUserAccount(in userHandle : int, in accountName : String) : void
        try {
            mService.setUserAccount(userHandle, accountName);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7634821.java!!!	getPrimaryUser() : UserInfo
        try {
            return mService.getPrimaryUser();
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7634949.java!!!	canAddMoreUsers() : boolean
        final List<UserInfo> users = getUsers(true);
        final int totalUserCount = users.size();
        int aliveUserCount = 0;
        for (int i = 0; i < totalUserCount; i++) {
            UserInfo user = users.get(i);
            if (!user.isGuest()) {
                aliveUserCount++;
            }
        }
        return aliveUserCount < getMaxSupportedUsers();
!!!7635077.java!!!	canAddMoreManagedProfiles(in userId : int, inout allowedToRemoveOne : boolean) : boolean
        try {
            return mService.canAddMoreManagedProfiles(userId, allowedToRemoveOne);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7635205.java!!!	getProfiles(in userHandle : int) : UserInfo
        try {
            return mService.getProfiles(userHandle, false /* enabledOnly */);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7635333.java!!!	isSameProfileGroup(in userId : int, in otherUserId : int) : boolean
        try {
            return mService.isSameProfileGroup(userId, otherUserId);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7635461.java!!!	getEnabledProfiles(in userHandle : int) : UserInfo
        try {
            return mService.getProfiles(userHandle, true /* enabledOnly */);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7635589.java!!!	getUserProfiles() : UserHandle
        int[] userIds = getProfileIds(UserHandle.myUserId(), true /* enabledOnly */);
        List<UserHandle> result = new ArrayList<>(userIds.length);
        for (int userId : userIds) {
            result.add(UserHandle.of(userId));
        }
        return result;
!!!7635717.java!!!	getProfileIds(in userId : int, inout enabledOnly : boolean) : int
        try {
            return mService.getProfileIds(userId, enabledOnly);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7635845.java!!!	getProfileIdsWithDisabled(in userId : int) : int
        return getProfileIds(userId, false /* enabledOnly */);
!!!7635973.java!!!	getEnabledProfileIds(in userId : int) : int
        return getProfileIds(userId, true /* enabledOnly */);
!!!7636101.java!!!	getCredentialOwnerProfile(in userHandle : int) : int
        try {
            return mService.getCredentialOwnerProfile(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7636229.java!!!	getProfileParent(in userHandle : int) : UserInfo
        try {
            return mService.getProfileParent(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7636357.java!!!	setQuietModeEnabled(in userHandle : int, inout enableQuietMode : boolean) : void
        try {
            mService.setQuietModeEnabled(userHandle, enableQuietMode);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7636485.java!!!	isQuietModeEnabled(inout userHandle : UserHandle) : boolean
        try {
            return mService.isQuietModeEnabled(userHandle.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7636613.java!!!	trySetQuietModeDisabled(in userHandle : int, inout target : IntentSender) : boolean
        try {
            return mService.trySetQuietModeDisabled(userHandle, target);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7636741.java!!!	getBadgedIconForUser(inout icon : Drawable, inout user : UserHandle) : Drawable
        return mContext.getPackageManager().getUserBadgedIcon(icon, user);
!!!7636869.java!!!	getBadgedDrawableForUser(inout badgedDrawable : Drawable, inout user : UserHandle, inout badgeLocation : Rect, in badgeDensity : int) : Drawable
        return mContext.getPackageManager().getUserBadgedDrawableForDensity(badgedDrawable, user,
                badgeLocation, badgeDensity);
!!!7636997.java!!!	getBadgedLabelForUser(inout label : CharSequence, inout user : UserHandle) : CharSequence
        return mContext.getPackageManager().getUserBadgedLabel(label, user);
!!!7637125.java!!!	getUsers(inout excludeDying : boolean) : UserInfo
        try {
            return mService.getUsers(excludeDying);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7637253.java!!!	removeUser(in userHandle : int) : boolean
        try {
            return mService.removeUser(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7637381.java!!!	removeUserEvenWhenDisallowed(in userHandle : int) : boolean
        try {
            return mService.removeUserEvenWhenDisallowed(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7637509.java!!!	setUserName(in userHandle : int, in name : String) : void
        try {
            mService.setUserName(userHandle, name);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7637637.java!!!	setUserIcon(in userHandle : int, inout icon : Bitmap) : void
        try {
            mService.setUserIcon(userHandle, icon);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7637765.java!!!	getUserIcon(in userHandle : int) : Bitmap
        try {
            ParcelFileDescriptor fd = mService.getUserIcon(userHandle);
            if (fd != null) {
                try {
                    return BitmapFactory.decodeFileDescriptor(fd.getFileDescriptor());
                } finally {
                    try {
                        fd.close();
                    } catch (IOException e) {
                    }
                }
            }
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
        return null;
!!!7637893.java!!!	getMaxSupportedUsers() : int
        // Don't allow multiple users on certain builds
        if (android.os.Build.ID.startsWith("JVP")) return 1;
        // Svelte devices don't get multi-user.
        if (ActivityManager.isLowRamDeviceStatic()) return 1;
        return SystemProperties.getInt("fw.max_users",
                Resources.getSystem().getInteger(R.integer.config_multiuserMaximumUsers));
!!!7638021.java!!!	isUserSwitcherEnabled() : boolean
        if (!supportsMultipleUsers()) {
            return false;
        }
        // If Demo Mode is on, don't show user switcher
        if (isDeviceInDemoMode(mContext)) {
            return false;
        }
        List<UserInfo> users = getUsers(true);
        if (users == null) {
           return false;
        }
        int switchableUserCount = 0;
        for (UserInfo user : users) {
            if (user.supportsSwitchToByUser()) {
                ++switchableUserCount;
            }
        }
        final boolean guestEnabled = !mContext.getSystemService(DevicePolicyManager.class)
                .getGuestUserDisabled(null);
        return switchableUserCount > 1 || guestEnabled;
!!!7638149.java!!!	isDeviceInDemoMode(inout context : Context) : boolean
        return Settings.Global.getInt(context.getContentResolver(),
                Settings.Global.DEVICE_DEMO_MODE, 0) > 0;
!!!7638277.java!!!	getUserSerialNumber(in userHandle : int) : int
        try {
            return mService.getUserSerialNumber(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7638405.java!!!	getUserHandle(in userSerialNumber : int) : int
        try {
            return mService.getUserHandle(userSerialNumber);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7638533.java!!!	getApplicationRestrictions(in packageName : String) : Bundle
        try {
            return mService.getApplicationRestrictions(packageName);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7638661.java!!!	getApplicationRestrictions(in packageName : String, inout user : UserHandle) : Bundle
        try {
            return mService.getApplicationRestrictionsForUser(packageName, user.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7638789.java!!!	setApplicationRestrictions(in packageName : String, inout restrictions : Bundle, inout user : UserHandle) : void
        try {
            mService.setApplicationRestrictions(packageName, restrictions, user.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7638917.java!!!	setRestrictionsChallenge(in newPin : String) : boolean
        return false;
!!!7639045.java!!!	setDefaultGuestRestrictions(inout restrictions : Bundle) : void
        try {
            mService.setDefaultGuestRestrictions(restrictions);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7639173.java!!!	getDefaultGuestRestrictions() : Bundle
        try {
            return mService.getDefaultGuestRestrictions();
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7639301.java!!!	getUserCreationTime(inout userHandle : UserHandle) : long
        try {
            return mService.getUserCreationTime(userHandle.getIdentifier());
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!7639429.java!!!	someUserHasSeedAccount(in accountName : String, in accountType : String) : boolean
        try {
            return mService.someUserHasSeedAccount(accountName, accountType);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
