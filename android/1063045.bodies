class RemoteViews
!!!5387397.java!!!	setRemoteInputs(in viewId : int, inout remoteInputs : RemoteInput [[]]) : void
        mActions.add(new SetRemoteInputsAction(viewId, remoteInputs));
!!!5390085.java!!!	mergeRemoteViews(inout newRv : RemoteViews) : void
        if (newRv == null) return;
        // We first copy the new RemoteViews, as the process of merging modifies the way the actions
        // reference the bitmap cache. We don't want to modify the object as it may need to
        // be merged and applied multiple times.
        RemoteViews copy = newRv.clone();

        HashMap<String, Action> map = new HashMap<String, Action>();
        if (mActions == null) {
            mActions = new ArrayList<Action>();
        }

        int count = mActions.size();
        for (int i = 0; i < count; i++) {
            Action a = mActions.get(i);
            map.put(a.getUniqueKey(), a);
        }

        ArrayList<Action> newActions = copy.mActions;
        if (newActions == null) return;
        count = newActions.size();
        for (int i = 0; i < count; i++) {
            Action a = newActions.get(i);
            String key = newActions.get(i).getUniqueKey();
            int mergeBehavior = newActions.get(i).mergeBehavior();
            if (map.containsKey(key) && mergeBehavior == Action.MERGE_REPLACE) {
                mActions.remove(map.get(key));
                map.remove(key);
            }

            // If the merge behavior is ignore, we don't bother keeping the extra action
            if (mergeBehavior == Action.MERGE_REPLACE || mergeBehavior == Action.MERGE_APPEND) {
                mActions.add(a);
            }
        }

        // Because pruning can remove the need for bitmaps, we reconstruct the bitmap cache
        mBitmapCache = new BitmapCache();
        setBitmapCache(mBitmapCache);
        recalculateMemoryUsage();
!!!5394693.java!!!	getSourceBounds(inout v : View) : Rect
        final float appScale = v.getContext().getResources()
                .getCompatibilityInfo().applicationScale;
        final int[] pos = new int[2];
        v.getLocationOnScreen(pos);

        final Rect rect = new Rect();
        rect.left = (int) (pos[0] * appScale + 0.5f);
        rect.top = (int) (pos[1] * appScale + 0.5f);
        rect.right = (int) ((pos[0] + v.getWidth()) * appScale + 0.5f);
        rect.bottom = (int) ((pos[1] + v.getHeight()) * appScale + 0.5f);
        return rect;
!!!5394821.java!!!	getMethod(inout view : View, in methodName : String, inout paramType : Class<?>) : Method
        Method method;
        Class<? extends View> klass = view.getClass();

        synchronized (sMethodsLock) {
            ArrayMap<MutablePair<String, Class<?>>, Method> methods = sMethods.get(klass);
            if (methods == null) {
                methods = new ArrayMap<MutablePair<String, Class<?>>, Method>();
                sMethods.put(klass, methods);
            }

            mPair.first = methodName;
            mPair.second = paramType;

            method = methods.get(mPair);
            if (method == null) {
                try {
                    if (paramType == null) {
                        method = klass.getMethod(methodName);
                    } else {
                        method = klass.getMethod(methodName, paramType);
                    }
                } catch (NoSuchMethodException ex) {
                    throw new ActionException("view: " + klass.getName() + " doesn't have method: "
                            + methodName + getParameters(paramType));
                }

                if (!method.isAnnotationPresent(RemotableViewMethod.class)) {
                    throw new ActionException("view: " + klass.getName()
                            + " can't use method with RemoteViews: "
                            + methodName + getParameters(paramType));
                }

                methods.put(new MutablePair<String, Class<?>>(methodName, paramType), method);
            }
        }

        return method;
!!!5394949.java!!!	getAsyncMethod(inout method : Method) : Method
        synchronized (sAsyncMethods) {
            int valueIndex = sAsyncMethods.indexOfKey(method);
            if (valueIndex >= 0) {
                return sAsyncMethods.valueAt(valueIndex);
            }

            RemotableViewMethod annotation = method.getAnnotation(RemotableViewMethod.class);
            Method asyncMethod = null;
            if (!annotation.asyncImpl().isEmpty()) {
                try {
                    asyncMethod = method.getDeclaringClass()
                            .getMethod(annotation.asyncImpl(), method.getParameterTypes());
                    if (!asyncMethod.getReturnType().equals(Runnable.class)) {
                        throw new ActionException("Async implementation for " + method.getName() +
                            " does not return a Runnable");
                    }
                } catch (NoSuchMethodException ex) {
                    throw new ActionException("Async implementation declared but not defined for " +
                            method.getName());
                }
            }
            sAsyncMethods.put(method, asyncMethod);
            return asyncMethod;
        }
!!!5395077.java!!!	getParameters(inout paramType : Class<?>) : String
        if (paramType == null) return "()";
        return "(" + paramType + ")";
!!!5395205.java!!!	wrapArg(inout value : Object) : Object
        Object[] args = sInvokeArgsTls.get();
        args[0] = value;
        return args;
!!!5399941.java!!!	configureRemoteViewsAsChild(inout rv : RemoteViews) : void
        mBitmapCache.assimilate(rv.mBitmapCache);
        rv.setBitmapCache(mBitmapCache);
        rv.setNotRoot();
!!!5400069.java!!!	setNotRoot() : void
        mIsRoot = false;
!!!5406597.java!!!	RemoteViews(in packageName : String, in layoutId : int)
        this(getApplicationInfo(packageName, UserHandle.myUserId()), layoutId);
!!!5406725.java!!!	RemoteViews(in packageName : String, in userId : int, in layoutId : int)
        this(getApplicationInfo(packageName, userId), layoutId);
!!!5406853.java!!!	RemoteViews(inout application : ApplicationInfo, in layoutId : int)
        mApplication = application;
        mLayoutId = layoutId;
        mBitmapCache = new BitmapCache();
        // setup the memory usage statistics
        mMemoryUsageCounter = new MemoryUsageCounter();
        recalculateMemoryUsage();
!!!5406981.java!!!	hasLandscapeAndPortraitLayouts() : boolean
        return (mLandscape != null) && (mPortrait != null);
!!!5407109.java!!!	RemoteViews(inout landscape : RemoteViews, inout portrait : RemoteViews)
        if (landscape == null || portrait == null) {
            throw new RuntimeException("Both RemoteViews must be non-null");
        }
        if (landscape.mApplication.uid != portrait.mApplication.uid
                || !landscape.mApplication.packageName.equals(portrait.mApplication.packageName)) {
            throw new RuntimeException("Both RemoteViews must share the same package and user");
        }
        mApplication = portrait.mApplication;
        mLayoutId = portrait.getLayoutId();

        mLandscape = landscape;
        mPortrait = portrait;

        // setup the memory usage statistics
        mMemoryUsageCounter = new MemoryUsageCounter();

        mBitmapCache = new BitmapCache();
        configureRemoteViewsAsChild(landscape);
        configureRemoteViewsAsChild(portrait);

        recalculateMemoryUsage();
!!!5407237.java!!!	RemoteViews(inout parcel : Parcel)
        this(parcel, null, null, 0);
!!!5407365.java!!!	RemoteViews(inout parcel : Parcel, inout bitmapCache : RemoteViews::BitmapCache, inout info : ApplicationInfo, in depth : int)
        if (depth > MAX_NESTED_VIEWS
                && (UserHandle.getAppId(Binder.getCallingUid()) != Process.SYSTEM_UID)) {
            throw new IllegalArgumentException("Too many nested views.");
        }
        depth++;

        int mode = parcel.readInt();

        // We only store a bitmap cache in the root of the RemoteViews.
        if (bitmapCache == null) {
            mBitmapCache = new BitmapCache(parcel);
        } else {
            setBitmapCache(bitmapCache);
            setNotRoot();
        }

        if (mode == MODE_NORMAL) {
            mApplication = parcel.readInt() == 0 ? info :
                    ApplicationInfo.CREATOR.createFromParcel(parcel);
            mLayoutId = parcel.readInt();
            mIsWidgetCollectionChild = parcel.readInt() == 1;

            int count = parcel.readInt();
            if (count > 0) {
                mActions = new ArrayList<Action>(count);
                for (int i=0; i<count; i++) {
                    int tag = parcel.readInt();
                    switch (tag) {
                        case SetOnClickPendingIntent.TAG:
                            mActions.add(new SetOnClickPendingIntent(parcel));
                            break;
                        case SetDrawableParameters.TAG:
                            mActions.add(new SetDrawableParameters(parcel));
                            break;
                        case ReflectionAction.TAG:
                            mActions.add(new ReflectionAction(parcel));
                            break;
                        case ViewGroupAction.TAG:
                            mActions.add(new ViewGroupAction(parcel, mBitmapCache, mApplication,
                                    depth));
                            break;
                        case ReflectionActionWithoutParams.TAG:
                            mActions.add(new ReflectionActionWithoutParams(parcel));
                            break;
                        case SetEmptyView.TAG:
                            mActions.add(new SetEmptyView(parcel));
                            break;
                        case SetPendingIntentTemplate.TAG:
                            mActions.add(new SetPendingIntentTemplate(parcel));
                            break;
                        case SetOnClickFillInIntent.TAG:
                            mActions.add(new SetOnClickFillInIntent(parcel));
                            break;
                        case SetRemoteViewsAdapterIntent.TAG:
                            mActions.add(new SetRemoteViewsAdapterIntent(parcel));
                            break;
                        case TextViewDrawableAction.TAG:
                            mActions.add(new TextViewDrawableAction(parcel));
                            break;
                        case TextViewSizeAction.TAG:
                            mActions.add(new TextViewSizeAction(parcel));
                            break;
                        case ViewPaddingAction.TAG:
                            mActions.add(new ViewPaddingAction(parcel));
                            break;
                        case BitmapReflectionAction.TAG:
                            mActions.add(new BitmapReflectionAction(parcel));
                            break;
                        case SetRemoteViewsAdapterList.TAG:
                            mActions.add(new SetRemoteViewsAdapterList(parcel));
                            break;
                        case TextViewDrawableColorFilterAction.TAG:
                            mActions.add(new TextViewDrawableColorFilterAction(parcel));
                            break;
                        case SetRemoteInputsAction.TAG:
                            mActions.add(new SetRemoteInputsAction(parcel));
                            break;
                        case LayoutParamAction.TAG:
                            mActions.add(new LayoutParamAction(parcel));
                            break;
                        default:
                            throw new ActionException("Tag " + tag + " not found");
                    }
                }
            }
        } else {
            // MODE_HAS_LANDSCAPE_AND_PORTRAIT
            mLandscape = new RemoteViews(parcel, mBitmapCache, info, depth);
            mPortrait = new RemoteViews(parcel, mBitmapCache, mLandscape.mApplication, depth);
            mApplication = mPortrait.mApplication;
            mLayoutId = mPortrait.getLayoutId();
        }

        // setup the memory usage statistics
        mMemoryUsageCounter = new MemoryUsageCounter();
        recalculateMemoryUsage();
!!!5407493.java!!!	clone() : RemoteViews
        synchronized (this) {
            Preconditions.checkState(mIsRoot, "RemoteView has been attached to another RemoteView. "
                    + "May only clone the root of a RemoteView hierarchy.");

            Parcel p = Parcel.obtain();

            // Do not parcel the Bitmap cache - doing so creates an expensive copy of all bitmaps.
            // Instead pretend we're not owning the cache while parceling.
            mIsRoot = false;
            writeToParcel(p, PARCELABLE_ELIDE_DUPLICATES);
            p.setDataPosition(0);
            mIsRoot = true;

            RemoteViews rv = new RemoteViews(p, mBitmapCache.clone(), mApplication, 0);
            rv.mIsRoot = true;

            p.recycle();
            return rv;
        }
!!!5407621.java!!!	getPackage() : String
        return (mApplication != null) ? mApplication.packageName : null;
!!!5407749.java!!!	getLayoutId() : int
        return mLayoutId;
!!!5407877.java!!!	setIsWidgetCollectionChild(inout isWidgetCollectionChild : boolean) : void
        mIsWidgetCollectionChild = isWidgetCollectionChild;
!!!5408005.java!!!	recalculateMemoryUsage() : void
        mMemoryUsageCounter.clear();

        if (!hasLandscapeAndPortraitLayouts()) {
            // Accumulate the memory usage for each action
            if (mActions != null) {
                final int count = mActions.size();
                for (int i= 0; i < count; ++i) {
                    mActions.get(i).updateMemoryUsageEstimate(mMemoryUsageCounter);
                }
            }
            if (mIsRoot) {
                mBitmapCache.addBitmapMemory(mMemoryUsageCounter);
            }
        } else {
            mMemoryUsageCounter.increment(mLandscape.estimateMemoryUsage());
            mMemoryUsageCounter.increment(mPortrait.estimateMemoryUsage());
            mBitmapCache.addBitmapMemory(mMemoryUsageCounter);
        }
!!!5408133.java!!!	setBitmapCache(inout bitmapCache : RemoteViews::BitmapCache) : void
        mBitmapCache = bitmapCache;
        if (!hasLandscapeAndPortraitLayouts()) {
            if (mActions != null) {
                final int count = mActions.size();
                for (int i= 0; i < count; ++i) {
                    mActions.get(i).setBitmapCache(bitmapCache);
                }
            }
        } else {
            mLandscape.setBitmapCache(bitmapCache);
            mPortrait.setBitmapCache(bitmapCache);
        }
!!!5408261.java!!!	estimateMemoryUsage() : int
        return mMemoryUsageCounter.getMemoryUsage();
!!!5408389.java!!!	addAction(inout a : RemoteViews::Action) : void
        if (hasLandscapeAndPortraitLayouts()) {
            throw new RuntimeException("RemoteViews specifying separate landscape and portrait" +
                    " layouts cannot be modified. Instead, fully configure the landscape and" +
                    " portrait layouts individually before constructing the combined layout.");
        }
        if (mActions == null) {
            mActions = new ArrayList<Action>();
        }
        mActions.add(a);

        // update the memory usage stats
        a.updateMemoryUsageEstimate(mMemoryUsageCounter);
!!!5408517.java!!!	addView(in viewId : int, inout nestedView : RemoteViews) : void
        addAction(new ViewGroupAction(viewId, nestedView));
!!!5408645.java!!!	removeAllViews(in viewId : int) : void
        addAction(new ViewGroupAction(viewId, null));
!!!5408773.java!!!	showNext(in viewId : int) : void
        addAction(new ReflectionActionWithoutParams(viewId, "showNext"));
!!!5408901.java!!!	showPrevious(in viewId : int) : void
        addAction(new ReflectionActionWithoutParams(viewId, "showPrevious"));
!!!5409029.java!!!	setDisplayedChild(in viewId : int, in childIndex : int) : void
        setInt(viewId, "setDisplayedChild", childIndex);
!!!5409157.java!!!	setViewVisibility(in viewId : int, in visibility : int) : void
        setInt(viewId, "setVisibility", visibility);
!!!5409285.java!!!	setTextViewText(in viewId : int, inout text : CharSequence) : void
        setCharSequence(viewId, "setText", text);
!!!5409413.java!!!	setTextViewTextSize(in viewId : int, in units : int, in size : float) : void
        addAction(new TextViewSizeAction(viewId, units, size));
!!!5409541.java!!!	setTextViewCompoundDrawables(in viewId : int, in left : int, in top : int, in right : int, in bottom : int) : void
        addAction(new TextViewDrawableAction(viewId, false, left, top, right, bottom));
!!!5409669.java!!!	setTextViewCompoundDrawablesRelative(in viewId : int, in start : int, in top : int, in end : int, in bottom : int) : void
        addAction(new TextViewDrawableAction(viewId, true, start, top, end, bottom));
!!!5409797.java!!!	setTextViewCompoundDrawablesRelativeColorFilter(in viewId : int, in index : int, in color : int, inout mode : PorterDuff.Mode) : void
        if (index < 0 || index >= 4) {
            throw new IllegalArgumentException("index must be in range [0, 3].");
        }
        addAction(new TextViewDrawableColorFilterAction(viewId, true, index, color, mode));
!!!5409925.java!!!	setTextViewCompoundDrawables(in viewId : int, inout left : Icon, inout top : Icon, inout right : Icon, inout bottom : Icon) : void
        addAction(new TextViewDrawableAction(viewId, false, left, top, right, bottom));
!!!5410053.java!!!	setTextViewCompoundDrawablesRelative(in viewId : int, inout start : Icon, inout top : Icon, inout end : Icon, inout bottom : Icon) : void
        addAction(new TextViewDrawableAction(viewId, true, start, top, end, bottom));
!!!5410181.java!!!	setImageViewResource(in viewId : int, in srcId : int) : void
        setInt(viewId, "setImageResource", srcId);
!!!5410309.java!!!	setImageViewUri(in viewId : int, inout uri : Uri) : void
        setUri(viewId, "setImageURI", uri);
!!!5410437.java!!!	setImageViewBitmap(in viewId : int, inout bitmap : Bitmap) : void
        setBitmap(viewId, "setImageBitmap", bitmap);
!!!5410565.java!!!	setImageViewIcon(in viewId : int, inout icon : Icon) : void
        setIcon(viewId, "setImageIcon", icon);
!!!5410693.java!!!	setEmptyView(in viewId : int, in emptyViewId : int) : void
        addAction(new SetEmptyView(viewId, emptyViewId));
!!!5410821.java!!!	setChronometer(in viewId : int, in base : long, in format : String, inout started : boolean) : void
        setLong(viewId, "setBase", base);
        setString(viewId, "setFormat", format);
        setBoolean(viewId, "setStarted", started);
!!!5410949.java!!!	setChronometerCountDown(in viewId : int, inout isCountDown : boolean) : void
        setBoolean(viewId, "setCountDown", isCountDown);
!!!5411077.java!!!	setProgressBar(in viewId : int, in max : int, in progress : int, inout indeterminate : boolean) : void
        setBoolean(viewId, "setIndeterminate", indeterminate);
        if (!indeterminate) {
            setInt(viewId, "setMax", max);
            setInt(viewId, "setProgress", progress);
        }
!!!5411205.java!!!	setOnClickPendingIntent(in viewId : int, inout pendingIntent : PendingIntent) : void
        addAction(new SetOnClickPendingIntent(viewId, pendingIntent));
!!!5411333.java!!!	setPendingIntentTemplate(in viewId : int, inout pendingIntentTemplate : PendingIntent) : void
        addAction(new SetPendingIntentTemplate(viewId, pendingIntentTemplate));
!!!5411461.java!!!	setOnClickFillInIntent(in viewId : int, inout fillInIntent : Intent) : void
        addAction(new SetOnClickFillInIntent(viewId, fillInIntent));
!!!5411589.java!!!	setDrawableParameters(in viewId : int, inout targetBackground : boolean, in alpha : int, in colorFilter : int, inout mode : PorterDuff.Mode, in level : int) : void
        addAction(new SetDrawableParameters(viewId, targetBackground, alpha,
                colorFilter, mode, level));
!!!5411717.java!!!	setProgressTintList(in viewId : int, inout tint : ColorStateList) : void
        addAction(new ReflectionAction(viewId, "setProgressTintList",
                ReflectionAction.COLOR_STATE_LIST, tint));
!!!5411845.java!!!	setProgressBackgroundTintList(in viewId : int, inout tint : ColorStateList) : void
        addAction(new ReflectionAction(viewId, "setProgressBackgroundTintList",
                ReflectionAction.COLOR_STATE_LIST, tint));
!!!5411973.java!!!	setProgressIndeterminateTintList(in viewId : int, inout tint : ColorStateList) : void
        addAction(new ReflectionAction(viewId, "setIndeterminateTintList",
                ReflectionAction.COLOR_STATE_LIST, tint));
!!!5412101.java!!!	setTextColor(in viewId : int, in color : int) : void
        setInt(viewId, "setTextColor", color);
!!!5412229.java!!!	setTextColor(in viewId : int, inout colors : ColorStateList) : void
        addAction(new ReflectionAction(viewId, "setTextColor", ReflectionAction.COLOR_STATE_LIST,
                colors));
!!!5412357.java!!!	setRemoteAdapter(in appWidgetId : int, in viewId : int, inout intent : Intent) : void
        setRemoteAdapter(viewId, intent);
!!!5412485.java!!!	setRemoteAdapter(in viewId : int, inout intent : Intent) : void
        addAction(new SetRemoteViewsAdapterIntent(viewId, intent));
!!!5412613.java!!!	setRemoteAdapter(in viewId : int, inout list : ArrayList<RemoteViews>, in viewTypeCount : int) : void
        addAction(new SetRemoteViewsAdapterList(viewId, list, viewTypeCount));
!!!5412741.java!!!	setScrollPosition(in viewId : int, in position : int) : void
        setInt(viewId, "smoothScrollToPosition", position);
!!!5412869.java!!!	setRelativeScrollPosition(in viewId : int, in offset : int) : void
        setInt(viewId, "smoothScrollByOffset", offset);
!!!5412997.java!!!	setViewPadding(in viewId : int, in left : int, in top : int, in right : int, in bottom : int) : void
        addAction(new ViewPaddingAction(viewId, left, top, right, bottom));
!!!5413125.java!!!	setViewLayoutMarginEndDimen(in viewId : int, in endMarginDimen : int) : void
        addAction(new LayoutParamAction(viewId, LayoutParamAction.LAYOUT_MARGIN_END_DIMEN,
                endMarginDimen));
!!!5413253.java!!!	setViewLayoutMarginBottomDimen(in viewId : int, in bottomMarginDimen : int) : void
        addAction(new LayoutParamAction(viewId, LayoutParamAction.LAYOUT_MARGIN_BOTTOM_DIMEN,
                bottomMarginDimen));
!!!5413381.java!!!	setViewLayoutWidth(in viewId : int, in layoutWidth : int) : void
        if (layoutWidth != 0 && layoutWidth != ViewGroup.LayoutParams.MATCH_PARENT
                && layoutWidth != ViewGroup.LayoutParams.WRAP_CONTENT) {
            throw new IllegalArgumentException("Only supports 0, WRAP_CONTENT and MATCH_PARENT");
        }
        mActions.add(new LayoutParamAction(viewId, LayoutParamAction.LAYOUT_WIDTH, layoutWidth));
!!!5413509.java!!!	setBoolean(in viewId : int, in methodName : String, inout value : boolean) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.BOOLEAN, value));
!!!5413637.java!!!	setByte(in viewId : int, in methodName : String, in value : byte) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.BYTE, value));
!!!5413765.java!!!	setShort(in viewId : int, in methodName : String, in value : short) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.SHORT, value));
!!!5413893.java!!!	setInt(in viewId : int, in methodName : String, in value : int) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.INT, value));
!!!5414021.java!!!	setLong(in viewId : int, in methodName : String, in value : long) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.LONG, value));
!!!5414149.java!!!	setFloat(in viewId : int, in methodName : String, in value : float) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.FLOAT, value));
!!!5414277.java!!!	setDouble(in viewId : int, in methodName : String, in value : double) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.DOUBLE, value));
!!!5414405.java!!!	setChar(in viewId : int, in methodName : String, in value : char) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.CHAR, value));
!!!5414533.java!!!	setString(in viewId : int, in methodName : String, in value : String) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.STRING, value));
!!!5414661.java!!!	setCharSequence(in viewId : int, in methodName : String, inout value : CharSequence) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.CHAR_SEQUENCE, value));
!!!5414789.java!!!	setUri(in viewId : int, in methodName : String, inout value : Uri) : void
        if (value != null) {
            // Resolve any filesystem path before sending remotely
            value = value.getCanonicalUri();
            if (StrictMode.vmFileUriExposureEnabled()) {
                value.checkFileUriExposed("RemoteViews.setUri()");
            }
        }
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.URI, value));
!!!5414917.java!!!	setBitmap(in viewId : int, in methodName : String, inout value : Bitmap) : void
        addAction(new BitmapReflectionAction(viewId, methodName, value));
!!!5415045.java!!!	setBundle(in viewId : int, in methodName : String, inout value : Bundle) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.BUNDLE, value));
!!!5415173.java!!!	setIntent(in viewId : int, in methodName : String, inout value : Intent) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.INTENT, value));
!!!5415301.java!!!	setIcon(in viewId : int, in methodName : String, inout value : Icon) : void
        addAction(new ReflectionAction(viewId, methodName, ReflectionAction.ICON, value));
!!!5415429.java!!!	setContentDescription(in viewId : int, inout contentDescription : CharSequence) : void
        setCharSequence(viewId, "setContentDescription", contentDescription);
!!!5415557.java!!!	setAccessibilityTraversalBefore(in viewId : int, in nextId : int) : void
        setInt(viewId, "setAccessibilityTraversalBefore", nextId);
!!!5415685.java!!!	setAccessibilityTraversalAfter(in viewId : int, in nextId : int) : void
        setInt(viewId, "setAccessibilityTraversalAfter", nextId);
!!!5415813.java!!!	setLabelFor(in viewId : int, in labeledId : int) : void
        setInt(viewId, "setLabelFor", labeledId);
!!!5415941.java!!!	getRemoteViewsToApply(inout context : Context) : RemoteViews
        if (hasLandscapeAndPortraitLayouts()) {
            int orientation = context.getResources().getConfiguration().orientation;
            if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                return mLandscape;
            } else {
                return mPortrait;
            }
        }
        return this;
!!!5416069.java!!!	apply(inout context : Context, inout parent : ViewGroup) : View
        return apply(context, parent, null);
!!!5416197.java!!!	apply(inout context : Context, inout parent : ViewGroup, inout handler : RemoteViews::OnClickHandler) : View
        RemoteViews rvToApply = getRemoteViewsToApply(context);

        View result = inflateView(context, rvToApply, parent);
        loadTransitionOverride(context, handler);

        rvToApply.performApply(result, parent, handler);

        return result;
!!!5416325.java!!!	inflateView(inout context : Context, inout rv : RemoteViews, inout parent : ViewGroup) : View
        // RemoteViews may be built by an application installed in another
        // user. So build a context that loads resources from that user but
        // still returns the current users userId so settings like data / time formats
        // are loaded without requiring cross user persmissions.
        final Context contextForResources = getContextForResources(context);
        Context inflationContext = new RemoteViewsContextWrapper(context, contextForResources);

        LayoutInflater inflater = (LayoutInflater)
                context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        // Clone inflater so we load resources from correct context and
        // we don't add a filter to the static version returned by getSystemService.
        inflater = inflater.cloneInContext(inflationContext);
        inflater.setFilter(this);
        View v = inflater.inflate(rv.getLayoutId(), parent, false);
        v.setTagInternal(R.id.widget_frame, rv.getLayoutId());
        return v;
!!!5416453.java!!!	loadTransitionOverride(inout context : Context, inout handler : RemoteViews::OnClickHandler) : void
        if (handler != null && context.getResources().getBoolean(
                com.android.internal.R.bool.config_overrideRemoteViewsActivityTransition)) {
            TypedArray windowStyle = context.getTheme().obtainStyledAttributes(
                    com.android.internal.R.styleable.Window);
            int windowAnimations = windowStyle.getResourceId(
                    com.android.internal.R.styleable.Window_windowAnimationStyle, 0);
            TypedArray windowAnimationStyle = context.obtainStyledAttributes(
                    windowAnimations, com.android.internal.R.styleable.WindowAnimation);
            handler.setEnterAnimationId(windowAnimationStyle.getResourceId(
                    com.android.internal.R.styleable.
                            WindowAnimation_activityOpenRemoteViewsEnterAnimation, 0));
            windowStyle.recycle();
            windowAnimationStyle.recycle();
        }
!!!5416837.java!!!	applyAsync(inout context : Context, inout parent : ViewGroup, inout executor : Executor, inout listener : RemoteViews::OnViewAppliedListener) : CancellationSignal
        return applyAsync(context, parent, executor, listener, null);
!!!5416965.java!!!	startTaskOnExecutor(inout task : RemoteViews::AsyncApplyTask, inout executor : Executor) : CancellationSignal
        CancellationSignal cancelSignal = new CancellationSignal();
        cancelSignal.setOnCancelListener(task);

        task.executeOnExecutor(executor == null ? AsyncTask.THREAD_POOL_EXECUTOR : executor);
        return cancelSignal;
!!!5417093.java!!!	applyAsync(inout context : Context, inout parent : ViewGroup, inout executor : Executor, inout listener : RemoteViews::OnViewAppliedListener, inout handler : RemoteViews::OnClickHandler) : CancellationSignal
        return startTaskOnExecutor(getAsyncApplyTask(context, parent, listener, handler), executor);
!!!5417221.java!!!	getAsyncApplyTask(inout context : Context, inout parent : ViewGroup, inout listener : RemoteViews::OnViewAppliedListener, inout handler : RemoteViews::OnClickHandler) : RemoteViews::AsyncApplyTask
        return new AsyncApplyTask(getRemoteViewsToApply(context), parent, context, listener,
                handler, null);
!!!5422981.java!!!	reapply(inout context : Context, inout v : View) : void
        reapply(context, v, null);
!!!5423109.java!!!	reapply(inout context : Context, inout v : View, inout handler : RemoteViews::OnClickHandler) : void
        RemoteViews rvToApply = getRemoteViewsToApply(context);

        // In the case that a view has this RemoteViews applied in one orientation, is persisted
        // across orientation change, and has the RemoteViews re-applied in the new orientation,
        // we throw an exception, since the layouts may be completely unrelated.
        if (hasLandscapeAndPortraitLayouts()) {
            if ((Integer) v.getTag(R.id.widget_frame) != rvToApply.getLayoutId()) {
                throw new RuntimeException("Attempting to re-apply RemoteViews to a view that" +
                        " that does not share the same root layout id.");
            }
        }

        rvToApply.performApply(v, (ViewGroup) v.getParent(), handler);
!!!5423237.java!!!	reapplyAsync(inout context : Context, inout v : View, inout executor : Executor, inout listener : RemoteViews::OnViewAppliedListener) : CancellationSignal
        return reapplyAsync(context, v, executor, listener, null);
!!!5423365.java!!!	reapplyAsync(inout context : Context, inout v : View, inout executor : Executor, inout listener : RemoteViews::OnViewAppliedListener, inout handler : RemoteViews::OnClickHandler) : CancellationSignal
        RemoteViews rvToApply = getRemoteViewsToApply(context);

        // In the case that a view has this RemoteViews applied in one orientation, is persisted
        // across orientation change, and has the RemoteViews re-applied in the new orientation,
        // we throw an exception, since the layouts may be completely unrelated.
        if (hasLandscapeAndPortraitLayouts()) {
            if ((Integer) v.getTag(R.id.widget_frame) != rvToApply.getLayoutId()) {
                throw new RuntimeException("Attempting to re-apply RemoteViews to a view that" +
                        " that does not share the same root layout id.");
            }
        }

        return startTaskOnExecutor(new AsyncApplyTask(rvToApply, (ViewGroup) v.getParent(),
                context, listener, handler, v), executor);
!!!5423493.java!!!	performApply(inout v : View, inout parent : ViewGroup, inout handler : RemoteViews::OnClickHandler) : void
        if (mActions != null) {
            handler = handler == null ? DEFAULT_ON_CLICK_HANDLER : handler;
            final int count = mActions.size();
            for (int i = 0; i < count; i++) {
                Action a = mActions.get(i);
                a.apply(v, parent, handler);
            }
        }
!!!5423621.java!!!	prefersAsyncApply() : boolean
        if (mActions != null) {
            final int count = mActions.size();
            for (int i = 0; i < count; i++) {
                if (mActions.get(i).prefersAsyncApply()) {
                    return true;
                }
            }
        }
        return false;
!!!5423749.java!!!	getContextForResources(inout context : Context) : Context
        if (mApplication != null) {
            if (context.getUserId() == UserHandle.getUserId(mApplication.uid)
                    && context.getPackageName().equals(mApplication.packageName)) {
                return context;
            }
            try {
                return context.createApplicationContext(mApplication,
                        Context.CONTEXT_RESTRICTED);
            } catch (NameNotFoundException e) {
                Log.e(LOG_TAG, "Package name " + mApplication.packageName + " not found");
            }
        }

        return context;
!!!5423877.java!!!	getSequenceNumber() : int
        return (mActions == null) ? 0 : mActions.size();
!!!5424005.java!!!	onLoadClass(inout clazz : Class) : boolean
        return clazz.isAnnotationPresent(RemoteView.class);
!!!5424133.java!!!	describeContents() : int
        return 0;
!!!5424261.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        if (!hasLandscapeAndPortraitLayouts()) {
            dest.writeInt(MODE_NORMAL);
            // We only write the bitmap cache if we are the root RemoteViews, as this cache
            // is shared by all children.
            if (mIsRoot) {
                mBitmapCache.writeBitmapsToParcel(dest, flags);
            }
            if (!mIsRoot && (flags & PARCELABLE_ELIDE_DUPLICATES) != 0) {
                dest.writeInt(0);
            } else {
                dest.writeInt(1);
                mApplication.writeToParcel(dest, flags);
            }
            dest.writeInt(mLayoutId);
            dest.writeInt(mIsWidgetCollectionChild ? 1 : 0);
            int count;
            if (mActions != null) {
                count = mActions.size();
            } else {
                count = 0;
            }
            dest.writeInt(count);
            for (int i=0; i<count; i++) {
                Action a = mActions.get(i);
                a.writeToParcel(dest, a.hasSameAppInfo(mApplication)
                        ? PARCELABLE_ELIDE_DUPLICATES : 0);
            }
        } else {
            dest.writeInt(MODE_HAS_LANDSCAPE_AND_PORTRAIT);
            // We only write the bitmap cache if we are the root RemoteViews, as this cache
            // is shared by all children.
            if (mIsRoot) {
                mBitmapCache.writeBitmapsToParcel(dest, flags);
            }
            mLandscape.writeToParcel(dest, flags);
            // Both RemoteViews already share the same package and user
            mPortrait.writeToParcel(dest, flags | PARCELABLE_ELIDE_DUPLICATES);
        }
!!!5424389.java!!!	getApplicationInfo(in packageName : String, in userId : int) : ApplicationInfo
        if (packageName == null) {
            return null;
        }

        // Get the application for the passed in package and user.
        Application application = ActivityThread.currentApplication();
        if (application == null) {
            throw new IllegalStateException("Cannot create remote views out of an aplication.");
        }

        ApplicationInfo applicationInfo = application.getApplicationInfo();
        if (UserHandle.getUserId(applicationInfo.uid) != userId
                || !applicationInfo.packageName.equals(packageName)) {
            try {
                Context context = application.getBaseContext().createPackageContextAsUser(
                        packageName, 0, new UserHandle(userId));
                applicationInfo = context.getApplicationInfo();
            } catch (NameNotFoundException nnfe) {
                throw new IllegalArgumentException("No such package " + packageName);
            }
        }

        return applicationInfo;
