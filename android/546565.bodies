class ATSParser::CasManager::ProgramCasManager
!!!1609989.cpp!!!	addStream(in elementaryPID : uint, in descriptor : CADescriptor) : bool
    ssize_t index = mStreamPidToCasMap.indexOfKey(elementaryPID);
    if (index >= 0) {
        return false;
    }
    ALOGV("addStream: program=%d, elementaryPID=%d, CA_system_ID=0x%x",
            mProgramNumber, elementaryPID, descriptor.mSystemID);
    mStreamPidToCasMap.add(elementaryPID, CasSession(descriptor));
    return true;
!!!1610117.cpp!!!	setMediaCas(in cas : sp<ICas>, inout sessionMap : PidToSessionMap) : status_t
    if (mHasProgramCas) {
        return initSession(cas, sessionMap, &mProgramCas);
    }
    // TODO: share session among streams that has identical CA_descriptors.
    // For now, we open one session for each stream that has CA_descriptor.
    for (size_t index = 0; index < mStreamPidToCasMap.size(); index++) {
        status_t err = initSession(
                cas, sessionMap, &mStreamPidToCasMap.editValueAt(index));
        if (err != OK) {
            return err;
        }
    }
    return OK;
!!!1610245.cpp!!!	getCasSession(in elementaryPID : uint, inout descrambler : sp<IDescrambler>, inout sessionId : std::vector<uint8_t>) : bool
    if (mHasProgramCas) {
        *descrambler = mProgramCas.mDescrambler;
        *sessionId = mProgramCas.mSessionId;
        return true;
    }
    ssize_t index = mStreamPidToCasMap.indexOfKey(elementaryPID);
    if (index < 0) {
        return false;
    }

    *descrambler = mStreamPidToCasMap[index].mDescrambler;
    *sessionId = mStreamPidToCasMap[index].mSessionId;
    return true;
!!!1610373.cpp!!!	closeAllSessions(in cas : sp<ICas>) : void
    if (mHasProgramCas) {
        closeSession(cas, mProgramCas);
    }
    for (size_t index = 0; index < mStreamPidToCasMap.size(); index++) {
        closeSession(cas, mStreamPidToCasMap.editValueAt(index));
    }
!!!1610757.cpp!!!	initSession(in cas : sp<ICas>, inout sessionMap : PidToSessionMap, inout session : ATSParser::CasManager::ProgramCasManager::CasSession) : status_t
    sp<IServiceManager> sm = defaultServiceManager();
    sp<IBinder> casServiceBinder = sm->getService(String16("media.cas"));
    sp<IMediaCasService> casService =
            interface_cast<IMediaCasService>(casServiceBinder);

    if (casService == NULL) {
        ALOGE("Cannot obtain IMediaCasService");
        return NO_INIT;
    }

    sp<IDescrambler> descrambler;
    std::vector<uint8_t> sessionId;
    const CADescriptor &descriptor = session->mCADescriptor;

    Status status = cas->openSession(&sessionId);
    if (!status.isOk()) {
        ALOGE("Failed to open session: exception=%d, error=%d",
                status.exceptionCode(), status.serviceSpecificErrorCode());
        goto l_fail;
    }

    cas->setSessionPrivateData(sessionId, descriptor.mPrivateData);
    if (!status.isOk()) {
        ALOGE("Failed to set private data: exception=%d, error=%d",
                status.exceptionCode(), status.serviceSpecificErrorCode());
        goto l_fail;
    }

    status = casService->createDescrambler(descriptor.mSystemID, &descrambler);
    if (!status.isOk() || descrambler == NULL) {
        ALOGE("Failed to create descrambler: : exception=%d, error=%d",
                status.exceptionCode(), status.serviceSpecificErrorCode());
        goto l_fail;
    }

    status = descrambler->setMediaCasSession(sessionId);
    if (!status.isOk()) {
        ALOGE("Failed to init descrambler: : exception=%d, error=%d",
                status.exceptionCode(), status.serviceSpecificErrorCode());
        goto l_fail;
    }

    session->mSessionId = sessionId;
    session->mDescrambler = descrambler;
    sessionMap.add(descriptor.mPID, sessionId);

    return OK;

l_fail:
    if (!sessionId.empty()) {
        cas->closeSession(sessionId);
    }
    if (descrambler != NULL) {
        descrambler->release();
    }
    return NO_INIT;
!!!1610885.cpp!!!	closeSession(in cas : sp<ICas>, in casSession : ATSParser::CasManager::ProgramCasManager::CasSession) : void
    if (casSession.mDescrambler != NULL) {
        casSession.mDescrambler->release();
    }
    if (!casSession.mSessionId.empty()) {
        cas->closeSession(casSession.mSessionId);
    }
