class WebView
!!!9112965.java!!!	WebView(inout context : Context)
        this(context, null);
!!!9113093.java!!!	WebView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.webViewStyle);
!!!9113221.java!!!	WebView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!9113349.java!!!	WebView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        this(context, attrs, defStyleAttr, defStyleRes, null, false);
!!!9113477.java!!!	WebView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, inout privateBrowsing : boolean)
        this(context, attrs, defStyleAttr, 0, null, privateBrowsing);
!!!9113605.java!!!	WebView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, inout javaScriptInterfaces : Map<String, Object>, inout privateBrowsing : boolean)
        this(context, attrs, defStyleAttr, 0, javaScriptInterfaces, privateBrowsing);
!!!9113733.java!!!	WebView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int, inout javaScriptInterfaces : Map<String, Object>, inout privateBrowsing : boolean)
        super(context, attrs, defStyleAttr, defStyleRes);

        // WebView is important by default, unless app developer overrode attribute.
        if (getImportantForAutofill() == IMPORTANT_FOR_AUTOFILL_AUTO) {
            setImportantForAutofill(IMPORTANT_FOR_AUTOFILL_YES);
        }

        if (context == null) {
            throw new IllegalArgumentException("Invalid context argument");
        }
        sEnforceThreadChecking = context.getApplicationInfo().targetSdkVersion >=
                Build.VERSION_CODES.JELLY_BEAN_MR2;
        checkThread();

        ensureProviderCreated();
        mProvider.init(javaScriptInterfaces, privateBrowsing);
        // Post condition of creating a webview is the CookieSyncManager.getInstance() is allowed.
        CookieSyncManager.setGetInstanceIsAllowed();
!!!9114117.java!!!	overlayHorizontalScrollbar() : boolean
        // The old implementation defaulted to true, so return true for consistency
        return true;
!!!9114245.java!!!	overlayVerticalScrollbar() : boolean
        // The old implementation defaulted to false, so return false for consistency
        return false;
!!!9114373.java!!!	getVisibleTitleHeight() : int
        checkThread();
        return mProvider.getVisibleTitleHeight();
!!!9114501.java!!!	getCertificate() : SslCertificate
        checkThread();
        return mProvider.getCertificate();
!!!9114629.java!!!	setCertificate(inout certificate : SslCertificate) : void
        checkThread();
        mProvider.setCertificate(certificate);
!!!9114757.java!!!	savePassword(in host : String, in username : String, in password : String) : void
        checkThread();
        mProvider.savePassword(host, username, password);
!!!9114885.java!!!	setHttpAuthUsernamePassword(in host : String, in realm : String, in username : String, in password : String) : void
        checkThread();
        mProvider.setHttpAuthUsernamePassword(host, realm, username, password);
!!!9115013.java!!!	getHttpAuthUsernamePassword(in host : String, in realm : String) : String
        checkThread();
        return mProvider.getHttpAuthUsernamePassword(host, realm);
!!!9115141.java!!!	destroy() : void
        checkThread();
        mProvider.destroy();
!!!9115269.java!!!	enablePlatformNotifications() : void
        // noop
!!!9115397.java!!!	disablePlatformNotifications() : void
        // noop
!!!9115525.java!!!	freeMemoryForTests() : void
        getFactory().getStatics().freeMemoryForTests();
!!!9115653.java!!!	setNetworkAvailable(inout networkUp : boolean) : void
        checkThread();
        mProvider.setNetworkAvailable(networkUp);
!!!9115781.java!!!	saveState(inout outState : Bundle) : WebBackForwardList
        checkThread();
        return mProvider.saveState(outState);
!!!9115909.java!!!	savePicture(inout b : Bundle, in dest : File) : boolean
        checkThread();
        return mProvider.savePicture(b, dest);
!!!9116037.java!!!	restorePicture(inout b : Bundle, inout src : File) : boolean
        checkThread();
        return mProvider.restorePicture(b, src);
!!!9116165.java!!!	restoreState(inout inState : Bundle) : WebBackForwardList
        checkThread();
        return mProvider.restoreState(inState);
!!!9116293.java!!!	loadUrl(in url : String, inout additionalHttpHeaders : Map<String, String>) : void
        checkThread();
        mProvider.loadUrl(url, additionalHttpHeaders);
!!!9116421.java!!!	loadUrl(in url : String) : void
        checkThread();
        mProvider.loadUrl(url);
!!!9116549.java!!!	postUrl(in url : String, inout postData : byte [[]]) : void
        checkThread();
        if (URLUtil.isNetworkUrl(url)) {
            mProvider.postUrl(url, postData);
        } else {
            mProvider.loadUrl(url);
        }
!!!9116677.java!!!	loadData(in data : String, in mimeType : String, in encoding : String) : void
        checkThread();
        mProvider.loadData(data, mimeType, encoding);
!!!9116805.java!!!	loadDataWithBaseURL(in baseUrl : String, in data : String, in mimeType : String, in encoding : String, in historyUrl : String) : void
        checkThread();
        mProvider.loadDataWithBaseURL(baseUrl, data, mimeType, encoding, historyUrl);
!!!9116933.java!!!	evaluateJavascript(in script : String, inout resultCallback : ValueCallback) : void
        checkThread();
        mProvider.evaluateJavaScript(script, resultCallback);
!!!9117061.java!!!	saveWebArchive(in filename : String) : void
        checkThread();
        mProvider.saveWebArchive(filename);
!!!9117189.java!!!	saveWebArchive(in basename : String, inout autoname : boolean, inout callback : ValueCallback) : void
        checkThread();
        mProvider.saveWebArchive(basename, autoname, callback);
!!!9117317.java!!!	stopLoading() : void
        checkThread();
        mProvider.stopLoading();
!!!9117445.java!!!	reload() : void
        checkThread();
        mProvider.reload();
!!!9117573.java!!!	canGoBack() : boolean
        checkThread();
        return mProvider.canGoBack();
!!!9117701.java!!!	goBack() : void
        checkThread();
        mProvider.goBack();
!!!9117829.java!!!	canGoForward() : boolean
        checkThread();
        return mProvider.canGoForward();
!!!9117957.java!!!	goForward() : void
        checkThread();
        mProvider.goForward();
!!!9118085.java!!!	canGoBackOrForward(in steps : int) : boolean
        checkThread();
        return mProvider.canGoBackOrForward(steps);
!!!9118213.java!!!	goBackOrForward(in steps : int) : void
        checkThread();
        mProvider.goBackOrForward(steps);
!!!9118341.java!!!	isPrivateBrowsingEnabled() : boolean
        checkThread();
        return mProvider.isPrivateBrowsingEnabled();
!!!9118469.java!!!	pageUp(inout top : boolean) : boolean
        checkThread();
        return mProvider.pageUp(top);
!!!9118597.java!!!	pageDown(inout bottom : boolean) : boolean
        checkThread();
        return mProvider.pageDown(bottom);
!!!9118725.java!!!	postVisualStateCallback(in requestId : long, inout callback : WebView::VisualStateCallback) : void
        checkThread();
        mProvider.insertVisualStateCallback(requestId, callback);
!!!9118853.java!!!	clearView() : void
        checkThread();
        mProvider.clearView();
!!!9118981.java!!!	capturePicture() : Picture
        checkThread();
        return mProvider.capturePicture();
!!!9119109.java!!!	createPrintDocumentAdapter() : PrintDocumentAdapter
        checkThread();
        return mProvider.createPrintDocumentAdapter("default");
!!!9119237.java!!!	createPrintDocumentAdapter(in documentName : String) : PrintDocumentAdapter
        checkThread();
        return mProvider.createPrintDocumentAdapter(documentName);
!!!9119365.java!!!	getScale() : float
        checkThread();
        return mProvider.getScale();
!!!9119493.java!!!	setInitialScale(in scaleInPercent : int) : void
        checkThread();
        mProvider.setInitialScale(scaleInPercent);
!!!9119621.java!!!	invokeZoomPicker() : void
        checkThread();
        mProvider.invokeZoomPicker();
!!!9119749.java!!!	getHitTestResult() : WebView::HitTestResult
        checkThread();
        return mProvider.getHitTestResult();
!!!9119877.java!!!	requestFocusNodeHref(inout hrefMsg : Message) : void
        checkThread();
        mProvider.requestFocusNodeHref(hrefMsg);
!!!9120005.java!!!	requestImageRef(inout msg : Message) : void
        checkThread();
        mProvider.requestImageRef(msg);
!!!9120133.java!!!	getUrl() : String
        checkThread();
        return mProvider.getUrl();
!!!9120261.java!!!	getOriginalUrl() : String
        checkThread();
        return mProvider.getOriginalUrl();
!!!9120389.java!!!	getTitle() : String
        checkThread();
        return mProvider.getTitle();
!!!9120517.java!!!	getFavicon() : Bitmap
        checkThread();
        return mProvider.getFavicon();
!!!9120645.java!!!	getTouchIconUrl() : String
        return mProvider.getTouchIconUrl();
!!!9120773.java!!!	getProgress() : int
        checkThread();
        return mProvider.getProgress();
!!!9120901.java!!!	getContentHeight() : int
        checkThread();
        return mProvider.getContentHeight();
!!!9121029.java!!!	getContentWidth() : int
        return mProvider.getContentWidth();
!!!9121157.java!!!	pauseTimers() : void
        checkThread();
        mProvider.pauseTimers();
!!!9121285.java!!!	resumeTimers() : void
        checkThread();
        mProvider.resumeTimers();
!!!9121413.java!!!	onPause() : void
        checkThread();
        mProvider.onPause();
!!!9121541.java!!!	onResume() : void
        checkThread();
        mProvider.onResume();
!!!9121669.java!!!	isPaused() : boolean
        return mProvider.isPaused();
!!!9121797.java!!!	freeMemory() : void
        checkThread();
        mProvider.freeMemory();
!!!9121925.java!!!	clearCache(inout includeDiskFiles : boolean) : void
        checkThread();
        mProvider.clearCache(includeDiskFiles);
!!!9122053.java!!!	clearFormData() : void
        checkThread();
        mProvider.clearFormData();
!!!9122181.java!!!	clearHistory() : void
        checkThread();
        mProvider.clearHistory();
!!!9122309.java!!!	clearSslPreferences() : void
        checkThread();
        mProvider.clearSslPreferences();
!!!9122437.java!!!	clearClientCertPreferences(inout onCleared : Runnable) : void
        getFactory().getStatics().clearClientCertPreferences(onCleared);
!!!9122565.java!!!	copyBackForwardList() : WebBackForwardList
        checkThread();
        return mProvider.copyBackForwardList();

!!!9122693.java!!!	setFindListener(inout listener : WebView::FindListener) : void
        checkThread();
        setupFindListenerIfNeeded();
        mFindListener.mUserFindListener = listener;
!!!9122821.java!!!	findNext(inout forward : boolean) : void
        checkThread();
        mProvider.findNext(forward);
!!!9122949.java!!!	findAll(in find : String) : int
        checkThread();
        StrictMode.noteSlowCall("findAll blocks UI: prefer findAllAsync");
        return mProvider.findAll(find);
!!!9123077.java!!!	findAllAsync(in find : String) : void
        checkThread();
        mProvider.findAllAsync(find);
!!!9123205.java!!!	showFindDialog(in text : String, inout showIme : boolean) : boolean
        checkThread();
        return mProvider.showFindDialog(text, showIme);
!!!9123333.java!!!	findAddress(in addr : String) : String
        // TODO: Rewrite this in Java so it is not needed to start up chromium
        // Could also be deprecated
        return getFactory().getStatics().findAddress(addr);
!!!9123461.java!!!	enableSlowWholeDocumentDraw() : void
        getFactory().getStatics().enableSlowWholeDocumentDraw();
!!!9123589.java!!!	clearMatches() : void
        checkThread();
        mProvider.clearMatches();
!!!9123717.java!!!	documentHasImages(inout response : Message) : void
        checkThread();
        mProvider.documentHasImages(response);
!!!9123845.java!!!	setWebViewClient(inout client : WebViewClient) : void
        checkThread();
        mProvider.setWebViewClient(client);
!!!9123973.java!!!	getWebViewClient() : WebViewClient
        checkThread();
        return mProvider.getWebViewClient();
!!!9124101.java!!!	setDownloadListener(inout listener : DownloadListener) : void
        checkThread();
        mProvider.setDownloadListener(listener);
!!!9124229.java!!!	setWebChromeClient(inout client : WebChromeClient) : void
        checkThread();
        mProvider.setWebChromeClient(client);
!!!9124357.java!!!	getWebChromeClient() : WebChromeClient
        checkThread();
        return mProvider.getWebChromeClient();
!!!9124485.java!!!	setPictureListener(inout listener : WebView::PictureListener) : void
        checkThread();
        mProvider.setPictureListener(listener);
!!!9124613.java!!!	addJavascriptInterface(inout object : Object, in name : String) : void
        checkThread();
        mProvider.addJavascriptInterface(object, name);
!!!9124741.java!!!	removeJavascriptInterface(in name : String) : void
        checkThread();
        mProvider.removeJavascriptInterface(name);
!!!9124869.java!!!	createWebMessageChannel() : WebMessagePort
        checkThread();
        return mProvider.createWebMessageChannel();
!!!9124997.java!!!	postWebMessage(inout message : WebMessage, inout targetOrigin : Uri) : void
        checkThread();
        mProvider.postMessageToMainFrame(message, targetOrigin);
!!!9125125.java!!!	getSettings() : WebSettings
        checkThread();
        return mProvider.getSettings();
!!!9125253.java!!!	setWebContentsDebuggingEnabled(inout enabled : boolean) : void
        getFactory().getStatics().setWebContentsDebuggingEnabled(enabled);
!!!9125381.java!!!	getPluginList() : PluginList
        return new PluginList();
!!!9125509.java!!!	refreshPlugins(inout reloadOpenPages : boolean) : void
        checkThread();
!!!9125637.java!!!	emulateShiftHeld() : void
        checkThread();
!!!9126149.java!!!	setMapTrackballToArrowKeys(inout setMap : boolean) : void
        checkThread();
        mProvider.setMapTrackballToArrowKeys(setMap);
!!!9126277.java!!!	flingScroll(in vx : int, in vy : int) : void
        checkThread();
        mProvider.flingScroll(vx, vy);
!!!9126405.java!!!	getZoomControls() : View
        checkThread();
        return mProvider.getZoomControls();
!!!9126533.java!!!	canZoomIn() : boolean
        checkThread();
        return mProvider.canZoomIn();
!!!9126661.java!!!	canZoomOut() : boolean
        checkThread();
        return mProvider.canZoomOut();
!!!9126789.java!!!	zoomBy(in zoomFactor : float) : void
        checkThread();
        if (zoomFactor < 0.01)
            throw new IllegalArgumentException("zoomFactor must be greater than 0.01.");
        if (zoomFactor > 100.0)
            throw new IllegalArgumentException("zoomFactor must be less than 100.");
        mProvider.zoomBy(zoomFactor);
!!!9126917.java!!!	zoomIn() : boolean
        checkThread();
        return mProvider.zoomIn();
!!!9127045.java!!!	zoomOut() : boolean
        checkThread();
        return mProvider.zoomOut();
!!!9127173.java!!!	debugDump() : void
        checkThread();
!!!9127301.java!!!	dumpViewHierarchyWithProperties(inout out : BufferedWriter, in level : int) : void
        mProvider.dumpViewHierarchyWithProperties(out, level);
!!!9127429.java!!!	findHierarchyView(in className : String, in hashCode : int) : View
        return mProvider.findHierarchyView(className, hashCode);
!!!9127557.java!!!	setRendererPriorityPolicy(in rendererRequestedPriority : int, inout waivedWhenNotVisible : boolean) : void
        mProvider.setRendererPriorityPolicy(rendererRequestedPriority, waivedWhenNotVisible);
!!!9127685.java!!!	getRendererRequestedPriority() : int
        return mProvider.getRendererRequestedPriority();
!!!9127813.java!!!	getRendererPriorityWaivedWhenNotVisible() : boolean
        return mProvider.getRendererPriorityWaivedWhenNotVisible();
!!!9127941.java!!!	setTextClassifier(inout textClassifier : TextClassifier) : void
        mProvider.setTextClassifier(textClassifier);
!!!9128069.java!!!	getTextClassifier() : TextClassifier
        return mProvider.getTextClassifier();
!!!9128197.java!!!	getWebViewProvider() : WebViewProvider
        return mProvider;
!!!9131269.java!!!	setFindDialogFindListener(inout listener : WebView::FindListener) : void
        checkThread();
        setupFindListenerIfNeeded();
        mFindListener.mFindDialogFindListener = listener;
!!!9131397.java!!!	notifyFindDialogDismissed() : void
        checkThread();
        mProvider.notifyFindDialogDismissed();
!!!9131653.java!!!	setupFindListenerIfNeeded() : void
        if (mFindListener == null) {
            mFindListener = new FindListenerDistributor();
            mProvider.setFindListener(mFindListener);
        }
!!!9131781.java!!!	ensureProviderCreated() : void
        checkThread();
        if (mProvider == null) {
            // As this can get called during the base class constructor chain, pass the minimum
            // number of dependencies here; the rest are deferred to init().
            mProvider = getFactory().createWebView(this, new PrivateAccess());
        }
!!!9131909.java!!!	getFactory() : WebViewFactoryProvider
        return WebViewFactory.getProvider();
!!!9132037.java!!!	checkThread() : void
        // Ignore mWebViewThread == null because this can be called during in the super class
        // constructor, before this class's own constructor has even started.
        if (mWebViewThread != null && Looper.myLooper() != mWebViewThread) {
            Throwable throwable = new Throwable(
                    "A WebView method was called on thread '" +
                    Thread.currentThread().getName() + "'. " +
                    "All WebView methods must be called on the same thread. " +
                    "(Expected Looper " + mWebViewThread + " called on " + Looper.myLooper() +
                    ", FYI main Looper is " + Looper.getMainLooper() + ")");
            Log.w(LOGTAG, Log.getStackTraceString(throwable));
            StrictMode.onWebViewMethodCalledOnWrongThread(throwable);

            if (sEnforceThreadChecking) {
                throw new RuntimeException(throwable);
            }
        }
!!!9132165.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
        mProvider.getViewDelegate().onAttachedToWindow();
!!!9132293.java!!!	onDetachedFromWindowInternal() : void
        mProvider.getViewDelegate().onDetachedFromWindow();
        super.onDetachedFromWindowInternal();
!!!9132421.java!!!	onMovedToDisplay(in displayId : int, inout config : Configuration) : void
        mProvider.getViewDelegate().onMovedToDisplay(displayId, config);
!!!9132549.java!!!	setLayoutParams(inout params : ViewGroup::LayoutParams) : void
        mProvider.getViewDelegate().setLayoutParams(params);
!!!9132677.java!!!	setOverScrollMode(in mode : int) : void
        super.setOverScrollMode(mode);
        // This method may be called in the constructor chain, before the WebView provider is
        // created.
        ensureProviderCreated();
        mProvider.getViewDelegate().setOverScrollMode(mode);
!!!9132805.java!!!	setScrollBarStyle(in style : int) : void
        mProvider.getViewDelegate().setScrollBarStyle(style);
        super.setScrollBarStyle(style);
!!!9132933.java!!!	computeHorizontalScrollRange() : int
        return mProvider.getScrollDelegate().computeHorizontalScrollRange();
!!!9133061.java!!!	computeHorizontalScrollOffset() : int
        return mProvider.getScrollDelegate().computeHorizontalScrollOffset();
!!!9133189.java!!!	computeVerticalScrollRange() : int
        return mProvider.getScrollDelegate().computeVerticalScrollRange();
!!!9133317.java!!!	computeVerticalScrollOffset() : int
        return mProvider.getScrollDelegate().computeVerticalScrollOffset();
!!!9133445.java!!!	computeVerticalScrollExtent() : int
        return mProvider.getScrollDelegate().computeVerticalScrollExtent();
!!!9133573.java!!!	computeScroll() : void
        mProvider.getScrollDelegate().computeScroll();
!!!9133701.java!!!	onHoverEvent(inout event : MotionEvent) : boolean
        return mProvider.getViewDelegate().onHoverEvent(event);
!!!9133829.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        return mProvider.getViewDelegate().onTouchEvent(event);
!!!9133957.java!!!	onGenericMotionEvent(inout event : MotionEvent) : boolean
        return mProvider.getViewDelegate().onGenericMotionEvent(event);
!!!9134085.java!!!	onTrackballEvent(inout event : MotionEvent) : boolean
        return mProvider.getViewDelegate().onTrackballEvent(event);
!!!9134213.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        return mProvider.getViewDelegate().onKeyDown(keyCode, event);
!!!9134341.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
        return mProvider.getViewDelegate().onKeyUp(keyCode, event);
!!!9134469.java!!!	onKeyMultiple(in keyCode : int, in repeatCount : int, inout event : KeyEvent) : boolean
        return mProvider.getViewDelegate().onKeyMultiple(keyCode, repeatCount, event);
!!!9134597.java!!!	getAccessibilityNodeProvider() : AccessibilityNodeProvider
        AccessibilityNodeProvider provider =
                mProvider.getViewDelegate().getAccessibilityNodeProvider();
        return provider == null ? super.getAccessibilityNodeProvider() : provider;
!!!9134725.java!!!	shouldDelayChildPressedState() : boolean
        return mProvider.getViewDelegate().shouldDelayChildPressedState();
!!!9134853.java!!!	getAccessibilityClassName() : CharSequence
        return WebView.class.getName();
!!!9134981.java!!!	onProvideVirtualStructure(inout structure : ViewStructure) : void
        mProvider.getViewDelegate().onProvideVirtualStructure(structure);
!!!9135109.java!!!	onProvideAutofillVirtualStructure(inout structure : ViewStructure, in flags : int) : void
        mProvider.getViewDelegate().onProvideAutofillVirtualStructure(structure, flags);
!!!9135237.java!!!	autofill(inout values : SparseArray) : void
        mProvider.getViewDelegate().autofill(values);
!!!9135365.java!!!	onInitializeAccessibilityNodeInfoInternal(inout info : AccessibilityNodeInfo) : void
        super.onInitializeAccessibilityNodeInfoInternal(info);
        mProvider.getViewDelegate().onInitializeAccessibilityNodeInfo(info);
!!!9135493.java!!!	onInitializeAccessibilityEventInternal(inout event : AccessibilityEvent) : void
        super.onInitializeAccessibilityEventInternal(event);
        mProvider.getViewDelegate().onInitializeAccessibilityEvent(event);
!!!9135621.java!!!	performAccessibilityActionInternal(in action : int, inout arguments : Bundle) : boolean
        return mProvider.getViewDelegate().performAccessibilityAction(action, arguments);
!!!9135749.java!!!	onDrawVerticalScrollBar(inout canvas : Canvas, inout scrollBar : Drawable, in l : int, in t : int, in r : int, in b : int) : void
        mProvider.getViewDelegate().onDrawVerticalScrollBar(canvas, scrollBar, l, t, r, b);
!!!9135877.java!!!	onOverScrolled(in scrollX : int, in scrollY : int, inout clampedX : boolean, inout clampedY : boolean) : void
        mProvider.getViewDelegate().onOverScrolled(scrollX, scrollY, clampedX, clampedY);
!!!9136005.java!!!	onWindowVisibilityChanged(in visibility : int) : void
        super.onWindowVisibilityChanged(visibility);
        mProvider.getViewDelegate().onWindowVisibilityChanged(visibility);
!!!9136133.java!!!	onDraw(inout canvas : Canvas) : void
        mProvider.getViewDelegate().onDraw(canvas);
!!!9136261.java!!!	performLongClick() : boolean
        return mProvider.getViewDelegate().performLongClick();
!!!9136389.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        mProvider.getViewDelegate().onConfigurationChanged(newConfig);
!!!9136517.java!!!	onCreateInputConnection(inout outAttrs : EditorInfo) : InputConnection
        return mProvider.getViewDelegate().onCreateInputConnection(outAttrs);
!!!9136645.java!!!	onDragEvent(inout event : DragEvent) : boolean
        return mProvider.getViewDelegate().onDragEvent(event);
!!!9136773.java!!!	onVisibilityChanged(inout changedView : View, in visibility : int) : void
        super.onVisibilityChanged(changedView, visibility);
        // This method may be called in the constructor chain, before the WebView provider is
        // created.
        ensureProviderCreated();
        mProvider.getViewDelegate().onVisibilityChanged(changedView, visibility);
!!!9136901.java!!!	onWindowFocusChanged(inout hasWindowFocus : boolean) : void
        mProvider.getViewDelegate().onWindowFocusChanged(hasWindowFocus);
        super.onWindowFocusChanged(hasWindowFocus);
!!!9137029.java!!!	onFocusChanged(inout focused : boolean, in direction : int, inout previouslyFocusedRect : Rect) : void
        mProvider.getViewDelegate().onFocusChanged(focused, direction, previouslyFocusedRect);
        super.onFocusChanged(focused, direction, previouslyFocusedRect);
!!!9137157.java!!!	setFrame(in left : int, in top : int, in right : int, in bottom : int) : boolean
        return mProvider.getViewDelegate().setFrame(left, top, right, bottom);
!!!9137285.java!!!	onSizeChanged(in w : int, in h : int, in ow : int, in oh : int) : void
        super.onSizeChanged(w, h, ow, oh);
        mProvider.getViewDelegate().onSizeChanged(w, h, ow, oh);
!!!9137413.java!!!	onScrollChanged(in l : int, in t : int, in oldl : int, in oldt : int) : void
        super.onScrollChanged(l, t, oldl, oldt);
        mProvider.getViewDelegate().onScrollChanged(l, t, oldl, oldt);
!!!9137541.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        return mProvider.getViewDelegate().dispatchKeyEvent(event);
!!!9137669.java!!!	requestFocus(in direction : int, inout previouslyFocusedRect : Rect) : boolean
        return mProvider.getViewDelegate().requestFocus(direction, previouslyFocusedRect);
!!!9137797.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        mProvider.getViewDelegate().onMeasure(widthMeasureSpec, heightMeasureSpec);
!!!9137925.java!!!	requestChildRectangleOnScreen(inout child : View, inout rect : Rect, inout immediate : boolean) : boolean
        return mProvider.getViewDelegate().requestChildRectangleOnScreen(child, rect, immediate);
!!!9138053.java!!!	setBackgroundColor(in color : int) : void
        mProvider.getViewDelegate().setBackgroundColor(color);
!!!9138181.java!!!	setLayerType(in layerType : int, inout paint : Paint) : void
        super.setLayerType(layerType, paint);
        mProvider.getViewDelegate().setLayerType(layerType, paint);
!!!9138309.java!!!	dispatchDraw(inout canvas : Canvas) : void
        mProvider.getViewDelegate().preDispatchDraw(canvas);
        super.dispatchDraw(canvas);
!!!9138437.java!!!	onStartTemporaryDetach() : void
        super.onStartTemporaryDetach();
        mProvider.getViewDelegate().onStartTemporaryDetach();
!!!9138565.java!!!	onFinishTemporaryDetach() : void
        super.onFinishTemporaryDetach();
        mProvider.getViewDelegate().onFinishTemporaryDetach();
!!!9138693.java!!!	getHandler() : Handler
        return mProvider.getViewDelegate().getHandler(super.getHandler());
!!!9138821.java!!!	findFocus() : View
        return mProvider.getViewDelegate().findFocus(super.findFocus());
!!!9138949.java!!!	getCurrentWebViewPackage() : PackageInfo
        PackageInfo webviewPackage = WebViewFactory.getLoadedPackageInfo();
        if (webviewPackage != null) {
            return webviewPackage;
        }

        try {
            return WebViewFactory.getUpdateService().getCurrentWebViewPackage();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!9139077.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        mProvider.getViewDelegate().onActivityResult(requestCode, resultCode, data);
!!!9139205.java!!!	encodeProperties(inout encoder : ViewHierarchyEncoder) : void
        super.encodeProperties(encoder);

        checkThread();
        encoder.addProperty("webview:contentHeight", mProvider.getContentHeight());
        encoder.addProperty("webview:contentWidth", mProvider.getContentWidth());
        encoder.addProperty("webview:scale", mProvider.getScale());
        encoder.addProperty("webview:title", mProvider.getTitle());
        encoder.addProperty("webview:url", mProvider.getUrl());
        encoder.addProperty("webview:originalUrl", mProvider.getOriginalUrl());
