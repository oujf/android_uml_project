class NotificationHeaderViewWrapper
!!!3871621.java!!!	NotificationHeaderViewWrapper(inout ctx : Context, inout view : View, inout row : ExpandableNotificationRow)
        super(ctx, view, row);
        mInvertHelper = new ViewInvertHelper(ctx, NotificationPanelView.DOZE_ANIMATION_DURATION);
        mTransformationHelper = new ViewTransformationHelper();

        // we want to avoid that the header clashes with the other text when transforming
        // low-priority
        mTransformationHelper.setCustomTransformation(
                new CustomInterpolatorTransformation(TRANSFORMING_VIEW_TITLE) {

                    @Override
                    public Interpolator getCustomInterpolator(int interpolationType,
                            boolean isFrom) {
                        boolean isLowPriority = mView instanceof NotificationHeaderView;
                        if (interpolationType == TRANSFORM_Y) {
                            if (isLowPriority && !isFrom
                                    || !isLowPriority && isFrom) {
                                return Interpolators.LINEAR_OUT_SLOW_IN;
                            } else {
                                return LOW_PRIORITY_HEADER_CLOSE;
                            }
                        }
                        return null;
                    }

                    @Override
                    protected boolean hasCustomTransformation() {
                        return mIsLowPriority && mTransformLowPriorityTitle;
                    }
                }, TRANSFORMING_VIEW_TITLE);
        resolveHeaderViews();
        updateInvertHelper();
!!!3871749.java!!!	createDozer(inout ctx : Context) : NotificationDozeHelper
        return new NotificationIconDozeHelper(ctx);
!!!3871877.java!!!	getDozer() : NotificationIconDozeHelper
        return (NotificationIconDozeHelper) super.getDozer();
!!!3872005.java!!!	resolveHeaderViews() : void
        mIcon = mView.findViewById(com.android.internal.R.id.icon);
        mHeaderText = mView.findViewById(com.android.internal.R.id.header_text);
        mExpandButton = mView.findViewById(com.android.internal.R.id.expand_button);
        mExpandButton.setLabeledBy(mRow);
        mWorkProfileImage = mView.findViewById(com.android.internal.R.id.profile_badge);
        mColor = resolveColor(mExpandButton);
        mNotificationHeader = mView.findViewById(com.android.internal.R.id.notification_header);
        getDozer().setColor(mColor);
!!!3872133.java!!!	resolveColor(inout icon : ImageView) : int
        if (icon != null && icon.getDrawable() != null) {
            ColorFilter filter = icon.getDrawable().getColorFilter();
            if (filter instanceof PorterDuffColorFilter) {
                return ((PorterDuffColorFilter) filter).getColor();
            }
        }
        return 0;
!!!3872261.java!!!	onContentUpdated(inout row : ExpandableNotificationRow) : void
        super.onContentUpdated(row);
        mIsLowPriority = row.isLowPriority();
        mTransformLowPriorityTitle = !row.isChildInGroup() && !row.isSummaryWithChildren();
        ArraySet<View> previousViews = mTransformationHelper.getAllTransformingViews();

        // Reinspect the notification.
        resolveHeaderViews();
        updateInvertHelper();
        updateTransformedTypes();
        addRemainingTransformTypes();
        updateCropToPaddingForImageViews();
        Notification notification = row.getStatusBarNotification().getNotification();
        mIcon.setTag(ImageTransformState.ICON_TAG, notification.getSmallIcon());
        // The work profile image is always the same lets just set the icon tag for it not to
        // animate
        mWorkProfileImage.setTag(ImageTransformState.ICON_TAG, notification.getSmallIcon());

        // We need to reset all views that are no longer transforming in case a view was previously
        // transformed, but now we decided to transform its container instead.
        ArraySet<View> currentViews = mTransformationHelper.getAllTransformingViews();
        for (int i = 0; i < previousViews.size(); i++) {
            View view = previousViews.valueAt(i);
            if (!currentViews.contains(view)) {
                mTransformationHelper.resetTransformedView(view);
            }
        }
!!!3872389.java!!!	addRemainingTransformTypes() : void
        mTransformationHelper.addRemainingTransformTypes(mView);
!!!3872517.java!!!	updateCropToPaddingForImageViews() : void
        Stack<View> stack = new Stack<>();
        stack.push(mView);
        while (!stack.isEmpty()) {
            View child = stack.pop();
            if (child instanceof ImageView) {
                ((ImageView) child).setCropToPadding(true);
            } else if (child instanceof ViewGroup){
                ViewGroup group = (ViewGroup) child;
                for (int i = 0; i < group.getChildCount(); i++) {
                    stack.push(group.getChildAt(i));
                }
            }
        }
!!!3872645.java!!!	updateInvertHelper() : void
        mInvertHelper.clearTargets();
        for (int i = 0; i < mNotificationHeader.getChildCount(); i++) {
            View child = mNotificationHeader.getChildAt(i);
            if (child != mIcon) {
                mInvertHelper.addTarget(child);
            }
        }
!!!3872773.java!!!	updateTransformedTypes() : void
        mTransformationHelper.reset();
        mTransformationHelper.addTransformedView(TransformableView.TRANSFORMING_VIEW_ICON, mIcon);
        if (mIsLowPriority) {
            mTransformationHelper.addTransformedView(TransformableView.TRANSFORMING_VIEW_TITLE,
                    mHeaderText);
        }
!!!3872901.java!!!	setDark(inout dark : boolean, inout fade : boolean, in delay : long) : void
        if (dark == mDark && mDarkInitialized) {
            return;
        }
        super.setDark(dark, fade, delay);
        if (fade) {
            mInvertHelper.fade(dark, delay);
        } else {
            mInvertHelper.update(dark);
        }
        if (mIcon != null && !mRow.isChildInGroup()) {
            // We don't update the color for children views / their icon is invisible anyway.
            // It also may lead to bugs where the icon isn't correctly greyed out.
            boolean hadColorFilter = mNotificationHeader.getOriginalIconColor()
                    != NotificationHeaderView.NO_COLOR;

            getDozer().setImageDark(mIcon, dark, fade, delay, !hadColorFilter);
        }
!!!3873029.java!!!	updateExpandability(inout expandable : boolean, inout onClickListener : View.OnClickListener) : void
        mExpandButton.setVisibility(expandable ? View.VISIBLE : View.GONE);
        mNotificationHeader.setOnClickListener(expandable ? onClickListener : null);
!!!3873157.java!!!	getNotificationHeader() : NotificationHeaderView
        return mNotificationHeader;
!!!3873285.java!!!	getCurrentState(in fadingView : int) : TransformState
        return mTransformationHelper.getCurrentState(fadingView);
!!!3873413.java!!!	transformTo(inout notification : TransformableView, inout endRunnable : Runnable) : void
        mTransformationHelper.transformTo(notification, endRunnable);
!!!3873541.java!!!	transformTo(inout notification : TransformableView, in transformationAmount : float) : void
        mTransformationHelper.transformTo(notification, transformationAmount);
!!!3873669.java!!!	transformFrom(inout notification : TransformableView) : void
        mTransformationHelper.transformFrom(notification);
!!!3873797.java!!!	transformFrom(inout notification : TransformableView, in transformationAmount : float) : void
        mTransformationHelper.transformFrom(notification, transformationAmount);
!!!3873925.java!!!	setIsChildInGroup(inout isChildInGroup : boolean) : void
        super.setIsChildInGroup(isChildInGroup);
        mTransformLowPriorityTitle = !isChildInGroup;
!!!3874053.java!!!	setVisible(inout visible : boolean) : void
        super.setVisible(visible);
        mTransformationHelper.setVisible(visible);
