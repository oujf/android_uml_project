class BluetoothDetailAdapter
!!!3424133.java!!!	getTitle() : CharSequence
            return mContext.getString(R.string.quick_settings_bluetooth_label);
!!!3424261.java!!!	getToggleState() : Boolean
            return mState.value;
!!!3424389.java!!!	getToggleEnabled() : boolean
            return mController.getBluetoothState() == BluetoothAdapter.STATE_OFF
                    || mController.getBluetoothState() == BluetoothAdapter.STATE_ON;
!!!3424517.java!!!	getSettingsIntent() : Intent
            return BLUETOOTH_SETTINGS;
!!!3424645.java!!!	setToggleState(inout state : boolean) : void
            MetricsLogger.action(mContext, MetricsEvent.QS_BLUETOOTH_TOGGLE, state);
            mController.setBluetoothEnabled(state);
!!!3424773.java!!!	getMetricsCategory() : int
            return MetricsEvent.QS_BLUETOOTH_DETAILS;
!!!3424901.java!!!	createDetailView(inout context : Context, inout convertView : View, inout parent : ViewGroup) : View
            mItems = QSDetailItems.convertOrInflate(context, convertView, parent);
            mItems.setTagSuffix("Bluetooth");
            mItems.setCallback(this);
            updateItems();
            setItemsVisible(mState.value);
            return mItems;
!!!3425029.java!!!	setItemsVisible(inout visible : boolean) : void
            if (mItems == null) return;
            mItems.setItemsVisible(visible);
!!!3425157.java!!!	updateItems() : void
            if (mItems == null) return;
            if (mController.isBluetoothEnabled()) {
                mItems.setEmptyState(R.drawable.ic_qs_bluetooth_detail_empty,
                        R.string.quick_settings_bluetooth_detail_empty_text);
            } else {
                mItems.setEmptyState(R.drawable.ic_qs_bluetooth_detail_empty,
                        R.string.bt_is_off);
            }
            ArrayList<Item> items = new ArrayList<Item>();
            final Collection<CachedBluetoothDevice> devices = mController.getDevices();
            if (devices != null) {
                int connectedDevices = 0;
                int count = 0;
                for (CachedBluetoothDevice device : devices) {
                    if (mController.getBondState(device) == BluetoothDevice.BOND_NONE) continue;
                    final Item item = new Item();
                    item.icon = R.drawable.ic_qs_bluetooth_on;
                    item.line1 = device.getName();
                    item.tag = device;
                    int state = mController.getMaxConnectionState(device);
                    if (state == BluetoothProfile.STATE_CONNECTED) {
                        item.icon = R.drawable.ic_qs_bluetooth_connected;
                        item.line2 = mContext.getString(R.string.quick_settings_connected);
                        item.canDisconnect = true;
                        items.add(connectedDevices, item);
                        connectedDevices++;
                    } else if (state == BluetoothProfile.STATE_CONNECTING) {
                        item.icon = R.drawable.ic_qs_bluetooth_connecting;
                        item.line2 = mContext.getString(R.string.quick_settings_connecting);
                        items.add(connectedDevices, item);
                    } else {
                        items.add(item);
                    }
                    if (++count == MAX_DEVICES) {
                        break;
                    }
                }
            }
            mItems.setItems(items.toArray(new Item[items.size()]));
!!!3425285.java!!!	onDetailItemClick(inout item : QSDetailItems::Item) : void
            if (item == null || item.tag == null) return;
            final CachedBluetoothDevice device = (CachedBluetoothDevice) item.tag;
            if (device != null && device.getMaxConnectionState()
                    == BluetoothProfile.STATE_DISCONNECTED) {
                mController.connect(device);
            }
!!!3425413.java!!!	onDetailItemDisconnect(inout item : QSDetailItems::Item) : void
            if (item == null || item.tag == null) return;
            final CachedBluetoothDevice device = (CachedBluetoothDevice) item.tag;
            if (device != null) {
                mController.disconnect(device);
            }
