class Half
!!!8436485.java!!!	Half(in value : short)
        mValue = value;
!!!8436613.java!!!	Half(in value : float)
        mValue = toHalf(value);
!!!8436741.java!!!	Half(in value : double)
        mValue = toHalf((float) value);
!!!8436869.java!!!	Half(in value : String)
        mValue = toHalf(Float.parseFloat(value));
!!!8436997.java!!!	halfValue() : short
        return mValue;
!!!8437125.java!!!	byteValue() : byte
        return (byte) toFloat(mValue);
!!!8437253.java!!!	shortValue() : short
        return (short) toFloat(mValue);
!!!8437381.java!!!	intValue() : int
        return (int) toFloat(mValue);
!!!8437509.java!!!	longValue() : long
        return (long) toFloat(mValue);
!!!8437637.java!!!	floatValue() : float
        return toFloat(mValue);
!!!8437765.java!!!	doubleValue() : double
        return toFloat(mValue);
!!!8437893.java!!!	isNaN() : boolean
        return isNaN(mValue);
!!!8438021.java!!!	equals(inout o : Object) : boolean
        return (o instanceof Half) &&
                (halfToIntBits(((Half) o).mValue) == halfToIntBits(mValue));
!!!8438149.java!!!	hashCode() : int
        return hashCode(mValue);
!!!8438277.java!!!	toString() : String
        return toString(mValue);
!!!8438405.java!!!	compareTo(inout h : Half) : int
        return compare(mValue, h.mValue);
!!!8438533.java!!!	hashCode(in h : short) : int
        return halfToIntBits(h);
!!!8438661.java!!!	compare(in x : short, in y : short) : int
        if (less(x, y)) return -1;
        if (greater(x, y)) return 1;

        // Collapse NaNs, akin to halfToIntBits(), but we want to keep
        // (signed) short value types to preserve the ordering of -0.0
        // and +0.0
        short xBits = (x & FP16_COMBINED) > FP16_EXPONENT_MAX ? NaN : x;
        short yBits = (y & FP16_COMBINED) > FP16_EXPONENT_MAX ? NaN : y;

        return (xBits == yBits ? 0 : (xBits < yBits ? -1 : 1));
!!!8438789.java!!!	halfToShortBits(in h : short) : short
        return (h & FP16_COMBINED) > FP16_EXPONENT_MAX ? NaN : h;
!!!8438917.java!!!	halfToIntBits(in h : short) : int
        return (h & FP16_COMBINED) > FP16_EXPONENT_MAX ? NaN : h & 0xffff;
!!!8439045.java!!!	halfToRawIntBits(in h : short) : int
        return h & 0xffff;
!!!8439173.java!!!	intBitsToHalf(in bits : int) : short
        return (short) (bits & 0xffff);
!!!8439301.java!!!	copySign(in magnitude : short, in sign : short) : short
        return (short) ((sign & FP16_SIGN_MASK) | (magnitude & FP16_COMBINED));
!!!8439429.java!!!	abs(in h : short) : short
        return (short) (h & FP16_COMBINED);
!!!8439557.java!!!	round(in h : short) : short
        int bits = h & 0xffff;
        int e = bits & 0x7fff;
        int result = bits;

        if (e < 0x3c00) {
            result &= FP16_SIGN_MASK;
            result |= (0x3c00 & (e >= 0x3800 ? 0xffff : 0x0));
        } else if (e < 0x6400) {
            e = 25 - (e >> 10);
            int mask = (1 << e) - 1;
            result += (1 << (e - 1));
            result &= ~mask;
        }

        return (short) result;
!!!8439685.java!!!	ceil(in h : short) : short
        int bits = h & 0xffff;
        int e = bits & 0x7fff;
        int result = bits;

        if (e < 0x3c00) {
            result &= FP16_SIGN_MASK;
            result |= 0x3c00 & -(~(bits >> 15) & (e != 0 ? 1 : 0));
        } else if (e < 0x6400) {
            e = 25 - (e >> 10);
            int mask = (1 << e) - 1;
            result += mask & ((bits >> 15) - 1);
            result &= ~mask;
        }

        return (short) result;
!!!8439813.java!!!	floor(in h : short) : short
        int bits = h & 0xffff;
        int e = bits & 0x7fff;
        int result = bits;

        if (e < 0x3c00) {
            result &= FP16_SIGN_MASK;
            result |= 0x3c00 & (bits > 0x8000 ? 0xffff : 0x0);
        } else if (e < 0x6400) {
            e = 25 - (e >> 10);
            int mask = (1 << e) - 1;
            result += mask & -(bits >> 15);
            result &= ~mask;
        }

        return (short) result;
!!!8439941.java!!!	trunc(in h : short) : short
        int bits = h & 0xffff;
        int e = bits & 0x7fff;
        int result = bits;

        if (e < 0x3c00) {
            result &= FP16_SIGN_MASK;
        } else if (e < 0x6400) {
            e = 25 - (e >> 10);
            int mask = (1 << e) - 1;
            result &= ~mask;
        }

        return (short) result;
!!!8440069.java!!!	min(in x : short, in y : short) : short
        if ((x & FP16_COMBINED) > FP16_EXPONENT_MAX) return NaN;
        if ((y & FP16_COMBINED) > FP16_EXPONENT_MAX) return NaN;

        if ((x & FP16_COMBINED) == 0 && (y & FP16_COMBINED) == 0) {
            return (x & FP16_SIGN_MASK) != 0 ? x : y;
        }

        return ((x & FP16_SIGN_MASK) != 0 ? 0x8000 - (x & 0xffff) : x & 0xffff) <
               ((y & FP16_SIGN_MASK) != 0 ? 0x8000 - (y & 0xffff) : y & 0xffff) ? x : y;
!!!8440197.java!!!	max(in x : short, in y : short) : short
        if ((x & FP16_COMBINED) > FP16_EXPONENT_MAX) return NaN;
        if ((y & FP16_COMBINED) > FP16_EXPONENT_MAX) return NaN;

        if ((x & FP16_COMBINED) == 0 && (y & FP16_COMBINED) == 0) {
            return (x & FP16_SIGN_MASK) != 0 ? y : x;
        }

        return ((x & FP16_SIGN_MASK) != 0 ? 0x8000 - (x & 0xffff) : x & 0xffff) >
               ((y & FP16_SIGN_MASK) != 0 ? 0x8000 - (y & 0xffff) : y & 0xffff) ? x : y;
!!!8440325.java!!!	less(in x : short, in y : short) : boolean
        if ((x & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;
        if ((y & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;

        return ((x & FP16_SIGN_MASK) != 0 ? 0x8000 - (x & 0xffff) : x & 0xffff) <
               ((y & FP16_SIGN_MASK) != 0 ? 0x8000 - (y & 0xffff) : y & 0xffff);
!!!8440453.java!!!	lessEquals(in x : short, in y : short) : boolean
        if ((x & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;
        if ((y & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;

        return ((x & FP16_SIGN_MASK) != 0 ? 0x8000 - (x & 0xffff) : x & 0xffff) <=
               ((y & FP16_SIGN_MASK) != 0 ? 0x8000 - (y & 0xffff) : y & 0xffff);
!!!8440581.java!!!	greater(in x : short, in y : short) : boolean
        if ((x & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;
        if ((y & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;

        return ((x & FP16_SIGN_MASK) != 0 ? 0x8000 - (x & 0xffff) : x & 0xffff) >
               ((y & FP16_SIGN_MASK) != 0 ? 0x8000 - (y & 0xffff) : y & 0xffff);
!!!8440709.java!!!	greaterEquals(in x : short, in y : short) : boolean
        if ((x & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;
        if ((y & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;

        return ((x & FP16_SIGN_MASK) != 0 ? 0x8000 - (x & 0xffff) : x & 0xffff) >=
               ((y & FP16_SIGN_MASK) != 0 ? 0x8000 - (y & 0xffff) : y & 0xffff);
!!!8440837.java!!!	equals(in x : short, in y : short) : boolean
        if ((x & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;
        if ((y & FP16_COMBINED) > FP16_EXPONENT_MAX) return false;

        return x == y || ((x | y) & FP16_COMBINED) == 0;
!!!8440965.java!!!	getSign(in h : short) : int
        return (h & FP16_SIGN_MASK) == 0 ? 1 : -1;
!!!8441093.java!!!	getExponent(in h : short) : int
        return ((h >>> FP16_EXPONENT_SHIFT) & FP16_EXPONENT_MASK) - FP16_EXPONENT_BIAS;
!!!8441221.java!!!	getSignificand(in h : short) : int
        return h & FP16_SIGNIFICAND_MASK;
!!!8441349.java!!!	isInfinite(in h : short) : boolean
        return (h & FP16_COMBINED) == FP16_EXPONENT_MAX;
!!!8441477.java!!!	isNaN(in h : short) : boolean
        return (h & FP16_COMBINED) > FP16_EXPONENT_MAX;
!!!8441605.java!!!	isNormalized(in h : short) : boolean
        return (h & FP16_EXPONENT_MAX) != 0 && (h & FP16_EXPONENT_MAX) != FP16_EXPONENT_MAX;
!!!8441733.java!!!	toFloat(in h : short) : float
        int bits = h & 0xffff;
        int s = bits & FP16_SIGN_MASK;
        int e = (bits >>> FP16_EXPONENT_SHIFT) & FP16_EXPONENT_MASK;
        int m = (bits                        ) & FP16_SIGNIFICAND_MASK;

        int outE = 0;
        int outM = 0;

        if (e == 0) { // Denormal or 0
            if (m != 0) {
                // Convert denorm fp16 into normalized fp32
                float o = Float.intBitsToFloat(FP32_DENORMAL_MAGIC + m);
                o -= FP32_DENORMAL_FLOAT;
                return s == 0 ? o : -o;
            }
        } else {
            outM = m << 13;
            if (e == 0x1f) { // Infinite or NaN
                outE = 0xff;
            } else {
                outE = e - FP16_EXPONENT_BIAS + FP32_EXPONENT_BIAS;
            }
        }

        int out = (s << 16) | (outE << FP32_EXPONENT_SHIFT) | outM;
        return Float.intBitsToFloat(out);
!!!8441861.java!!!	toHalf(in f : float) : short
        int bits = Float.floatToRawIntBits(f);
        int s = (bits >>> FP32_SIGN_SHIFT    );
        int e = (bits >>> FP32_EXPONENT_SHIFT) & FP32_EXPONENT_MASK;
        int m = (bits                        ) & FP32_SIGNIFICAND_MASK;

        int outE = 0;
        int outM = 0;

        if (e == 0xff) { // Infinite or NaN
            outE = 0x1f;
            outM = m != 0 ? 0x200 : 0;
        } else {
            e = e - FP32_EXPONENT_BIAS + FP16_EXPONENT_BIAS;
            if (e >= 0x1f) { // Overflow
                outE = 0x31;
            } else if (e <= 0) { // Underflow
                if (e < -10) {
                    // The absolute fp32 value is less than MIN_VALUE, flush to +/-0
                } else {
                    // The fp32 value is a normalized float less than MIN_NORMAL,
                    // we convert to a denorm fp16
                    m = (m | 0x800000) >> (1 - e);
                    if ((m & 0x1000) != 0) m += 0x2000;
                    outM = m >> 13;
                }
            } else {
                outE = e;
                outM = m >> 13;
                if ((m & 0x1000) != 0) {
                    // Round to nearest "0.5" up
                    int out = (outE << FP16_EXPONENT_SHIFT) | outM;
                    out++;
                    return (short) (out | (s << FP16_SIGN_SHIFT));
                }
            }
        }

        return (short) ((s << FP16_SIGN_SHIFT) | (outE << FP16_EXPONENT_SHIFT) | outM);
!!!8441989.java!!!	valueOf(in h : short) : Half
        return new Half(h);
!!!8442117.java!!!	valueOf(in f : float) : Half
        return new Half(f);
!!!8442245.java!!!	valueOf(in s : String) : Half
        return new Half(s);
!!!8442373.java!!!	parseHalf(in s : String) : short
        return toHalf(FloatingDecimal.parseFloat(s));
!!!8442501.java!!!	toString(in h : short) : String
        return Float.toString(toFloat(h));
!!!8442629.java!!!	toHexString(in h : short) : String
        StringBuilder o = new StringBuilder();

        int bits = h & 0xffff;
        int s = (bits >>> FP16_SIGN_SHIFT    );
        int e = (bits >>> FP16_EXPONENT_SHIFT) & FP16_EXPONENT_MASK;
        int m = (bits                        ) & FP16_SIGNIFICAND_MASK;

        if (e == 0x1f) { // Infinite or NaN
            if (m == 0) {
                if (s != 0) o.append('-');
                o.append("Infinity");
            } else {
                o.append("NaN");
            }
        } else {
            if (s == 1) o.append('-');
            if (e == 0) {
                if (m == 0) {
                    o.append("0x0.0p0");
                } else {
                    o.append("0x0.");
                    String significand = Integer.toHexString(m);
                    o.append(significand.replaceFirst("0{2,}$", ""));
                    o.append("p-14");
                }
            } else {
                o.append("0x1.");
                String significand = Integer.toHexString(m);
                o.append(significand.replaceFirst("0{2,}$", ""));
                o.append('p');
                o.append(Integer.toString(e - FP16_EXPONENT_BIAS));
            }
        }

        return o.toString();
