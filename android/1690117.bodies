class HdmiCecController
!!!11578117.java!!!	HdmiCecController(inout service : HdmiControlService)
        mService = service;
!!!11578245.java!!!	create(inout service : HdmiControlService) : HdmiCecController
        HdmiCecController controller = new HdmiCecController(service);
        long nativePtr = nativeInit(controller, service.getServiceLooper().getQueue());
        if (nativePtr == 0L) {
            controller = null;
            return null;
        }

        controller.init(nativePtr);
        return controller;
!!!11578373.java!!!	init(in nativePtr : long) : void
        mIoHandler = new Handler(mService.getIoLooper());
        mControlHandler = new Handler(mService.getServiceLooper());
        mNativePtr = nativePtr;
!!!11578501.java!!!	addLocalDevice(in deviceType : int, inout device : HdmiCecLocalDevice) : void
        assertRunOnServiceThread();
        mLocalDevices.put(deviceType, device);
!!!11578629.java!!!	allocateLogicalAddress(in deviceType : int, in preferredAddress : int, in callback : HdmiCecController::AllocateAddressCallback) : void
        assertRunOnServiceThread();

        runOnIoThread(new Runnable() {
            @Override
            public void run() {
                handleAllocateLogicalAddress(deviceType, preferredAddress, callback);
            }
        });
!!!11578757.java!!!	handleAllocateLogicalAddress(in deviceType : int, in preferredAddress : int, in callback : HdmiCecController::AllocateAddressCallback) : void
        assertRunOnIoThread();
        int startAddress = preferredAddress;
        // If preferred address is "unregistered", start address will be the smallest
        // address matched with the given device type.
        if (preferredAddress == Constants.ADDR_UNREGISTERED) {
            for (int i = 0; i < NUM_LOGICAL_ADDRESS; ++i) {
                if (deviceType == HdmiUtils.getTypeFromAddress(i)) {
                    startAddress = i;
                    break;
                }
            }
        }

        int logicalAddress = Constants.ADDR_UNREGISTERED;
        // Iterates all possible addresses which has the same device type.
        for (int i = 0; i < NUM_LOGICAL_ADDRESS; ++i) {
            int curAddress = (startAddress + i) % NUM_LOGICAL_ADDRESS;
            if (curAddress != Constants.ADDR_UNREGISTERED
                    && deviceType == HdmiUtils.getTypeFromAddress(curAddress)) {
                boolean acked = false;
                for (int j = 0; j < HdmiConfig.ADDRESS_ALLOCATION_RETRY; ++j) {
                    if (sendPollMessage(curAddress, curAddress, 1)) {
                        acked = true;
                        break;
                    }
                }
                // If sending <Polling Message> failed, it becomes new logical address for the
                // device because no device uses it as logical address of the device.
                if (!acked) {
                    logicalAddress = curAddress;
                    break;
                }
            }
        }

        final int assignedAddress = logicalAddress;
        HdmiLogger.debug("New logical address for device [%d]: [preferred:%d, assigned:%d]",
                        deviceType, preferredAddress, assignedAddress);
        if (callback != null) {
            runOnServiceThread(new Runnable() {
                @Override
                public void run() {
                    callback.onAllocated(deviceType, assignedAddress);
                }
            });
        }
!!!11578885.java!!!	buildBody(in opcode : int, inout params : byte [[]]) : byte
        byte[] body = new byte[params.length + 1];
        body[0] = (byte) opcode;
        System.arraycopy(params, 0, body, 1, params.length);
        return body;
!!!11579013.java!!!	getPortInfos() : HdmiPortInfo
        return nativeGetPortInfos(mNativePtr);
!!!11579141.java!!!	getLocalDevice(in deviceType : int) : HdmiCecLocalDevice
        return mLocalDevices.get(deviceType);
!!!11579269.java!!!	addLogicalAddress(in newLogicalAddress : int) : int
        assertRunOnServiceThread();
        if (HdmiUtils.isValidAddress(newLogicalAddress)) {
            return nativeAddLogicalAddress(mNativePtr, newLogicalAddress);
        } else {
            return Result.FAILURE_INVALID_ARGS;
        }
!!!11579397.java!!!	clearLogicalAddress() : void
        assertRunOnServiceThread();
        for (int i = 0; i < mLocalDevices.size(); ++i) {
            mLocalDevices.valueAt(i).clearAddress();
        }
        nativeClearLogicalAddress(mNativePtr);
!!!11579525.java!!!	clearLocalDevices() : void
        assertRunOnServiceThread();
        mLocalDevices.clear();
!!!11579653.java!!!	getPhysicalAddress() : int
        assertRunOnServiceThread();
        return nativeGetPhysicalAddress(mNativePtr);
!!!11579781.java!!!	getVersion() : int
        assertRunOnServiceThread();
        return nativeGetVersion(mNativePtr);
!!!11579909.java!!!	getVendorId() : int
        assertRunOnServiceThread();
        return nativeGetVendorId(mNativePtr);
!!!11580037.java!!!	setOption(in flag : int, inout enabled : boolean) : void
        assertRunOnServiceThread();
        HdmiLogger.debug("setOption: [flag:%d, enabled:%b]", flag, enabled);
        nativeSetOption(mNativePtr, flag, enabled);
!!!11580165.java!!!	setLanguage(in language : String) : void
        assertRunOnServiceThread();
        if (!LanguageTag.isLanguage(language)) {
            return;
        }
        nativeSetLanguage(mNativePtr, language);
!!!11580293.java!!!	enableAudioReturnChannel(in port : int, inout enabled : boolean) : void
        assertRunOnServiceThread();
        nativeEnableAudioReturnChannel(mNativePtr, port, enabled);
!!!11580421.java!!!	isConnected(in port : int) : boolean
        assertRunOnServiceThread();
        return nativeIsConnected(mNativePtr, port);
!!!11580549.java!!!	pollDevices(inout callback : HdmiControlService::DevicePollingCallback, in sourceAddress : int, in pickStrategy : int, in retryCount : int) : void
        assertRunOnServiceThread();

        // Extract polling candidates. No need to poll against local devices.
        List<Integer> pollingCandidates = pickPollCandidates(pickStrategy);
        ArrayList<Integer> allocated = new ArrayList<>();
        runDevicePolling(sourceAddress, pollingCandidates, retryCount, callback, allocated);
!!!11580677.java!!!	getLocalDeviceList() : HdmiCecLocalDevice
        assertRunOnServiceThread();
        return HdmiUtils.sparseArrayToList(mLocalDevices);
!!!11580805.java!!!	pickPollCandidates(in pickStrategy : int) : List<Integer>
        int strategy = pickStrategy & Constants.POLL_STRATEGY_MASK;
        Predicate<Integer> pickPredicate = null;
        switch (strategy) {
            case Constants.POLL_STRATEGY_SYSTEM_AUDIO:
                pickPredicate = mSystemAudioAddressPredicate;
                break;
            case Constants.POLL_STRATEGY_REMOTES_DEVICES:
            default:  // The default is POLL_STRATEGY_REMOTES_DEVICES.
                pickPredicate = mRemoteDeviceAddressPredicate;
                break;
        }

        int iterationStrategy = pickStrategy & Constants.POLL_ITERATION_STRATEGY_MASK;
        LinkedList<Integer> pollingCandidates = new LinkedList<>();
        switch (iterationStrategy) {
            case Constants.POLL_ITERATION_IN_ORDER:
                for (int i = Constants.ADDR_TV; i <= Constants.ADDR_SPECIFIC_USE; ++i) {
                    if (pickPredicate.test(i)) {
                        pollingCandidates.add(i);
                    }
                }
                break;
            case Constants.POLL_ITERATION_REVERSE_ORDER:
            default:  // The default is reverse order.
                for (int i = Constants.ADDR_SPECIFIC_USE; i >= Constants.ADDR_TV; --i) {
                    if (pickPredicate.test(i)) {
                        pollingCandidates.add(i);
                    }
                }
                break;
        }
        return pollingCandidates;
!!!11580933.java!!!	isAllocatedLocalDeviceAddress(in address : int) : boolean
        assertRunOnServiceThread();
        for (int i = 0; i < mLocalDevices.size(); ++i) {
            if (mLocalDevices.valueAt(i).isAddressOf(address)) {
                return true;
            }
        }
        return false;
!!!11581061.java!!!	runDevicePolling(in sourceAddress : int, in candidates : List<Integer>, in retryCount : int, in callback : HdmiControlService::DevicePollingCallback, in allocated : List<Integer>) : void
        assertRunOnServiceThread();
        if (candidates.isEmpty()) {
            if (callback != null) {
                HdmiLogger.debug("[P]:AllocatedAddress=%s", allocated.toString());
                callback.onPollingFinished(allocated);
            }
            return;
        }

        final Integer candidate = candidates.remove(0);
        // Proceed polling action for the next address once polling action for the
        // previous address is done.
        runOnIoThread(new Runnable() {
            @Override
            public void run() {
                if (sendPollMessage(sourceAddress, candidate, retryCount)) {
                    allocated.add(candidate);
                }
                runOnServiceThread(new Runnable() {
                    @Override
                    public void run() {
                        runDevicePolling(sourceAddress, candidates, retryCount, callback,
                                allocated);
                    }
                });
            }
        });
!!!11581189.java!!!	sendPollMessage(in sourceAddress : int, in destinationAddress : int, in retryCount : int) : boolean
        assertRunOnIoThread();
        for (int i = 0; i < retryCount; ++i) {
            // <Polling Message> is a message which has empty body.
            int ret =
                    nativeSendCecCommand(mNativePtr, sourceAddress, destinationAddress, EMPTY_BODY);
            if (ret == SendMessageResult.SUCCESS) {
                return true;
            } else if (ret != SendMessageResult.NACK) {
                // Unusual failure
                HdmiLogger.warning("Failed to send a polling message(%d->%d) with return code %d",
                        sourceAddress, destinationAddress, ret);
            }
        }
        return false;
!!!11581317.java!!!	assertRunOnIoThread() : void
        if (Looper.myLooper() != mIoHandler.getLooper()) {
            throw new IllegalStateException("Should run on io thread.");
        }
!!!11581445.java!!!	assertRunOnServiceThread() : void
        if (Looper.myLooper() != mControlHandler.getLooper()) {
            throw new IllegalStateException("Should run on service thread.");
        }
!!!11581573.java!!!	runOnIoThread(inout runnable : Runnable) : void
        mIoHandler.post(runnable);
!!!11581701.java!!!	runOnServiceThread(inout runnable : Runnable) : void
        mControlHandler.post(runnable);
!!!11581829.java!!!	flush(in runnable : Runnable) : void
        assertRunOnServiceThread();
        runOnIoThread(new Runnable() {
            @Override
            public void run() {
                // This ensures the runnable for cleanup is performed after all the pending
                // commands are processed by IO thread.
                runOnServiceThread(runnable);
            }
        });
!!!11581957.java!!!	isAcceptableAddress(in address : int) : boolean
        // Can access command targeting devices available in local device or broadcast command.
        if (address == Constants.ADDR_BROADCAST) {
            return true;
        }
        return isAllocatedLocalDeviceAddress(address);
!!!11582085.java!!!	onReceiveCommand(inout message : HdmiCecMessage) : void
        assertRunOnServiceThread();
        if (isAcceptableAddress(message.getDestination()) && mService.handleCecCommand(message)) {
            return;
        }
        // Not handled message, so we will reply it with <Feature Abort>.
        maySendFeatureAbortCommand(message, Constants.ABORT_UNRECOGNIZED_OPCODE);
!!!11582213.java!!!	maySendFeatureAbortCommand(inout message : HdmiCecMessage, in reason : int) : void
        assertRunOnServiceThread();
        // Swap the source and the destination.
        int src = message.getDestination();
        int dest = message.getSource();
        if (src == Constants.ADDR_BROADCAST || dest == Constants.ADDR_UNREGISTERED) {
            // Don't reply <Feature Abort> from the unregistered devices or for the broadcasted
            // messages. See CEC 12.2 Protocol General Rules for detail.
            return;
        }
        int originalOpcode = message.getOpcode();
        if (originalOpcode == Constants.MESSAGE_FEATURE_ABORT) {
            return;
        }
        sendCommand(
                HdmiCecMessageBuilder.buildFeatureAbortCommand(src, dest, originalOpcode, reason));
!!!11582341.java!!!	sendCommand(inout cecMessage : HdmiCecMessage) : void
        assertRunOnServiceThread();
        sendCommand(cecMessage, null);
!!!11582469.java!!!	sendCommand(in cecMessage : HdmiCecMessage, in callback : HdmiControlService::SendMessageCallback) : void
        assertRunOnServiceThread();
        addMessageToHistory(false /* isReceived */, cecMessage);
        runOnIoThread(new Runnable() {
            @Override
            public void run() {
                HdmiLogger.debug("[S]:" + cecMessage);
                byte[] body = buildBody(cecMessage.getOpcode(), cecMessage.getParams());
                int i = 0;
                int errorCode = SendMessageResult.SUCCESS;
                do {
                    errorCode = nativeSendCecCommand(mNativePtr, cecMessage.getSource(),
                            cecMessage.getDestination(), body);
                    if (errorCode == SendMessageResult.SUCCESS) {
                        break;
                    }
                } while (i++ < HdmiConfig.RETRANSMISSION_COUNT);

                final int finalError = errorCode;
                if (finalError != SendMessageResult.SUCCESS) {
                    Slog.w(TAG, "Failed to send " + cecMessage + " with errorCode=" + finalError);
                }
                if (callback != null) {
                    runOnServiceThread(new Runnable() {
                        @Override
                        public void run() {
                            callback.onSendCompleted(finalError);
                        }
                    });
                }
            }
        });
!!!11582597.java!!!	handleIncomingCecCommand(in srcAddress : int, in dstAddress : int, inout body : byte [[]]) : void
        assertRunOnServiceThread();
        HdmiCecMessage command = HdmiCecMessageBuilder.of(srcAddress, dstAddress, body);
        HdmiLogger.debug("[R]:" + command);
        addMessageToHistory(true /* isReceived */, command);
        onReceiveCommand(command);
!!!11582725.java!!!	handleHotplug(in port : int, inout connected : boolean) : void
        assertRunOnServiceThread();
        HdmiLogger.debug("Hotplug event:[port:%d, connected:%b]", port, connected);
        mService.onHotplug(port, connected);
!!!11582853.java!!!	addMessageToHistory(inout isReceived : boolean, inout message : HdmiCecMessage) : void
        assertRunOnServiceThread();
        MessageHistoryRecord record = new MessageHistoryRecord(isReceived, message);
        if (!mMessageHistory.offer(record)) {
            mMessageHistory.poll();
            mMessageHistory.offer(record);
        }
!!!11582981.java!!!	dump(in pw : IndentingPrintWriter) : void
        for (int i = 0; i < mLocalDevices.size(); ++i) {
            pw.println("HdmiCecLocalDevice #" + i + ":");
            pw.increaseIndent();
            mLocalDevices.valueAt(i).dump(pw);
            pw.decreaseIndent();
        }
        pw.println("CEC message history:");
        pw.increaseIndent();
        final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        for (MessageHistoryRecord record : mMessageHistory) {
            record.dump(pw, sdf);
        }
        pw.decreaseIndent();
