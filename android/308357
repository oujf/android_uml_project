format 215
"android SafeInterface" // source::frameworks::native::libs::binder::include::binder::android SafeInterface
  revision 2
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/libs/binder/include/binder/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/libs/binder/include/binder/"
  cpp_namespace "android::SafeInterface"
  classview 291589 "binder"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 2176261 "ParcelHandler"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ParcelHandler is responsible for writing/reading various types to/from a Parcel in a generic way"
      operation 14721413 "ParcelHandler"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "logTag" explicit_type "char"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : mLogTag(logTag) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14721541 "read"
	const cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "b" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"readBool\", [&]() { return parcel.readBool(b); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Specializations for types with dedicated handling in Parcel"
      end

      operation 14721669 "write"
	const cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "b" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"writeBool\", [&]() { return parcel->writeBool(b); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14721797 "read"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_enum<E>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}template<typename E>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        typename std::underlying_type<E>::type u{};
        status_t result = read(parcel, &u);
        *e = static_cast<E>(u);
        return result;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14721925 "write"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_enum<E>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "e" explicit_type "E"
	cpp_decl "    ${comment}template<typename E>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return write(parcel, static_cast<typename std::underlying_type<E>::type>(e));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14722053 "read"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<Flattenable<T>, T>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "t" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"read(Flattenable)\", [&]() { return parcel.read(*t); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14722181 "write"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<Flattenable<T>, T>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "t" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"write(Flattenable)\", [&]() { return parcel->write(t); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14722309 "read"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<Flattenable<T>, T>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "t" explicit_type "sp<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        *t = new T{};
        return callParcel(\"read(sp<Flattenable>)\", [&]() { return parcel.read(*(t->get())); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14722437 "write"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<Flattenable<T>, T>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "t" explicit_type "sp<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"write(sp<Flattenable>)\", [&]() { return parcel->write(*(t.get())); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14722565 "read"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<LightFlattenable<T>, T>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "t" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"read(LightFlattenable)\", [&]() { return parcel.read(*t); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14722693 "write"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<LightFlattenable<T>, T>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "t" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"write(LightFlattenable)\", [&]() { return parcel->write(t); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14722821 "read"
	stereotype "template"
	cpp_inline public explicit_return_type "std::enable_if<std::is_same<NH, sp<NativeHandle>>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "nh" explicit_type "NH"
	cpp_decl "    ${comment}template<typename NH>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        *nh = NativeHandle::create(parcel.readNativeHandle(), true);
        return NO_ERROR;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14722949 "write"
	stereotype "template"
	cpp_inline public explicit_return_type "std::enable_if<std::is_same<NH, sp<NativeHandle>>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "nh" explicit_type "NH"
	cpp_decl "    ${comment}template<typename NH>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"write(sp<NativeHandle>)\",
                          [&]() { return parcel->writeNativeHandle(nh->handle()); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14723077 "read"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<Parcelable, T>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "t" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"readParcelable\", [&]() { return parcel.readParcelable(t); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14723205 "write"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<Parcelable, T>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "t" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"writeParcelable\", [&]() { return parcel->writeParcelable(t); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14723333 "read"
	const cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "str" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"readString8\", [&]() { return parcel.readString8(str); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14723461 "write"
	const cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "str" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"writeString8\", [&]() { return parcel->writeString8(str); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14723589 "read"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_same<IBinder, T>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "pointer" explicit_type "sp<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"readNullableStrongBinder\",
                          [&]() { return parcel.readNullableStrongBinder(pointer); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14723717 "write"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_same<IBinder, T>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "pointer" explicit_type "sp<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"writeStrongBinder\",
                          [&]() { return parcel->writeStrongBinder(pointer); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14723845 "read"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<IInterface, T>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "pointer" explicit_type "sp<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"readNullableStrongBinder[IInterface]\",
                          [&]() { return parcel.readNullableStrongBinder(pointer); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14723973 "write"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<IInterface, T>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "interface" explicit_type "sp<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return write(parcel, IInterface::asBinder(interface));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14724101 "read"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<Parcelable, T>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "v" explicit_type "std::vector<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"readParcelableVector\", [&]() { return parcel.readParcelableVector(v); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14724229 "write"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_base_of<Parcelable, T>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "v" explicit_type "std::vector<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return callParcel(\"writeParcelableVector\",
                          [&]() { return parcel->writeParcelableVector(v); });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      extra_member 204037 "HandleInt"
	
	stereotype "struct"
	cpp "    struct HandleInt;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 14724357 "read"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_integral<I>::value, status_t>::type"
	nparams 2
	  param in name "parcel" type class_ref 2166021 // Parcel
	  param inout name "i" explicit_type "I"
	cpp_decl "    ${comment}template<typename I>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return HandleInt<std::is_signed<I>::value, sizeof(I), I>::read(*this, parcel, i);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14724485 "write"
	stereotype "template"
	const cpp_inline public explicit_return_type "std::enable_if<std::is_integral<I>::value, status_t>::type"
	nparams 2
	  param inout name "parcel" type class_ref 2166021 // Parcel
	  param in name "i" explicit_type "I"
	cpp_decl "    ${comment}template<typename I>
  ${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return HandleInt<std::is_signed<I>::value, sizeof(I), I>::write(*this, parcel, i);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      attribute 9222149 "mLogTag"
	const_attribute private explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 14724613 "callParcel"
	stereotype "template"
	const cpp_inline private explicit_return_type "status_t"
	nparams 2
	  param in name "name" explicit_type "char"
	  param in name "f" explicit_type "Function"
	cpp_decl "    ${comment}template<typename Function>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        status_t error = f();
        if (CC_UNLIKELY(error != NO_ERROR)) {
            ALOG(LOG_ERROR, mLogTag, \"Failed to %s, (%d: %s)\", name, error, strerror(-error));
#if SI_DUMP_CALLSTACKS
            CallStack callStack(mLogTag);
#endif
        }
        return error;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Helper to encapsulate error handling while calling the various Parcel methods"
      end
    end
  end

  deploymentview 254981 "android SafeInterface"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1042053 "SafeInterface"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 2176261 // ParcelHandler
      end
    end
  end
end
