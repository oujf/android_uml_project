class Display
!!!15060101.cpp!!!	Display(inout device : Device, in id : hwc2_display_t)
    ALOGV("Created display %" PRIu64, id);

    auto intError = mDevice.mComposer->getDisplayType(mId,
            reinterpret_cast<Hwc2::IComposerClient::DisplayType *>(&mType));
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        ALOGE("getDisplayType(%" PRIu64 ") failed: %s (%d)",
              id, to_string(error).c_str(), intError);
    }
!!!15060229.cpp!!!	~Display()
    ALOGV("Destroyed display %" PRIu64, mId);
    if (mType == DisplayType::Virtual) {
        mDevice.destroyVirtualDisplay(mId);
    }
!!!15062405.cpp!!!	acceptChanges() : Error
    auto intError = mDevice.mComposer->acceptDisplayChanges(mId);
    return static_cast<Error>(intError);
!!!15062533.cpp!!!	createLayer(inout outLayer : std::shared_ptr<Layer>) : Error
    hwc2_layer_t layerId = 0;
    auto intError = mDevice.mComposer->createLayer(mId, &layerId);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    auto layer = std::make_shared<Layer>(shared_from_this(), layerId);
    mLayers.emplace(layerId, layer);
    *outLayer = std::move(layer);
    return Error::None;
!!!15062789.cpp!!!	getChangedCompositionTypes(inout outTypes : std::unordered_map<std::shared_ptr<Layer>, Composition>) : Error
    std::vector<Hwc2::Layer> layerIds;
    std::vector<Hwc2::IComposerClient::Composition> types;
    auto intError = mDevice.mComposer->getChangedCompositionTypes(mId,
            &layerIds, &types);
    uint32_t numElements = layerIds.size();
    auto error = static_cast<Error>(intError);
    error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    outTypes->clear();
    outTypes->reserve(numElements);
    for (uint32_t element = 0; element < numElements; ++element) {
        auto layer = getLayerById(layerIds[element]);
        if (layer) {
            auto type = static_cast<Composition>(types[element]);
            ALOGV("getChangedCompositionTypes: adding %" PRIu64 " %s",
                    layer->getId(), to_string(type).c_str());
            outTypes->emplace(layer, type);
        } else {
            ALOGE("getChangedCompositionTypes: invalid layer %" PRIu64 " found"
                    " on display %" PRIu64, layerIds[element], mId);
        }
    }

    return Error::None;
!!!15062917.cpp!!!	getColorModes(inout outModes : std::vector<android_color_mode_t>) : Error
    std::vector<Hwc2::ColorMode> modes;
    auto intError = mDevice.mComposer->getColorModes(mId, &modes);
    uint32_t numModes = modes.size();
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    outModes->resize(numModes);
    for (size_t i = 0; i < numModes; i++) {
        (*outModes)[i] = static_cast<android_color_mode_t>(modes[i]);
    }
    return Error::None;
!!!15063045.cpp!!!	getConfigs() : std::vector<std::shared_ptr<const Config>>
    std::vector<std::shared_ptr<const Config>> configs;
    for (const auto& element : mConfigs) {
        configs.emplace_back(element.second);
    }
    return configs;
!!!15063173.cpp!!!	getName(inout outName : std::string) : Error
    auto intError = mDevice.mComposer->getDisplayName(mId, outName);
    return static_cast<Error>(intError);
!!!15063429.cpp!!!	getType(inout outType : DisplayType) : Error
    *outType = mType;
    return Error::None;
!!!15063557.cpp!!!	supportsDoze(inout outSupport : bool) : Error
    bool intSupport = false;
    auto intError = mDevice.mComposer->getDozeSupport(mId, &intSupport);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }
    *outSupport = static_cast<bool>(intSupport);
    return Error::None;
!!!15064069.cpp!!!	setActiveConfig(in config : std::shared_ptr<const Config>) : Error
    if (config->getDisplayId() != mId) {
        ALOGE("setActiveConfig received config %u for the wrong display %"
                PRIu64 " (expected %" PRIu64 ")", config->getId(),
                config->getDisplayId(), mId);
        return Error::BadConfig;
    }
    auto intError = mDevice.mComposer->setActiveConfig(mId, config->getId());
    return static_cast<Error>(intError);
!!!15064325.cpp!!!	setColorMode(in mode : android_color_mode_t) : Error
    auto intError = mDevice.mComposer->setColorMode(mId,
            static_cast<Hwc2::ColorMode>(mode));
    return static_cast<Error>(intError);
!!!15064453.cpp!!!	setColorTransform(in matrix : android::mat4, in hint : android_color_transform_t) : Error
    auto intError = mDevice.mComposer->setColorTransform(mId,
            matrix.asArray(), static_cast<Hwc2::ColorTransform>(hint));
    return static_cast<Error>(intError);
!!!15064709.cpp!!!	setPowerMode(in mode : PowerMode) : Error
    auto intMode = static_cast<Hwc2::IComposerClient::PowerMode>(mode);
    auto intError = mDevice.mComposer->setPowerMode(mId, intMode);
    return static_cast<Error>(intError);
!!!15064837.cpp!!!	setVsyncEnabled(in enabled : Vsync) : Error
    auto intEnabled = static_cast<Hwc2::IComposerClient::Vsync>(enabled);
    auto intError = mDevice.mComposer->setVsyncEnabled(mId, intEnabled);
    return static_cast<Error>(intError);
!!!15064965.cpp!!!	validate(inout outNumTypes : uint32_t, inout outNumRequests : uint32_t) : Error
    uint32_t numTypes = 0;
    uint32_t numRequests = 0;
    auto intError = mDevice.mComposer->validateDisplay(mId,
            &numTypes, &numRequests);
    auto error = static_cast<Error>(intError);
    if (error != Error::None && error != Error::HasChanges) {
        return error;
    }

    *outNumTypes = numTypes;
    *outNumRequests = numRequests;
    return error;
!!!15065221.cpp!!!	discardCommands() : void
    mDevice.mComposer->resetCommands();
!!!15065861.cpp!!!	getAttribute(in configId : hwc2_config_t, in attribute : Attribute) : int32_t
    int32_t value = 0;
    auto intError = mDevice.mComposer->getDisplayAttribute(mId, configId,
            static_cast<Hwc2::IComposerClient::Attribute>(attribute),
            &value);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        ALOGE("getDisplayAttribute(%" PRIu64 ", %u, %s) failed: %s (%d)", mId,
                configId, to_string(attribute).c_str(),
                to_string(error).c_str(), intError);
        return -1;
    }
    return value;
!!!15065989.cpp!!!	loadConfig(in configId : hwc2_config_t) : void
    ALOGV("[%" PRIu64 "] loadConfig(%u)", mId, configId);

    auto config = Config::Builder(*this, configId)
            .setWidth(getAttribute(configId, Attribute::Width))
            .setHeight(getAttribute(configId, Attribute::Height))
            .setVsyncPeriod(getAttribute(configId, Attribute::VsyncPeriod))
            .setDpiX(getAttribute(configId, Attribute::DpiX))
            .setDpiY(getAttribute(configId, Attribute::DpiY))
            .build();
    mConfigs.emplace(configId, std::move(config));
!!!15066117.cpp!!!	loadConfigs() : void
    ALOGV("[%" PRIu64 "] loadConfigs", mId);

    std::vector<Hwc2::Config> configIds;
    auto intError = mDevice.mComposer->getDisplayConfigs(mId, &configIds);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        ALOGE("[%" PRIu64 "] getDisplayConfigs [2] failed: %s (%d)", mId,
                to_string(error).c_str(), intError);
        return;
    }

    for (auto configId : configIds) {
        loadConfig(configId);
    }
!!!15066245.cpp!!!	destroyLayer(in layerId : hwc2_layer_t) : void
    auto intError =mDevice.mComposer->destroyLayer(mId, layerId);
    auto error = static_cast<Error>(intError);
    ALOGE_IF(error != Error::None, "destroyLayer(%" PRIu64 ", %" PRIu64 ")"
            " failed: %s (%d)", mId, layerId, to_string(error).c_str(),
            intError);
    mLayers.erase(layerId);
!!!15066373.cpp!!!	getLayerById(in id : hwc2_layer_t) : std::shared_ptr<Layer>
    if (mLayers.count(id) == 0) {
        return nullptr;
    }

    auto layer = mLayers.at(id).lock();
    return layer;
