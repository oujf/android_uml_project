class InputDriver
!!!14924933.cpp!!!	InputDriver(in name : char)
    const hw_module_t* module;
    int err = input_open(&module, name);
    LOG_ALWAYS_FATAL_IF(err != 0, "Input module %s not found", name);
    mHal = reinterpret_cast<const input_module_t*>(module);
!!!14925189.cpp!!!	init() : void
    mHal->init(mHal, static_cast<input_host_t*>(this), kCallbacks);
!!!14925317.cpp!!!	createDeviceIdentifier(in name : char, in productId : int32_t, in vendorId : int32_t, in bus : input_bus_t, in uniqueId : char) : input_device_identifier_t
    auto identifier = new ::input_device_identifier {
        .name = name,
        .productId = productId,
        .vendorId = vendorId,
        .bus = bus,
        .uniqueId = uniqueId,
    };
    // TODO: store this identifier somewhere
    return identifier;
!!!14925445.cpp!!!	createDeviceDefinition() : input_device_definition_t
    return new ::input_device_definition;
!!!14925573.cpp!!!	createInputReportDefinition() : input_report_definition_t
    return new ::input_report_definition;
!!!14925701.cpp!!!	createOutputReportDefinition() : input_report_definition_t
    return new ::input_report_definition;
!!!14925829.cpp!!!	freeReportDefinition(inout reportDef : input_report_definition_t) : void
    delete reportDef;
!!!14925957.cpp!!!	inputDeviceDefinitionAddReport(inout d : input_device_definition_t, inout r : input_report_definition_t) : void
    d->reportDefs.push_back(r);
!!!14926085.cpp!!!	inputReportDefinitionAddCollection(inout report : input_report_definition_t, in id : input_collection_id_t, in arity : int32_t) : void
    report->collections[id] = {.arity = arity};
!!!14926213.cpp!!!	inputReportDefinitionDeclareUsageInt(inout report : input_report_definition_t, in id : input_collection_id_t, in usage : input_usage_t, in min : int32_t, in max : int32_t, in resolution : float) : void
    if (report->collections.find(id) != report->collections.end()) {
        report->collections[id].intUsages.push_back({
                .usage = usage, .min = min, .max = max, .resolution = resolution});
    }
!!!14926341.cpp!!!	inputReportDefinitionDeclareUsagesBool(inout report : input_report_definition_t, in id : input_collection_id_t, inout usage : input_usage_t, in usageCount : size_t) : void
    if (report->collections.find(id) != report->collections.end()) {
        for (size_t i = 0; i < usageCount; ++i) {
            report->collections[id].boolUsages.push_back(usage[i]);
        }
    }
!!!14926469.cpp!!!	registerDevice(inout id : input_device_identifier_t, inout d : input_device_definition_t) : input_device_handle_t
    ALOGD("Registering device %s with %zu input reports", id->name, d->reportDefs.size());
    // TODO: save this device handle
    return new input_device_handle{ .id = id, .def = d };
!!!14926597.cpp!!!	unregisterDevice(inout handle : input_device_handle_t) : void
    delete handle;
!!!14926725.cpp!!!	inputAllocateReport(inout r : input_report_definition_t) : input_report_t
    ALOGD("Allocating input report for definition %p", r);
    return nullptr;
!!!14927109.cpp!!!	reportEvent(inout d : input_device_handle_t, inout report : input_report_t) : void
    ALOGD("report_event %p for handle %p", report, d);
!!!14927237.cpp!!!	inputGetDevicePropertyMap(inout id : input_device_identifier_t) : input_property_map_t
    InputDeviceIdentifier idi;
    idi.name = id->name;
    idi.uniqueId = id->uniqueId;
    idi.bus = id->bus;
    idi.vendor = id->vendorId;
    idi.product = id->productId;
    idi.version = id->version;

    String8 configFile = getInputDeviceConfigurationFilePathByDeviceIdentifier(
            idi, INPUT_DEVICE_CONFIGURATION_FILE_TYPE_CONFIGURATION);
    if (configFile.isEmpty()) {
        ALOGD("No input device configuration file found for device '%s'.",
                idi.name.string());
    } else {
        auto propMap = new input_property_map_t();
        status_t status = PropertyMap::load(configFile, &propMap->propertyMap);
        if (status) {
            ALOGE("Error loading input device configuration file for device '%s'. "
                    "Using default configuration.",
                    idi.name.string());
            delete propMap;
            return nullptr;
        }
        return propMap;
    }
    return nullptr;
!!!14927365.cpp!!!	inputGetDeviceProperty(inout map : input_property_map_t, in key : char) : input_property_t
    String8 keyString(key);
    if (map != nullptr) {
        if (map->propertyMap->hasProperty(keyString)) {
            auto prop = new input_property_t();
            if (!map->propertyMap->tryGetProperty(keyString, prop->value)) {
                delete prop;
                return nullptr;
            }
            prop->key = keyString;
            return prop;
        }
    }
    return nullptr;
!!!14927493.cpp!!!	inputGetPropertyKey(inout property : input_property_t) : char
    if (property != nullptr) {
        return property->key.string();
    }
    return nullptr;
!!!14927621.cpp!!!	inputGetPropertyValue(inout property : input_property_t) : char
    if (property != nullptr) {
        return property->value.string();
    }
    return nullptr;
!!!14927749.cpp!!!	inputFreeDeviceProperty(inout property : input_property_t) : void
    if (property != nullptr) {
        delete property;
    }
!!!14927877.cpp!!!	inputFreeDevicePropertyMap(inout map : input_property_map_t) : void
    if (map != nullptr) {
        delete map->propertyMap;
        delete map;
    }
!!!14928005.cpp!!!	dump(inout result : String8) : void
    result.appendFormat(INDENT2 "HAL Input Driver (%s)\n", mName.string());
