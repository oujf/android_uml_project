class RequestInfo
!!!11885701.java!!!	RequestInfo(inout statsObserver : NetworkStatsObservers, inout request : DataUsageRequest, inout messenger : Messenger, inout binder : IBinder, in callingUid : int, in accessLevel : int)
            mStatsObserver = statsObserver;
            mRequest = request;
            mMessenger = messenger;
            mBinder = binder;
            mCallingUid = callingUid;
            mAccessLevel = accessLevel;

            try {
                mBinder.linkToDeath(this, 0);
            } catch (RemoteException e) {
                binderDied();
            }
!!!11885829.java!!!	binderDied() : void
            if (LOGV) Slog.v(TAG, "RequestInfo binderDied("
                    + mRequest + ", " + mBinder + ")");
            mStatsObserver.unregister(mRequest, Process.SYSTEM_UID);
            callCallback(NetworkStatsManager.CALLBACK_RELEASED);
!!!11885957.java!!!	toString() : String
            return "RequestInfo from uid:" + mCallingUid
                    + " for " + mRequest + " accessLevel:" + mAccessLevel;
!!!11886085.java!!!	unlinkDeathRecipient() : void
            if (mBinder != null) {
                mBinder.unlinkToDeath(this, 0);
            }
!!!11886213.java!!!	updateStats(inout statsContext : NetworkStatsObservers::StatsContext) : void
            if (mRecorder == null) {
                // First run; establish baseline stats
                resetRecorder();
                recordSample(statsContext);
                return;
            }
            recordSample(statsContext);

            if (checkStats()) {
                resetRecorder();
                callCallback(NetworkStatsManager.CALLBACK_LIMIT_REACHED);
            }
!!!11886341.java!!!	callCallback(in callbackType : int) : void
            Bundle bundle = new Bundle();
            bundle.putParcelable(DataUsageRequest.PARCELABLE_KEY, mRequest);
            Message msg = Message.obtain();
            msg.what = callbackType;
            msg.setData(bundle);
            try {
                if (LOGV) {
                    Slog.v(TAG, "sending notification " + callbackTypeToName(callbackType)
                            + " for " + mRequest);
                }
                mMessenger.send(msg);
            } catch (RemoteException e) {
                // May occur naturally in the race of binder death.
                Slog.w(TAG, "RemoteException caught trying to send a callback msg for " + mRequest);
            }
!!!11886469.java!!!	resetRecorder() : void
            mRecorder = new NetworkStatsRecorder();
            mCollection = mRecorder.getSinceBoot();
!!!11886853.java!!!	callbackTypeToName(in callbackType : int) : String
            switch (callbackType) {
                case NetworkStatsManager.CALLBACK_LIMIT_REACHED:
                    return "LIMIT_REACHED";
                case NetworkStatsManager.CALLBACK_RELEASED:
                    return "RELEASED";
                default:
                    return "UNKNOWN";
            }
