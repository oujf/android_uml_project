class NetworkTemplate
!!!7209605.java!!!	forceAllNetworkTypes() : void
        sForceAllNetworkTypes = true;
!!!7209733.java!!!	buildTemplateMobileAll(in subscriberId : String) : NetworkTemplate
        return new NetworkTemplate(MATCH_MOBILE_ALL, subscriberId, null);
!!!7209861.java!!!	buildTemplateMobile3gLower(in subscriberId : String) : NetworkTemplate
        return new NetworkTemplate(MATCH_MOBILE_3G_LOWER, subscriberId, null);
!!!7209989.java!!!	buildTemplateMobile4g(in subscriberId : String) : NetworkTemplate
        return new NetworkTemplate(MATCH_MOBILE_4G, subscriberId, null);
!!!7210117.java!!!	buildTemplateMobileWildcard() : NetworkTemplate
        return new NetworkTemplate(MATCH_MOBILE_WILDCARD, null, null);
!!!7210245.java!!!	buildTemplateWifiWildcard() : NetworkTemplate
        return new NetworkTemplate(MATCH_WIFI_WILDCARD, null, null);
!!!7210373.java!!!	buildTemplateWifi() : NetworkTemplate
        return buildTemplateWifiWildcard();
!!!7210501.java!!!	buildTemplateWifi(in networkId : String) : NetworkTemplate
        return new NetworkTemplate(MATCH_WIFI, null, networkId);
!!!7210629.java!!!	buildTemplateEthernet() : NetworkTemplate
        return new NetworkTemplate(MATCH_ETHERNET, null, null);
!!!7210757.java!!!	buildTemplateBluetooth() : NetworkTemplate
        return new NetworkTemplate(MATCH_BLUETOOTH, null, null);
!!!7210885.java!!!	buildTemplateProxy() : NetworkTemplate
        return new NetworkTemplate(MATCH_PROXY, null, null);
!!!7211013.java!!!	NetworkTemplate(in matchRule : int, in subscriberId : String, in networkId : String)
        this(matchRule, subscriberId, new String[] { subscriberId }, networkId);
!!!7211141.java!!!	NetworkTemplate(in matchRule : int, in subscriberId : String, inout matchSubscriberIds : String [[]], in networkId : String)
        mMatchRule = matchRule;
        mSubscriberId = subscriberId;
        mMatchSubscriberIds = matchSubscriberIds;
        mNetworkId = networkId;
!!!7211269.java!!!	NetworkTemplate(inout in : Parcel)
        mMatchRule = in.readInt();
        mSubscriberId = in.readString();
        mMatchSubscriberIds = in.createStringArray();
        mNetworkId = in.readString();
!!!7211397.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mMatchRule);
        dest.writeString(mSubscriberId);
        dest.writeStringArray(mMatchSubscriberIds);
        dest.writeString(mNetworkId);
!!!7211525.java!!!	describeContents() : int
        return 0;
!!!7211653.java!!!	toString() : String
        final StringBuilder builder = new StringBuilder("NetworkTemplate: ");
        builder.append("matchRule=").append(getMatchRuleName(mMatchRule));
        if (mSubscriberId != null) {
            builder.append(", subscriberId=").append(
                    NetworkIdentity.scrubSubscriberId(mSubscriberId));
        }
        if (mMatchSubscriberIds != null) {
            builder.append(", matchSubscriberIds=").append(
                    Arrays.toString(NetworkIdentity.scrubSubscriberId(mMatchSubscriberIds)));
        }
        if (mNetworkId != null) {
            builder.append(", networkId=").append(mNetworkId);
        }
        return builder.toString();
!!!7211781.java!!!	hashCode() : int
        return Objects.hash(mMatchRule, mSubscriberId, mNetworkId);
!!!7211909.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof NetworkTemplate) {
            final NetworkTemplate other = (NetworkTemplate) obj;
            return mMatchRule == other.mMatchRule
                    && Objects.equals(mSubscriberId, other.mSubscriberId)
                    && Objects.equals(mNetworkId, other.mNetworkId);
        }
        return false;
!!!7212037.java!!!	isMatchRuleMobile() : boolean
        switch (mMatchRule) {
            case MATCH_MOBILE_3G_LOWER:
            case MATCH_MOBILE_4G:
            case MATCH_MOBILE_ALL:
            case MATCH_MOBILE_WILDCARD:
                return true;
            default:
                return false;
        }
!!!7212165.java!!!	isPersistable() : boolean
        switch (mMatchRule) {
            case MATCH_MOBILE_WILDCARD:
            case MATCH_WIFI_WILDCARD:
                return false;
            default:
                return true;
        }
!!!7212293.java!!!	getMatchRule() : int
        return mMatchRule;
!!!7212421.java!!!	getSubscriberId() : String
        return mSubscriberId;
!!!7212549.java!!!	getNetworkId() : String
        return mNetworkId;
!!!7212677.java!!!	matches(inout ident : NetworkIdentity) : boolean
        switch (mMatchRule) {
            case MATCH_MOBILE_ALL:
                return matchesMobile(ident);
            case MATCH_MOBILE_3G_LOWER:
                return matchesMobile3gLower(ident);
            case MATCH_MOBILE_4G:
                return matchesMobile4g(ident);
            case MATCH_WIFI:
                return matchesWifi(ident);
            case MATCH_ETHERNET:
                return matchesEthernet(ident);
            case MATCH_MOBILE_WILDCARD:
                return matchesMobileWildcard(ident);
            case MATCH_WIFI_WILDCARD:
                return matchesWifiWildcard(ident);
            case MATCH_BLUETOOTH:
                return matchesBluetooth(ident);
            case MATCH_PROXY:
                return matchesProxy(ident);
            default:
                throw new IllegalArgumentException("unknown network template");
        }
!!!7212805.java!!!	matchesMobile(inout ident : NetworkIdentity) : boolean
        if (ident.mType == TYPE_WIMAX) {
            // TODO: consider matching against WiMAX subscriber identity
            return true;
        } else {
            return (sForceAllNetworkTypes || (ident.mType == TYPE_MOBILE && ident.mMetered))
                    && !ArrayUtils.isEmpty(mMatchSubscriberIds)
                    && ArrayUtils.contains(mMatchSubscriberIds, ident.mSubscriberId);
        }
!!!7212933.java!!!	matchesMobile3gLower(inout ident : NetworkIdentity) : boolean
        ensureSubtypeAvailable();
        if (ident.mType == TYPE_WIMAX) {
            return false;
        } else if (matchesMobile(ident)) {
            switch (getNetworkClass(ident.mSubType)) {
                case NETWORK_CLASS_UNKNOWN:
                case NETWORK_CLASS_2_G:
                case NETWORK_CLASS_3_G:
                    return true;
            }
        }
        return false;
!!!7213061.java!!!	matchesMobile4g(inout ident : NetworkIdentity) : boolean
        ensureSubtypeAvailable();
        if (ident.mType == TYPE_WIMAX) {
            // TODO: consider matching against WiMAX subscriber identity
            return true;
        } else if (matchesMobile(ident)) {
            switch (getNetworkClass(ident.mSubType)) {
                case NETWORK_CLASS_4_G:
                    return true;
            }
        }
        return false;
!!!7213189.java!!!	matchesWifi(inout ident : NetworkIdentity) : boolean
        switch (ident.mType) {
            case TYPE_WIFI:
                return Objects.equals(
                        removeDoubleQuotes(mNetworkId), removeDoubleQuotes(ident.mNetworkId));
            default:
                return false;
        }
!!!7213317.java!!!	matchesEthernet(inout ident : NetworkIdentity) : boolean
        if (ident.mType == TYPE_ETHERNET) {
            return true;
        }
        return false;
!!!7213445.java!!!	matchesMobileWildcard(inout ident : NetworkIdentity) : boolean
        if (ident.mType == TYPE_WIMAX) {
            return true;
        } else {
            return sForceAllNetworkTypes || (ident.mType == TYPE_MOBILE && ident.mMetered);
        }
!!!7213573.java!!!	matchesWifiWildcard(inout ident : NetworkIdentity) : boolean
        switch (ident.mType) {
            case TYPE_WIFI:
            case TYPE_WIFI_P2P:
                return true;
            default:
                return false;
        }
!!!7213701.java!!!	matchesBluetooth(inout ident : NetworkIdentity) : boolean
        if (ident.mType == TYPE_BLUETOOTH) {
            return true;
        }
        return false;
!!!7213829.java!!!	matchesProxy(inout ident : NetworkIdentity) : boolean
        return ident.mType == TYPE_PROXY;
!!!7213957.java!!!	getMatchRuleName(in matchRule : int) : String
        switch (matchRule) {
            case MATCH_MOBILE_3G_LOWER:
                return "MOBILE_3G_LOWER";
            case MATCH_MOBILE_4G:
                return "MOBILE_4G";
            case MATCH_MOBILE_ALL:
                return "MOBILE_ALL";
            case MATCH_WIFI:
                return "WIFI";
            case MATCH_ETHERNET:
                return "ETHERNET";
            case MATCH_MOBILE_WILDCARD:
                return "MOBILE_WILDCARD";
            case MATCH_WIFI_WILDCARD:
                return "WIFI_WILDCARD";
            case MATCH_BLUETOOTH:
                return "BLUETOOTH";
            case MATCH_PROXY:
                return "PROXY";
            default:
                return "UNKNOWN";
        }
!!!7214085.java!!!	ensureSubtypeAvailable() : void
        if (COMBINE_SUBTYPE_ENABLED) {
            throw new IllegalArgumentException(
                    "Unable to enforce 3G_LOWER template on combined data.");
        }
!!!7214213.java!!!	normalize(inout template : NetworkTemplate, inout merged : String [[]]) : NetworkTemplate
        if (template.isMatchRuleMobile() && ArrayUtils.contains(merged, template.mSubscriberId)) {
            // Requested template subscriber is part of the merge group; return
            // a template that matches all merged subscribers.
            return new NetworkTemplate(template.mMatchRule, merged[0], merged,
                    template.mNetworkId);
        } else {
            return template;
        }
!!!7214341.java!!!	getBytesForBackup() : byte
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream out = new DataOutputStream(baos);

        out.writeInt(BACKUP_VERSION);

        out.writeInt(mMatchRule);
        BackupUtils.writeString(out, mSubscriberId);
        BackupUtils.writeString(out, mNetworkId);

        return baos.toByteArray();
!!!7214469.java!!!	getNetworkTemplateFromBackup(inout in : DataInputStream) : NetworkTemplate
        int version = in.readInt();
        if (version < 1 || version > BACKUP_VERSION) {
            throw new BackupUtils.BadVersionException("Unknown Backup Serialization Version");
        }

        int matchRule = in.readInt();
        String subscriberId = BackupUtils.readString(in);
        String networkId = BackupUtils.readString(in);

        return new NetworkTemplate(matchRule, subscriberId, networkId);
