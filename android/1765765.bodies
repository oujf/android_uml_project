class FileCollector
!!!12475269.java!!!	getMeasurementResult(inout path : File) : FileCollector::MeasurementResult
        return collectFiles(StorageManager.maybeTranslateEmulatedPathToInternal(path),
                new MeasurementResult());
!!!12475397.java!!!	getMeasurementResult(inout context : Context) : FileCollector::MeasurementResult
        MeasurementResult result = new MeasurementResult();
        StorageStatsManager ssm =
                (StorageStatsManager) context.getSystemService(Context.STORAGE_STATS_SERVICE);
        ExternalStorageStats stats = null;
        try {
            stats =
                    ssm.queryExternalStatsForUser(
                            StorageManager.UUID_PRIVATE_INTERNAL,
                            UserHandle.of(context.getUserId()));
            result.imagesSize = stats.getImageBytes();
            result.videosSize = stats.getVideoBytes();
            result.audioSize = stats.getAudioBytes();
            result.miscSize =
                    stats.getTotalBytes()
                            - result.imagesSize
                            - result.videosSize
                            - result.audioSize;
        } catch (IOException e) {
            throw new IllegalStateException("Could not query storage");
        }

        return result;
!!!12475525.java!!!	getSystemSize(inout context : Context) : long
        PackageManager pm = context.getPackageManager();
        VolumeInfo primaryVolume = pm.getPrimaryStorageCurrentVolume();

        StorageManager sm = (StorageManager) context.getSystemService(Context.STORAGE_SERVICE);
        VolumeInfo shared = sm.findEmulatedForPrivate(primaryVolume);
        if (shared == null) {
            return 0;
        }

        // In some cases, the path may be null -- we can't determine the size in this case.
        final File sharedPath = shared.getPath();
        if (sharedPath == null) {
          return 0;
        }

        final long sharedDataSize = sharedPath.getTotalSpace();
        long systemSize = sm.getPrimaryStorageSize() - sharedDataSize;

        // This case is not exceptional -- we just fallback to the shared data volume in this case.
        if (systemSize <= 0) {
            return 0;
        }

        return systemSize;
!!!12475653.java!!!	collectFiles(inout file : File, inout result : FileCollector::MeasurementResult) : FileCollector::MeasurementResult
        File[] files = file.listFiles();

        if (files == null) {
            return result;
        }

        for (File f : files) {
            if (f.isDirectory()) {
                try {
                    collectFiles(f, result);
                } catch (StackOverflowError e) {
                    return result;
                }
            } else {
                handleFile(result, f);
            }
        }

        return result;
!!!12475781.java!!!	handleFile(inout result : FileCollector::MeasurementResult, inout f : File) : void
        long fileSize = f.length();
        int fileType = EXTENSION_MAP.getOrDefault(getExtensionForFile(f), UNRECOGNIZED);
        switch (fileType) {
            case AUDIO:
                result.audioSize += fileSize;
                break;
            case VIDEO:
                result.videosSize += fileSize;
                break;
            case IMAGES:
                result.imagesSize += fileSize;
                break;
            default:
                result.miscSize += fileSize;
        }
!!!12475909.java!!!	getExtensionForFile(inout file : File) : String
        String fileName = file.getName();
        int index = fileName.lastIndexOf('.');
        if (index == -1) {
            return "";
        }
        return fileName.substring(index + 1).toLowerCase();
