class LibsndfileSource
!!!1075205.cpp!!!	~LibsndfileSource()
    // do not close mSndfile; we don't own it
!!!1075333.cpp!!!	availableToRead() : ssize_t
    // after we reach the presumed EOF, report infinity just in case there's actually more
    return !mLooping && mEstimatedFramesUntilEOF > 0 ? mEstimatedFramesUntilEOF : SSIZE_MAX;
!!!1075461.cpp!!!	read(inout buffer : void, in count : size_t) : ssize_t
    if (!mNegotiated) {
        return (ssize_t) NEGOTIATE;
    }
    if (mSndfile == NULL) {
        return (ssize_t) NO_INIT;
    }
    sf_count_t actual = sf_readf_short(mSndfile, (short *) buffer, (sf_count_t) count);
    // Detect EOF by zero frames read, not by mFramesUntilEOF as it could be inaccurate
    if (actual == 0) {
        if (mLooping) {
            if (mReadAnyFramesThisLoopCycle) {
                (void) sf_seek(mSndfile, (sf_count_t) 0, SEEK_SET);
                mReadAnyFramesThisLoopCycle = false;
            } else {
                // We didn't read any frames during the current loop cycle, so disable
                // further looping to prevent the caller from busy waiting at read().
                // This is especially important when looping an empty file.
                mLooping = false;
            }
        }
    } else {
        mFramesRead += actual;
        if (actual >= mEstimatedFramesUntilEOF) {
            mEstimatedFramesUntilEOF = 0;
        } else {
            mEstimatedFramesUntilEOF -= actual;
        }
        mReadAnyFramesThisLoopCycle = true;
    }
    return actual;
