class HdmiTvClient
!!!6849669.java!!!	HdmiTvClient(inout service : IHdmiControlService)
        super(service);
!!!6849797.java!!!	create(inout service : IHdmiControlService) : HdmiTvClient
        return new HdmiTvClient(service);
!!!6849925.java!!!	getDeviceType() : int
        return HdmiDeviceInfo.DEVICE_TV;
!!!6850181.java!!!	deviceSelect(in logicalAddress : int, inout callback : HdmiTvClient::SelectCallback) : void
        if (callback == null) {
            throw new IllegalArgumentException("callback must not be null.");
        }
        try {
            mService.deviceSelect(logicalAddress, getCallbackWrapper(callback));
        } catch (RemoteException e) {
            Log.e(TAG, "failed to select device: ", e);
        }
!!!6850309.java!!!	getCallbackWrapper(in callback : HdmiTvClient::SelectCallback) : IHdmiControlCallback
        return new IHdmiControlCallback.Stub() {
            @Override
            public void onComplete(int result) {
                callback.onComplete(result);
            }
        };
!!!6850437.java!!!	portSelect(in portId : int, inout callback : HdmiTvClient::SelectCallback) : void
        if (callback == null) {
            throw new IllegalArgumentException("Callback must not be null");
        }
        try {
            mService.portSelect(portId, getCallbackWrapper(callback));
        } catch (RemoteException e) {
            Log.e(TAG, "failed to select port: ", e);
        }
!!!6850693.java!!!	setInputChangeListener(inout listener : HdmiTvClient::InputChangeListener) : void
        if (listener == null) {
            throw new IllegalArgumentException("listener must not be null.");
        }
        try {
            mService.setInputChangeListener(getListenerWrapper(listener));
        } catch (RemoteException e) {
            Log.e("TAG", "Failed to set InputChangeListener:", e);
        }
!!!6850821.java!!!	getListenerWrapper(in listener : HdmiTvClient::InputChangeListener) : IHdmiInputChangeListener
        return new IHdmiInputChangeListener.Stub() {
            @Override
            public void onChanged(HdmiDeviceInfo info) {
                listener.onChanged(info);
            }
        };
!!!6850949.java!!!	getDeviceList() : HdmiDeviceInfo
        try {
            return mService.getDeviceList();
        } catch (RemoteException e) {
            Log.e("TAG", "Failed to call getDeviceList():", e);
            return Collections.<HdmiDeviceInfo>emptyList();
        }
!!!6851077.java!!!	setSystemAudioMode(inout enabled : boolean, inout callback : HdmiTvClient::SelectCallback) : void
        try {
            mService.setSystemAudioMode(enabled, getCallbackWrapper(callback));
        } catch (RemoteException e) {
            Log.e(TAG, "failed to set system audio mode:", e);
        }
!!!6851205.java!!!	setSystemAudioVolume(in oldIndex : int, in newIndex : int, in maxIndex : int) : void
        try {
            mService.setSystemAudioVolume(oldIndex, newIndex, maxIndex);
        } catch (RemoteException e) {
            Log.e(TAG, "failed to set volume: ", e);
        }
!!!6851333.java!!!	setSystemAudioMute(inout mute : boolean) : void
        try {
            mService.setSystemAudioMute(mute);
        } catch (RemoteException e) {
            Log.e(TAG, "failed to set mute: ", e);
        }
!!!6851461.java!!!	setRecordListener(inout listener : HdmiRecordListener) : void
        if (listener == null) {
            throw new IllegalArgumentException("listener must not be null.");
        }
        try {
            mService.setHdmiRecordListener(getListenerWrapper(listener));
        } catch (RemoteException e) {
            Log.e(TAG, "failed to set record listener.", e);
        }
!!!6851589.java!!!	sendStandby(in deviceId : int) : void
        try {
            mService.sendStandby(getDeviceType(), deviceId);
        } catch (RemoteException e) {
            Log.e(TAG, "sendStandby threw exception ", e);
        }
!!!6851717.java!!!	getListenerWrapper(in callback : HdmiRecordListener) : IHdmiRecordListener
        return new IHdmiRecordListener.Stub() {
            @Override
            public byte[] getOneTouchRecordSource(int recorderAddress) {
                HdmiRecordSources.RecordSource source =
                        callback.onOneTouchRecordSourceRequested(recorderAddress);
                if (source == null) {
                    return EmptyArray.BYTE;
                }
                byte[] data = new byte[source.getDataSize(true)];
                source.toByteArray(true, data, 0);
                return data;
            }

            @Override
            public void onOneTouchRecordResult(int recorderAddress, int result) {
                callback.onOneTouchRecordResult(recorderAddress, result);
            }

            @Override
            public void onTimerRecordingResult(int recorderAddress, int result) {
                callback.onTimerRecordingResult(recorderAddress,
                        HdmiRecordListener.TimerStatusData.parseFrom(result));
            }

            @Override
            public void onClearTimerRecordingResult(int recorderAddress, int result) {
                callback.onClearTimerRecordingResult(recorderAddress, result);
            }
        };
!!!6851845.java!!!	startOneTouchRecord(in recorderAddress : int, inout source : HdmiRecordSources::RecordSource) : void
        if (source == null) {
            throw new IllegalArgumentException("source must not be null.");
        }

        try {
            byte[] data = new byte[source.getDataSize(true)];
            source.toByteArray(true, data, 0);
            mService.startOneTouchRecord(recorderAddress, data);
        } catch (RemoteException e) {
            Log.e(TAG, "failed to start record: ", e);
        }
!!!6851973.java!!!	stopOneTouchRecord(in recorderAddress : int) : void
        try {
            mService.stopOneTouchRecord(recorderAddress);
        } catch (RemoteException e) {
            Log.e(TAG, "failed to stop record: ", e);
        }
!!!6852101.java!!!	startTimerRecording(in recorderAddress : int, in sourceType : int, inout source : HdmiTimerRecordSources::TimerRecordSource) : void
        if (source == null) {
            throw new IllegalArgumentException("source must not be null.");
        }

        checkTimerRecordingSourceType(sourceType);

        try {
            byte[] data = new byte[source.getDataSize()];
            source.toByteArray(data, 0);
            mService.startTimerRecording(recorderAddress, sourceType, data);
        } catch (RemoteException e) {
            Log.e(TAG, "failed to start record: ", e);
        }
!!!6852229.java!!!	checkTimerRecordingSourceType(in sourceType : int) : void
        switch (sourceType) {
            case HdmiControlManager.TIMER_RECORDING_TYPE_DIGITAL:
            case HdmiControlManager.TIMER_RECORDING_TYPE_ANALOGUE:
            case HdmiControlManager.TIMER_RECORDING_TYPE_EXTERNAL:
                break;
            default:
                throw new IllegalArgumentException("Invalid source type:" + sourceType);
        }
!!!6852357.java!!!	clearTimerRecording(in recorderAddress : int, in sourceType : int, inout source : HdmiTimerRecordSources::TimerRecordSource) : void
        if (source == null) {
            throw new IllegalArgumentException("source must not be null.");
        }

        checkTimerRecordingSourceType(sourceType);
        try {
            byte[] data = new byte[source.getDataSize()];
            source.toByteArray(data, 0);
            mService.clearTimerRecording(recorderAddress, sourceType, data);
        } catch (RemoteException e) {
            Log.e(TAG, "failed to start record: ", e);
        }
!!!6852613.java!!!	setHdmiMhlVendorCommandListener(inout listener : HdmiTvClient::HdmiMhlVendorCommandListener) : void
        if (listener == null) {
            throw new IllegalArgumentException("listener must not be null.");
        }
        try {
            mService.addHdmiMhlVendorCommandListener(getListenerWrapper(listener));
        } catch (RemoteException e) {
            Log.e(TAG, "failed to set hdmi mhl vendor command listener: ", e);
        }
!!!6852741.java!!!	getListenerWrapper(in listener : HdmiTvClient::HdmiMhlVendorCommandListener) : IHdmiMhlVendorCommandListener
        return new IHdmiMhlVendorCommandListener.Stub() {
            @Override
            public void onReceived(int portId, int offset, int length, byte[] data) {
                listener.onReceived(portId, offset, length, data);
            }
        };
!!!6852869.java!!!	sendMhlVendorCommand(in portId : int, in offset : int, in length : int, inout data : byte [[]]) : void
        if (data == null || data.length != VENDOR_DATA_SIZE) {
            throw new IllegalArgumentException("Invalid vendor command data.");
        }
        if (offset < 0 || offset >= VENDOR_DATA_SIZE) {
            throw new IllegalArgumentException("Invalid offset:" + offset);
        }
        if (length < 0 || offset + length > VENDOR_DATA_SIZE) {
            throw new IllegalArgumentException("Invalid length:" + length);
        }

        try {
            mService.sendMhlVendorCommand(portId, offset, length, data);
        } catch (RemoteException e) {
            Log.e(TAG, "failed to send vendor command: ", e);
        }
