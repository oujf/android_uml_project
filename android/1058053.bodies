class DatePicker
!!!5336197.java!!!	DatePicker(inout context : Context)
        this(context, null);
!!!5336325.java!!!	DatePicker(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, R.attr.datePickerStyle);
!!!5336453.java!!!	DatePicker(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!5336581.java!!!	DatePicker(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        // DatePicker is important by default, unless app developer overrode attribute.
        if (getImportantForAutofill() == IMPORTANT_FOR_AUTOFILL_AUTO) {
            setImportantForAutofill(IMPORTANT_FOR_AUTOFILL_YES);
        }

        final TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.DatePicker,
                defStyleAttr, defStyleRes);
        final boolean isDialogMode = a.getBoolean(R.styleable.DatePicker_dialogMode, false);
        final int requestedMode = a.getInt(R.styleable.DatePicker_datePickerMode, MODE_SPINNER);
        final int firstDayOfWeek = a.getInt(R.styleable.DatePicker_firstDayOfWeek, 0);
        a.recycle();

        if (requestedMode == MODE_CALENDAR && isDialogMode) {
            // You want MODE_CALENDAR? YOU CAN'T HANDLE MODE_CALENDAR! Well,
            // maybe you can depending on your screen size. Let's check...
            mMode = context.getResources().getInteger(R.integer.date_picker_mode);
        } else {
            mMode = requestedMode;
        }

        switch (mMode) {
            case MODE_CALENDAR:
                mDelegate = createCalendarUIDelegate(context, attrs, defStyleAttr, defStyleRes);
                break;
            case MODE_SPINNER:
            default:
                mDelegate = createSpinnerUIDelegate(context, attrs, defStyleAttr, defStyleRes);
                break;
        }

        if (firstDayOfWeek != 0) {
            setFirstDayOfWeek(firstDayOfWeek);
        }

        mDelegate.setAutoFillChangeListener((v, y, m, d) -> {
            final AutofillManager afm = context.getSystemService(AutofillManager.class);
            if (afm != null) {
                afm.notifyValueChanged(this);
            }
        });
!!!5336709.java!!!	createSpinnerUIDelegate(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int) : DatePicker::DatePickerDelegate
        return new DatePickerSpinnerDelegate(this, context, attrs, defStyleAttr, defStyleRes);
!!!5336837.java!!!	createCalendarUIDelegate(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int) : DatePicker::DatePickerDelegate
        return new DatePickerCalendarDelegate(this, context, attrs, defStyleAttr,
                defStyleRes);
!!!5336965.java!!!	getMode() : int
        return mMode;
!!!5337093.java!!!	init(in year : int, in monthOfYear : int, in dayOfMonth : int, inout onDateChangedListener : DatePicker::OnDateChangedListener) : void
        mDelegate.init(year, monthOfYear, dayOfMonth, onDateChangedListener);
!!!5337221.java!!!	setOnDateChangedListener(inout onDateChangedListener : DatePicker::OnDateChangedListener) : void
        mDelegate.setOnDateChangedListener(onDateChangedListener);
!!!5337349.java!!!	updateDate(in year : int, in month : int, in dayOfMonth : int) : void
        mDelegate.updateDate(year, month, dayOfMonth);
!!!5337477.java!!!	getYear() : int
        return mDelegate.getYear();
!!!5337605.java!!!	getMonth() : int
        return mDelegate.getMonth();
!!!5337733.java!!!	getDayOfMonth() : int
        return mDelegate.getDayOfMonth();
!!!5337861.java!!!	getMinDate() : long
        return mDelegate.getMinDate().getTimeInMillis();
!!!5337989.java!!!	setMinDate(in minDate : long) : void
        mDelegate.setMinDate(minDate);
!!!5338117.java!!!	getMaxDate() : long
        return mDelegate.getMaxDate().getTimeInMillis();
!!!5338245.java!!!	setMaxDate(in maxDate : long) : void
        mDelegate.setMaxDate(maxDate);
!!!5338373.java!!!	setValidationCallback(inout callback : DatePicker::ValidationCallback) : void
        mDelegate.setValidationCallback(callback);
!!!5338501.java!!!	setEnabled(inout enabled : boolean) : void
        if (mDelegate.isEnabled() == enabled) {
            return;
        }
        super.setEnabled(enabled);
        mDelegate.setEnabled(enabled);
!!!5338629.java!!!	isEnabled() : boolean
        return mDelegate.isEnabled();
!!!5338757.java!!!	dispatchPopulateAccessibilityEventInternal(inout event : AccessibilityEvent) : boolean
        return mDelegate.dispatchPopulateAccessibilityEvent(event);
!!!5338885.java!!!	onPopulateAccessibilityEventInternal(inout event : AccessibilityEvent) : void
        super.onPopulateAccessibilityEventInternal(event);
        mDelegate.onPopulateAccessibilityEvent(event);
!!!5339013.java!!!	getAccessibilityClassName() : CharSequence
        return DatePicker.class.getName();
!!!5339141.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        super.onConfigurationChanged(newConfig);
        mDelegate.onConfigurationChanged(newConfig);
!!!5339269.java!!!	setFirstDayOfWeek(in firstDayOfWeek : int) : void
        if (firstDayOfWeek < Calendar.SUNDAY || firstDayOfWeek > Calendar.SATURDAY) {
            throw new IllegalArgumentException("firstDayOfWeek must be between 1 and 7");
        }
        mDelegate.setFirstDayOfWeek(firstDayOfWeek);
!!!5339397.java!!!	getFirstDayOfWeek() : int
        return mDelegate.getFirstDayOfWeek();
!!!5339525.java!!!	getCalendarViewShown() : boolean
        return mDelegate.getCalendarViewShown();
!!!5339653.java!!!	getCalendarView() : CalendarView
        return mDelegate.getCalendarView();
!!!5339781.java!!!	setCalendarViewShown(inout shown : boolean) : void
        mDelegate.setCalendarViewShown(shown);
!!!5339909.java!!!	getSpinnersShown() : boolean
        return mDelegate.getSpinnersShown();
!!!5340037.java!!!	setSpinnersShown(inout shown : boolean) : void
        mDelegate.setSpinnersShown(shown);
!!!5340165.java!!!	dispatchRestoreInstanceState(inout container : SparseArray) : void
        dispatchThawSelfOnly(container);
!!!5340293.java!!!	onSaveInstanceState() : Parcelable
        Parcelable superState = super.onSaveInstanceState();
        return mDelegate.onSaveInstanceState(superState);
!!!5340421.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        BaseSavedState ss = (BaseSavedState) state;
        super.onRestoreInstanceState(ss.getSuperState());
        mDelegate.onRestoreInstanceState(ss);
!!!5347205.java!!!	dispatchProvideAutofillStructure(inout structure : ViewStructure, in flags : int) : void
        // This view is self-sufficient for autofill, so it needs to call
        // onProvideAutoFillStructure() to fill itself, but it does not need to call
        // dispatchProvideAutoFillStructure() to fill its children.
        structure.setAutofillId(getAutofillId());
        onProvideAutofillStructure(structure, flags);
!!!5347333.java!!!	autofill(inout value : AutofillValue) : void
        if (!isEnabled()) return;

        if (!value.isDate()) {
            Log.w(LOG_TAG, value + " could not be autofilled into " + this);
            return;
        }

        mDelegate.updateDate(value.getDateValue());
!!!5347461.java!!!	getAutofillType() : int
        return isEnabled() ? AUTOFILL_TYPE_DATE : AUTOFILL_TYPE_NONE;
!!!5347589.java!!!	getAutofillValue() : AutofillValue
        return isEnabled() ? AutofillValue.forDate(mDelegate.getDate()) : null;
