class PipAccessibilityInteractionConnection
!!!3270149.java!!!	PipAccessibilityInteractionConnection(inout motionHelper : PipMotionHelper, inout callbacks : PipAccessibilityInteractionConnection::AccessibilityCallbacks, inout handler : Handler)
        mHandler = handler;
        mMotionHelper = motionHelper;
        mCallbacks = callbacks;
!!!3270277.java!!!	findAccessibilityNodeInfoByAccessibilityId(in accessibilityNodeId : long, inout interactiveRegion : Region, in interactionId : int, inout callback : IAccessibilityInteractionConnectionCallback, in flags : int, in interrogatingPid : int, in interrogatingTid : long, inout spec : MagnificationSpec, inout args : Bundle) : void
        try {
            callback.setFindAccessibilityNodeInfosResult(
                    (accessibilityNodeId == AccessibilityNodeInfo.ROOT_NODE_ID)
                            ? getNodeList() : null, interactionId);
        } catch (RemoteException re) {
                /* best effort - ignore */
        }
!!!3270405.java!!!	performAccessibilityAction(in accessibilityNodeId : long, in action : int, inout arguments : Bundle, in interactionId : int, inout callback : IAccessibilityInteractionConnectionCallback, in flags : int, in interrogatingPid : int, in interrogatingTid : long) : void
        // We only support one view. A request for anything else is invalid
        boolean result = false;
        if (accessibilityNodeId == AccessibilityNodeInfo.ROOT_NODE_ID) {
            switch (action) {
                case AccessibilityNodeInfo.ACTION_CLICK:
                    mHandler.post(() -> {
                        mCallbacks.onAccessibilityShowMenu();
                    });
                    result = true;
                    break;
                case AccessibilityNodeInfo.ACTION_DISMISS:
                    mMotionHelper.dismissPip();
                    result = true;
                    break;
                case com.android.internal.R.id.accessibilityActionMoveWindow:
                    int newX = arguments.getInt(
                            AccessibilityNodeInfo.ACTION_ARGUMENT_MOVE_WINDOW_X);
                    int newY = arguments.getInt(
                            AccessibilityNodeInfo.ACTION_ARGUMENT_MOVE_WINDOW_Y);
                    Rect pipBounds = new Rect();
                    pipBounds.set(mMotionHelper.getBounds());
                    mTmpBounds.offsetTo(newX, newY);
                    mMotionHelper.movePip(mTmpBounds);
                    result = true;
                    break;
                case AccessibilityNodeInfo.ACTION_EXPAND:
                    mMotionHelper.expandPip();
                    result = true;
                    break;
                default:
                    // Leave result as false
            }
        }
        try {
            callback.setPerformAccessibilityActionResult(result, interactionId);
        } catch (RemoteException re) {
                /* best effort - ignore */
        }
!!!3270533.java!!!	findAccessibilityNodeInfosByViewId(in accessibilityNodeId : long, in viewId : String, inout interactiveRegion : Region, in interactionId : int, inout callback : IAccessibilityInteractionConnectionCallback, in flags : int, in interrogatingPid : int, in interrogatingTid : long, inout spec : MagnificationSpec) : void
        // We have no view with a proper ID
        try {
            callback.setFindAccessibilityNodeInfoResult(null, interactionId);
        } catch (RemoteException re) {
            /* best effort - ignore */
        }
!!!3270661.java!!!	findAccessibilityNodeInfosByText(in accessibilityNodeId : long, in text : String, inout interactiveRegion : Region, in interactionId : int, inout callback : IAccessibilityInteractionConnectionCallback, in flags : int, in interrogatingPid : int, in interrogatingTid : long, inout spec : MagnificationSpec) : void
        // We have no view with text
        try {
            callback.setFindAccessibilityNodeInfoResult(null, interactionId);
        } catch (RemoteException re) {
            /* best effort - ignore */
        }
!!!3270789.java!!!	findFocus(in accessibilityNodeId : long, in focusType : int, inout interactiveRegion : Region, in interactionId : int, inout callback : IAccessibilityInteractionConnectionCallback, in flags : int, in interrogatingPid : int, in interrogatingTid : long, inout spec : MagnificationSpec) : void
        // We have no view that can take focus
        try {
            callback.setFindAccessibilityNodeInfoResult(null, interactionId);
        } catch (RemoteException re) {
            /* best effort - ignore */
        }
!!!3270917.java!!!	focusSearch(in accessibilityNodeId : long, in direction : int, inout interactiveRegion : Region, in interactionId : int, inout callback : IAccessibilityInteractionConnectionCallback, in flags : int, in interrogatingPid : int, in interrogatingTid : long, inout spec : MagnificationSpec) : void
        // We have no view that can take focus
        try {
            callback.setFindAccessibilityNodeInfoResult(null, interactionId);
        } catch (RemoteException re) {
            /* best effort - ignore */
        }
!!!3271045.java!!!	obtainRootAccessibilityNodeInfo() : AccessibilityNodeInfo
        AccessibilityNodeInfo info = AccessibilityNodeInfo.obtain();
        info.setSourceNodeId(AccessibilityNodeInfo.ROOT_NODE_ID,
                AccessibilityWindowInfo.PICTURE_IN_PICTURE_ACTION_REPLACER_WINDOW_ID);
        info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_CLICK);
        info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_DISMISS);
        info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_MOVE_WINDOW);
        info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_EXPAND);
        info.setImportantForAccessibility(true);
        info.setClickable(true);
        info.setVisibleToUser(true);
        return info;
!!!3271173.java!!!	getNodeList() : List<AccessibilityNodeInfo>
        if (mAccessibilityNodeInfoList == null) {
            mAccessibilityNodeInfoList = new ArrayList<>(1);
        }
        AccessibilityNodeInfo info = obtainRootAccessibilityNodeInfo();
        mAccessibilityNodeInfoList.clear();
        mAccessibilityNodeInfoList.add(info);
        return mAccessibilityNodeInfoList;
