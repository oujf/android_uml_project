class AutofillPopupWindow
!!!9030789.java!!!	AutofillPopupWindow(inout presenter : IAutofillWindowPresenter)
        mWindowPresenter = new WindowPresenter(presenter);

        setOutsideTouchable(true);
        setInputMethodMode(INPUT_METHOD_NEEDED);
!!!9030917.java!!!	hasContentView() : boolean
        return true;
!!!9031045.java!!!	hasDecorView() : boolean
        return true;
!!!9031173.java!!!	getDecorViewLayoutParams() : WindowManager::LayoutParams
        return mWindowLayoutParams;
!!!9031301.java!!!	update(inout anchor : View, in offsetX : int, in offsetY : int, in width : int, in height : int, inout virtualBounds : Rect) : void
        // If we are showing the popup for a virtual view we use a fake view which
        // delegates to the anchor but present itself with the same bounds as the
        // virtual view. This ensures that the location logic in popup works
        // symmetrically when the dropdown is below and above the anchor.
        final View actualAnchor;
        if (virtualBounds != null) {
            actualAnchor = new View(anchor.getContext()) {
                @Override
                public void getLocationOnScreen(int[] location) {
                    location[0] = virtualBounds.left;
                    location[1] = virtualBounds.top;
                }

                @Override
                public int getAccessibilityViewId() {
                    return anchor.getAccessibilityViewId();
                }

                @Override
                public ViewTreeObserver getViewTreeObserver() {
                    return anchor.getViewTreeObserver();
                }

                @Override
                public IBinder getApplicationWindowToken() {
                    return anchor.getApplicationWindowToken();
                }

                @Override
                public View getRootView() {
                    return anchor.getRootView();
                }

                @Override
                public int getLayoutDirection() {
                    return anchor.getLayoutDirection();
                }

                @Override
                public void getWindowDisplayFrame(Rect outRect) {
                    anchor.getWindowDisplayFrame(outRect);
                }

                @Override
                public void addOnAttachStateChangeListener(
                        OnAttachStateChangeListener listener) {
                    anchor.addOnAttachStateChangeListener(listener);
                }

                @Override
                public void removeOnAttachStateChangeListener(
                        OnAttachStateChangeListener listener) {
                    anchor.removeOnAttachStateChangeListener(listener);
                }

                @Override
                public boolean isAttachedToWindow() {
                    return anchor.isAttachedToWindow();
                }

                @Override
                public boolean requestRectangleOnScreen(Rect rectangle, boolean immediate) {
                    return anchor.requestRectangleOnScreen(rectangle, immediate);
                }

                @Override
                public IBinder getWindowToken() {
                    return anchor.getWindowToken();
                }
            };

            actualAnchor.setLeftTopRightBottom(
                    virtualBounds.left, virtualBounds.top,
                    virtualBounds.right, virtualBounds.bottom);
            actualAnchor.setScrollX(anchor.getScrollX());
            actualAnchor.setScrollY(anchor.getScrollY());
        } else {
            actualAnchor = anchor;
        }

        if (!isShowing()) {
            setWidth(width);
            setHeight(height);
            showAsDropDown(actualAnchor, offsetX, offsetY);
        } else {
            update(actualAnchor, offsetX, offsetY, width, height);
        }
!!!9031429.java!!!	update(inout anchor : View, inout params : WindowManager::LayoutParams) : void
        final int layoutDirection = anchor != null ? anchor.getLayoutDirection()
                : View.LAYOUT_DIRECTION_LOCALE;
        mWindowPresenter.show(params, getTransitionEpicenter(), isLayoutInsetDecor(),
                layoutDirection);
!!!9031557.java!!!	showAsDropDown(inout anchor : View, in xoff : int, in yoff : int, in gravity : int) : void
        if (sVerbose) {
            Log.v(TAG, "showAsDropDown(): anchor=" + anchor + ", xoff=" + xoff + ", yoff=" + yoff
                    + ", isShowing(): " + isShowing());
        }
        if (isShowing()) {
            return;
        }

        setShowing(true);
        setDropDown(true);
        attachToAnchor(anchor, xoff, yoff, gravity);
        final WindowManager.LayoutParams p = mWindowLayoutParams = createPopupLayoutParams(
                anchor.getWindowToken());
        final boolean aboveAnchor = findDropDownPosition(anchor, p, xoff, yoff,
                p.width, p.height, gravity, getAllowScrollingAnchorParent());
        updateAboveAnchor(aboveAnchor);
        p.accessibilityIdOfAnchor = anchor.getAccessibilityViewId();
        p.packageName = anchor.getContext().getPackageName();
        mWindowPresenter.show(p, getTransitionEpicenter(), isLayoutInsetDecor(),
                anchor.getLayoutDirection());
        return;
!!!9031685.java!!!	dismiss() : void
        if (!isShowing() || isTransitioningToDismiss()) {
            return;
        }

        setShowing(false);
        setTransitioningToDismiss(true);

        mWindowPresenter.hide(getTransitionEpicenter());
        detachFromAnchor();
        if (getOnDismissListener() != null) {
            getOnDismissListener().onDismiss();
        }
!!!9031813.java!!!	getAnimationStyle() : int
        throw new IllegalStateException("You can't call this!");
!!!9031941.java!!!	getBackground() : Drawable
        throw new IllegalStateException("You can't call this!");
!!!9032069.java!!!	getContentView() : View
        throw new IllegalStateException("You can't call this!");
!!!9032197.java!!!	getElevation() : float
        throw new IllegalStateException("You can't call this!");
!!!9032325.java!!!	getEnterTransition() : Transition
        throw new IllegalStateException("You can't call this!");
!!!9032453.java!!!	getExitTransition() : Transition
        throw new IllegalStateException("You can't call this!");
!!!9032581.java!!!	setAnimationStyle(in animationStyle : int) : void
        throw new IllegalStateException("You can't call this!");
!!!9032709.java!!!	setBackgroundDrawable(inout background : Drawable) : void
        throw new IllegalStateException("You can't call this!");
!!!9032837.java!!!	setContentView(inout contentView : View) : void
        if (contentView != null) {
            throw new IllegalStateException("You can't call this!");
        }
!!!9032965.java!!!	setElevation(in elevation : float) : void
        throw new IllegalStateException("You can't call this!");
!!!9033093.java!!!	setEnterTransition(inout enterTransition : Transition) : void
        throw new IllegalStateException("You can't call this!");
!!!9033221.java!!!	setExitTransition(inout exitTransition : Transition) : void
        throw new IllegalStateException("You can't call this!");
!!!9033349.java!!!	setTouchInterceptor(inout l : View::OnTouchListener) : void
        throw new IllegalStateException("You can't call this!");
