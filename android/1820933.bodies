class Proxy
!!!13128965.java!!!	Proxy(inout remote : android.os.IBinder)
mRemote = remote;
!!!13129093.java!!!	asBinder() : android.os.IBinder
return mRemote;
!!!13129221.java!!!	getInterfaceDescriptor() : java.lang.String
return DESCRIPTOR;
!!!13129349.java!!!	schedule(inout job : android.app.job.JobInfo) : int
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
int _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
if ((job!=null)) {
_data.writeInt(1);
job.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
mRemote.transact(Stub.TRANSACTION_schedule, _data, _reply, 0);
_reply.readException();
_result = _reply.readInt();
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!13129477.java!!!	enqueue(inout job : android.app.job.JobInfo, inout work : android.app.job.JobWorkItem) : int
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
int _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
if ((job!=null)) {
_data.writeInt(1);
job.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
if ((work!=null)) {
_data.writeInt(1);
work.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
mRemote.transact(Stub.TRANSACTION_enqueue, _data, _reply, 0);
_reply.readException();
_result = _reply.readInt();
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!13129605.java!!!	scheduleAsPackage(inout job : android.app.job.JobInfo, inout packageName : java.lang.String, in userId : int, inout tag : java.lang.String) : int
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
int _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
if ((job!=null)) {
_data.writeInt(1);
job.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
_data.writeString(packageName);
_data.writeInt(userId);
_data.writeString(tag);
mRemote.transact(Stub.TRANSACTION_scheduleAsPackage, _data, _reply, 0);
_reply.readException();
_result = _reply.readInt();
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!13129733.java!!!	cancel(in jobId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(jobId);
mRemote.transact(Stub.TRANSACTION_cancel, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!13129861.java!!!	cancelAll() : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_cancelAll, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!13129989.java!!!	getAllPendingJobs() : java.util.List<android.app.job.JobInfo>
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
java.util.List<android.app.job.JobInfo> _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_getAllPendingJobs, _data, _reply, 0);
_reply.readException();
_result = _reply.createTypedArrayList(android.app.job.JobInfo.CREATOR);
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!13130117.java!!!	getPendingJob(in jobId : int) : android.app.job.JobInfo
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
android.app.job.JobInfo _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(jobId);
mRemote.transact(Stub.TRANSACTION_getPendingJob, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = android.app.job.JobInfo.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
