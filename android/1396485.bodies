class MapCollections
!!!8474885.java!!!	containsAllHelper(inout map : Map<K, V>, inout collection : Collection<?>) : boolean
        Iterator<?> it = collection.iterator();
        while (it.hasNext()) {
            if (!map.containsKey(it.next())) {
                return false;
            }
        }
        return true;
!!!8475013.java!!!	removeAllHelper(inout map : Map<K, V>, inout collection : Collection<?>) : boolean
        int oldSize = map.size();
        Iterator<?> it = collection.iterator();
        while (it.hasNext()) {
            map.remove(it.next());
        }
        return oldSize != map.size();
!!!8475141.java!!!	retainAllHelper(inout map : Map<K, V>, inout collection : Collection<?>) : boolean
        int oldSize = map.size();
        Iterator<K> it = map.keySet().iterator();
        while (it.hasNext()) {
            if (!collection.contains(it.next())) {
                it.remove();
            }
        }
        return oldSize != map.size();
!!!8475269.java!!!	toArrayHelper(in offset : int) : Object
        final int N = colGetSize();
        Object[] result = new Object[N];
        for (int i=0; i<N; i++) {
            result[i] = colGetEntry(i, offset);
        }
        return result;
!!!8475397.java!!!	toArrayHelper(inout array : T [[]], in offset : int) : T
        final int N  = colGetSize();
        if (array.length < N) {
            @SuppressWarnings("unchecked") T[] newArray
                = (T[]) Array.newInstance(array.getClass().getComponentType(), N);
            array = newArray;
        }
        for (int i=0; i<N; i++) {
            array[i] = (T)colGetEntry(i, offset);
        }
        if (array.length > N) {
            array[N] = null;
        }
        return array;
!!!8475525.java!!!	equalsSetHelper(inout set : Set<T>, inout object : Object) : boolean
        if (set == object) {
            return true;
        }
        if (object instanceof Set) {
            Set<?> s = (Set<?>) object;

            try {
                return set.size() == s.size() && set.containsAll(s);
            } catch (NullPointerException ignored) {
                return false;
            } catch (ClassCastException ignored) {
                return false;
            }
        }
        return false;
!!!8475653.java!!!	getEntrySet() : Set<Map.Entry<K, V>>
        if (mEntrySet == null) {
            mEntrySet = new EntrySet();
        }
        return mEntrySet;
!!!8475781.java!!!	getKeySet() : Set<K>
        if (mKeySet == null) {
            mKeySet = new KeySet();
        }
        return mKeySet;
!!!8475909.java!!!	getValues() : Collection<V>
        if (mValues == null) {
            mValues = new ValuesCollection();
        }
        return mValues;
