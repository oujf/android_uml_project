class AbsoluteLayout
!!!9110277.java!!!	AbsoluteLayout(inout context : Context)
        this(context, null);
!!!9110405.java!!!	AbsoluteLayout(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!9110533.java!!!	AbsoluteLayout(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!9110661.java!!!	AbsoluteLayout(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
!!!9110789.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        int count = getChildCount();

        int maxHeight = 0;
        int maxWidth = 0;

        // Find out how big everyone wants to be
        measureChildren(widthMeasureSpec, heightMeasureSpec);

        // Find rightmost and bottom-most child
        for (int i = 0; i < count; i++) {
            View child = getChildAt(i);
            if (child.getVisibility() != GONE) {
                int childRight;
                int childBottom;

                AbsoluteLayout.LayoutParams lp
                        = (AbsoluteLayout.LayoutParams) child.getLayoutParams();

                childRight = lp.x + child.getMeasuredWidth();
                childBottom = lp.y + child.getMeasuredHeight();

                maxWidth = Math.max(maxWidth, childRight);
                maxHeight = Math.max(maxHeight, childBottom);
            }
        }

        // Account for padding too
        maxWidth += mPaddingLeft + mPaddingRight;
        maxHeight += mPaddingTop + mPaddingBottom;

        // Check against minimum height and width
        maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());
        maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());
        
        setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, 0),
                resolveSizeAndState(maxHeight, heightMeasureSpec, 0));
!!!9110917.java!!!	generateDefaultLayoutParams() : ViewGroup::LayoutParams
        return new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0, 0);
!!!9111045.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        int count = getChildCount();

        for (int i = 0; i < count; i++) {
            View child = getChildAt(i);
            if (child.getVisibility() != GONE) {

                AbsoluteLayout.LayoutParams lp =
                        (AbsoluteLayout.LayoutParams) child.getLayoutParams();

                int childLeft = mPaddingLeft + lp.x;
                int childTop = mPaddingTop + lp.y;
                child.layout(childLeft, childTop,
                        childLeft + child.getMeasuredWidth(),
                        childTop + child.getMeasuredHeight());

            }
        }
!!!9111173.java!!!	generateLayoutParams(inout attrs : AttributeSet) : ViewGroup::LayoutParams
        return new AbsoluteLayout.LayoutParams(getContext(), attrs);
!!!9111301.java!!!	checkLayoutParams(inout p : ViewGroup::LayoutParams) : boolean
        return p instanceof AbsoluteLayout.LayoutParams;
!!!9111429.java!!!	generateLayoutParams(inout p : ViewGroup::LayoutParams) : ViewGroup::LayoutParams
        return new LayoutParams(p);
!!!9111557.java!!!	shouldDelayChildPressedState() : boolean
        return false;
