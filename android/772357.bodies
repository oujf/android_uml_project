class DozeLog
!!!3190533.java!!!	tracePickupPulse(inout context : Context, inout withinVibrationThreshold : boolean) : void
        if (!ENABLED) return;
        init(context);
        log("pickupPulse withinVibrationThreshold=" + withinVibrationThreshold);
        (withinVibrationThreshold ? sPickupPulseNearVibrationStats
                : sPickupPulseNotNearVibrationStats).append();
!!!3190661.java!!!	tracePulseStart(in reason : int) : void
        if (!ENABLED) return;
        sPulsing = true;
        log("pulseStart reason=" + pulseReasonToString(reason));
!!!3190789.java!!!	tracePulseFinish() : void
        if (!ENABLED) return;
        sPulsing = false;
        log("pulseFinish");
!!!3190917.java!!!	traceNotificationPulse(inout context : Context) : void
        if (!ENABLED) return;
        init(context);
        log("notificationPulse");
        sNotificationPulseStats.append();
!!!3191045.java!!!	init(inout context : Context) : void
        synchronized (DozeLog.class) {
            if (sMessages == null) {
                sTimes = new long[SIZE];
                sMessages = new String[SIZE];
                sSince = System.currentTimeMillis();
                sPickupPulseNearVibrationStats = new SummaryStats();
                sPickupPulseNotNearVibrationStats = new SummaryStats();
                sNotificationPulseStats = new SummaryStats();
                sScreenOnPulsingStats = new SummaryStats();
                sScreenOnNotPulsingStats = new SummaryStats();
                sEmergencyCallStats = new SummaryStats();
                sProxStats = new SummaryStats[PULSE_REASONS][2];
                for (int i = 0; i < PULSE_REASONS; i++) {
                    sProxStats[i][0] = new SummaryStats();
                    sProxStats[i][1] = new SummaryStats();
                }
                log("init");
                if (sRegisterKeyguardCallback) {
                    KeyguardUpdateMonitor.getInstance(context).registerCallback(sKeyguardCallback);
                }
            }
        }
!!!3191173.java!!!	traceDozing(inout context : Context, inout dozing : boolean) : void
        if (!ENABLED) return;
        sPulsing = false;
        init(context);
        log("dozing " + dozing);
!!!3191301.java!!!	traceFling(inout expand : boolean, inout aboveThreshold : boolean, inout thresholdNeeded : boolean, inout screenOnFromTouch : boolean) : void
        if (!ENABLED) return;
        log("fling expand=" + expand + " aboveThreshold=" + aboveThreshold + " thresholdNeeded="
                + thresholdNeeded + " screenOnFromTouch=" + screenOnFromTouch);
!!!3191429.java!!!	traceEmergencyCall() : void
        if (!ENABLED) return;
        log("emergencyCall");
        sEmergencyCallStats.append();
!!!3191557.java!!!	traceKeyguardBouncerChanged(inout showing : boolean) : void
        if (!ENABLED) return;
        log("bouncer " + showing);
!!!3191685.java!!!	traceScreenOn() : void
        if (!ENABLED) return;
        log("screenOn pulsing=" + sPulsing);
        (sPulsing ? sScreenOnPulsingStats : sScreenOnNotPulsingStats).append();
        sPulsing = false;
!!!3191813.java!!!	traceScreenOff(in why : int) : void
        if (!ENABLED) return;
        log("screenOff why=" + why);
!!!3191941.java!!!	traceMissedTick(in delay : String) : void
        if (!ENABLED) return;
        log("missedTick by=" + delay);
!!!3192069.java!!!	traceKeyguard(inout showing : boolean) : void
        if (!ENABLED) return;
        log("keyguard " + showing);
        if (!showing) {
            sPulsing = false;
        }
!!!3192197.java!!!	traceProximityResult(inout context : Context, inout near : boolean, in millis : long, in pulseReason : int) : void
        if (!ENABLED) return;
        init(context);
        log("proximityResult reason=" + pulseReasonToString(pulseReason) + " near=" + near
                + " millis=" + millis);
        sProxStats[pulseReason][near ? 0 : 1].append();
!!!3192325.java!!!	pulseReasonToString(in pulseReason : int) : String
        switch (pulseReason) {
            case PULSE_REASON_INTENT: return "intent";
            case PULSE_REASON_NOTIFICATION: return "notification";
            case PULSE_REASON_SENSOR_SIGMOTION: return "sigmotion";
            case PULSE_REASON_SENSOR_PICKUP: return "pickup";
            case PULSE_REASON_SENSOR_DOUBLE_TAP: return "doubletap";
            default: throw new IllegalArgumentException("bad reason: " + pulseReason);
        }
!!!3192453.java!!!	dump(inout pw : PrintWriter) : void
        synchronized (DozeLog.class) {
            if (sMessages == null) return;
            pw.println("  Doze log:");
            final int start = (sPosition - sCount + SIZE) % SIZE;
            for (int i = 0; i < sCount; i++) {
                final int j = (start + i) % SIZE;
                pw.print("    ");
                pw.print(FORMAT.format(new Date(sTimes[j])));
                pw.print(' ');
                pw.println(sMessages[j]);
            }
            pw.print("  Doze summary stats (for ");
            TimeUtils.formatDuration(System.currentTimeMillis() - sSince, pw);
            pw.println("):");
            sPickupPulseNearVibrationStats.dump(pw, "Pickup pulse (near vibration)");
            sPickupPulseNotNearVibrationStats.dump(pw, "Pickup pulse (not near vibration)");
            sNotificationPulseStats.dump(pw, "Notification pulse");
            sScreenOnPulsingStats.dump(pw, "Screen on (pulsing)");
            sScreenOnNotPulsingStats.dump(pw, "Screen on (not pulsing)");
            sEmergencyCallStats.dump(pw, "Emergency call");
            for (int i = 0; i < PULSE_REASONS; i++) {
                final String reason = pulseReasonToString(i);
                sProxStats[i][0].dump(pw, "Proximity near (" + reason + ")");
                sProxStats[i][1].dump(pw, "Proximity far (" + reason + ")");
            }
        }
!!!3192581.java!!!	log(in msg : String) : void
        synchronized (DozeLog.class) {
            if (sMessages == null) return;
            sTimes[sPosition] = System.currentTimeMillis();
            sMessages[sPosition] = msg;
            sPosition = (sPosition + 1) % SIZE;
            sCount = Math.min(sCount + 1, SIZE);
        }
        if (DEBUG) Log.d(TAG, msg);
!!!3192709.java!!!	tracePulseDropped(inout context : Context, inout pulsePending : boolean, inout state : DozeMachine::State, inout blocked : boolean) : void
        if (!ENABLED) return;
        init(context);
        log("pulseDropped pulsePending=" + pulsePending + " state="
                + state + " blocked=" + blocked);
!!!3192837.java!!!	tracePulseCanceledByProx(inout context : Context) : void
        if (!ENABLED) return;
        init(context);
        log("pulseCanceledByProx");
!!!3192965.java!!!	setRegisterKeyguardCallback(inout registerKeyguardCallback : boolean) : void
        if (!ENABLED) return;
        synchronized (DozeLog.class) {
            if (sRegisterKeyguardCallback != registerKeyguardCallback && sMessages != null) {
                throw new IllegalStateException("Cannot change setRegisterKeyguardCallback "
                        + "after init()");
            }
            sRegisterKeyguardCallback = registerKeyguardCallback;
        }
