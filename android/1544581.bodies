class WakeupMessage
!!!10162437.java!!!	WakeupMessage(inout context : Context, inout handler : Handler, in cmdName : String, in cmd : int, in arg1 : int, in arg2 : int, inout obj : Object)
        mAlarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
        mHandler = handler;
        mCmdName = cmdName;
        mCmd = cmd;
        mArg1 = arg1;
        mArg2 = arg2;
        mObj = obj;
!!!10162565.java!!!	WakeupMessage(inout context : Context, inout handler : Handler, in cmdName : String, in cmd : int, in arg1 : int)
        this(context, handler, cmdName, cmd, arg1, 0, null);
!!!10162693.java!!!	WakeupMessage(inout context : Context, inout handler : Handler, in cmdName : String, in cmd : int, in arg1 : int, in arg2 : int)
        this(context, handler, cmdName, cmd, arg1, arg2, null);
!!!10162821.java!!!	WakeupMessage(inout context : Context, inout handler : Handler, in cmdName : String, in cmd : int)
        this(context, handler, cmdName, cmd, 0, 0, null);
!!!10162949.java!!!	schedule(in when : long) : void
        mAlarmManager.setExact(
                AlarmManager.ELAPSED_REALTIME_WAKEUP, when, mCmdName, this, mHandler);
        mScheduled = true;
!!!10163077.java!!!	cancel() : void
        if (mScheduled) {
            mAlarmManager.cancel(this);
            mScheduled = false;
        }
!!!10163205.java!!!	onAlarm() : void
        // Once this method is called the alarm has already been fired and removed from
        // AlarmManager (it is still partially tracked, but only for statistics). The alarm can now
        // be marked as unscheduled so that it can be rescheduled in the message handler.
        final boolean stillScheduled;
        synchronized (this) {
            stillScheduled = mScheduled;
            mScheduled = false;
        }
        if (stillScheduled) {
            Message msg = mHandler.obtainMessage(mCmd, mArg1, mArg2, mObj);
            mHandler.dispatchMessage(msg);
            msg.recycle();
        }
