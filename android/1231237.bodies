class BoringLayout
!!!8174725.java!!!	make(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Layout::Alignment, in spacingmult : float, in spacingadd : float, inout metrics : BoringLayout::Metrics, inout includepad : boolean) : BoringLayout
        return new BoringLayout(source, paint, outerwidth, align,
                                spacingmult, spacingadd, metrics,
                                includepad);
!!!8174853.java!!!	make(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Layout::Alignment, in spacingmult : float, in spacingadd : float, inout metrics : BoringLayout::Metrics, inout includepad : boolean, inout ellipsize : TextUtils::TruncateAt, in ellipsizedWidth : int) : BoringLayout
        return new BoringLayout(source, paint, outerwidth, align,
                                spacingmult, spacingadd, metrics,
                                includepad, ellipsize, ellipsizedWidth);
!!!8174981.java!!!	replaceOrMake(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Layout::Alignment, in spacingmult : float, in spacingadd : float, inout metrics : BoringLayout::Metrics, inout includepad : boolean) : BoringLayout
        replaceWith(source, paint, outerwidth, align, spacingmult,
                    spacingadd);

        mEllipsizedWidth = outerwidth;
        mEllipsizedStart = 0;
        mEllipsizedCount = 0;

        init(source, paint, outerwidth, align, spacingmult, spacingadd,
             metrics, includepad, true);
        return this;
!!!8175109.java!!!	replaceOrMake(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Layout::Alignment, in spacingmult : float, in spacingadd : float, inout metrics : BoringLayout::Metrics, inout includepad : boolean, inout ellipsize : TextUtils::TruncateAt, in ellipsizedWidth : int) : BoringLayout
        boolean trust;

        if (ellipsize == null || ellipsize == TextUtils.TruncateAt.MARQUEE) {
            replaceWith(source, paint, outerwidth, align, spacingmult,
                        spacingadd);

            mEllipsizedWidth = outerwidth;
            mEllipsizedStart = 0;
            mEllipsizedCount = 0;
            trust = true;
        } else {
            replaceWith(TextUtils.ellipsize(source, paint, ellipsizedWidth,
                                           ellipsize, true, this),
                        paint, outerwidth, align, spacingmult,
                        spacingadd);

            mEllipsizedWidth = ellipsizedWidth;
            trust = false;
        }

        init(getText(), paint, outerwidth, align, spacingmult, spacingadd,
             metrics, includepad, trust);
        return this;
!!!8175237.java!!!	BoringLayout(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Layout::Alignment, in spacingmult : float, in spacingadd : float, inout metrics : BoringLayout::Metrics, inout includepad : boolean)
        super(source, paint, outerwidth, align, spacingmult, spacingadd);

        mEllipsizedWidth = outerwidth;
        mEllipsizedStart = 0;
        mEllipsizedCount = 0;

        init(source, paint, outerwidth, align, spacingmult, spacingadd,
             metrics, includepad, true);
!!!8175365.java!!!	BoringLayout(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Layout::Alignment, in spacingmult : float, in spacingadd : float, inout metrics : BoringLayout::Metrics, inout includepad : boolean, inout ellipsize : TextUtils::TruncateAt, in ellipsizedWidth : int)
        /*
         * It is silly to have to call super() and then replaceWith(),
         * but we can't use "this" for the callback until the call to
         * super() finishes.
         */
        super(source, paint, outerwidth, align, spacingmult, spacingadd);

        boolean trust;

        if (ellipsize == null || ellipsize == TextUtils.TruncateAt.MARQUEE) {
            mEllipsizedWidth = outerwidth;
            mEllipsizedStart = 0;
            mEllipsizedCount = 0;
            trust = true;
        } else {
            replaceWith(TextUtils.ellipsize(source, paint, ellipsizedWidth,
                                           ellipsize, true, this),
                        paint, outerwidth, align, spacingmult,
                        spacingadd);


            mEllipsizedWidth = ellipsizedWidth;
            trust = false;
        }

        init(getText(), paint, outerwidth, align, spacingmult, spacingadd,
             metrics, includepad, trust);
!!!8175493.java!!!	init(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Layout::Alignment, in spacingmult : float, in spacingadd : float, inout metrics : BoringLayout::Metrics, inout includepad : boolean, inout trustWidth : boolean) : void
        int spacing;

        if (source instanceof String && align == Layout.Alignment.ALIGN_NORMAL) {
            mDirect = source.toString();
        } else {
            mDirect = null;
        }

        mPaint = paint;

        if (includepad) {
            spacing = metrics.bottom - metrics.top;
            mDesc = metrics.bottom;
        } else {
            spacing = metrics.descent - metrics.ascent;
            mDesc = metrics.descent;
        }

        mBottom = spacing;

        if (trustWidth) {
            mMax = metrics.width;
        } else {
            /*
             * If we have ellipsized, we have to actually calculate the
             * width because the width that was passed in was for the
             * full text, not the ellipsized form.
             */
            TextLine line = TextLine.obtain();
            line.set(paint, source, 0, source.length(), Layout.DIR_LEFT_TO_RIGHT,
                    Layout.DIRS_ALL_LEFT_TO_RIGHT, false, null);
            mMax = (int) Math.ceil(line.metrics(null));
            TextLine.recycle(line);
        }

        if (includepad) {
            mTopPadding = metrics.top - metrics.ascent;
            mBottomPadding = metrics.bottom - metrics.descent;
        }
!!!8175621.java!!!	isBoring(inout text : CharSequence, inout paint : TextPaint) : BoringLayout::Metrics
        return isBoring(text, paint, TextDirectionHeuristics.FIRSTSTRONG_LTR, null);
!!!8175749.java!!!	isBoring(inout text : CharSequence, inout paint : TextPaint, inout metrics : BoringLayout::Metrics) : BoringLayout::Metrics
        return isBoring(text, paint, TextDirectionHeuristics.FIRSTSTRONG_LTR, metrics);
!!!8175877.java!!!	hasAnyInterestingChars(inout text : CharSequence, in textLength : int) : boolean
        final int MAX_BUF_LEN = 500;
        final char[] buffer = TextUtils.obtain(MAX_BUF_LEN);
        try {
            for (int start = 0; start < textLength; start += MAX_BUF_LEN) {
                final int end = Math.min(start + MAX_BUF_LEN, textLength);

                // No need to worry about getting half codepoints, since we consider surrogate code
                // units "interesting" as soon we see one.
                TextUtils.getChars(text, start, end, buffer, 0);

                final int len = end - start;
                for (int i = 0; i < len; i++) {
                    final char c = buffer[i];
                    if (c == '\n' || c == '\t' || TextUtils.couldAffectRtl(c)) {
                        return true;
                    }
                }
            }
            return false;
        } finally {
            TextUtils.recycle(buffer);
        }
!!!8176005.java!!!	isBoring(inout text : CharSequence, inout paint : TextPaint, inout textDir : TextDirectionHeuristic, inout metrics : BoringLayout::Metrics) : BoringLayout::Metrics
        final int textLength = text.length();
        if (hasAnyInterestingChars(text, textLength)) {
           return null;  // There are some interesting characters. Not boring.
        }
        if (textDir != null && textDir.isRtl(text, 0, textLength)) {
           return null;  // The heuristic considers the whole text RTL. Not boring.
        }
        if (text instanceof Spanned) {
            Spanned sp = (Spanned) text;
            Object[] styles = sp.getSpans(0, textLength, ParagraphStyle.class);
            if (styles.length > 0) {
                return null;  // There are some PargraphStyle spans. Not boring.
            }
        }

        Metrics fm = metrics;
        if (fm == null) {
            fm = new Metrics();
        } else {
            fm.reset();
        }

        TextLine line = TextLine.obtain();
        line.set(paint, text, 0, textLength, Layout.DIR_LEFT_TO_RIGHT,
                Layout.DIRS_ALL_LEFT_TO_RIGHT, false, null);
        fm.width = (int) Math.ceil(line.metrics(fm));
        TextLine.recycle(line);

        return fm;
!!!8176133.java!!!	getHeight() : int
        return mBottom;
!!!8176261.java!!!	getLineCount() : int
        return 1;
!!!8176389.java!!!	getLineTop(in line : int) : int
        if (line == 0)
            return 0;
        else
            return mBottom;
!!!8176517.java!!!	getLineDescent(in line : int) : int
        return mDesc;
!!!8176645.java!!!	getLineStart(in line : int) : int
        if (line == 0)
            return 0;
        else
            return getText().length();
!!!8176773.java!!!	getParagraphDirection(in line : int) : int
        return DIR_LEFT_TO_RIGHT;
!!!8176901.java!!!	getLineContainsTab(in line : int) : boolean
        return false;
!!!8177029.java!!!	getLineMax(in line : int) : float
        return mMax;
!!!8177157.java!!!	getLineWidth(in line : int) : float
        return (line == 0 ? mMax : 0);
!!!8177285.java!!!	getLineDirections(in line : int) : Layout::Directions
        return Layout.DIRS_ALL_LEFT_TO_RIGHT;
!!!8177413.java!!!	getTopPadding() : int
        return mTopPadding;
!!!8177541.java!!!	getBottomPadding() : int
        return mBottomPadding;
!!!8177669.java!!!	getEllipsisCount(in line : int) : int
        return mEllipsizedCount;
!!!8177797.java!!!	getEllipsisStart(in line : int) : int
        return mEllipsizedStart;
!!!8177925.java!!!	getEllipsizedWidth() : int
        return mEllipsizedWidth;
!!!8178053.java!!!	draw(inout c : Canvas, inout highlight : Path, inout highlightpaint : Paint, in cursorOffset : int) : void
        if (mDirect != null && highlight == null) {
            c.drawText(mDirect, 0, mBottom - mDesc, mPaint);
        } else {
            super.draw(c, highlight, highlightpaint, cursorOffset);
        }
!!!8178181.java!!!	ellipsized(in start : int, in end : int) : void
        mEllipsizedStart = start;
        mEllipsizedCount = end - start;
