class AAudioStreamConfiguration
!!!660869.cpp!!!	writeToParcel(inout parcel : Parcel) : status_t
    status_t status;
    status = parcel->writeInt32(mDeviceId);
    if (status != NO_ERROR) goto error;
    status = parcel->writeInt32(mSampleRate);
    if (status != NO_ERROR) goto error;
    status = parcel->writeInt32(mSamplesPerFrame);
    if (status != NO_ERROR) goto error;
    status = parcel->writeInt32((int32_t) mSharingMode);
    if (status != NO_ERROR) goto error;
    status = parcel->writeInt32((int32_t) mAudioFormat);
    if (status != NO_ERROR) goto error;
    status = parcel->writeInt32(mBufferCapacity);
    if (status != NO_ERROR) goto error;
    return NO_ERROR;
error:
    ALOGE("AAudioStreamConfiguration.writeToParcel(): write failed = %d", status);
    return status;
!!!660997.cpp!!!	readFromParcel(in parcel : Parcel) : status_t
    status_t status = parcel->readInt32(&mDeviceId);
    if (status != NO_ERROR) goto error;
    status = parcel->readInt32(&mSampleRate);
    if (status != NO_ERROR) goto error;
    status = parcel->readInt32(&mSamplesPerFrame);
    if (status != NO_ERROR) goto error;
    status = parcel->readInt32(&mSharingMode);
    if (status != NO_ERROR) goto error;
    status = parcel->readInt32(&mAudioFormat);
    if (status != NO_ERROR) goto error;
    status = parcel->readInt32(&mBufferCapacity);
    if (status != NO_ERROR) goto error;
    return NO_ERROR;
error:
    ALOGE("AAudioStreamConfiguration.readFromParcel(): read failed = %d", status);
    return status;
!!!661125.cpp!!!	validate() : aaudio_result_t
    // Validate results of the open.
    if (mSampleRate < 0 || mSampleRate >= 8 * 48000) { // TODO review limits
        ALOGE("AAudioStreamConfiguration.validate(): invalid sampleRate = %d", mSampleRate);
        return AAUDIO_ERROR_INTERNAL;
    }

    if (mSamplesPerFrame < 1 || mSamplesPerFrame >= 32) { // TODO review limits
        ALOGE("AAudioStreamConfiguration.validate() invalid samplesPerFrame = %d", mSamplesPerFrame);
        return AAUDIO_ERROR_INTERNAL;
    }

    switch (mAudioFormat) {
    case AAUDIO_FORMAT_PCM_I16:
    case AAUDIO_FORMAT_PCM_FLOAT:
        break;
    default:
        ALOGE("AAudioStreamConfiguration.validate() invalid audioFormat = %d", mAudioFormat);
        return AAUDIO_ERROR_INTERNAL;
    }

    if (mBufferCapacity < 0) {
        ALOGE("AAudioStreamConfiguration.validate() invalid mBufferCapacity = %d", mBufferCapacity);
        return AAUDIO_ERROR_INTERNAL;
    }
    return AAUDIO_OK;
!!!661253.cpp!!!	dump() : void
    ALOGD("AAudioStreamConfiguration mDeviceId        = %d", mDeviceId);
    ALOGD("AAudioStreamConfiguration mSampleRate      = %d", mSampleRate);
    ALOGD("AAudioStreamConfiguration mSamplesPerFrame = %d", mSamplesPerFrame);
    ALOGD("AAudioStreamConfiguration mSharingMode     = %d", (int)mSharingMode);
    ALOGD("AAudioStreamConfiguration mAudioFormat     = %d", (int)mAudioFormat);
    ALOGD("AAudioStreamConfiguration mBufferCapacity  = %d", mBufferCapacity);
