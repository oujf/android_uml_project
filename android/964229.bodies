class FingerprintGestureController
!!!4546309.java!!!	FingerprintGestureController(inout connection : IAccessibilityServiceConnection)
        mAccessibilityServiceConnection = connection;
!!!4546437.java!!!	isGestureDetectionAvailable() : boolean
        try {
            return mAccessibilityServiceConnection.isFingerprintGestureDetectionAvailable();
        } catch (RemoteException re) {
            Log.w(LOG_TAG, "Failed to check if fingerprint gestures are active", re);
            re.rethrowFromSystemServer();
            return false;
        }
!!!4546565.java!!!	registerFingerprintGestureCallback(inout callback : FingerprintGestureController::FingerprintGestureCallback, inout handler : Handler) : void
        synchronized (mLock) {
            mCallbackHandlerMap.put(callback, handler);
        }
!!!4546693.java!!!	unregisterFingerprintGestureCallback(inout callback : FingerprintGestureController::FingerprintGestureCallback) : void
        synchronized (mLock) {
            mCallbackHandlerMap.remove(callback);
        }
!!!4546821.java!!!	onGestureDetectionActiveChanged(inout active : boolean) : void
        final ArrayMap<FingerprintGestureCallback, Handler> handlerMap;
        synchronized (mLock) {
            handlerMap = new ArrayMap<>(mCallbackHandlerMap);
        }
        int numListeners = handlerMap.size();
        for (int i = 0; i < numListeners; i++) {
            FingerprintGestureCallback callback = handlerMap.keyAt(i);
            Handler handler = handlerMap.valueAt(i);
            if (handler != null) {
                handler.post(() -> callback.onGestureDetectionAvailabilityChanged(active));
            } else {
                callback.onGestureDetectionAvailabilityChanged(active);
            }
        }
!!!4546949.java!!!	onGesture(in gesture : int) : void
        final ArrayMap<FingerprintGestureCallback, Handler> handlerMap;
        synchronized (mLock) {
            handlerMap = new ArrayMap<>(mCallbackHandlerMap);
        }
        int numListeners = handlerMap.size();
        for (int i = 0; i < numListeners; i++) {
            FingerprintGestureCallback callback = handlerMap.keyAt(i);
            Handler handler = handlerMap.valueAt(i);
            if (handler != null) {
                handler.post(() -> callback.onGestureDetected(gesture));
            } else {
                callback.onGestureDetected(gesture);
            }
        }
