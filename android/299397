format 214
"nativebridge" // source::system::core::include::nativebridge
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/system/core/include/nativebridge/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/system/core/include/nativebridge/"
  cpp_namespace "android"
  classview 282885 "nativebridge"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 2106501 "NativeBridgeSignalHandlerFn"
      visibility package stereotype "typedef" explicit_base_type "bool"
      cpp_decl "${comment}typedef ${type}(* ${name})(int, siginfo_t*, void*);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Function pointer type for sigaction. This is mostly the signature of a signal handler, except
 for the return type. The runtime needs to know whether the signal was handled or should be given
 to the chain."
    end

    class 2106629 "NativeBridgeCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Native bridge interfaces to runtime."
      attribute 9017733 "version"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Version number of the interface.
"
      end

      attribute 9017861 "initialize"
	public explicit_type "// Initialize native bridge. Native bridge's internal implementation must ensure MT safety and // that the native bridge is initialized only once. Thus it is OK to call this interface for an // already initialized native bridge. // // Parameters: // runtime_cbs [IN] the pointer to NativeBridgeRuntimeCallbacks. // Returns: // true if initialization was successful. bool (*)(const NativeBridgeRuntimeCallbacks* runtime_cbs, const char* private_dir, const char* instruction_set)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Initialize native bridge. Native bridge's internal implementation must ensure MT safety and
  // that the native bridge is initialized only once. Thus it is OK to call this interface for an
  // already initialized native bridge.
  //
  // Parameters:
  //   runtime_cbs [IN] the pointer to NativeBridgeRuntimeCallbacks.
  // Returns:
  //   true if initialization was successful.
  bool (*${name})(const NativeBridgeRuntimeCallbacks* runtime_cbs, const char* private_dir,
                     const char* instruction_set)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Initialize native bridge. Native bridge's internal implementation must ensure MT safety and
 that the native bridge is initialized only once. Thus it is OK to call this interface for an
 already initialized native bridge.

 Parameters:
   runtime_cbs [IN] the pointer to NativeBridgeRuntimeCallbacks.
 Returns:
   true if initialization was successful.
"
      end

      attribute 9017989 "loadLibrary"
	public explicit_type "// Load a shared library that is supported by the native bridge. // // Parameters: // libpath [IN] path to the shared library // flag [IN] the stardard RTLD_XXX defined in bionic dlfcn.h // Returns: // The opaque handle of the shared library if sucessful, otherwise NULL // // Starting with v3, NativeBridge has two scenarios: with/without namespace. // Use loadLibraryExt instead in namespace scenario. void* (*)(const char* libpath, int flag)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Load a shared library that is supported by the native bridge.
  //
  // Parameters:
  //   libpath [IN] path to the shared library
  //   flag [IN] the stardard RTLD_XXX defined in bionic dlfcn.h
  // Returns:
  //   The opaque handle of the shared library if sucessful, otherwise NULL
  //
  // Starting with v3, NativeBridge has two scenarios: with/without namespace.
  // Use loadLibraryExt instead in namespace scenario.
  void* (*${name})(const char* libpath, int flag)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Load a shared library that is supported by the native bridge.

 Parameters:
   libpath [IN] path to the shared library
   flag [IN] the stardard RTLD_XXX defined in bionic dlfcn.h
 Returns:
   The opaque handle of the shared library if sucessful, otherwise NULL

 Starting with v3, NativeBridge has two scenarios: with/without namespace.
 Use loadLibraryExt instead in namespace scenario.
"
      end

      attribute 9018117 "getTrampoline"
	public explicit_type "// Get a native bridge trampoline for specified native method. The trampoline has same // sigature as the native method. // // Parameters: // handle [IN] the handle returned from loadLibrary // shorty [IN] short descriptor of native method // len [IN] length of shorty // Returns: // address of trampoline if successful, otherwise NULL void* (*)(void* handle, const char* name, const char* shorty, uint32_t len)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Get a native bridge trampoline for specified native method. The trampoline has same
  // sigature as the native method.
  //
  // Parameters:
  //   handle [IN] the handle returned from loadLibrary
  //   shorty [IN] short descriptor of native method
  //   len [IN] length of shorty
  // Returns:
  //   address of trampoline if successful, otherwise NULL
  void* (*${name})(void* handle, const char* name, const char* shorty, uint32_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Get a native bridge trampoline for specified native method. The trampoline has same
 sigature as the native method.

 Parameters:
   handle [IN] the handle returned from loadLibrary
   shorty [IN] short descriptor of native method
   len [IN] length of shorty
 Returns:
   address of trampoline if successful, otherwise NULL
"
      end

      attribute 9018245 "isSupported"
	public explicit_type "// Check whether native library is valid and is for an ABI that is supported by native bridge. // // Parameters: // libpath [IN] path to the shared library // Returns: // TRUE if library is supported by native bridge, FALSE otherwise // // Starting with v3, NativeBridge has two scenarios: with/without namespace. // Use isPathSupported instead in namespace scenario. bool (*)(const char* libpath)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Check whether native library is valid and is for an ABI that is supported by native bridge.
  //
  // Parameters:
  //   libpath [IN] path to the shared library
  // Returns:
  //   TRUE if library is supported by native bridge, FALSE otherwise
  //
  // Starting with v3, NativeBridge has two scenarios: with/without namespace.
  // Use isPathSupported instead in namespace scenario.
  bool (*${name})(const char* libpath)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Check whether native library is valid and is for an ABI that is supported by native bridge.

 Parameters:
   libpath [IN] path to the shared library
 Returns:
   TRUE if library is supported by native bridge, FALSE otherwise

 Starting with v3, NativeBridge has two scenarios: with/without namespace.
 Use isPathSupported instead in namespace scenario.
"
      end

      attribute 9018373 "getAppEnv"
	const_attribute public explicit_type "NativeBridgeRuntimeValues* (*)(const char* instruction_set)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} NativeBridgeRuntimeValues* (*${name})(const char* instruction_set)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Provide environment values required by the app running with native bridge according to the
 instruction set.

 Parameters:
   instruction_set [IN] the instruction set of the app
 Returns:
   NULL if not supported by native bridge.
   Otherwise, return all environment values to be set after fork.
"
      end

      attribute 9018501 "isCompatibleWith"
	public explicit_type "// Added callbacks in version 2. // Check whether the bridge is compatible with the given version. A bridge may decide not to be // forwards- or backwards-compatible, and libnativebridge will then stop using it. // // Parameters: // bridge_version [IN] the version of libnativebridge. // Returns: // true if the native bridge supports the given version of libnativebridge. bool (*)(uint32_t bridge_version)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Added callbacks in version 2.

  // Check whether the bridge is compatible with the given version. A bridge may decide not to be
  // forwards- or backwards-compatible, and libnativebridge will then stop using it.
  //
  // Parameters:
  //   bridge_version [IN] the version of libnativebridge.
  // Returns:
  //   true if the native bridge supports the given version of libnativebridge.
  bool (*${name})(uint32_t bridge_version)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Added callbacks in version 2.
 Check whether the bridge is compatible with the given version. A bridge may decide not to be
 forwards- or backwards-compatible, and libnativebridge will then stop using it.

 Parameters:
   bridge_version [IN] the version of libnativebridge.
 Returns:
   true if the native bridge supports the given version of libnativebridge.
"
      end

      attribute 9018629 "getSignalHandler"
	public explicit_type "// A callback to retrieve a native bridge's signal handler for the specified signal. The runtime // will ensure that the signal handler is being called after the runtime's own handler, but before // all chained handlers. The native bridge should not try to install the handler by itself, as // that will potentially lead to cycles. // // Parameters: // signal [IN] the signal for which the handler is asked for. Currently, only SIGSEGV is // supported by the runtime. // Returns: // NULL if the native bridge doesn't use a handler or doesn't want it to be managed by the // runtime. // Otherwise, a pointer to the signal handler. NativeBridgeSignalHandlerFn (*)(int signal)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // A callback to retrieve a native bridge's signal handler for the specified signal. The runtime
  // will ensure that the signal handler is being called after the runtime's own handler, but before
  // all chained handlers. The native bridge should not try to install the handler by itself, as
  // that will potentially lead to cycles.
  //
  // Parameters:
  //   signal [IN] the signal for which the handler is asked for. Currently, only SIGSEGV is
  //                 supported by the runtime.
  // Returns:
  //   NULL if the native bridge doesn't use a handler or doesn't want it to be managed by the
  //   runtime.
  //   Otherwise, a pointer to the signal handler.
  NativeBridgeSignalHandlerFn (*${name})(int signal)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " A callback to retrieve a native bridge's signal handler for the specified signal. The runtime
 will ensure that the signal handler is being called after the runtime's own handler, but before
 all chained handlers. The native bridge should not try to install the handler by itself, as
 that will potentially lead to cycles.

 Parameters:
   signal [IN] the signal for which the handler is asked for. Currently, only SIGSEGV is
                 supported by the runtime.
 Returns:
   NULL if the native bridge doesn't use a handler or doesn't want it to be managed by the
   runtime.
   Otherwise, a pointer to the signal handler.
"
      end

      attribute 9018757 "unloadLibrary"
	public explicit_type "// Added callbacks in version 3. // Decrements the reference count on the dynamic library handler. If the reference count drops // to zero then the dynamic library is unloaded. // // Parameters: // handle [IN] the handler of a dynamic library. // // Returns: // 0 on success, and nonzero on error. int (*)(void* handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Added callbacks in version 3.

  // Decrements the reference count on the dynamic library handler. If the reference count drops
  // to zero then the dynamic library is unloaded.
  //
  // Parameters:
  //   handle [IN] the handler of a dynamic library.
  //
  // Returns:
  //   0 on success, and nonzero on error.
  int (*${name})(void* handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Added callbacks in version 3.
 Decrements the reference count on the dynamic library handler. If the reference count drops
 to zero then the dynamic library is unloaded.

 Parameters:
   handle [IN] the handler of a dynamic library.

 Returns:
   0 on success, and nonzero on error.
"
      end

      attribute 9018885 "getError"
	const_attribute public explicit_type "char* (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} char* (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Dump the last failure message of native bridge when fail to load library or search symbol.

 Parameters:

 Returns:
   A string describing the most recent error that occurred when load library
   or lookup symbol via native bridge.
"
      end

      attribute 9019013 "isPathSupported"
	public explicit_type "// Check whether library paths are supported by native bridge. // // Parameters: // library_path [IN] search paths for native libraries (directories separated by ':') // Returns: // TRUE if libraries within search paths are supported by native bridge, FALSE otherwise // // Starting with v3, NativeBridge has two scenarios: with/without namespace. // Use isSupported instead in non-namespace scenario. bool (*)(const char* library_path)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Check whether library paths are supported by native bridge.
  //
  // Parameters:
  //   library_path [IN] search paths for native libraries (directories separated by ':')
  // Returns:
  //   TRUE if libraries within search paths are supported by native bridge, FALSE otherwise
  //
  // Starting with v3, NativeBridge has two scenarios: with/without namespace.
  // Use isSupported instead in non-namespace scenario.
  bool (*${name})(const char* library_path)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Check whether library paths are supported by native bridge.

 Parameters:
   library_path [IN] search paths for native libraries (directories separated by ':')
 Returns:
   TRUE if libraries within search paths are supported by native bridge, FALSE otherwise

 Starting with v3, NativeBridge has two scenarios: with/without namespace.
 Use isSupported instead in non-namespace scenario.
"
      end

      attribute 9019141 "initAnonymousNamespace"
	public explicit_type "// Initializes anonymous namespace at native bridge side. // NativeBridge's peer of android_init_anonymous_namespace() of dynamic linker. // // The anonymous namespace is used in the case when a NativeBridge implementation // cannot identify the caller of dlopen/dlsym which happens for the code not loaded // by dynamic linker; for example calls from the mono-compiled code. // // Parameters: // public_ns_sonames [IN] the name of \"public\" libraries. // anon_ns_library_path [IN] the library search path of (anonymous) namespace. // Returns: // true if the pass is ok. // Otherwise, false. // // Starting with v3, NativeBridge has two scenarios: with/without namespace. // Should not use in non-namespace scenario. bool (*)(const char* public_ns_sonames, const char* anon_ns_library_path)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Initializes anonymous namespace at native bridge side.
  // NativeBridge's peer of android_init_anonymous_namespace() of dynamic linker.
  //
  // The anonymous namespace is used in the case when a NativeBridge implementation
  // cannot identify the caller of dlopen/dlsym which happens for the code not loaded
  // by dynamic linker; for example calls from the mono-compiled code.
  //
  // Parameters:
  //   public_ns_sonames [IN] the name of \"public\" libraries.
  //   anon_ns_library_path [IN] the library search path of (anonymous) namespace.
  // Returns:
  //   true if the pass is ok.
  //   Otherwise, false.
  //
  // Starting with v3, NativeBridge has two scenarios: with/without namespace.
  // Should not use in non-namespace scenario.
  bool (*${name})(const char* public_ns_sonames, const char* anon_ns_library_path)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Initializes anonymous namespace at native bridge side.
 NativeBridge's peer of android_init_anonymous_namespace() of dynamic linker.

 The anonymous namespace is used in the case when a NativeBridge implementation
 cannot identify the caller of dlopen/dlsym which happens for the code not loaded
 by dynamic linker; for example calls from the mono-compiled code.

 Parameters:
   public_ns_sonames [IN] the name of \"public\" libraries.
   anon_ns_library_path [IN] the library search path of (anonymous) namespace.
 Returns:
   true if the pass is ok.
   Otherwise, false.

 Starting with v3, NativeBridge has two scenarios: with/without namespace.
 Should not use in non-namespace scenario.
"
      end

      attribute 9019269 "createNamespace"
	public explicit_type "// Create new namespace in which native libraries will be loaded. // NativeBridge's peer of android_create_namespace() of dynamic linker. // // Parameters: // name [IN] the name of the namespace. // ld_library_path [IN] the first set of library search paths of the namespace. // default_library_path [IN] the second set of library search path of the namespace. // type [IN] the attribute of the namespace. // permitted_when_isolated_path [IN] the permitted path for isolated namespace(if it is). // parent_ns [IN] the pointer of the parent namespace to be inherited from. // Returns: // native_bridge_namespace_t* for created namespace or nullptr in the case of error. // // Starting with v3, NativeBridge has two scenarios: with/without namespace. // Should not use in non-namespace scenario. native_bridge_namespace_t* (*)(const char* name, const char* ld_library_path, const char* default_library_path, uint64_t type, const char* permitted_when_isolated_path, native_bridge_namespace_t* parent_ns)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Create new namespace in which native libraries will be loaded.
  // NativeBridge's peer of android_create_namespace() of dynamic linker.
  //
  // Parameters:
  //   name [IN] the name of the namespace.
  //   ld_library_path [IN] the first set of library search paths of the namespace.
  //   default_library_path [IN] the second set of library search path of the namespace.
  //   type [IN] the attribute of the namespace.
  //   permitted_when_isolated_path [IN] the permitted path for isolated namespace(if it is).
  //   parent_ns [IN] the pointer of the parent namespace to be inherited from.
  // Returns:
  //   native_bridge_namespace_t* for created namespace or nullptr in the case of error.
  //
  // Starting with v3, NativeBridge has two scenarios: with/without namespace.
  // Should not use in non-namespace scenario.
  native_bridge_namespace_t* (*${name})(const char* name,
                                                const char* ld_library_path,
                                                const char* default_library_path,
                                                uint64_t type,
                                                const char* permitted_when_isolated_path,
                                                native_bridge_namespace_t* parent_ns)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Create new namespace in which native libraries will be loaded.
 NativeBridge's peer of android_create_namespace() of dynamic linker.

 Parameters:
   name [IN] the name of the namespace.
   ld_library_path [IN] the first set of library search paths of the namespace.
   default_library_path [IN] the second set of library search path of the namespace.
   type [IN] the attribute of the namespace.
   permitted_when_isolated_path [IN] the permitted path for isolated namespace(if it is).
   parent_ns [IN] the pointer of the parent namespace to be inherited from.
 Returns:
   native_bridge_namespace_t* for created namespace or nullptr in the case of error.

 Starting with v3, NativeBridge has two scenarios: with/without namespace.
 Should not use in non-namespace scenario.
"
      end

      attribute 9019397 "linkNamespaces"
	public explicit_type "// Creates a link which shares some libraries from one namespace to another. // NativeBridge's peer of android_link_namespaces() of dynamic linker. // // Parameters: // from [IN] the namespace where libraries are accessed. // to [IN] the namespace where libraries are loaded. // shared_libs_sonames [IN] the libraries to be shared. // // Returns: // Whether successed or not. // // Starting with v3, NativeBridge has two scenarios: with/without namespace. // Should not use in non-namespace scenario. bool (*)(native_bridge_namespace_t* from, native_bridge_namespace_t* to, const char* shared_libs_sonames)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Creates a link which shares some libraries from one namespace to another.
  // NativeBridge's peer of android_link_namespaces() of dynamic linker.
  //
  // Parameters:
  //   from [IN] the namespace where libraries are accessed.
  //   to [IN] the namespace where libraries are loaded.
  //   shared_libs_sonames [IN] the libraries to be shared.
  //
  // Returns:
  //   Whether successed or not.
  //
  // Starting with v3, NativeBridge has two scenarios: with/without namespace.
  // Should not use in non-namespace scenario.
  bool (*${name})(native_bridge_namespace_t* from, native_bridge_namespace_t* to,
                         const char* shared_libs_sonames)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Creates a link which shares some libraries from one namespace to another.
 NativeBridge's peer of android_link_namespaces() of dynamic linker.

 Parameters:
   from [IN] the namespace where libraries are accessed.
   to [IN] the namespace where libraries are loaded.
   shared_libs_sonames [IN] the libraries to be shared.

 Returns:
   Whether successed or not.

 Starting with v3, NativeBridge has two scenarios: with/without namespace.
 Should not use in non-namespace scenario.
"
      end

      attribute 9019525 "loadLibraryExt"
	public explicit_type "// Load a shared library within a namespace. // NativeBridge's peer of android_dlopen_ext() of dynamic linker, only supports namespace // extension. // // Parameters: // libpath [IN] path to the shared library // flag [IN] the stardard RTLD_XXX defined in bionic dlfcn.h // ns [IN] the pointer of the namespace in which the library should be loaded. // Returns: // The opaque handle of the shared library if sucessful, otherwise NULL // // Starting with v3, NativeBridge has two scenarios: with/without namespace. // Use loadLibrary instead in non-namespace scenario. void* (*)(const char* libpath, int flag, native_bridge_namespace_t* ns)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Load a shared library within a namespace.
  // NativeBridge's peer of android_dlopen_ext() of dynamic linker, only supports namespace
  // extension.
  //
  // Parameters:
  //   libpath [IN] path to the shared library
  //   flag [IN] the stardard RTLD_XXX defined in bionic dlfcn.h
  //   ns [IN] the pointer of the namespace in which the library should be loaded.
  // Returns:
  //   The opaque handle of the shared library if sucessful, otherwise NULL
  //
  // Starting with v3, NativeBridge has two scenarios: with/without namespace.
  // Use loadLibrary instead in non-namespace scenario.
  void* (*${name})(const char* libpath, int flag, native_bridge_namespace_t* ns)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Load a shared library within a namespace.
 NativeBridge's peer of android_dlopen_ext() of dynamic linker, only supports namespace
 extension.

 Parameters:
   libpath [IN] path to the shared library
   flag [IN] the stardard RTLD_XXX defined in bionic dlfcn.h
   ns [IN] the pointer of the namespace in which the library should be loaded.
 Returns:
   The opaque handle of the shared library if sucessful, otherwise NULL

 Starting with v3, NativeBridge has two scenarios: with/without namespace.
 Use loadLibrary instead in non-namespace scenario.
"
      end

      attribute 9019653 "getVendorNamespace"
	public explicit_type "// Get native bridge version of vendor namespace. // The vendor namespace is the namespace used to load vendor public libraries. // With O release this namespace can be different from the default namespace. // For the devices without enable vendor namespaces this function should return null // // Returns: // vendor namespace or null if it was not set up for the device native_bridge_namespace_t* (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Get native bridge version of vendor namespace.
  // The vendor namespace is the namespace used to load vendor public libraries.
  // With O release this namespace can be different from the default namespace.
  // For the devices without enable vendor namespaces this function should return null
  //
  // Returns:
  //   vendor namespace or null if it was not set up for the device
  native_bridge_namespace_t* (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Get native bridge version of vendor namespace.
 The vendor namespace is the namespace used to load vendor public libraries.
 With O release this namespace can be different from the default namespace.
 For the devices without enable vendor namespaces this function should return null

 Returns:
   vendor namespace or null if it was not set up for the device
"
      end
    end

    class 2106757 "NativeBridgeRuntimeCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Runtime interfaces to native bridge."
      attribute 9019781 "getMethodShorty"
	const_attribute public explicit_type "char* (*)(JNIEnv* env, jmethodID mid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} char* (*${name})(JNIEnv* env, jmethodID mid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Get shorty of a Java method. The shorty is supposed to be persistent in memory.

 Parameters:
   env [IN] pointer to JNIenv.
   mid [IN] Java methodID.
 Returns:
   short descriptor for method.
"
      end

      attribute 9019909 "getNativeMethodCount"
	public explicit_type "// Get number of native methods for specified class. // // Parameters: // env [IN] pointer to JNIenv. // clazz [IN] Java class object. // Returns: // number of native methods. uint32_t (*)(JNIEnv* env, jclass clazz)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Get number of native methods for specified class.
  //
  // Parameters:
  //   env [IN] pointer to JNIenv.
  //   clazz [IN] Java class object.
  // Returns:
  //   number of native methods.
  uint32_t (*${name})(JNIEnv* env, jclass clazz)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Get number of native methods for specified class.

 Parameters:
   env [IN] pointer to JNIenv.
   clazz [IN] Java class object.
 Returns:
   number of native methods.
"
      end

      attribute 9020037 "getNativeMethods"
	public explicit_type "// Get at most 'method_count' native methods for specified class 'clazz'. Results are outputed // via 'methods' [OUT]. The signature pointer in JNINativeMethod is reused as the method shorty. // // Parameters: // env [IN] pointer to JNIenv. // clazz [IN] Java class object. // methods [OUT] array of method with the name, shorty, and fnPtr. // method_count [IN] max number of elements in methods. // Returns: // number of method it actually wrote to methods. uint32_t (*)(JNIEnv* env, jclass clazz, JNINativeMethod* methods, uint32_t method_count)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Get at most 'method_count' native methods for specified class 'clazz'. Results are outputed
  // via 'methods' [OUT]. The signature pointer in JNINativeMethod is reused as the method shorty.
  //
  // Parameters:
  //   env [IN] pointer to JNIenv.
  //   clazz [IN] Java class object.
  //   methods [OUT] array of method with the name, shorty, and fnPtr.
  //   method_count [IN] max number of elements in methods.
  // Returns:
  //   number of method it actually wrote to methods.
  uint32_t (*${name})(JNIEnv* env, jclass clazz, JNINativeMethod* methods,
                               uint32_t method_count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " Get at most 'method_count' native methods for specified class 'clazz'. Results are outputed
 via 'methods' [OUT]. The signature pointer in JNINativeMethod is reused as the method shorty.

 Parameters:
   env [IN] pointer to JNIenv.
   clazz [IN] Java class object.
   methods [OUT] array of method with the name, shorty, and fnPtr.
   method_count [IN] max number of elements in methods.
 Returns:
   number of method it actually wrote to methods.
"
      end
    end
  end

  deploymentview 246405 "nativebridge"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1016837 "native_bridge"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 2106501 // NativeBridgeSignalHandlerFn
	class_ref 2106629 // NativeBridgeCallbacks
	class_ref 2106757 // NativeBridgeRuntimeCallbacks
      end
    end
  end
end
