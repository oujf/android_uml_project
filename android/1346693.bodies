class Condition
!!!8004741.java!!!	Condition(inout id : Uri, in summary : String, in state : int)
        this(id, summary, "", "", -1, state, FLAG_RELEVANT_ALWAYS);
!!!8004869.java!!!	Condition(inout id : Uri, in summary : String, in line1 : String, in line2 : String, in icon : int, in state : int, in flags : int)
        if (id == null) throw new IllegalArgumentException("id is required");
        if (summary == null) throw new IllegalArgumentException("summary is required");
        if (!isValidState(state)) throw new IllegalArgumentException("state is invalid: " + state);
        this.id = id;
        this.summary = summary;
        this.line1 = line1;
        this.line2 = line2;
        this.icon = icon;
        this.state = state;
        this.flags = flags;
!!!8004997.java!!!	Condition(inout source : Parcel)
        this((Uri)source.readParcelable(Condition.class.getClassLoader()),
                source.readString(),
                source.readString(),
                source.readString(),
                source.readInt(),
                source.readInt(),
                source.readInt());
!!!8005125.java!!!	isValidState(in state : int) : boolean
        return state >= STATE_FALSE && state <= STATE_ERROR;
!!!8005253.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeParcelable(id, 0);
        dest.writeString(summary);
        dest.writeString(line1);
        dest.writeString(line2);
        dest.writeInt(icon);
        dest.writeInt(state);
        dest.writeInt(this.flags);
!!!8005381.java!!!	toString() : String
        return new StringBuilder(Condition.class.getSimpleName()).append('[')
            .append("id=").append(id)
            .append(",summary=").append(summary)
            .append(",line1=").append(line1)
            .append(",line2=").append(line2)
            .append(",icon=").append(icon)
            .append(",state=").append(stateToString(state))
            .append(",flags=").append(flags)
            .append(']').toString();
!!!8005509.java!!!	stateToString(in state : int) : String
        if (state == STATE_FALSE) return "STATE_FALSE";
        if (state == STATE_TRUE) return "STATE_TRUE";
        if (state == STATE_UNKNOWN) return "STATE_UNKNOWN";
        if (state == STATE_ERROR) return "STATE_ERROR";
        throw new IllegalArgumentException("state is invalid: " + state);
!!!8005637.java!!!	relevanceToString(in flags : int) : String
        final boolean now = (flags & FLAG_RELEVANT_NOW) != 0;
        final boolean always = (flags & FLAG_RELEVANT_ALWAYS) != 0;
        if (!now && !always) return "NONE";
        if (now && always) return "NOW, ALWAYS";
        return now ? "NOW" : "ALWAYS";
!!!8005765.java!!!	equals(inout o : Object) : boolean
        if (!(o instanceof Condition)) return false;
        if (o == this) return true;
        final Condition other = (Condition) o;
        return Objects.equals(other.id, id)
                && Objects.equals(other.summary, summary)
                && Objects.equals(other.line1, line1)
                && Objects.equals(other.line2, line2)
                && other.icon == icon
                && other.state == state
                && other.flags == flags;
!!!8005893.java!!!	hashCode() : int
        return Objects.hash(id, summary, line1, line2, icon, state, flags);
!!!8006021.java!!!	describeContents() : int
        return 0;
!!!8006149.java!!!	copy() : Condition
        final Parcel parcel = Parcel.obtain();
        try {
            writeToParcel(parcel, 0);
            parcel.setDataPosition(0);
            return new Condition(parcel);
        } finally {
            parcel.recycle();
        }
!!!8006277.java!!!	newId(inout context : Context) : Uri::Builder
        return new Uri.Builder()
                .scheme(Condition.SCHEME)
                .authority(context.getPackageName());
!!!8006405.java!!!	isValidId(inout id : Uri, in pkg : String) : boolean
        return id != null && SCHEME.equals(id.getScheme()) && pkg.equals(id.getAuthority());
