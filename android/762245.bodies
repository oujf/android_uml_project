class StatusBarKeyguardViewManager
!!!4087173.java!!!	StatusBarKeyguardViewManager(inout context : Context, inout callback : ViewMediatorCallback, inout lockPatternUtils : LockPatternUtils)
        mContext = context;
        mViewMediatorCallback = callback;
        mLockPatternUtils = lockPatternUtils;
        mStatusBarWindowManager = Dependency.get(StatusBarWindowManager.class);
        KeyguardUpdateMonitor.getInstance(context).registerCallback(mUpdateMonitorCallback);
!!!4087301.java!!!	registerStatusBar(inout statusBar : StatusBar, inout container : ViewGroup, inout scrimController : ScrimController, inout fingerprintUnlockController : FingerprintUnlockController, inout dismissCallbackRegistry : DismissCallbackRegistry) : void
        mStatusBar = statusBar;
        mContainer = container;
        mScrimController = scrimController;
        mFingerprintUnlockController = fingerprintUnlockController;
        mBouncer = SystemUIFactory.getInstance().createKeyguardBouncer(mContext,
                mViewMediatorCallback, mLockPatternUtils, container, dismissCallbackRegistry);
!!!4087429.java!!!	show(inout options : Bundle) : void
        mShowing = true;
        mStatusBarWindowManager.setKeyguardShowing(true);
        mScrimController.abortKeyguardFadingOut();
        reset(true /* hideBouncerWhenShowing */);
!!!4087557.java!!!	showBouncerOrKeyguard(inout hideBouncerWhenShowing : boolean) : void
        if (mBouncer.needsFullscreenBouncer()) {

            // The keyguard might be showing (already). So we need to hide it.
            mStatusBar.hideKeyguard();
            mBouncer.show(true /* resetSecuritySelection */);
        } else {
            mStatusBar.showKeyguard();
            if (hideBouncerWhenShowing) {
                mBouncer.hide(false /* destroyView */);
                mBouncer.prepare();
            }
        }
!!!4087685.java!!!	showBouncer() : void
        if (mShowing) {
            mBouncer.show(false /* resetSecuritySelection */);
        }
        updateStates();
!!!4087813.java!!!	dismissWithAction(inout r : OnDismissAction, inout cancelAction : Runnable, inout afterKeyguardGone : boolean) : void
        if (mShowing) {
            if (!afterKeyguardGone) {
                mBouncer.showWithDismissAction(r, cancelAction);
            } else {
                mAfterKeyguardGoneAction = r;
                mBouncer.show(false /* resetSecuritySelection */);
            }
        }
        updateStates();
!!!4087941.java!!!	addAfterKeyguardGoneRunnable(inout runnable : Runnable) : void
        mAfterKeyguardGoneRunnables.add(runnable);
!!!4088069.java!!!	reset(inout hideBouncerWhenShowing : boolean) : void
        if (mShowing) {
            if (mOccluded) {
                mStatusBar.hideKeyguard();
                mStatusBar.stopWaitingForKeyguardExit();
                mBouncer.hide(false /* destroyView */);
            } else {
                showBouncerOrKeyguard(hideBouncerWhenShowing);
            }
            KeyguardUpdateMonitor.getInstance(mContext).sendKeyguardReset();
            updateStates();
        }
!!!4088197.java!!!	onStartedGoingToSleep() : void
        mStatusBar.onStartedGoingToSleep();
!!!4088325.java!!!	onFinishedGoingToSleep() : void
        mDeviceInteractive = false;
        mStatusBar.onFinishedGoingToSleep();
        mBouncer.onScreenTurnedOff();
!!!4088453.java!!!	onStartedWakingUp() : void
        Trace.beginSection("StatusBarKeyguardViewManager#onStartedWakingUp");
        mDeviceInteractive = true;
        mDeviceWillWakeUp = false;
        mStatusBar.onStartedWakingUp();
        Trace.endSection();
!!!4088581.java!!!	onScreenTurningOn() : void
        Trace.beginSection("StatusBarKeyguardViewManager#onScreenTurningOn");
        mStatusBar.onScreenTurningOn();
        Trace.endSection();
!!!4088709.java!!!	isScreenTurnedOn() : boolean
        return mScreenTurnedOn;
!!!4088837.java!!!	onScreenTurnedOn() : void
        Trace.beginSection("StatusBarKeyguardViewManager#onScreenTurnedOn");
        mScreenTurnedOn = true;
        if (mDeferScrimFadeOut) {
            mDeferScrimFadeOut = false;
            animateScrimControllerKeyguardFadingOut(0, WAKE_AND_UNLOCK_SCRIM_FADEOUT_DURATION_MS,
                    true /* skipFirstFrame */);
            updateStates();
        }
        mStatusBar.onScreenTurnedOn();
        Trace.endSection();
!!!4088965.java!!!	onRemoteInputActive(inout active : boolean) : void
        mRemoteInputActive = active;
        updateStates();
!!!4089093.java!!!	onScreenTurnedOff() : void
        mScreenTurnedOn = false;
        mStatusBar.onScreenTurnedOff();
!!!4089221.java!!!	notifyDeviceWakeUpRequested() : void
        mDeviceWillWakeUp = !mDeviceInteractive;
!!!4089349.java!!!	setNeedsInput(inout needsInput : boolean) : void
        mStatusBarWindowManager.setKeyguardNeedsInput(needsInput);
!!!4089477.java!!!	isUnlockWithWallpaper() : boolean
        return mStatusBarWindowManager.isShowingWallpaper();
!!!4089605.java!!!	setOccluded(inout occluded : boolean, inout animate : boolean) : void
        if (occluded != mOccluded) {
            mStatusBar.onKeyguardOccludedChanged(occluded);
        }
        if (occluded && !mOccluded && mShowing) {
            if (mStatusBar.isInLaunchTransition()) {
                mOccluded = true;
                mStatusBar.fadeKeyguardAfterLaunchTransition(null /* beforeFading */,
                        new Runnable() {
                            @Override
                            public void run() {
                                mStatusBarWindowManager.setKeyguardOccluded(mOccluded);
                                reset(true /* hideBouncerWhenShowing */);
                            }
                        });
                return;
            }
        }
        mOccluded = occluded;
        if (mShowing) {
            mStatusBar.updateMediaMetaData(false, animate && !occluded);
        }
        mStatusBarWindowManager.setKeyguardOccluded(occluded);

        // If Keyguard is reshown, don't hide the bouncer as it might just have been requested by
        // a FLAG_DISMISS_KEYGUARD_ACTIVITY.
        reset(false /* hideBouncerWhenShowing*/);
        if (animate && !occluded && mShowing) {
            mStatusBar.animateKeyguardUnoccluding();
        }
!!!4089733.java!!!	isOccluded() : boolean
        return mOccluded;
!!!4089861.java!!!	startPreHideAnimation(inout finishRunnable : Runnable) : void
        if (mBouncer.isShowing()) {
            mBouncer.startPreHideAnimation(finishRunnable);
        } else if (finishRunnable != null) {
            finishRunnable.run();
        }
!!!4089989.java!!!	hide(in startTime : long, in fadeoutDuration : long) : void
        mShowing = false;

        if (KeyguardUpdateMonitor.getInstance(mContext).needsSlowUnlockTransition()) {
            fadeoutDuration = KEYGUARD_DISMISS_DURATION_LOCKED;
        }
        long uptimeMillis = SystemClock.uptimeMillis();
        long delay = Math.max(0, startTime + HIDE_TIMING_CORRECTION_MS - uptimeMillis);

        if (mStatusBar.isInLaunchTransition() ) {
            mStatusBar.fadeKeyguardAfterLaunchTransition(new Runnable() {
                @Override
                public void run() {
                    mStatusBarWindowManager.setKeyguardShowing(false);
                    mStatusBarWindowManager.setKeyguardFadingAway(true);
                    mBouncer.hide(true /* destroyView */);
                    updateStates();
                    mScrimController.animateKeyguardFadingOut(
                            StatusBar.FADE_KEYGUARD_START_DELAY,
                            StatusBar.FADE_KEYGUARD_DURATION, null,
                            false /* skipFirstFrame */);
                }
            }, new Runnable() {
                @Override
                public void run() {
                    mStatusBar.hideKeyguard();
                    mStatusBarWindowManager.setKeyguardFadingAway(false);
                    mViewMediatorCallback.keyguardGone();
                    executeAfterKeyguardGoneAction();
                }
            });
        } else {
            executeAfterKeyguardGoneAction();
            boolean wakeUnlockPulsing =
                    mFingerprintUnlockController.getMode() == MODE_WAKE_AND_UNLOCK_PULSING;
            if (wakeUnlockPulsing) {
                delay = 0;
                fadeoutDuration = 240;
            }
            mStatusBar.setKeyguardFadingAway(startTime, delay, fadeoutDuration);
            mFingerprintUnlockController.startKeyguardFadingAway();
            mBouncer.hide(true /* destroyView */);
            if (wakeUnlockPulsing) {
                mStatusBarWindowManager.setKeyguardFadingAway(true);
                mStatusBar.fadeKeyguardWhilePulsing();
                animateScrimControllerKeyguardFadingOut(delay, fadeoutDuration,
                        mStatusBar::hideKeyguard, false /* skipFirstFrame */);
            } else {
                mFingerprintUnlockController.startKeyguardFadingAway();
                mStatusBar.setKeyguardFadingAway(startTime, delay, fadeoutDuration);
                boolean staying = mStatusBar.hideKeyguard();
                if (!staying) {
                    mStatusBarWindowManager.setKeyguardFadingAway(true);
                    if (mFingerprintUnlockController.getMode() == MODE_WAKE_AND_UNLOCK) {
                        if (!mScreenTurnedOn) {
                            mDeferScrimFadeOut = true;
                        } else {

                            // Screen is already on, don't defer with fading out.
                            animateScrimControllerKeyguardFadingOut(0,
                                    WAKE_AND_UNLOCK_SCRIM_FADEOUT_DURATION_MS,
                                    true /* skipFirstFrame */);
                        }
                    } else {
                        animateScrimControllerKeyguardFadingOut(delay, fadeoutDuration,
                                false /* skipFirstFrame */);
                    }
                } else {
                    mScrimController.animateGoingToFullShade(delay, fadeoutDuration);
                    mStatusBar.finishKeyguardFadingAway();
                    mFingerprintUnlockController.finishKeyguardFadingAway();
                }
            }
            updateStates();
            mStatusBarWindowManager.setKeyguardShowing(false);
            mViewMediatorCallback.keyguardGone();
        }
!!!4090117.java!!!	onDensityOrFontScaleChanged() : void
        mBouncer.hide(true /* destroyView */);
!!!4090245.java!!!	animateScrimControllerKeyguardFadingOut(in delay : long, in duration : long, inout skipFirstFrame : boolean) : void
        animateScrimControllerKeyguardFadingOut(delay, duration, null /* endRunnable */,
                skipFirstFrame);
!!!4090373.java!!!	animateScrimControllerKeyguardFadingOut(in delay : long, in duration : long, in endRunnable : Runnable, inout skipFirstFrame : boolean) : void
        Trace.asyncTraceBegin(Trace.TRACE_TAG_VIEW, "Fading out", 0);
        mScrimController.animateKeyguardFadingOut(delay, duration, new Runnable() {
            @Override
            public void run() {
                if (endRunnable != null) {
                    endRunnable.run();
                }
                mContainer.postDelayed(() -> mStatusBarWindowManager.setKeyguardFadingAway(false),
                        100);
                mStatusBar.finishKeyguardFadingAway();
                mFingerprintUnlockController.finishKeyguardFadingAway();
                WindowManagerGlobal.getInstance().trimMemory(
                        ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
                Trace.asyncTraceEnd(Trace.TRACE_TAG_VIEW, "Fading out", 0);
            }
        }, skipFirstFrame);
        if (mFingerprintUnlockController.getMode() == MODE_WAKE_AND_UNLOCK
                && LatencyTracker.isEnabled(mContext)) {
            DejankUtils.postAfterTraversal(() ->
                    LatencyTracker.getInstance(mContext).onActionEnd(
                            LatencyTracker.ACTION_FINGERPRINT_WAKE_AND_UNLOCK));
        }
!!!4090501.java!!!	executeAfterKeyguardGoneAction() : void
        if (mAfterKeyguardGoneAction != null) {
            mAfterKeyguardGoneAction.onDismiss();
            mAfterKeyguardGoneAction = null;
        }
        for (int i = 0; i < mAfterKeyguardGoneRunnables.size(); i++) {
            mAfterKeyguardGoneRunnables.get(i).run();
        }
        mAfterKeyguardGoneRunnables.clear();
!!!4090629.java!!!	dismissAndCollapse() : void
        mStatusBar.executeRunnableDismissingKeyguard(null, null, true, false, true);
!!!4090757.java!!!	dismiss() : void
        showBouncer();
!!!4090885.java!!!	isSecure() : boolean
        return mBouncer.isSecure();
!!!4091013.java!!!	isShowing() : boolean
        return mShowing;
!!!4091141.java!!!	onBackPressed() : boolean
        if (mBouncer.isShowing()) {
            mStatusBar.endAffordanceLaunch();
            reset(true /* hideBouncerWhenShowing */);
            return true;
        }
        return false;
!!!4091269.java!!!	isBouncerShowing() : boolean
        return mBouncer.isShowing();
!!!4091397.java!!!	getNavBarShowDelay() : long
        if (mStatusBar.isKeyguardFadingAway()) {
            return mStatusBar.getKeyguardFadingAwayDelay();
        } else {

            // Keyguard is not going away, thus we are showing the navigation bar because the
            // bouncer is appearing.
            return NAV_BAR_SHOW_DELAY_BOUNCER;
        }
!!!4091525.java!!!	updateStates() : void
        int vis = mContainer.getSystemUiVisibility();
        boolean showing = mShowing;
        boolean occluded = mOccluded;
        boolean bouncerShowing = mBouncer.isShowing();
        boolean bouncerDismissible = !mBouncer.isFullscreenBouncer();
        boolean remoteInputActive = mRemoteInputActive;

        if ((bouncerDismissible || !showing || remoteInputActive) !=
                (mLastBouncerDismissible || !mLastShowing || mLastRemoteInputActive)
                || mFirstUpdate) {
            if (bouncerDismissible || !showing || remoteInputActive) {
                mContainer.setSystemUiVisibility(vis & ~View.STATUS_BAR_DISABLE_BACK);
            } else {
                mContainer.setSystemUiVisibility(vis | View.STATUS_BAR_DISABLE_BACK);
            }
        }

        boolean navBarVisible = isNavBarVisible();
        boolean lastNavBarVisible = getLastNavBarVisible();
        if (navBarVisible != lastNavBarVisible || mFirstUpdate) {
            if (mStatusBar.getNavigationBarView() != null) {
                if (navBarVisible) {
                    long delay = getNavBarShowDelay();
                    if (delay == 0) {
                        mMakeNavigationBarVisibleRunnable.run();
                    } else {
                        mContainer.postOnAnimationDelayed(mMakeNavigationBarVisibleRunnable,
                                delay);
                    }
                } else {
                    mContainer.removeCallbacks(mMakeNavigationBarVisibleRunnable);
                    mStatusBar.getNavigationBarView().getRootView().setVisibility(View.GONE);
                }
            }
        }

        if (bouncerShowing != mLastBouncerShowing || mFirstUpdate) {
            mStatusBarWindowManager.setBouncerShowing(bouncerShowing);
            mStatusBar.setBouncerShowing(bouncerShowing);
            mScrimController.setBouncerShowing(bouncerShowing);
        }

        KeyguardUpdateMonitor updateMonitor = KeyguardUpdateMonitor.getInstance(mContext);
        if ((showing && !occluded) != (mLastShowing && !mLastOccluded) || mFirstUpdate) {
            updateMonitor.onKeyguardVisibilityChanged(showing && !occluded);
        }
        if (bouncerShowing != mLastBouncerShowing || mFirstUpdate) {
            updateMonitor.sendKeyguardBouncerChanged(bouncerShowing);
        }

        mFirstUpdate = false;
        mLastShowing = showing;
        mLastOccluded = occluded;
        mLastBouncerShowing = bouncerShowing;
        mLastBouncerDismissible = bouncerDismissible;
        mLastRemoteInputActive = remoteInputActive;
        mLastDeferScrimFadeOut = mDeferScrimFadeOut;
        mStatusBar.onKeyguardViewManagerStatesUpdated();
!!!4091653.java!!!	isNavBarVisible() : boolean
        return (!(mShowing && !mOccluded) || mBouncer.isShowing() || mRemoteInputActive)
                && !mDeferScrimFadeOut;
!!!4091781.java!!!	getLastNavBarVisible() : boolean
        return (!(mLastShowing && !mLastOccluded) || mLastBouncerShowing || mLastRemoteInputActive)
                && !mLastDeferScrimFadeOut;
!!!4091909.java!!!	shouldDismissOnMenuPressed() : boolean
        return mBouncer.shouldDismissOnMenuPressed();
!!!4092037.java!!!	interceptMediaKey(inout event : KeyEvent) : boolean
        return mBouncer.interceptMediaKey(event);
!!!4092165.java!!!	readyForKeyguardDone() : void
        mViewMediatorCallback.readyForKeyguardDone();
!!!4092293.java!!!	shouldDisableWindowAnimationsForUnlock() : boolean
        return mStatusBar.isInLaunchTransition();
!!!4092421.java!!!	isGoingToNotificationShade() : boolean
        return mStatusBar.isGoingToNotificationShade();
!!!4092549.java!!!	isSecure(in userId : int) : boolean
        return mBouncer.isSecure() || mLockPatternUtils.isSecure(userId);
!!!4092677.java!!!	keyguardGoingAway() : void
        mStatusBar.keyguardGoingAway();
!!!4092805.java!!!	animateCollapsePanels(in speedUpFactor : float) : void
        mStatusBar.animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE, true /* force */,
                false /* delayed */, speedUpFactor);
!!!4092933.java!!!	notifyKeyguardAuthenticated(inout strongAuth : boolean) : void
        mBouncer.notifyKeyguardAuthenticated(strongAuth);
!!!4093061.java!!!	showBouncerMessage(in message : String, in color : int) : void
        mBouncer.showMessage(message, color);
!!!4093189.java!!!	getViewRootImpl() : ViewRootImpl
        return mStatusBar.getStatusBarView().getViewRootImpl();
