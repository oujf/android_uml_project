class LogMaker
!!!7078661.java!!!	LogMaker(in category : int)
        setCategory(category);
!!!7078789.java!!!	LogMaker(inout items : Object [[]])
        if (items != null) {
            deserialize(items);
        } else {
            setCategory(MetricsEvent.VIEW_UNKNOWN);
        }
!!!7078917.java!!!	setCategory(in category : int) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_CATEGORY, category);
        return this;
!!!7079045.java!!!	clearCategory() : LogMaker
        entries.remove(MetricsEvent.RESERVED_FOR_LOGBUILDER_CATEGORY);
        return this;
!!!7079173.java!!!	setType(in type : int) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_TYPE, type);
        return this;
!!!7079301.java!!!	clearType() : LogMaker
        entries.remove(MetricsEvent.RESERVED_FOR_LOGBUILDER_TYPE);
        return this;
!!!7079429.java!!!	setSubtype(in subtype : int) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_SUBTYPE, subtype);
        return this;
!!!7079557.java!!!	clearSubtype() : LogMaker
        entries.remove(MetricsEvent.RESERVED_FOR_LOGBUILDER_SUBTYPE);
        return this;
!!!7079685.java!!!	setLatency(in milliseconds : long) : LogMaker
        entries.put(MetricsEvent.NOTIFICATION_SINCE_CREATE_MILLIS, milliseconds);
        return this;
!!!7079813.java!!!	setTimestamp(in timestamp : long) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_TIMESTAMP, timestamp);
        return this;
!!!7079941.java!!!	clearTimestamp() : LogMaker
        entries.remove(MetricsEvent.RESERVED_FOR_LOGBUILDER_TIMESTAMP);
        return this;
!!!7080069.java!!!	setPackageName(in packageName : String) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_PACKAGENAME, packageName);
        return this;
!!!7080197.java!!!	setComponentName(inout component : ComponentName) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_PACKAGENAME, component.getPackageName());
        entries.put(MetricsEvent.FIELD_CLASS_NAME, component.getClassName());
        return this;
!!!7080325.java!!!	clearPackageName() : LogMaker
        entries.remove(MetricsEvent.RESERVED_FOR_LOGBUILDER_PACKAGENAME);
        return this;
!!!7080453.java!!!	setProcessId(in pid : int) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_PID, pid);
        return this;
!!!7080581.java!!!	clearProcessId() : LogMaker
        entries.remove(MetricsEvent.RESERVED_FOR_LOGBUILDER_PID);
        return this;
!!!7080709.java!!!	setUid(in uid : int) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_UID, uid);
        return this;
!!!7080837.java!!!	clearUid() : LogMaker
        entries.remove(MetricsEvent.RESERVED_FOR_LOGBUILDER_UID);
        return this;
!!!7080965.java!!!	setCounterName(in name : String) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_NAME, name);
        return this;
!!!7081093.java!!!	setCounterBucket(in bucket : int) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_BUCKET, bucket);
        return this;
!!!7081221.java!!!	setCounterBucket(in bucket : long) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_BUCKET, bucket);
        return this;
!!!7081349.java!!!	setCounterValue(in value : int) : LogMaker
        entries.put(MetricsEvent.RESERVED_FOR_LOGBUILDER_VALUE, value);
        return this;
!!!7081477.java!!!	addTaggedData(in tag : int, inout value : Object) : LogMaker
        if (value == null) {
            return clearTaggedData(tag);
        }
        if (!isValidValue(value)) {
            throw new IllegalArgumentException(
                    "Value must be loggable type - int, long, float, String");
        }
        if (value.toString().getBytes().length > MAX_SERIALIZED_SIZE) {
            Log.i(TAG, "Log value too long, omitted: " + value.toString());
        } else {
            entries.put(tag, value);
        }
        return this;
!!!7081605.java!!!	clearTaggedData(in tag : int) : LogMaker
        entries.delete(tag);
        return this;
!!!7081733.java!!!	isValidValue(inout value : Object) : boolean
        return value instanceof Integer ||
            value instanceof String ||
            value instanceof Long ||
            value instanceof Float;
!!!7081861.java!!!	getTaggedData(in tag : int) : Object
        return entries.get(tag);
!!!7081989.java!!!	getCategory() : int
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_CATEGORY);
        if (obj instanceof Integer) {
            return (Integer) obj;
        } else {
            return MetricsEvent.VIEW_UNKNOWN;
        }
!!!7082117.java!!!	getType() : int
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_TYPE);
        if (obj instanceof Integer) {
            return (Integer) obj;
        } else {
            return MetricsEvent.TYPE_UNKNOWN;
        }
!!!7082245.java!!!	getSubtype() : int
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_SUBTYPE);
        if (obj instanceof Integer) {
            return (Integer) obj;
        } else {
            return 0;
        }
!!!7082373.java!!!	getTimestamp() : long
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_TIMESTAMP);
        if (obj instanceof Long) {
            return (Long) obj;
        } else {
            return 0;
        }
!!!7082501.java!!!	getPackageName() : String
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_PACKAGENAME);
        if (obj instanceof String) {
            return (String) obj;
        } else {
            return null;
        }
!!!7082629.java!!!	getProcessId() : int
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_PID);
        if (obj instanceof Integer) {
            return (Integer) obj;
        } else {
            return -1;
        }
!!!7082757.java!!!	getUid() : int
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_UID);
        if (obj instanceof Integer) {
            return (Integer) obj;
        } else {
            return -1;
        }
!!!7082885.java!!!	getCounterName() : String
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_NAME);
        if (obj instanceof String) {
            return (String) obj;
        } else {
            return null;
        }
!!!7083013.java!!!	getCounterBucket() : long
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_BUCKET);
        if (obj instanceof Number) {
            return ((Number) obj).longValue();
        } else {
            return 0L;
        }
!!!7083141.java!!!	isLongCounterBucket() : boolean
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_BUCKET);
        return obj instanceof Long;
!!!7083269.java!!!	getCounterValue() : int
        Object obj = entries.get(MetricsEvent.RESERVED_FOR_LOGBUILDER_VALUE);
        if (obj instanceof Integer) {
            return (Integer) obj;
        } else {
            return 0;
        }
!!!7083397.java!!!	serialize() : Object
        Object[] out = new Object[entries.size() * 2];
        for (int i = 0; i < entries.size(); i++) {
            out[i * 2] = entries.keyAt(i);
            out[i * 2 + 1] = entries.valueAt(i);
        }
        int size = out.toString().getBytes().length;
        if (size > MAX_SERIALIZED_SIZE) {
            Log.i(TAG, "Log line too long, did not emit: " + size + " bytes.");
            throw new RuntimeException();
        }
        return out;
!!!7083525.java!!!	deserialize(inout items : Object [[]]) : void
        int i = 0;
        while (items != null && i < items.length) {
            Object key = items[i++];
            Object value = i < items.length ? items[i++] : null;
            if (key instanceof Integer) {
                entries.put((Integer) key, value);
            } else {
                Log.i(TAG, "Invalid key " + (key == null ? "null" : key.toString()));
            }
        }
!!!7083653.java!!!	isSubsetOf(inout that : LogMaker) : boolean
        if (that == null) {
            return false;
        }
        for (int i = 0; i < entries.size(); i++) {
            int key = this.entries.keyAt(i);
            Object thisValue = this.entries.valueAt(i);
            Object thatValue = that.entries.get(key);
            if ((thisValue == null && thatValue != null) || !thisValue.equals(thatValue))
                return false;
        }
        return true;
