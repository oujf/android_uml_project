class RenderNodeAnimator
!!!4957445.java!!!	mapViewPropertyToRenderProperty(in viewProperty : int) : int
        return sViewPropertyAnimatorMap.get(viewProperty);
!!!4957573.java!!!	RenderNodeAnimator(in property : int, in finalValue : float)
        mRenderProperty = property;
        mFinalValue = finalValue;
        mUiThreadHandlesDelay = true;
        init(nCreateAnimator(property, finalValue));
!!!4957701.java!!!	RenderNodeAnimator(inout property : CanvasProperty<Float>, in finalValue : float)
        init(nCreateCanvasPropertyFloatAnimator(
                property.getNativeContainer(), finalValue));
        mUiThreadHandlesDelay = false;
!!!4957829.java!!!	RenderNodeAnimator(inout property : CanvasProperty<Paint>, in paintField : int, in finalValue : float)
        init(nCreateCanvasPropertyPaintAnimator(
                property.getNativeContainer(), paintField, finalValue));
        mUiThreadHandlesDelay = false;
!!!4957957.java!!!	RenderNodeAnimator(in x : int, in y : int, in startRadius : float, in endRadius : float)
        init(nCreateRevealAnimator(x, y, startRadius, endRadius));
        mUiThreadHandlesDelay = true;
!!!4958085.java!!!	init(in ptr : long) : void
        mNativePtr = new VirtualRefBasePtr(ptr);
!!!4958213.java!!!	checkMutable() : void
        if (mState != STATE_PREPARE) {
            throw new IllegalStateException("Animator has already started, cannot change it now!");
        }
        if (mNativePtr == null) {
            throw new IllegalStateException("Animator's target has been destroyed "
                    + "(trying to modify an animation after activity destroy?)");
        }
!!!4958341.java!!!	isNativeInterpolator(inout interpolator : TimeInterpolator) : boolean
        return interpolator.getClass().isAnnotationPresent(HasNativeInterpolator.class);
!!!4958469.java!!!	applyInterpolator() : void
        if (mInterpolator == null) return;

        long ni;
        if (isNativeInterpolator(mInterpolator)) {
            ni = ((NativeInterpolatorFactory)mInterpolator).createNativeInterpolator();
        } else {
            long duration = nGetDuration(mNativePtr.get());
            ni = FallbackLUTInterpolator.createNativeInterpolator(mInterpolator, duration);
        }
        nSetInterpolator(mNativePtr.get(), ni);
!!!4958597.java!!!	start() : void
        if (mTarget == null) {
            throw new IllegalStateException("Missing target!");
        }

        if (mState != STATE_PREPARE) {
            throw new IllegalStateException("Already started!");
        }

        mState = STATE_DELAYED;
        applyInterpolator();

        if (mNativePtr == null) {
            // It's dead, immediately cancel
            cancel();
        } else if (mStartDelay <= 0 || !mUiThreadHandlesDelay) {
            nSetStartDelay(mNativePtr.get(), mStartDelay);
            doStart();
        } else {
            getHelper().addDelayedAnimation(this);
        }
!!!4958725.java!!!	doStart() : void
        // Alpha is a special snowflake that has the canonical value stored
        // in mTransformationInfo instead of in RenderNode, so we need to update
        // it with the final value here.
        if (mRenderProperty == RenderNodeAnimator.ALPHA) {
            mViewTarget.ensureTransformationInfo();
            mViewTarget.mTransformationInfo.mAlpha = mFinalValue;
        }

        moveToRunningState();

        if (mViewTarget != null) {
            // Kick off a frame to start the process
            mViewTarget.invalidateViewProperty(true, false);
        }
!!!4958853.java!!!	moveToRunningState() : void
        mState = STATE_RUNNING;
        if (mNativePtr != null) {
            nStart(mNativePtr.get());
        }
        notifyStartListeners();
!!!4958981.java!!!	notifyStartListeners() : void
        final ArrayList<AnimatorListener> listeners = cloneListeners();
        final int numListeners = listeners == null ? 0 : listeners.size();
        for (int i = 0; i < numListeners; i++) {
            listeners.get(i).onAnimationStart(this);
        }
!!!4959109.java!!!	cancel() : void
        if (mState != STATE_PREPARE && mState != STATE_FINISHED) {
            if (mState == STATE_DELAYED) {
                getHelper().removeDelayedAnimation(this);
                moveToRunningState();
            }

            final ArrayList<AnimatorListener> listeners = cloneListeners();
            final int numListeners = listeners == null ? 0 : listeners.size();
            for (int i = 0; i < numListeners; i++) {
                listeners.get(i).onAnimationCancel(this);
            }

            end();
        }
!!!4959237.java!!!	end() : void
        if (mState != STATE_FINISHED) {
            if (mState < STATE_RUNNING) {
                getHelper().removeDelayedAnimation(this);
                doStart();
            }
            if (mNativePtr != null) {
                nEnd(mNativePtr.get());
                if (mViewTarget != null) {
                    // Kick off a frame to flush the state change
                    mViewTarget.invalidateViewProperty(true, false);
                }
            } else {
                // It's already dead, jump to onFinish
                onFinished();
            }
        }
!!!4959365.java!!!	pause() : void
        throw new UnsupportedOperationException();
!!!4959493.java!!!	resume() : void
        throw new UnsupportedOperationException();
!!!4959621.java!!!	setTarget(inout view : View) : void
        mViewTarget = view;
        setTarget(mViewTarget.mRenderNode);
!!!4959749.java!!!	setTarget(inout canvas : Canvas) : void
        if (!(canvas instanceof DisplayListCanvas)) {
            throw new IllegalArgumentException("Not a GLES20RecordingCanvas");
        }
        final DisplayListCanvas recordingCanvas = (DisplayListCanvas) canvas;
        setTarget(recordingCanvas.mNode);
!!!4959877.java!!!	setTarget(inout node : RenderNode) : void
        checkMutable();
        if (mTarget != null) {
            throw new IllegalStateException("Target already set!");
        }
        nSetListener(mNativePtr.get(), this);
        mTarget = node;
        mTarget.addAnimator(this);
!!!4960005.java!!!	setStartValue(in startValue : float) : void
        checkMutable();
        nSetStartValue(mNativePtr.get(), startValue);
!!!4960133.java!!!	setStartDelay(in startDelay : long) : void
        checkMutable();
        if (startDelay < 0) {
            throw new IllegalArgumentException("startDelay must be positive; " + startDelay);
        }
        mUnscaledStartDelay = startDelay;
        mStartDelay = (long) (ValueAnimator.getDurationScale() * startDelay);
!!!4960261.java!!!	getStartDelay() : long
        return mUnscaledStartDelay;
!!!4960389.java!!!	setDuration(in duration : long) : RenderNodeAnimator
        checkMutable();
        if (duration < 0) {
            throw new IllegalArgumentException("duration must be positive; " + duration);
        }
        mUnscaledDuration = duration;
        nSetDuration(mNativePtr.get(), (long) (duration * ValueAnimator.getDurationScale()));
        return this;
!!!4960517.java!!!	getDuration() : long
        return mUnscaledDuration;
!!!4960645.java!!!	getTotalDuration() : long
        return mUnscaledDuration + mUnscaledStartDelay;
!!!4960773.java!!!	isRunning() : boolean
        return mState == STATE_DELAYED || mState == STATE_RUNNING;
!!!4960901.java!!!	isStarted() : boolean
        return mState != STATE_PREPARE;
!!!4961029.java!!!	setInterpolator(inout interpolator : TimeInterpolator) : void
        checkMutable();
        mInterpolator = interpolator;
!!!4961157.java!!!	getInterpolator() : TimeInterpolator
        return mInterpolator;
!!!4961285.java!!!	onFinished() : void
        if (mState == STATE_PREPARE) {
            // Unlikely but possible, the native side has been destroyed
            // before we have started.
            releaseNativePtr();
            return;
        }
        if (mState == STATE_DELAYED) {
            getHelper().removeDelayedAnimation(this);
            notifyStartListeners();
        }
        mState = STATE_FINISHED;

        final ArrayList<AnimatorListener> listeners = cloneListeners();
        final int numListeners = listeners == null ? 0 : listeners.size();
        for (int i = 0; i < numListeners; i++) {
            listeners.get(i).onAnimationEnd(this);
        }

        // Release the native object, as it has a global reference to us. This
        // breaks the cyclic reference chain, and allows this object to be
        // GC'd
        releaseNativePtr();
!!!4961413.java!!!	releaseNativePtr() : void
        if (mNativePtr != null) {
            mNativePtr.release();
            mNativePtr = null;
        }
!!!4961541.java!!!	cloneListeners() : Animator::AnimatorListener
        ArrayList<AnimatorListener> listeners = getListeners();
        if (listeners != null) {
            listeners = (ArrayList<AnimatorListener>) listeners.clone();
        }
        return listeners;
!!!4961669.java!!!	getNativeAnimator() : long
        return mNativePtr.get();
!!!4961797.java!!!	processDelayed(in frameTimeMs : long) : boolean
        if (mStartTime == 0) {
            mStartTime = frameTimeMs;
        } else if ((frameTimeMs - mStartTime) >= mStartDelay) {
            doStart();
            return true;
        }
        return false;
!!!4961925.java!!!	getHelper() : RenderNodeAnimator::DelayedAnimationHelper
        DelayedAnimationHelper helper = sAnimationHelper.get();
        if (helper == null) {
            helper = new DelayedAnimationHelper();
            sAnimationHelper.set(helper);
        }
        return helper;
!!!4962693.java!!!	callOnFinished(inout animator : RenderNodeAnimator) : void
        animator.onFinished();
!!!4962821.java!!!	clone() : Animator
        throw new IllegalStateException("Cannot clone this animator");
!!!4962949.java!!!	setAllowRunningAsynchronously(inout mayRunAsync : boolean) : void
        checkMutable();
        nSetAllowRunningAsync(mNativePtr.get(), mayRunAsync);
