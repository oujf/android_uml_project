format 214
"util" // source::frameworks::av::media::libstagefright::codec2::vndk::include::util
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/media/libstagefright/codec2/vndk/include/util/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/media/libstagefright/codec2/vndk/include/util/"
  cpp_namespace "android"
  classview 157573 "util"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 394501 "_C2EnumConst"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " \\file
Utilities for parameter handling to be used by Codec2 implementations.

/ \\cond INTERNAL
 ---------------------------- UTILITIES FOR ENUMERATION REFLECTION ---------------------------- 

Utility class that allows ignoring enum value assignment (e.g. both '(_C2EnumConst)kValue = x'
and '(_C2EnumConst)kValue' will eval to kValue.
"
      operation 1134085 "_C2EnumConst"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : _mValue(value) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment " implicit conversion from T"
      end

      operation 1134213 "operator T"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mValue; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " implicit conversion to T"
      end

      operation 1134341 "operator C2Value::Primitive"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} { return (T)_mValue; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " implicit conversion to C2Value::Primitive"
      end

      operation 1134469 "operator ="
	cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " ignore assignment and return T here to avoid implicit conversion to T later"
      end

      attribute 796165 "_mValue"
	public explicit_type "private"
	init_value " { return _mValue; }"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value} : T;
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 394629 "C2ParamUtils"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      operation 1134597 "countLeadingUnderscores"
	class_operation cpp_inline private explicit_return_type "size_t"
	nparams 1
	  param in name "a" type class_ref 379013 // C2StringLiteral
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        size_t i = 0;
        while (a[i] == '_') {
            ++i;
        }
        return i;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1134725 "countMatching"
	class_operation cpp_inline private explicit_return_type "size_t"
	nparams 2
	  param in name "a" type class_ref 379013 // C2StringLiteral
	  param in name "b" type class_ref 378885 // C2String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        for (size_t i = 0; i < b.size(); ++i) {
            if (!a[i] || a[i] != b[i]) {
                return i;
            }
        }
        return b.size();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1134853 "camelCaseToDashed"
	class_operation cpp_inline private return_type class_ref 378885 // C2String
	nparams 1
	  param in name "name" type class_ref 378885 // C2String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        enum {
            kNone = '.',
            kLower = 'a',
            kUpper = 'A',
            kDigit = '1',
            kDash = '-',
            kUnderscore = '_',
        } type = kNone;
        size_t word_start = 0;
        for (size_t ix = 0; ix < name.size(); ++ix) {
            /* std::cout << name.substr(0, word_start) << \"|\"
                    << name.substr(word_start, ix - word_start) << \"[\"
                    << name.substr(ix, 1) << \"]\" << name.substr(ix + 1)
                    << \": \" << (char)type << std::endl; */
            if (isupper(name[ix])) {
                if (type == kLower) {
                    name.insert(ix++, 1, '-');
                    word_start = ix;
                }
                name[ix] = tolower(name[ix]);
                type = kUpper;
            } else if (islower(name[ix])) {
                if (type == kDigit && ix > 0) {
                    name.insert(ix++, 1, '-');
                    word_start = ix;
                } else if (type == kUpper && ix > word_start + 1) {
                    name.insert(ix++ - 1, 1, '-');
                    word_start = ix - 1;
                }
                type = kLower;
            } else if (isdigit(name[ix])) {
                if (type == kLower) {
                    name.insert(ix++, 1, '-');
                    word_start = ix;
                }
                type = kDigit;
            } else if (name[ix] == '_') {
                if (type == kDash) {
                    name.erase(ix--, 1);
                } else if (type != kNone && type != kUnderscore) {
                    name[ix] = '-';
                    type = kDash;
                    word_start = ix + 1;
                } else {
                    type = kUnderscore;
                    word_start = ix + 1;
                }
            } else {
                name.resize(ix);
            }
        }
        // std::cout << \"=> \" << name << std::endl;
        return name;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " ABCDef => abc-def
 ABCD2ef => abcd2-ef // 0
 ABCD2Ef => ancd2-ef // -1
 AbcDef => abc-def // -1
 Abc2Def => abc-2def
 Abc2def => abc-2-def
 _Yo => _yo
 _yo => _yo
 C2_yo => c2-yo
 C2__yo => c2-yo"
      end

      operation 1134981 "sanitizeEnumValueNames"
	class_operation cpp_inline private explicit_return_type "std::vector<C2String>"
	nparams 2
	  param in name "names" explicit_type "std::vector<C2StringLiteral>"
	  param in name "_prefix" type class_ref 379013 // C2StringLiteral
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        std::vector<C2String> sanitizedNames;
        C2String prefix;
        size_t extraUnderscores = 0;
        bool first = true;
        if (_prefix) {
            extraUnderscores = countLeadingUnderscores(_prefix);
            prefix = _prefix + extraUnderscores;
            first = false;
            // std::cout << \"prefix:\" << prefix << \", underscores:\" << extraUnderscores << std::endl;
        }

        // calculate prefix and minimum leading underscores
        for (C2StringLiteral s : names) {
            // std::cout << s << std::endl;
            size_t underscores = countLeadingUnderscores(s);
            if (first) {
                extraUnderscores = underscores;
                prefix = s + underscores;
                first = false;
            } else {
                size_t matching = countMatching(
                    s + underscores,
                    prefix);
                prefix.resize(matching);
                extraUnderscores = std::min(underscores, extraUnderscores);
            }
            // std::cout << \"prefix:\" << prefix << \", underscores:\" << extraUnderscores << std::endl;
            if (prefix.size() == 0 && extraUnderscores == 0) {
                break;
            }
        }

        // we swallow the first underscore after upper case prefixes
        bool upperCasePrefix = true;
        for (size_t i = 0; i < prefix.size(); ++i) {
            if (islower(prefix[i])) {
                upperCasePrefix = false;
                break;
            }
        }

        for (C2StringLiteral s : names) {
            size_t underscores = countLeadingUnderscores(s);
            C2String sanitized = C2String(s, underscores - extraUnderscores);
            sanitized.append(s + prefix.size() + underscores +
                        (upperCasePrefix && s[prefix.size() + underscores] == '_'));
            sanitizedNames.push_back(camelCaseToDashed(sanitized));
        }

        for (C2String s : sanitizedNames) {
            std::cout << s << std::endl;
        }

        return sanitizedNames;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      extra_member 153093 "friend"
	
	cpp "
    friend class C2ParamTest_ParamUtilsTest_Test;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 1135109 "getEnumValuesFromString"
	class_operation cpp_inline public explicit_return_type "std::vector<C2String>"
	nparams 1
	  param in name "value" type class_ref 379013 // C2StringLiteral
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::vector<C2String> foundNames;
        size_t pos = 0, len = strlen(value);
        do {
            size_t endPos = strcspn(value + pos, \" ,=\") + pos;
            if (endPos > pos) {
                foundNames.emplace_back(value + pos, endPos - pos);
            }
            if (value[endPos] && value[endPos] != ',') {
                endPos += strcspn(value + endPos, \",\");
            }
            pos = strspn(value + endPos, \" ,\") + endPos;
        } while (pos < len);
        return foundNames;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1135237 "sanitizeEnumValues"
	stereotype "template"
	class_operation cpp_inline public return_type class_ref 392453 // named_values_type
	nparams 3
	  param in name "values" explicit_type "std::vector<T>"
	  param in name "names" explicit_type "std::vector<C2StringLiteral>"
	  param in name "prefix" type class_ref 379013 // C2StringLiteral
	    defaultvalue "NULL"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        C2FieldDescriptor::named_values_type namedValues;
        std::vector<C2String> sanitizedNames = sanitizeEnumValueNames(names, prefix);
        for (size_t i = 0; i < values.size() && i < sanitizedNames.size(); ++i) {
            namedValues.emplace_back(sanitizedNames[i], values[i]);
        }
        return namedValues;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1135365 "customEnumValues"
	stereotype "template"
	class_operation cpp_inline public return_type class_ref 392453 // named_values_type
	nparams 1
	  param in name "items" explicit_type "std::vector<std::pair<C2StringLiteral, E>>"
	cpp_decl "    ${comment}template<typename E>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        C2FieldDescriptor::named_values_type namedValues;
        for (auto &item : items) {
            namedValues.emplace_back(item.first, item.second);
        }
        return namedValues;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end
  end

  deploymentview 158085 "util"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 223237 "C2ParamUtils"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 394501 // _C2EnumConst
	class_ref 394629 // C2ParamUtils
      end
    end
  end
end
