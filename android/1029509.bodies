class LongSparseArray
!!!5905413.java!!!	LongSparseArray()
        this(10);
!!!5905541.java!!!	LongSparseArray(in initialCapacity : int)
        if (initialCapacity == 0) {
            mKeys = EmptyArray.LONG;
            mValues = EmptyArray.OBJECT;
        } else {
            mKeys = ArrayUtils.newUnpaddedLongArray(initialCapacity);
            mValues = ArrayUtils.newUnpaddedObjectArray(initialCapacity);
        }
        mSize = 0;
!!!5905669.java!!!	clone() : LongSparseArray
        LongSparseArray<E> clone = null;
        try {
            clone = (LongSparseArray<E>) super.clone();
            clone.mKeys = mKeys.clone();
            clone.mValues = mValues.clone();
        } catch (CloneNotSupportedException cnse) {
            /* ignore */
        }
        return clone;
!!!5905797.java!!!	get(in key : long) : E
        return get(key, null);
!!!5905925.java!!!	get(in key : long, inout valueIfKeyNotFound : E) : E
        int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

        if (i < 0 || mValues[i] == DELETED) {
            return valueIfKeyNotFound;
        } else {
            return (E) mValues[i];
        }
!!!5906053.java!!!	delete(in key : long) : void
        int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

        if (i >= 0) {
            if (mValues[i] != DELETED) {
                mValues[i] = DELETED;
                mGarbage = true;
            }
        }
!!!5906181.java!!!	remove(in key : long) : void
        delete(key);
!!!5906309.java!!!	removeAt(in index : int) : void
        if (mValues[index] != DELETED) {
            mValues[index] = DELETED;
            mGarbage = true;
        }
!!!5906437.java!!!	gc() : void
        // Log.e("SparseArray", "gc start with " + mSize);

        int n = mSize;
        int o = 0;
        long[] keys = mKeys;
        Object[] values = mValues;

        for (int i = 0; i < n; i++) {
            Object val = values[i];

            if (val != DELETED) {
                if (i != o) {
                    keys[o] = keys[i];
                    values[o] = val;
                    values[i] = null;
                }

                o++;
            }
        }

        mGarbage = false;
        mSize = o;

        // Log.e("SparseArray", "gc end with " + mSize);
!!!5906565.java!!!	put(in key : long, inout value : E) : void
        int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

        if (i >= 0) {
            mValues[i] = value;
        } else {
            i = ~i;

            if (i < mSize && mValues[i] == DELETED) {
                mKeys[i] = key;
                mValues[i] = value;
                return;
            }

            if (mGarbage && mSize >= mKeys.length) {
                gc();

                // Search again because indices may have changed.
                i = ~ContainerHelpers.binarySearch(mKeys, mSize, key);
            }

            mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);
            mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);
            mSize++;
        }
!!!5906693.java!!!	size() : int
        if (mGarbage) {
            gc();
        }

        return mSize;
!!!5906821.java!!!	keyAt(in index : int) : long
        if (mGarbage) {
            gc();
        }

        return mKeys[index];
!!!5906949.java!!!	valueAt(in index : int) : E
        if (mGarbage) {
            gc();
        }

        return (E) mValues[index];
!!!5907077.java!!!	setValueAt(in index : int, inout value : E) : void
        if (mGarbage) {
            gc();
        }

        mValues[index] = value;
!!!5907205.java!!!	indexOfKey(in key : long) : int
        if (mGarbage) {
            gc();
        }

        return ContainerHelpers.binarySearch(mKeys, mSize, key);
!!!5907333.java!!!	indexOfValue(inout value : E) : int
        if (mGarbage) {
            gc();
        }

        for (int i = 0; i < mSize; i++) {
            if (mValues[i] == value) {
                return i;
            }
        }
        return -1;
!!!5907461.java!!!	indexOfValueByValue(inout value : E) : int
        if (mGarbage) {
            gc();
        }

        for (int i = 0; i < mSize; i++) {
            if (value == null) {
                if (mValues[i] == null) {
                    return i;
                }
            } else {
                if (value.equals(mValues[i])) {
                    return i;
                }
            }
        }
        return -1;
!!!5907589.java!!!	clear() : void
        int n = mSize;
        Object[] values = mValues;

        for (int i = 0; i < n; i++) {
            values[i] = null;
        }

        mSize = 0;
        mGarbage = false;
!!!5907717.java!!!	append(in key : long, inout value : E) : void
        if (mSize != 0 && key <= mKeys[mSize - 1]) {
            put(key, value);
            return;
        }

        if (mGarbage && mSize >= mKeys.length) {
            gc();
        }

        mKeys = GrowingArrayUtils.append(mKeys, mSize, key);
        mValues = GrowingArrayUtils.append(mValues, mSize, value);
        mSize++;
!!!5907845.java!!!	toString() : String
        if (size() <= 0) {
            return "{}";
        }

        StringBuilder buffer = new StringBuilder(mSize * 28);
        buffer.append('{');
        for (int i=0; i<mSize; i++) {
            if (i > 0) {
                buffer.append(", ");
            }
            long key = keyAt(i);
            buffer.append(key);
            buffer.append('=');
            Object value = valueAt(i);
            if (value != this) {
                buffer.append(value);
            } else {
                buffer.append("(this Map)");
            }
        }
        buffer.append('}');
        return buffer.toString();
