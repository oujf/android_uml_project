class PrinterDiscoverySession
!!!7849221.java!!!	PrinterDiscoverySession()
        mId = sIdCounter++;
!!!7849349.java!!!	setObserver(inout observer : IPrintServiceClient) : void
        mObserver = observer;
        // If some printers were added in the method that
        // created the session, send them over.
        if (!mPrinters.isEmpty()) {
            try {
                mObserver.onPrintersAdded(new ParceledListSlice<PrinterInfo>(getPrinters()));
            } catch (RemoteException re) {
                Log.e(LOG_TAG, "Error sending added printers", re);
            }
        }
!!!7849477.java!!!	getId() : int
        return mId;
!!!7849605.java!!!	getPrinters() : PrinterInfo
        PrintService.throwIfNotCalledOnMainThread();
        if (mIsDestroyed) {
            return Collections.emptyList();
        }
        return new ArrayList<PrinterInfo>(mPrinters.values());
!!!7849733.java!!!	addPrinters(inout printers : List<PrinterInfo>) : void
        PrintService.throwIfNotCalledOnMainThread();

        // If the session is destroyed - nothing do to.
        if (mIsDestroyed) {
            Log.w(LOG_TAG, "Not adding printers - session destroyed.");
            return;
        }

        if (mIsDiscoveryStarted) {
            // If during discovery, add the new printers and send them.
            List<PrinterInfo> addedPrinters = null;
            final int addedPrinterCount = printers.size();
            for (int i = 0; i < addedPrinterCount; i++) {
                PrinterInfo addedPrinter = printers.get(i);
                PrinterInfo oldPrinter = mPrinters.put(addedPrinter.getId(), addedPrinter);
                if (oldPrinter == null || !oldPrinter.equals(addedPrinter)) {
                    if (addedPrinters == null) {
                        addedPrinters = new ArrayList<PrinterInfo>();
                    }
                    addedPrinters.add(addedPrinter);
                }
            }

            // Send the added printers, if such.
            if (addedPrinters != null) {
                try {
                    mObserver.onPrintersAdded(new ParceledListSlice<PrinterInfo>(addedPrinters));
                } catch (RemoteException re) {
                    Log.e(LOG_TAG, "Error sending added printers", re);
                }
            }
        } else {
            // Remember the last sent printers if needed.
            if (mLastSentPrinters == null) {
                mLastSentPrinters = new ArrayMap<PrinterId, PrinterInfo>(mPrinters);
            }

            // Update the printers.
            final int addedPrinterCount = printers.size();
            for (int i = 0; i < addedPrinterCount; i++) {
                PrinterInfo addedPrinter = printers.get(i);
                if (mPrinters.get(addedPrinter.getId()) == null) {
                    mPrinters.put(addedPrinter.getId(), addedPrinter);
                }
            }
        }
!!!7849861.java!!!	removePrinters(inout printerIds : List<PrinterId>) : void
        PrintService.throwIfNotCalledOnMainThread();

        // If the session is destroyed - nothing do to.
        if (mIsDestroyed) {
            Log.w(LOG_TAG, "Not removing printers - session destroyed.");
            return;
        }

        if (mIsDiscoveryStarted) {
            // If during discovery, remove existing printers and send them.
            List<PrinterId> removedPrinterIds = new ArrayList<PrinterId>();
            final int removedPrinterIdCount = printerIds.size();
            for (int i = 0; i < removedPrinterIdCount; i++) {
                PrinterId removedPrinterId = printerIds.get(i);
                if (mPrinters.remove(removedPrinterId) != null) {
                    removedPrinterIds.add(removedPrinterId);
                }
            }

            // Send the removed printers, if such.
            if (!removedPrinterIds.isEmpty()) {
                try {
                    mObserver.onPrintersRemoved(new ParceledListSlice<PrinterId>(
                            removedPrinterIds));
                } catch (RemoteException re) {
                    Log.e(LOG_TAG, "Error sending removed printers", re);
                }
            }
        } else {
            // Remember the last sent printers if needed.
            if (mLastSentPrinters == null) {
                mLastSentPrinters = new ArrayMap<PrinterId, PrinterInfo>(mPrinters);
            }

            // Update the printers.
            final int removedPrinterIdCount = printerIds.size();
            for (int i = 0; i < removedPrinterIdCount; i++) {
                PrinterId removedPrinterId = printerIds.get(i);
                mPrinters.remove(removedPrinterId);
            }
        }
!!!7849989.java!!!	sendOutOfDiscoveryPeriodPrinterChanges() : void
        // Noting changed since the last discovery period - nothing to do.
        if (mLastSentPrinters == null || mLastSentPrinters.isEmpty()) {
            mLastSentPrinters = null;
            return;
        }

        // Determine the added printers.
        List<PrinterInfo> addedPrinters = null;
        for (PrinterInfo printer : mPrinters.values()) {
            PrinterInfo sentPrinter = mLastSentPrinters.get(printer.getId());
            if (sentPrinter == null || !sentPrinter.equals(printer)) {
                if (addedPrinters == null) {
                    addedPrinters = new ArrayList<PrinterInfo>();
                }
                addedPrinters.add(printer);
            }
        }

        // Send the added printers, if such.
        if (addedPrinters != null) {
            try {
                mObserver.onPrintersAdded(new ParceledListSlice<PrinterInfo>(addedPrinters));
            } catch (RemoteException re) {
                Log.e(LOG_TAG, "Error sending added printers", re);
            }
        }

        // Determine the removed printers.
        List<PrinterId> removedPrinterIds = null;
        for (PrinterInfo sentPrinter : mLastSentPrinters.values()) {
            if (!mPrinters.containsKey(sentPrinter.getId())) {
                if (removedPrinterIds == null) {
                    removedPrinterIds = new ArrayList<PrinterId>();
                }
                removedPrinterIds.add(sentPrinter.getId());
            }
        }

        // Send the removed printers, if such.
        if (removedPrinterIds != null) {
            try {
                mObserver.onPrintersRemoved(new ParceledListSlice<PrinterId>(removedPrinterIds));
            } catch (RemoteException re) {
                Log.e(LOG_TAG, "Error sending removed printers", re);
            }
        }

        mLastSentPrinters = null;
!!!7850885.java!!!	getTrackedPrinters() : PrinterId
        PrintService.throwIfNotCalledOnMainThread();
        if (mIsDestroyed) {
            return Collections.emptyList();
        }
        return new ArrayList<PrinterId>(mTrackedPrinters);
!!!7851141.java!!!	isDestroyed() : boolean
        PrintService.throwIfNotCalledOnMainThread();
        return mIsDestroyed;
!!!7851269.java!!!	isPrinterDiscoveryStarted() : boolean
        PrintService.throwIfNotCalledOnMainThread();
        return mIsDiscoveryStarted;
!!!7851397.java!!!	startPrinterDiscovery(inout priorityList : List<PrinterId>) : void
        if (!mIsDestroyed) {
            mIsDiscoveryStarted = true;
            sendOutOfDiscoveryPeriodPrinterChanges();
            if (priorityList == null) {
                priorityList = Collections.emptyList();
            }
            onStartPrinterDiscovery(priorityList);
        }
!!!7851525.java!!!	stopPrinterDiscovery() : void
        if (!mIsDestroyed) {
            mIsDiscoveryStarted = false;
            onStopPrinterDiscovery();
        }
!!!7851653.java!!!	validatePrinters(inout printerIds : List<PrinterId>) : void
        if (!mIsDestroyed && mObserver != null) {
            onValidatePrinters(printerIds);
        }
!!!7851781.java!!!	startPrinterStateTracking(inout printerId : PrinterId) : void
        if (!mIsDestroyed && mObserver != null
                && !mTrackedPrinters.contains(printerId)) {
            mTrackedPrinters.add(printerId);
            onStartPrinterStateTracking(printerId);
        }
!!!7851909.java!!!	requestCustomPrinterIcon(inout printerId : PrinterId) : void
        if (!mIsDestroyed && mObserver != null) {
            CustomPrinterIconCallback callback = new CustomPrinterIconCallback(printerId,
                    mObserver);
            onRequestCustomPrinterIcon(printerId, new CancellationSignal(), callback);
        }
!!!7852037.java!!!	stopPrinterStateTracking(inout printerId : PrinterId) : void
        if (!mIsDestroyed && mObserver != null
                && mTrackedPrinters.remove(printerId)) {
            onStopPrinterStateTracking(printerId);
        }
!!!7852165.java!!!	destroy() : void
        if (!mIsDestroyed) {
            mIsDestroyed = true;
            mIsDiscoveryStarted = false;
            mPrinters.clear();
            mLastSentPrinters = null;
            mObserver = null;
            onDestroy();
        }
