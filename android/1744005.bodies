class PackageManagerInternalImpl
!!!12188677.java!!!	setLocationPackagesProvider(inout provider : PackageManagerInternal::PackagesProvider) : void
            synchronized (mPackages) {
                mDefaultPermissionPolicy.setLocationPackagesProviderLPw(provider);
            }
!!!12188805.java!!!	setVoiceInteractionPackagesProvider(inout provider : PackageManagerInternal::PackagesProvider) : void
            synchronized (mPackages) {
                mDefaultPermissionPolicy.setVoiceInteractionPackagesProviderLPw(provider);
            }
!!!12188933.java!!!	setSmsAppPackagesProvider(inout provider : PackageManagerInternal::PackagesProvider) : void
            synchronized (mPackages) {
                mDefaultPermissionPolicy.setSmsAppPackagesProviderLPw(provider);
            }
!!!12189061.java!!!	setDialerAppPackagesProvider(inout provider : PackageManagerInternal::PackagesProvider) : void
            synchronized (mPackages) {
                mDefaultPermissionPolicy.setDialerAppPackagesProviderLPw(provider);
            }
!!!12189189.java!!!	setSimCallManagerPackagesProvider(inout provider : PackageManagerInternal::PackagesProvider) : void
            synchronized (mPackages) {
                mDefaultPermissionPolicy.setSimCallManagerPackagesProviderLPw(provider);
            }
!!!12189317.java!!!	setSyncAdapterPackagesprovider(inout provider : PackageManagerInternal::SyncAdapterPackagesProvider) : void
            synchronized (mPackages) {
                mDefaultPermissionPolicy.setSyncAdapterPackagesProviderLPw(provider);
            }
!!!12189445.java!!!	grantDefaultPermissionsToDefaultSmsApp(in packageName : String, in userId : int) : void
            synchronized (mPackages) {
                mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultSmsAppLPr(
                        packageName, userId);
            }
!!!12189573.java!!!	grantDefaultPermissionsToDefaultDialerApp(in packageName : String, in userId : int) : void
            synchronized (mPackages) {
                mSettings.setDefaultDialerPackageNameLPw(packageName, userId);
                mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultDialerAppLPr(
                        packageName, userId);
            }
!!!12189701.java!!!	grantDefaultPermissionsToDefaultSimCallManager(in packageName : String, in userId : int) : void
            synchronized (mPackages) {
                mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultSimCallManagerLPr(
                        packageName, userId);
            }
!!!12189829.java!!!	setKeepUninstalledPackages(in packageList : List<String>) : void
            Preconditions.checkNotNull(packageList);
            List<String> removedFromList = null;
            synchronized (mPackages) {
                if (mKeepUninstalledPackages != null) {
                    final int packagesCount = mKeepUninstalledPackages.size();
                    for (int i = 0; i < packagesCount; i++) {
                        String oldPackage = mKeepUninstalledPackages.get(i);
                        if (packageList != null && packageList.contains(oldPackage)) {
                            continue;
                        }
                        if (removedFromList == null) {
                            removedFromList = new ArrayList<>();
                        }
                        removedFromList.add(oldPackage);
                    }
                }
                mKeepUninstalledPackages = new ArrayList<>(packageList);
                if (removedFromList != null) {
                    final int removedCount = removedFromList.size();
                    for (int i = 0; i < removedCount; i++) {
                        deletePackageIfUnusedLPr(removedFromList.get(i));
                    }
                }
            }
!!!12189957.java!!!	isPermissionsReviewRequired(in packageName : String, in userId : int) : boolean
            synchronized (mPackages) {
                // If we do not support permission review, done.
                if (!mPermissionReviewRequired) {
                    return false;
                }

                PackageSetting packageSetting = mSettings.mPackages.get(packageName);
                if (packageSetting == null) {
                    return false;
                }

                // Permission review applies only to apps not supporting the new permission model.
                if (packageSetting.pkg.applicationInfo.targetSdkVersion >= Build.VERSION_CODES.M) {
                    return false;
                }

                // Legacy apps have the permission and get user consent on launch.
                PermissionsState permissionsState = packageSetting.getPermissionsState();
                return permissionsState.isPermissionReviewRequired(userId);
            }
!!!12190085.java!!!	getPackageInfo(in packageName : String, in flags : int, in filterCallingUid : int, in userId : int) : PackageInfo
            return PackageManagerService.this
                    .getPackageInfoInternal(packageName, PackageManager.VERSION_CODE_HIGHEST,
                            flags, filterCallingUid, userId);
!!!12190213.java!!!	getApplicationInfo(in packageName : String, in flags : int, in filterCallingUid : int, in userId : int) : ApplicationInfo
            return PackageManagerService.this
                    .getApplicationInfoInternal(packageName, flags, filterCallingUid, userId);
!!!12190341.java!!!	getActivityInfo(inout component : ComponentName, in flags : int, in filterCallingUid : int, in userId : int) : ActivityInfo
            return PackageManagerService.this
                    .getActivityInfoInternal(component, flags, filterCallingUid, userId);
!!!12190469.java!!!	queryIntentActivities(inout intent : Intent, in flags : int, in filterCallingUid : int, in userId : int) : ResolveInfo
            final String resolvedType = intent.resolveTypeIfNeeded(mContext.getContentResolver());
            return PackageManagerService.this
                    .queryIntentActivitiesInternal(intent, resolvedType, flags, filterCallingUid,
                            userId, false /*resolveForStart*/);
!!!12190597.java!!!	getHomeActivitiesAsUser(inout allHomeCandidates : List<ResolveInfo>, in userId : int) : ComponentName
            return PackageManagerService.this.getHomeActivitiesAsUser(allHomeCandidates, userId);
!!!12190725.java!!!	setDeviceAndProfileOwnerPackages(in deviceOwnerUserId : int, in deviceOwnerPackage : String, inout profileOwnerPackages : SparseArray) : void
            mProtectedPackages.setDeviceAndProfileOwnerPackages(
                    deviceOwnerUserId, deviceOwnerPackage, profileOwnerPackages);
!!!12190853.java!!!	isPackageDataProtected(in userId : int, in packageName : String) : boolean
            return mProtectedPackages.isPackageDataProtected(userId, packageName);
!!!12190981.java!!!	isPackageEphemeral(in userId : int, in packageName : String) : boolean
            synchronized (mPackages) {
                final PackageSetting ps = mSettings.mPackages.get(packageName);
                return ps != null ? ps.getInstantApp(userId) : false;
            }
!!!12191109.java!!!	wasPackageEverLaunched(in packageName : String, in userId : int) : boolean
            synchronized (mPackages) {
                return mSettings.wasPackageEverLaunchedLPr(packageName, userId);
            }
!!!12191237.java!!!	grantRuntimePermission(in packageName : String, in name : String, in userId : int, inout overridePolicy : boolean) : void
            PackageManagerService.this.grantRuntimePermission(packageName, name, userId,
                    overridePolicy);
!!!12191365.java!!!	revokeRuntimePermission(in packageName : String, in name : String, in userId : int, inout overridePolicy : boolean) : void
            PackageManagerService.this.revokeRuntimePermission(packageName, name, userId,
                    overridePolicy);
!!!12191493.java!!!	getNameForUid(in uid : int) : String
            return PackageManagerService.this.getNameForUid(uid);
!!!12191621.java!!!	requestInstantAppResolutionPhaseTwo(inout responseObj : AuxiliaryResolveInfo, inout origIntent : Intent, in resolvedType : String, in callingPackage : String, inout verificationBundle : Bundle, in userId : int) : void
            PackageManagerService.this.requestInstantAppResolutionPhaseTwo(
                    responseObj, origIntent, resolvedType, callingPackage, verificationBundle,
                    userId);
!!!12191749.java!!!	grantEphemeralAccess(in userId : int, inout intent : Intent, in targetAppId : int, in ephemeralAppId : int) : void
            synchronized (mPackages) {
                mInstantAppRegistry.grantInstantAccessLPw(userId, intent,
                        targetAppId, ephemeralAppId);
            }
!!!12191877.java!!!	isInstantAppInstallerComponent(inout component : ComponentName) : boolean
            synchronized (mPackages) {
                return mInstantAppInstallerActivity != null
                        && mInstantAppInstallerActivity.getComponentName().equals(component);
            }
!!!12192005.java!!!	pruneInstantApps() : void
            mInstantAppRegistry.pruneInstantApps();
!!!12192133.java!!!	getSetupWizardPackageName() : String
            return mSetupWizardPackage;
!!!12192261.java!!!	setExternalSourcesPolicy(inout policy : PackageManagerInternal::ExternalSourcesPolicy) : void
            if (policy != null) {
                mExternalSourcesPolicy = policy;
            }
!!!12192389.java!!!	isPackagePersistent(in packageName : String) : boolean
            synchronized (mPackages) {
                PackageParser.Package pkg = mPackages.get(packageName);
                return pkg != null
                        ? ((pkg.applicationInfo.flags&(ApplicationInfo.FLAG_SYSTEM
                                        | ApplicationInfo.FLAG_PERSISTENT)) ==
                                (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_PERSISTENT))
                        : false;
            }
!!!12192517.java!!!	getOverlayPackages(in userId : int) : PackageInfo
            final ArrayList<PackageInfo> overlayPackages = new ArrayList<PackageInfo>();
            synchronized (mPackages) {
                for (PackageParser.Package p : mPackages.values()) {
                    if (p.mOverlayTarget != null) {
                        PackageInfo pkg = generatePackageInfo((PackageSetting)p.mExtras, 0, userId);
                        if (pkg != null) {
                            overlayPackages.add(pkg);
                        }
                    }
                }
            }
            return overlayPackages;
!!!12192645.java!!!	getTargetPackageNames(in userId : int) : List<String>
            List<String> targetPackages = new ArrayList<>();
            synchronized (mPackages) {
                for (PackageParser.Package p : mPackages.values()) {
                    if (p.mOverlayTarget == null) {
                        targetPackages.add(p.packageName);
                    }
                }
            }
            return targetPackages;
!!!12192773.java!!!	setEnabledOverlayPackages(in userId : int, in targetPackageName : String, inout overlayPackageNames : List<String>) : boolean
            synchronized (mPackages) {
                if (targetPackageName == null || mPackages.get(targetPackageName) == null) {
                    Slog.e(TAG, "failed to find package " + targetPackageName);
                    return false;
                }
                ArrayList<String> overlayPaths = null;
                if (overlayPackageNames != null && overlayPackageNames.size() > 0) {
                    final int N = overlayPackageNames.size();
                    overlayPaths = new ArrayList<>(N);
                    for (int i = 0; i < N; i++) {
                        final String packageName = overlayPackageNames.get(i);
                        final PackageParser.Package pkg = mPackages.get(packageName);
                        if (pkg == null) {
                            Slog.e(TAG, "failed to find package " + packageName);
                            return false;
                        }
                        overlayPaths.add(pkg.baseCodePath);
                    }
                }

                final PackageSetting ps = mSettings.mPackages.get(targetPackageName);
                ps.setOverlayPaths(overlayPaths, userId);
                return true;
            }
!!!12192901.java!!!	resolveIntent(inout intent : Intent, in resolvedType : String, in flags : int, in userId : int) : ResolveInfo
            return resolveIntentInternal(
                    intent, resolvedType, flags, userId, true /*resolveForStart*/);
!!!12193029.java!!!	resolveService(inout intent : Intent, in resolvedType : String, in flags : int, in userId : int, in callingUid : int) : ResolveInfo
            return resolveServiceInternal(intent, resolvedType, flags, userId, callingUid);
!!!12193157.java!!!	addIsolatedUid(in isolatedUid : int, in ownerUid : int) : void
            synchronized (mPackages) {
                mIsolatedOwners.put(isolatedUid, ownerUid);
            }
!!!12193285.java!!!	removeIsolatedUid(in isolatedUid : int) : void
            synchronized (mPackages) {
                mIsolatedOwners.delete(isolatedUid);
            }
!!!12193413.java!!!	getUidTargetSdkVersion(in uid : int) : int
            synchronized (mPackages) {
                return getUidTargetSdkVersionLockedLPr(uid);
            }
!!!12193541.java!!!	canAccessInstantApps(in callingUid : int, in userId : int) : boolean
            return PackageManagerService.this.canViewInstantApps(callingUid, userId);
