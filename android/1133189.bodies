class ScanFilter
!!!6060549.java!!!	ScanFilter(in name : String, in deviceAddress : String, inout uuid : ParcelUuid, inout uuidMask : ParcelUuid, inout serviceDataUuid : ParcelUuid, inout serviceData : byte [[]], inout serviceDataMask : byte [[]], in manufacturerId : int, inout manufacturerData : byte [[]], inout manufacturerDataMask : byte [[]])
        mDeviceName = name;
        mServiceUuid = uuid;
        mServiceUuidMask = uuidMask;
        mDeviceAddress = deviceAddress;
        mServiceDataUuid = serviceDataUuid;
        mServiceData = serviceData;
        mServiceDataMask = serviceDataMask;
        mManufacturerId = manufacturerId;
        mManufacturerData = manufacturerData;
        mManufacturerDataMask = manufacturerDataMask;
!!!6060677.java!!!	describeContents() : int
        return 0;
!!!6060805.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mDeviceName == null ? 0 : 1);
        if (mDeviceName != null) {
            dest.writeString(mDeviceName);
        }
        dest.writeInt(mDeviceAddress == null ? 0 : 1);
        if (mDeviceAddress != null) {
            dest.writeString(mDeviceAddress);
        }
        dest.writeInt(mServiceUuid == null ? 0 : 1);
        if (mServiceUuid != null) {
            dest.writeParcelable(mServiceUuid, flags);
            dest.writeInt(mServiceUuidMask == null ? 0 : 1);
            if (mServiceUuidMask != null) {
                dest.writeParcelable(mServiceUuidMask, flags);
            }
        }
        dest.writeInt(mServiceDataUuid == null ? 0 : 1);
        if (mServiceDataUuid != null) {
            dest.writeParcelable(mServiceDataUuid, flags);
            dest.writeInt(mServiceData == null ? 0 : 1);
            if (mServiceData != null) {
                dest.writeInt(mServiceData.length);
                dest.writeByteArray(mServiceData);

                dest.writeInt(mServiceDataMask == null ? 0 : 1);
                if (mServiceDataMask != null) {
                    dest.writeInt(mServiceDataMask.length);
                    dest.writeByteArray(mServiceDataMask);
                }
            }
        }
        dest.writeInt(mManufacturerId);
        dest.writeInt(mManufacturerData == null ? 0 : 1);
        if (mManufacturerData != null) {
            dest.writeInt(mManufacturerData.length);
            dest.writeByteArray(mManufacturerData);

            dest.writeInt(mManufacturerDataMask == null ? 0 : 1);
            if (mManufacturerDataMask != null) {
                dest.writeInt(mManufacturerDataMask.length);
                dest.writeByteArray(mManufacturerDataMask);
            }
        }
!!!6060933.java!!!	getDeviceName() : String
        return mDeviceName;
!!!6061061.java!!!	getServiceUuid() : ParcelUuid
        return mServiceUuid;
!!!6061189.java!!!	getServiceUuidMask() : ParcelUuid
        return mServiceUuidMask;
!!!6061317.java!!!	getDeviceAddress() : String
        return mDeviceAddress;
!!!6061445.java!!!	getServiceData() : byte
        return mServiceData;
!!!6061573.java!!!	getServiceDataMask() : byte
        return mServiceDataMask;
!!!6061701.java!!!	getServiceDataUuid() : ParcelUuid
        return mServiceDataUuid;
!!!6061829.java!!!	getManufacturerId() : int
        return mManufacturerId;
!!!6061957.java!!!	getManufacturerData() : byte
        return mManufacturerData;
!!!6062085.java!!!	getManufacturerDataMask() : byte
        return mManufacturerDataMask;
!!!6062213.java!!!	matches(inout scanResult : ScanResult) : boolean
        if (scanResult == null) {
            return false;
        }
        BluetoothDevice device = scanResult.getDevice();
        // Device match.
        if (mDeviceAddress != null
                && (device == null || !mDeviceAddress.equals(device.getAddress()))) {
            return false;
        }

        ScanRecord scanRecord = scanResult.getScanRecord();

        // Scan record is null but there exist filters on it.
        if (scanRecord == null
                && (mDeviceName != null || mServiceUuid != null || mManufacturerData != null
                        || mServiceData != null)) {
            return false;
        }

        // Local name match.
        if (mDeviceName != null && !mDeviceName.equals(scanRecord.getDeviceName())) {
            return false;
        }

        // UUID match.
        if (mServiceUuid != null && !matchesServiceUuids(mServiceUuid, mServiceUuidMask,
                scanRecord.getServiceUuids())) {
            return false;
        }

        // Service data match
        if (mServiceDataUuid != null) {
            if (!matchesPartialData(mServiceData, mServiceDataMask,
                    scanRecord.getServiceData(mServiceDataUuid))) {
                return false;
            }
        }

        // Manufacturer data match.
        if (mManufacturerId >= 0) {
            if (!matchesPartialData(mManufacturerData, mManufacturerDataMask,
                    scanRecord.getManufacturerSpecificData(mManufacturerId))) {
                return false;
            }
        }
        // All filters match.
        return true;
!!!6062341.java!!!	matchesServiceUuids(inout uuid : ParcelUuid, inout parcelUuidMask : ParcelUuid, inout uuids : List<ParcelUuid>) : boolean
        if (uuid == null) {
            return true;
        }
        if (uuids == null) {
            return false;
        }

        for (ParcelUuid parcelUuid : uuids) {
            UUID uuidMask = parcelUuidMask == null ? null : parcelUuidMask.getUuid();
            if (matchesServiceUuid(uuid.getUuid(), uuidMask, parcelUuid.getUuid())) {
                return true;
            }
        }
        return false;
!!!6062469.java!!!	matchesServiceUuid(inout uuid : UUID, inout mask : UUID, inout data : UUID) : boolean
        return BitUtils.maskedEquals(data, uuid, mask);
!!!6062597.java!!!	matchesPartialData(inout data : byte [[]], inout dataMask : byte [[]], inout parsedData : byte [[]]) : boolean
        if (parsedData == null || parsedData.length < data.length) {
            return false;
        }
        if (dataMask == null) {
            for (int i = 0; i < data.length; ++i) {
                if (parsedData[i] != data[i]) {
                    return false;
                }
            }
            return true;
        }
        for (int i = 0; i < data.length; ++i) {
            if ((dataMask[i] & parsedData[i]) != (dataMask[i] & data[i])) {
                return false;
            }
        }
        return true;
!!!6062725.java!!!	toString() : String
        return "BluetoothLeScanFilter [mDeviceName=" + mDeviceName + ", mDeviceAddress="
                + mDeviceAddress
                + ", mUuid=" + mServiceUuid + ", mUuidMask=" + mServiceUuidMask
                + ", mServiceDataUuid=" + Objects.toString(mServiceDataUuid) + ", mServiceData="
                + Arrays.toString(mServiceData) + ", mServiceDataMask="
                + Arrays.toString(mServiceDataMask) + ", mManufacturerId=" + mManufacturerId
                + ", mManufacturerData=" + Arrays.toString(mManufacturerData)
                + ", mManufacturerDataMask=" + Arrays.toString(mManufacturerDataMask) + "]";
!!!6062853.java!!!	hashCode() : int
        return Objects.hash(mDeviceName, mDeviceAddress, mManufacturerId,
                            Arrays.hashCode(mManufacturerData),
                            Arrays.hashCode(mManufacturerDataMask),
                            mServiceDataUuid,
                            Arrays.hashCode(mServiceData),
                            Arrays.hashCode(mServiceDataMask),
                            mServiceUuid, mServiceUuidMask);
!!!6062981.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        ScanFilter other = (ScanFilter) obj;
        return Objects.equals(mDeviceName, other.mDeviceName) &&
                Objects.equals(mDeviceAddress, other.mDeviceAddress) &&
                mManufacturerId == other.mManufacturerId &&
                Objects.deepEquals(mManufacturerData, other.mManufacturerData) &&
                Objects.deepEquals(mManufacturerDataMask, other.mManufacturerDataMask) &&
                Objects.equals(mServiceDataUuid, other.mServiceDataUuid) &&
                Objects.deepEquals(mServiceData, other.mServiceData) &&
                Objects.deepEquals(mServiceDataMask, other.mServiceDataMask) &&
                Objects.equals(mServiceUuid, other.mServiceUuid) &&
                Objects.equals(mServiceUuidMask, other.mServiceUuidMask);
!!!6063109.java!!!	isAllFieldsEmpty() : boolean
        return EMPTY.equals(this);
