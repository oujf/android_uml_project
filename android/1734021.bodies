class PackageSetting
!!!12212485.java!!!	PackageSetting(in name : String, in realName : String, inout codePath : File, inout resourcePath : File, in legacyNativeLibraryPathString : String, in primaryCpuAbiString : String, in secondaryCpuAbiString : String, in cpuAbiOverrideString : String, in pVersionCode : int, in pkgFlags : int, in privateFlags : int, in parentPackageName : String, inout childPackageNames : List<String>, in sharedUserId : int, inout usesStaticLibraries : String [[]], inout usesStaticLibrariesVersions : int [[]])
        super(name, realName, codePath, resourcePath, legacyNativeLibraryPathString,
                primaryCpuAbiString, secondaryCpuAbiString, cpuAbiOverrideString,
                pVersionCode, pkgFlags, privateFlags, parentPackageName, childPackageNames,
                usesStaticLibraries, usesStaticLibrariesVersions);
        this.sharedUserId = sharedUserId;
!!!12212613.java!!!	PackageSetting(inout orig : PackageSetting)
        super(orig, orig.realName);
        doCopy(orig);
!!!12212741.java!!!	PackageSetting(inout orig : PackageSetting, in realPkgName : String)
        super(orig, realPkgName);
        doCopy(orig);
!!!12212869.java!!!	getSharedUserId() : int
        if (sharedUser != null) {
            return sharedUser.userId;
        }
        return sharedUserId;
!!!12212997.java!!!	toString() : String
        return "PackageSetting{"
            + Integer.toHexString(System.identityHashCode(this))
            + " " + name + "/" + appId + "}";
!!!12213125.java!!!	copyFrom(inout orig : PackageSetting) : void
        super.copyFrom(orig);
        doCopy(orig);
!!!12213253.java!!!	doCopy(inout orig : PackageSetting) : void
        appId = orig.appId;
        pkg = orig.pkg;
        sharedUser = orig.sharedUser;
        sharedUserId = orig.sharedUserId;
!!!12213381.java!!!	getPermissionsState() : PermissionsState
        return (sharedUser != null)
                ? sharedUser.getPermissionsState()
                : super.getPermissionsState();
!!!12213509.java!!!	isPrivileged() : boolean
        return (pkgPrivateFlags & ApplicationInfo.PRIVATE_FLAG_PRIVILEGED) != 0;
!!!12213637.java!!!	isForwardLocked() : boolean
        return (pkgPrivateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) != 0;
!!!12213765.java!!!	isSystem() : boolean
        return (pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0;
!!!12213893.java!!!	isSharedUser() : boolean
        return sharedUser != null;
!!!12214021.java!!!	isMatch(in flags : int) : boolean
        if ((flags & PackageManager.MATCH_SYSTEM_ONLY) != 0) {
            return isSystem();
        }
        return true;
!!!12214149.java!!!	writeToProto(inout proto : ProtoOutputStream, in fieldId : long, inout users : List<UserInfo>) : void
        final long packageToken = proto.start(fieldId);
        proto.write(PackageProto.NAME, (realName != null ? realName : name));
        proto.write(PackageProto.UID, appId);
        proto.write(PackageProto.VERSION_CODE, versionCode);
        proto.write(PackageProto.VERSION_STRING, pkg.mVersionName);
        proto.write(PackageProto.INSTALL_TIME_MS, firstInstallTime);
        proto.write(PackageProto.UPDATE_TIME_MS, lastUpdateTime);
        proto.write(PackageProto.INSTALLER_NAME, installerPackageName);

        if (pkg != null) {
            long splitToken = proto.start(PackageProto.SPLITS);
            proto.write(PackageProto.SplitProto.NAME, "base");
            proto.write(PackageProto.SplitProto.REVISION_CODE, pkg.baseRevisionCode);
            proto.end(splitToken);
            if (pkg.splitNames != null) {
                for (int i = 0; i < pkg.splitNames.length; i++) {
                    splitToken = proto.start(PackageProto.SPLITS);
                    proto.write(PackageProto.SplitProto.NAME, pkg.splitNames[i]);
                    proto.write(PackageProto.SplitProto.REVISION_CODE, pkg.splitRevisionCodes[i]);
                    proto.end(splitToken);
                }
            }
        }
        writeUsersInfoToProto(proto, PackageProto.USERS);
        proto.end(packageToken);
