class Handle
!!!9895813.java!!!	create(inout packageFile : File) : NativeLibraryHelper::Handle
            try {
                final PackageLite lite = PackageParser.parsePackageLite(packageFile, 0);
                return create(lite);
            } catch (PackageParserException e) {
                throw new IOException("Failed to parse package: " + packageFile, e);
            }
!!!9895941.java!!!	create(inout pkg : PackageParser::Package) : NativeLibraryHelper::Handle
            return create(pkg.getAllCodePaths(),
                    (pkg.applicationInfo.flags & ApplicationInfo.FLAG_MULTIARCH) != 0,
                    (pkg.applicationInfo.flags & ApplicationInfo.FLAG_EXTRACT_NATIVE_LIBS) != 0,
                    (pkg.applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0);
!!!9896069.java!!!	create(inout lite : PackageParser::PackageLite) : NativeLibraryHelper::Handle
            return create(lite.getAllCodePaths(), lite.multiArch, lite.extractNativeLibs,
                    lite.debuggable);
!!!9896197.java!!!	create(inout codePaths : List<String>, inout multiArch : boolean, inout extractNativeLibs : boolean, inout debuggable : boolean) : NativeLibraryHelper::Handle
            final int size = codePaths.size();
            final long[] apkHandles = new long[size];
            for (int i = 0; i < size; i++) {
                final String path = codePaths.get(i);
                apkHandles[i] = nativeOpenApk(path);
                if (apkHandles[i] == 0) {
                    // Unwind everything we've opened so far
                    for (int j = 0; j < i; j++) {
                        nativeClose(apkHandles[j]);
                    }
                    throw new IOException("Unable to open APK: " + path);
                }
            }

            return new Handle(apkHandles, multiArch, extractNativeLibs, debuggable);
!!!9896325.java!!!	Handle(inout apkHandles : long [[]], inout multiArch : boolean, inout extractNativeLibs : boolean, inout debuggable : boolean)
            this.apkHandles = apkHandles;
            this.multiArch = multiArch;
            this.extractNativeLibs = extractNativeLibs;
            this.debuggable = debuggable;
            mGuard.open("close");
!!!9896453.java!!!	close() : void
            for (long apkHandle : apkHandles) {
                nativeClose(apkHandle);
            }
            mGuard.close();
            mClosed = true;
!!!9896581.java!!!	finalize() : void
            if (mGuard != null) {
                mGuard.warnIfOpen();
            }
            try {
                if (!mClosed) {
                    close();
                }
            } finally {
                super.finalize();
            }
