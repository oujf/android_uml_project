class CpuSetManager
!!!15148933.cpp!!!	Load(in cpuset_root : std::string) : void
  if (!root_set_)
    root_set_ = Create(cpuset_root);
!!!15149061.cpp!!!	Lookup(in path : std::string) : CpuSet
  auto search = path_map_.find(path);
  if (search != path_map_.end())
    return search->second;
  else
    return nullptr;
!!!15149189.cpp!!!	GetCpuSets() : std::vector<CpuSet*>
  std::vector<CpuSet*> sets(path_map_.size());

  for (const auto& pair : path_map_) {
    sets.push_back(pair.second);
  }

  return sets;
!!!15149317.cpp!!!	MoveUnboundTasks(in target_set : std::string) : void
  auto root = Lookup("/");
  if (!root) {
    ALOGE("CpuSetManager::MoveUnboundTasks: Failed to find root cpuset!");
    return;
  }

  auto target = Lookup(target_set);
  if (!target) {
    ALOGE(
        "CpuSetManager::MoveUnboundTasks: Failed to find target cpuset \"%s\"!",
        target_set.c_str());
    return;
  }

  auto cpu_list = root->GetCpuList();

  for (auto task_id : root->GetTasks()) {
    Task task(task_id);

    // Move only unbound kernel threads to the target cpuset.
    if (task.cpus_allowed_list() == cpu_list &&
        task.parent_process_id() == kKernelThreadDaemonPid) {
      ALOGD_IF(TRACE,
               "CpuSetManager::MoveUnboundTasks: Moving task_id=%d name=%s to "
               "target_set=%s tgid=%d ppid=%d.",
               task_id, task.name().c_str(), target_set.c_str(),
               task.thread_group_id(), task.parent_process_id());

      const int ret = target->AttachTask(task_id);
      ALOGW_IF(ret < 0 && ret != -EINVAL,
               "CpuSetManager::MoveUnboundTasks: Failed to attach task_id=%d "
               "to cpuset=%s: %s",
               task_id, target_set.c_str(), strerror(-ret));
    } else {
      ALOGD_IF(TRACE,
               "CpuSet::MoveUnboundTasks: Skipping task_id=%d name=%s cpus=%s.",
               task_id, task.name().c_str(), task.cpus_allowed_list().c_str());
    }
  }
!!!15149445.cpp!!!	DumpState() : std::string
  size_t max_path = 0;
  std::vector<CpuSet*> sets;

  for (const auto& pair : path_map_) {
    max_path = std::max(max_path, pair.second->path().length());
    sets.push_back(pair.second);
  }

  std::sort(sets.begin(), sets.end(), [](const CpuSet* a, const CpuSet* b) {
    return a->path() < b->path();
  });

  std::ostringstream stream;

  stream << std::left;
  stream << std::setw(max_path) << "Path";
  stream << " ";
  stream << std::setw(6) << "CPUs";
  stream << " ";
  stream << std::setw(6) << "Tasks";
  stream << std::endl;

  stream << std::string(max_path, '_');
  stream << " ";
  stream << std::string(6, '_');
  stream << " ";
  stream << std::string(6, '_');
  stream << std::endl;

  for (const auto set : sets) {
    stream << std::left;
    stream << std::setw(max_path) << set->path();
    stream << " ";
    stream << std::right;
    stream << std::setw(6) << set->GetCpuList();
    stream << " ";
    stream << std::setw(6) << set->GetTasks().size();
    stream << std::endl;
  }

  return stream.str();
!!!15149701.cpp!!!	Create(in path : std::string) : std::unique_ptr<CpuSet>
  base::unique_fd root_cpuset_fd(open(path.c_str(), kDirectoryFlags));
  if (root_cpuset_fd.get() < 0) {
    ALOGE("CpuSet::Create: Failed to open \"%s\": %s", path.c_str(),
          strerror(errno));
    return nullptr;
  }

  return Create(std::move(root_cpuset_fd), "/", nullptr);
!!!15149829.cpp!!!	Create(in base_fd : base::unique_fd, in name : std::string, inout parent : CpuSet) : std::unique_ptr<CpuSet>
  DirectoryReader directory(base::unique_fd(dup(base_fd)));
  if (!directory) {
    ALOGE("CpuSet::Create: Failed to opendir %s cpuset: %s", name.c_str(),
          strerror(directory.GetError()));
    return nullptr;
  }

  std::unique_ptr<CpuSet> group(
      new CpuSet(parent, name, base::unique_fd(dup(base_fd))));
  path_map_.insert(std::make_pair(group->path(), group.get()));

  while (dirent* entry = directory.Next()) {
    if (entry->d_type == DT_DIR) {
      std::string directory_name(entry->d_name);

      if (directory_name == "." || directory_name == "..")
        continue;

      base::unique_fd entry_fd(
          openat(base_fd.get(), directory_name.c_str(), kDirectoryFlags));
      if (entry_fd.get() >= 0) {
        auto child =
            Create(std::move(entry_fd), directory_name.c_str(), group.get());

        if (child)
          group->AddChild(std::move(child));
        else
          return nullptr;
      } else {
        ALOGE("CpuSet::Create: Failed to openat \"%s\": %s", entry->d_name,
              strerror(errno));
        return nullptr;
      }
    }
  }

  return group;
