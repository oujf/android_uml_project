class CaptureCallbackHolder
!!!6670085.java!!!	CaptureCallbackHolder(inout callback : CameraDeviceImpl::CaptureCallback, inout requestList : List<CaptureRequest>, inout handler : Handler, inout repeating : boolean, in sessionId : int)
            if (callback == null || handler == null) {
                throw new UnsupportedOperationException(
                    "Must have a valid handler and a valid callback");
            }
            mRepeating = repeating;
            mHandler = handler;
            mRequestList = new ArrayList<CaptureRequest>(requestList);
            mCallback = callback;
            mSessionId = sessionId;

            // Check whether this callback holder is for batched outputs.
            // The logic here should match createHighSpeedRequestList.
            boolean hasBatchedOutputs = true;
            for (int i = 0; i < requestList.size(); i++) {
                CaptureRequest request = requestList.get(i);
                if (!request.isPartOfCRequestList()) {
                    hasBatchedOutputs = false;
                    break;
                }
                if (i == 0) {
                    Collection<Surface> targets = request.getTargets();
                    if (targets.size() != 2) {
                        hasBatchedOutputs = false;
                        break;
                    }
                }
            }
            mHasBatchedOutputs = hasBatchedOutputs;
!!!6670213.java!!!	isRepeating() : boolean
            return mRepeating;
!!!6670341.java!!!	getCallback() : CameraDeviceImpl::CaptureCallback
            return mCallback;
!!!6670469.java!!!	getRequest(in subsequenceId : int) : CaptureRequest
            if (subsequenceId >= mRequestList.size()) {
                throw new IllegalArgumentException(
                        String.format(
                                "Requested subsequenceId %d is larger than request list size %d.",
                                subsequenceId, mRequestList.size()));
            } else {
                if (subsequenceId < 0) {
                    throw new IllegalArgumentException(String.format(
                            "Requested subsequenceId %d is negative", subsequenceId));
                } else {
                    return mRequestList.get(subsequenceId);
                }
            }
!!!6670597.java!!!	getRequest() : CaptureRequest
            return getRequest(0);
!!!6670725.java!!!	getHandler() : Handler
            return mHandler;
!!!6670853.java!!!	getSessionId() : int
            return mSessionId;
!!!6670981.java!!!	getRequestCount() : int
            return mRequestList.size();
!!!6671109.java!!!	hasBatchedOutputs() : boolean
            return mHasBatchedOutputs;
