class InputStage
!!!8600453.java!!!	InputStage(inout next : ViewRootImpl::InputStage)
            mNext = next;
!!!8600581.java!!!	deliver(inout q : ViewRootImpl::QueuedInputEvent) : void
            if ((q.mFlags & QueuedInputEvent.FLAG_FINISHED) != 0) {
                forward(q);
            } else if (shouldDropInputEvent(q)) {
                finish(q, false);
            } else {
                apply(q, onProcess(q));
            }
!!!8600709.java!!!	finish(inout q : ViewRootImpl::QueuedInputEvent, inout handled : boolean) : void
            q.mFlags |= QueuedInputEvent.FLAG_FINISHED;
            if (handled) {
                q.mFlags |= QueuedInputEvent.FLAG_FINISHED_HANDLED;
            }
            forward(q);
!!!8600837.java!!!	forward(inout q : ViewRootImpl::QueuedInputEvent) : void
            onDeliverToNext(q);
!!!8600965.java!!!	apply(inout q : ViewRootImpl::QueuedInputEvent, in result : int) : void
            if (result == FORWARD) {
                forward(q);
            } else if (result == FINISH_HANDLED) {
                finish(q, true);
            } else if (result == FINISH_NOT_HANDLED) {
                finish(q, false);
            } else {
                throw new IllegalArgumentException("Invalid result: " + result);
            }
!!!8601093.java!!!	onProcess(inout q : ViewRootImpl::QueuedInputEvent) : int
            return FORWARD;
!!!8601221.java!!!	onDeliverToNext(inout q : ViewRootImpl::QueuedInputEvent) : void
            if (DEBUG_INPUT_STAGES) {
                Log.v(mTag, "Done with " + getClass().getSimpleName() + ". " + q);
            }
            if (mNext != null) {
                mNext.deliver(q);
            } else {
                finishInputEvent(q);
            }
!!!8601349.java!!!	shouldDropInputEvent(inout q : ViewRootImpl::QueuedInputEvent) : boolean
            if (mView == null || !mAdded) {
                Slog.w(mTag, "Dropping event due to root view being removed: " + q.mEvent);
                return true;
            } else if ((!mAttachInfo.mHasWindowFocus
                    && !q.mEvent.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) || mStopped
                    || (mIsAmbientMode && !q.mEvent.isFromSource(InputDevice.SOURCE_CLASS_BUTTON))
                    || (mPausedForTransition && !isBack(q.mEvent))) {
                // This is a focus event and the window doesn't currently have input focus or
                // has stopped. This could be an event that came back from the previous stage
                // but the window has lost focus or stopped in the meantime.
                if (isTerminalInputEvent(q.mEvent)) {
                    // Don't drop terminal input events, however mark them as canceled.
                    q.mEvent.cancel();
                    Slog.w(mTag, "Cancelling event due to no window focus: " + q.mEvent);
                    return false;
                }

                // Drop non-terminal input events.
                Slog.w(mTag, "Dropping event due to no window focus: " + q.mEvent);
                return true;
            }
            return false;
!!!8601477.java!!!	dump(in prefix : String, inout writer : PrintWriter) : void
            if (mNext != null) {
                mNext.dump(prefix, writer);
            }
!!!8601605.java!!!	isBack(inout event : InputEvent) : boolean
            if (event instanceof KeyEvent) {
                return ((KeyEvent) event).getKeyCode() == KeyEvent.KEYCODE_BACK;
            } else {
                return false;
            }
