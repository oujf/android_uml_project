class People
!!!7874181.java!!!	markAsContacted(inout resolver : ContentResolver, in personId : long) : void
            // No longer supported.
!!!7874309.java!!!	tryGetMyContactsGroupId(inout resolver : ContentResolver) : long
            Cursor groupsCursor = resolver.query(Groups.CONTENT_URI, GROUPS_PROJECTION,
                    Groups.SYSTEM_ID + "='" + Groups.GROUP_MY_CONTACTS + "'", null, null);
            if (groupsCursor != null) {
                try {
                    if (groupsCursor.moveToFirst()) {
                        return groupsCursor.getLong(0);
                    }
                } finally {
                    groupsCursor.close();
                }
            }
            return 0;
!!!7874437.java!!!	addToMyContactsGroup(inout resolver : ContentResolver, in personId : long) : Uri
            long groupId = tryGetMyContactsGroupId(resolver);
            if (groupId == 0) {
                throw new IllegalStateException("Failed to find the My Contacts group");
            }

            return addToGroup(resolver, personId, groupId);
!!!7874565.java!!!	addToGroup(inout resolver : ContentResolver, in personId : long, in groupName : String) : Uri
            long groupId = 0;
            Cursor groupsCursor = resolver.query(Groups.CONTENT_URI, GROUPS_PROJECTION,
                    Groups.NAME + "=?", new String[] { groupName }, null);
            if (groupsCursor != null) {
                try {
                    if (groupsCursor.moveToFirst()) {
                        groupId = groupsCursor.getLong(0);
                    }
                } finally {
                    groupsCursor.close();
                }
            }

            if (groupId == 0) {
                throw new IllegalStateException("Failed to find the My Contacts group");
            }

            return addToGroup(resolver, personId, groupId);
!!!7874693.java!!!	addToGroup(inout resolver : ContentResolver, in personId : long, in groupId : long) : Uri
            ContentValues values = new ContentValues();
            values.put(GroupMembership.PERSON_ID, personId);
            values.put(GroupMembership.GROUP_ID, groupId);
            return resolver.insert(GroupMembership.CONTENT_URI, values);
!!!7874821.java!!!	createPersonInMyContactsGroup(inout resolver : ContentResolver, inout values : ContentValues) : Uri

            Uri contactUri = resolver.insert(People.CONTENT_URI, values);
            if (contactUri == null) {
                Log.e(TAG, "Failed to create the contact");
                return null;
            }

            if (addToMyContactsGroup(resolver, ContentUris.parseId(contactUri)) == null) {
                resolver.delete(contactUri, null, null);
                return null;
            }
            return contactUri;
!!!7874949.java!!!	queryGroups(inout resolver : ContentResolver, in person : long) : Cursor
            return resolver.query(GroupMembership.CONTENT_URI, null, "person=?",
                    new String[]{String.valueOf(person)}, Groups.DEFAULT_SORT_ORDER);
!!!7875077.java!!!	setPhotoData(inout cr : ContentResolver, inout person : Uri, inout data : byte [[]]) : void
            Uri photoUri = Uri.withAppendedPath(person, Contacts.Photos.CONTENT_DIRECTORY);
            ContentValues values = new ContentValues();
            values.put(Photos.DATA, data);
            cr.update(photoUri, values, null, null);
!!!7875205.java!!!	openContactPhotoInputStream(inout cr : ContentResolver, inout person : Uri) : InputStream
            Uri photoUri = Uri.withAppendedPath(person, Contacts.Photos.CONTENT_DIRECTORY);
            Cursor cursor = cr.query(photoUri, new String[]{Photos.DATA}, null, null, null);
            try {
                if (cursor == null || !cursor.moveToNext()) {
                    return null;
                }
                byte[] data = cursor.getBlob(0);
                if (data == null) {
                    return null;
                }
                return new ByteArrayInputStream(data);
            } finally {
                if (cursor != null) cursor.close();
            }
!!!7875333.java!!!	loadContactPhoto(inout context : Context, inout person : Uri, in placeholderImageResource : int, inout options : BitmapFactory.Options) : Bitmap
            if (person == null) {
                return loadPlaceholderPhoto(placeholderImageResource, context, options);
            }

            InputStream stream = openContactPhotoInputStream(context.getContentResolver(), person);
            Bitmap bm = stream != null ? BitmapFactory.decodeStream(stream, null, options) : null;
            if (bm == null) {
                bm = loadPlaceholderPhoto(placeholderImageResource, context, options);
            }
            return bm;
!!!7875461.java!!!	loadPlaceholderPhoto(in placeholderImageResource : int, inout context : Context, inout options : BitmapFactory.Options) : Bitmap
            if (placeholderImageResource == 0) {
                return null;
            }
            return BitmapFactory.decodeResource(context.getResources(),
                    placeholderImageResource, options);
