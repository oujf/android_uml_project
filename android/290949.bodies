class AudioPolicyServiceClient
!!!740229.cpp!!!	addAudioPortCallback(in callback : sp<AudioPortCallback>) : int
    Mutex::Autolock _l(mLock);
    for (size_t i = 0; i < mAudioPortCallbacks.size(); i++) {
        if (mAudioPortCallbacks[i] == callback) {
            return -1;
        }
    }
    mAudioPortCallbacks.add(callback);
    return mAudioPortCallbacks.size();
!!!740357.cpp!!!	removeAudioPortCallback(in callback : sp<AudioPortCallback>) : int
    Mutex::Autolock _l(mLock);
    size_t i;
    for (i = 0; i < mAudioPortCallbacks.size(); i++) {
        if (mAudioPortCallbacks[i] == callback) {
            break;
        }
    }
    if (i == mAudioPortCallbacks.size()) {
        return -1;
    }
    mAudioPortCallbacks.removeAt(i);
    return mAudioPortCallbacks.size();
!!!740613.cpp!!!	onAudioPortListUpdate() : void
    Mutex::Autolock _l(mLock);
    for (size_t i = 0; i < mAudioPortCallbacks.size(); i++) {
        mAudioPortCallbacks[i]->onAudioPortListUpdate();
    }
!!!740741.cpp!!!	onAudioPatchListUpdate() : void
    Mutex::Autolock _l(mLock);
    for (size_t i = 0; i < mAudioPortCallbacks.size(); i++) {
        mAudioPortCallbacks[i]->onAudioPatchListUpdate();
    }
!!!740869.cpp!!!	onDynamicPolicyMixStateUpdate(in regId : String8, in state : int32_t) : void
    ALOGV("AudioPolicyServiceClient::onDynamicPolicyMixStateUpdate(%s, %d)", regId.string(), state);
    dynamic_policy_callback cb = NULL;
    {
        Mutex::Autolock _l(AudioSystem::gLock);
        cb = gDynPolicyCallback;
    }

    if (cb != NULL) {
        cb(DYNAMIC_POLICY_EVENT_MIX_STATE_UPDATE, regId, state);
    }
!!!740997.cpp!!!	onRecordingConfigurationUpdate(in event : int, in session : audio_session_t, in source : audio_source_t, in clientConfig : audio_config_base_t, in deviceConfig : audio_config_base_t, in patchHandle : audio_patch_handle_t) : void
    record_config_callback cb = NULL;
    {
        Mutex::Autolock _l(AudioSystem::gLock);
        cb = gRecordConfigCallback;
    }

    if (cb != NULL) {
        cb(event, session, source, clientConfig, deviceConfig, patchHandle);
    }
