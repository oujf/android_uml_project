class Entry
!!!3737349.java!!!	Entry(inout n : StatusBarNotification)
            this.key = n.getKey();
            this.notification = n;
!!!3737477.java!!!	setInterruption() : void
            interruption = true;
!!!3737605.java!!!	hasInterrupted() : boolean
            return interruption;
!!!3737733.java!!!	reset() : void
            lastFullScreenIntentLaunchTime = NOT_LAUNCHED_YET;
            if (row != null) {
                row.reset();
            }
!!!3737861.java!!!	getExpandedContentView() : View
            return row.getPrivateLayout().getExpandedChild();
!!!3737989.java!!!	getPublicContentView() : View
            return row.getPublicLayout().getContractedChild();
!!!3738117.java!!!	notifyFullScreenIntentLaunched() : void
            lastFullScreenIntentLaunchTime = SystemClock.elapsedRealtime();
!!!3738245.java!!!	hasJustLaunchedFullScreenIntent() : boolean
            return SystemClock.elapsedRealtime() < lastFullScreenIntentLaunchTime + LAUNCH_COOLDOWN;
!!!3738373.java!!!	createIcons(inout context : Context, inout sbn : StatusBarNotification) : void
            Notification n = sbn.getNotification();
            final Icon smallIcon = n.getSmallIcon();
            if (smallIcon == null) {
                throw new InflationException("No small icon in notification from "
                        + sbn.getPackageName());
            }

            // Construct the icon.
            icon = new StatusBarIconView(context,
                    sbn.getPackageName() + "/0x" + Integer.toHexString(sbn.getId()), sbn);
            icon.setScaleType(ImageView.ScaleType.CENTER_INSIDE);

            // Construct the expanded icon.
            expandedIcon = new StatusBarIconView(context,
                    sbn.getPackageName() + "/0x" + Integer.toHexString(sbn.getId()), sbn);
            expandedIcon.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
            final StatusBarIcon ic = new StatusBarIcon(
                    sbn.getUser(),
                    sbn.getPackageName(),
                    smallIcon,
                    n.iconLevel,
                    n.number,
                    StatusBarIconView.contentDescForNotification(context, n));
            if (!icon.set(ic) || !expandedIcon.set(ic)) {
                icon = null;
                expandedIcon = null;
                throw new InflationException("Couldn't create icon: " + ic);
            }
            expandedIcon.setVisibility(View.INVISIBLE);
            expandedIcon.setOnVisibilityChangedListener(
                    newVisibility -> {
                        if (row != null) {
                            row.setIconsVisible(newVisibility != View.VISIBLE);
                        }
                    });
!!!3738501.java!!!	setIconTag(in key : int, inout tag : Object) : void
            if (icon != null) {
                icon.setTag(key, tag);
                expandedIcon.setTag(key, tag);
            }
!!!3738629.java!!!	updateIcons(inout context : Context, inout sbn : StatusBarNotification) : void
            if (icon != null) {
                // Update the icon
                Notification n = sbn.getNotification();
                final StatusBarIcon ic = new StatusBarIcon(
                        notification.getUser(),
                        notification.getPackageName(),
                        n.getSmallIcon(),
                        n.iconLevel,
                        n.number,
                        StatusBarIconView.contentDescForNotification(context, n));
                icon.setNotification(sbn);
                expandedIcon.setNotification(sbn);
                if (!icon.set(ic) || !expandedIcon.set(ic)) {
                    throw new InflationException("Couldn't update icon: " + ic);
                }
            }
!!!3738757.java!!!	getContrastedColor(inout context : Context, inout isLowPriority : boolean, in backgroundColor : int) : int
            int rawColor = isLowPriority ? Notification.COLOR_DEFAULT :
                    notification.getNotification().color;
            if (mCachedContrastColorIsFor == rawColor && mCachedContrastColor != COLOR_INVALID) {
                return mCachedContrastColor;
            }
            final int contrasted = NotificationColorUtil.resolveContrastColor(context, rawColor,
                    backgroundColor);
            mCachedContrastColorIsFor = rawColor;
            mCachedContrastColor = contrasted;
            return mCachedContrastColor;
!!!3738885.java!!!	abortTask() : void
            if (mRunningTask != null) {
                mRunningTask.abort();
                mRunningTask = null;
            }
!!!3739013.java!!!	setInflationTask(inout abortableTask : InflationTask) : void
            // abort any existing inflation
            InflationTask existing = mRunningTask;
            abortTask();
            mRunningTask = abortableTask;
            if (existing != null && mRunningTask != null) {
                mRunningTask.supersedeTask(existing);
            }
!!!3739141.java!!!	onInflationTaskFinished() : void
           mRunningTask = null;
!!!3739269.java!!!	getRunningTask() : InflationTask
            return mRunningTask;
