class NotificationListenerService
!!!8008453.java!!!	attachBaseContext(inout base : Context) : void
        super.attachBaseContext(base);
        mHandler = new MyHandler(getMainLooper());
!!!8008581.java!!!	onNotificationPosted(inout sbn : StatusBarNotification) : void
        // optional
!!!8008709.java!!!	onNotificationPosted(inout sbn : StatusBarNotification, inout rankingMap : NotificationListenerService::RankingMap) : void
        onNotificationPosted(sbn);
!!!8008837.java!!!	onNotificationRemoved(inout sbn : StatusBarNotification) : void
        // optional
!!!8008965.java!!!	onNotificationRemoved(inout sbn : StatusBarNotification, inout rankingMap : NotificationListenerService::RankingMap) : void
        onNotificationRemoved(sbn);
!!!8009093.java!!!	onNotificationRemoved(inout sbn : StatusBarNotification, inout rankingMap : NotificationListenerService::RankingMap, in reason : int) : void
        onNotificationRemoved(sbn, rankingMap);
!!!8009221.java!!!	onListenerConnected() : void
        // optional
!!!8009349.java!!!	onListenerDisconnected() : void
        // optional
!!!8009477.java!!!	onNotificationRankingUpdate(inout rankingMap : NotificationListenerService::RankingMap) : void
        // optional
!!!8009605.java!!!	onListenerHintsChanged(in hints : int) : void
        // optional
!!!8009733.java!!!	onNotificationChannelModified(in pkg : String, inout user : UserHandle, inout channel : NotificationChannel, in modificationType : int) : void
        // optional
!!!8009861.java!!!	onNotificationChannelGroupModified(in pkg : String, inout user : UserHandle, inout group : NotificationChannelGroup, in modificationType : int) : void
        // optional
!!!8009989.java!!!	onInterruptionFilterChanged(in interruptionFilter : int) : void
        // optional
!!!8010117.java!!!	getNotificationInterface() : INotificationManager
        if (mNoMan == null) {
            mNoMan = INotificationManager.Stub.asInterface(
                    ServiceManager.getService(Context.NOTIFICATION_SERVICE));
        }
        return mNoMan;
!!!8010245.java!!!	cancelNotification(in pkg : String, in tag : String, in id : int) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().cancelNotificationFromListener(
                    mWrapper, pkg, tag, id);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!8010373.java!!!	cancelNotification(in key : String) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().cancelNotificationsFromListener(mWrapper,
                    new String[] { key });
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!8010501.java!!!	cancelAllNotifications() : void
        cancelNotifications(null /*all*/);
!!!8010629.java!!!	cancelNotifications(inout keys : String [[]]) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().cancelNotificationsFromListener(mWrapper, keys);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!8010757.java!!!	snoozeNotification(in key : String, in snoozeCriterionId : String) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().snoozeNotificationUntilContextFromListener(
                    mWrapper, key, snoozeCriterionId);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!8010885.java!!!	snoozeNotification(in key : String, in durationMs : long) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().snoozeNotificationUntilFromListener(
                    mWrapper, key, durationMs);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!8011013.java!!!	setNotificationsShown(inout keys : String [[]]) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().setNotificationsShownFromListener(mWrapper, keys);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!8011141.java!!!	updateNotificationChannel(in pkg : String, inout user : UserHandle, inout channel : NotificationChannel) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().updateNotificationChannelFromPrivilegedListener(
                    mWrapper, pkg, user, channel);
        } catch (RemoteException e) {
            Log.v(TAG, "Unable to contact notification manager", e);
            throw e.rethrowFromSystemServer();
        }
!!!8011269.java!!!	getNotificationChannels(in pkg : String, inout user : UserHandle) : NotificationChannel
        if (!isBound()) return null;
        try {

            return getNotificationInterface().getNotificationChannelsFromPrivilegedListener(
                    mWrapper, pkg, user).getList();
        } catch (RemoteException e) {
            Log.v(TAG, "Unable to contact notification manager", e);
            throw e.rethrowFromSystemServer();
        }
!!!8011397.java!!!	getNotificationChannelGroups(in pkg : String, inout user : UserHandle) : NotificationChannelGroup
        if (!isBound()) return null;
        try {

            return getNotificationInterface().getNotificationChannelGroupsFromPrivilegedListener(
                    mWrapper, pkg, user).getList();
        } catch (RemoteException e) {
            Log.v(TAG, "Unable to contact notification manager", e);
            throw e.rethrowFromSystemServer();
        }
!!!8011525.java!!!	setOnNotificationPostedTrim(in trim : int) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().setOnNotificationPostedTrimFromListener(mWrapper, trim);
        } catch (RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!8011653.java!!!	getActiveNotifications() : StatusBarNotification
        return getActiveNotifications(null, TRIM_FULL);
!!!8011781.java!!!	getSnoozedNotifications() : StatusBarNotification
        try {
            ParceledListSlice<StatusBarNotification> parceledList = getNotificationInterface()
                    .getSnoozedNotificationsFromListener(mWrapper, TRIM_FULL);
            return cleanUpNotificationList(parceledList);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
        return null;
!!!8011909.java!!!	getActiveNotifications(in trim : int) : StatusBarNotification
        return getActiveNotifications(null, trim);
!!!8012037.java!!!	getActiveNotifications(inout keys : String [[]]) : StatusBarNotification
        return getActiveNotifications(keys, TRIM_FULL);
!!!8012165.java!!!	getActiveNotifications(inout keys : String [[]], in trim : int) : StatusBarNotification
        if (!isBound())
            return null;
        try {
            ParceledListSlice<StatusBarNotification> parceledList = getNotificationInterface()
                    .getActiveNotificationsFromListener(mWrapper, keys, trim);
            return cleanUpNotificationList(parceledList);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
        return null;
!!!8012293.java!!!	cleanUpNotificationList(inout parceledList : ParceledListSlice) : StatusBarNotification
        List<StatusBarNotification> list = parceledList.getList();
        ArrayList<StatusBarNotification> corruptNotifications = null;
        int N = list.size();
        for (int i = 0; i < N; i++) {
            StatusBarNotification sbn = list.get(i);
            Notification notification = sbn.getNotification();
            try {
                // convert icon metadata to legacy format for older clients
                createLegacyIconExtras(notification);
                // populate remote views for older clients.
                maybePopulateRemoteViews(notification);
            } catch (IllegalArgumentException e) {
                if (corruptNotifications == null) {
                    corruptNotifications = new ArrayList<>(N);
                }
                corruptNotifications.add(sbn);
                Log.w(TAG, "get(Active/Snoozed)Notifications: can't rebuild notification from " +
                        sbn.getPackageName());
            }
        }
        if (corruptNotifications != null) {
            list.removeAll(corruptNotifications);
        }
        return list.toArray(new StatusBarNotification[list.size()]);
!!!8012421.java!!!	getCurrentListenerHints() : int
        if (!isBound()) return 0;
        try {
            return getNotificationInterface().getHintsFromListener(mWrapper);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
            return 0;
        }
!!!8012549.java!!!	getCurrentInterruptionFilter() : int
        if (!isBound()) return INTERRUPTION_FILTER_UNKNOWN;
        try {
            return getNotificationInterface().getInterruptionFilterFromListener(mWrapper);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
            return INTERRUPTION_FILTER_UNKNOWN;
        }
!!!8012677.java!!!	requestListenerHints(in hints : int) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().requestHintsFromListener(mWrapper, hints);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!8012805.java!!!	requestInterruptionFilter(in interruptionFilter : int) : void
        if (!isBound()) return;
        try {
            getNotificationInterface()
                    .requestInterruptionFilterFromListener(mWrapper, interruptionFilter);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!8012933.java!!!	getCurrentRanking() : NotificationListenerService::RankingMap
        synchronized (mLock) {
            return mRankingMap;
        }
!!!8013061.java!!!	onBind(inout intent : Intent) : IBinder
        if (mWrapper == null) {
            mWrapper = new NotificationListenerWrapper();
        }
        return mWrapper;
!!!8013189.java!!!	isBound() : boolean
        if (mWrapper == null) {
            Log.w(TAG, "Notification listener service not yet bound.");
            return false;
        }
        return true;
!!!8013317.java!!!	onDestroy() : void
        onListenerDisconnected();
        super.onDestroy();
!!!8013445.java!!!	registerAsSystemService(inout context : Context, inout componentName : ComponentName, in currentUser : int) : void
        if (mWrapper == null) {
            mWrapper = new NotificationListenerWrapper();
        }
        mSystemContext = context;
        INotificationManager noMan = getNotificationInterface();
        mHandler = new MyHandler(context.getMainLooper());
        mCurrentUser = currentUser;
        noMan.registerListener(mWrapper, componentName, currentUser);
!!!8013573.java!!!	unregisterAsSystemService() : void
        if (mWrapper != null) {
            INotificationManager noMan = getNotificationInterface();
            noMan.unregisterListener(mWrapper, mCurrentUser);
        }
!!!8013701.java!!!	requestRebind(inout componentName : ComponentName) : void
        INotificationManager noMan = INotificationManager.Stub.asInterface(
                ServiceManager.getService(Context.NOTIFICATION_SERVICE));
        try {
            noMan.requestBindListener(componentName);
        } catch (RemoteException ex) {
            throw ex.rethrowFromSystemServer();
        }
!!!8013829.java!!!	requestUnbind() : void
        if (mWrapper != null) {
            INotificationManager noMan = getNotificationInterface();
            try {
                noMan.requestUnbindListener(mWrapper);
                // Disable future messages.
                isConnected = false;
            } catch (RemoteException ex) {
                throw ex.rethrowFromSystemServer();
            }
        }
!!!8013957.java!!!	createLegacyIconExtras(inout n : Notification) : void
        Icon smallIcon = n.getSmallIcon();
        Icon largeIcon = n.getLargeIcon();
        if (smallIcon != null && smallIcon.getType() == Icon.TYPE_RESOURCE) {
            n.extras.putInt(Notification.EXTRA_SMALL_ICON, smallIcon.getResId());
            n.icon = smallIcon.getResId();
        }
        if (largeIcon != null) {
            Drawable d = largeIcon.loadDrawable(getContext());
            if (d != null && d instanceof BitmapDrawable) {
                final Bitmap largeIconBits = ((BitmapDrawable) d).getBitmap();
                n.extras.putParcelable(Notification.EXTRA_LARGE_ICON, largeIconBits);
                n.largeIcon = largeIconBits;
            }
        }
!!!8014085.java!!!	maybePopulateRemoteViews(inout notification : Notification) : void
        if (getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.N) {
            Builder builder = Builder.recoverBuilder(getContext(), notification);

            // Some styles wrap Notification's contentView, bigContentView and headsUpContentView.
            // First inflate them all, only then set them to avoid recursive wrapping.
            RemoteViews content = builder.createContentView();
            RemoteViews big = builder.createBigContentView();
            RemoteViews headsUp = builder.createHeadsUpContentView();

            notification.contentView = content;
            notification.bigContentView = big;
            notification.headsUpContentView = headsUp;
        }
!!!8015493.java!!!	applyUpdateLocked(inout update : NotificationRankingUpdate) : void
        mRankingMap = new RankingMap(update);
!!!8015621.java!!!	getContext() : Context
        if (mSystemContext != null) {
            return mSystemContext;
        }
        return this;
