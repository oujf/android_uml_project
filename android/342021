format 216
"aidl" // source::frameworks::native::services::vr::hardware_composer::aidl
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/services/vr/hardware_composer/aidl/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/services/vr/hardware_composer/aidl/"
  package_ref 342149 // android

  deploymentview 288901 "hardware_composer"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1134853 "main"
      stereotype "source"
      cpp_src "int main() {
  android::ProcessState::self()->startThreadPool();

  // Register the hwbinder HWC HAL service used by SurfaceFlinger while in VR
  // mode.
  const char instance[] = \"vr\";
  android::sp<IComposer> service =
      android::dvr::HIDL_FETCH_IComposer(instance);

  LOG_ALWAYS_FATAL_IF(!service.get(), \"Failed to get service\");
  LOG_ALWAYS_FATAL_IF(service->isRemote(), \"Service is remote\");

  LOG_ALWAYS_FATAL_IF(service->registerAsService(instance) != android::OK,
                      \"Failed to register service\");

  android::sp<android::dvr::VrComposer> composer =
      new android::dvr::VrComposer();

  android::dvr::ComposerView* composer_view =
      android::dvr::GetComposerViewFromIComposer(service.get());
  composer_view->RegisterObserver(composer.get());

  android::sp<android::IServiceManager> sm(android::defaultServiceManager());

  // Register the binder service used by VR Window Manager service to receive
  // frame information from VR HWC HAL.
  android::status_t status = sm->addService(
      android::dvr::VrComposer::SERVICE_NAME(), composer.get(),
      false /* allowIsolated */);
  LOG_ALWAYS_FATAL_IF(status != android::OK,
                      \"VrDisplay service failed to start: %\" PRId32, status);

  android::hardware::ProcessState::self()->startThreadPool();
  android::hardware::IPCThreadState::self()->joinThreadPool();

  composer_view->UnregisterObserver(composer.get());

  return 0;
}
"
      associated_elems
      end
    end
  end
end
