class HealthStats
!!!7657733.java!!!	HealthStats()
        throw new RuntimeException("unsupported");
!!!7657861.java!!!	HealthStats(inout in : Parcel)
        int count;

        // Header fields
        mDataType = in.readString();

        // TimerStat fields
        count = in.readInt();
        mTimerKeys = new int[count];
        mTimerCounts = new int[count];
        mTimerTimes = new long[count];
        for (int i=0; i<count; i++) {
            mTimerKeys[i] = in.readInt();
            mTimerCounts[i] = in.readInt();
            mTimerTimes[i] = in.readLong();
        }

        // Measurement fields
        count = in.readInt();
        mMeasurementKeys = new int[count];
        mMeasurementValues = new long[count];
        for (int i=0; i<count; i++) {
            mMeasurementKeys[i] = in.readInt();
            mMeasurementValues[i] = in.readLong();
        }

        // Stats fields
        count = in.readInt();
        mStatsKeys = new int[count];
        mStatsValues = new ArrayMap[count];
        for (int i=0; i<count; i++) {
            mStatsKeys[i] = in.readInt();
            mStatsValues[i] = createHealthStatsMap(in);
        }

        // Timers fields
        count = in.readInt();
        mTimersKeys = new int[count];
        mTimersValues = new ArrayMap[count];
        for (int i=0; i<count; i++) {
            mTimersKeys[i] = in.readInt();
            mTimersValues[i] = createParcelableMap(in, TimerStat.CREATOR);
        }

        // Measurements fields
        count = in.readInt();
        mMeasurementsKeys = new int[count];
        mMeasurementsValues = new ArrayMap[count];
        for (int i=0; i<count; i++) {
            mMeasurementsKeys[i] = in.readInt();
            mMeasurementsValues[i] = createLongsMap(in);
        }
!!!7657989.java!!!	getDataType() : String
        return mDataType;
!!!7658117.java!!!	hasTimer(in key : int) : boolean
        return getIndex(mTimerKeys, key) >= 0;
!!!7658245.java!!!	getTimer(in key : int) : TimerStat
        final int index = getIndex(mTimerKeys, key);
        if (index < 0) {
            throw new IndexOutOfBoundsException("Bad timer key dataType=" + mDataType
                    + " key=" + key);
        }
        return new TimerStat(mTimerCounts[index], mTimerTimes[index]);
!!!7658373.java!!!	getTimerCount(in key : int) : int
        final int index = getIndex(mTimerKeys, key);
        if (index < 0) {
            throw new IndexOutOfBoundsException("Bad timer key dataType=" + mDataType
                    + " key=" + key);
        }
        return mTimerCounts[index];
!!!7658501.java!!!	getTimerTime(in key : int) : long
        final int index = getIndex(mTimerKeys, key);
        if (index < 0) {
            throw new IndexOutOfBoundsException("Bad timer key dataType=" + mDataType
                    + " key=" + key);
        }
        return mTimerTimes[index];
!!!7658629.java!!!	getTimerKeyCount() : int
        return mTimerKeys.length;
!!!7658757.java!!!	getTimerKeyAt(in index : int) : int
        return mTimerKeys[index];
!!!7658885.java!!!	hasMeasurement(in key : int) : boolean
        return getIndex(mMeasurementKeys, key) >= 0;
!!!7659013.java!!!	getMeasurement(in key : int) : long
        final int index = getIndex(mMeasurementKeys, key);
        if (index < 0) {
            throw new IndexOutOfBoundsException("Bad measurement key dataType=" + mDataType
                    + " key=" + key);
        }
        return mMeasurementValues[index];
!!!7659141.java!!!	getMeasurementKeyCount() : int
        return mMeasurementKeys.length;
!!!7659269.java!!!	getMeasurementKeyAt(in index : int) : int
        return mMeasurementKeys[index];
!!!7659397.java!!!	hasStats(in key : int) : boolean
        return getIndex(mStatsKeys, key) >= 0;
!!!7659525.java!!!	getStats(in key : int) : HealthStats
        final int index = getIndex(mStatsKeys, key);
        if (index < 0) {
            throw new IndexOutOfBoundsException("Bad stats key dataType=" + mDataType
                    + " key=" + key);
        }
        return mStatsValues[index];
!!!7659653.java!!!	getStatsKeyCount() : int
        return mStatsKeys.length;
!!!7659781.java!!!	getStatsKeyAt(in index : int) : int
        return mStatsKeys[index];
!!!7659909.java!!!	hasTimers(in key : int) : boolean
        return getIndex(mTimersKeys, key) >= 0;
!!!7660037.java!!!	getTimers(in key : int) : TimerStat
        final int index = getIndex(mTimersKeys, key);
        if (index < 0) {
            throw new IndexOutOfBoundsException("Bad timers key dataType=" + mDataType
                    + " key=" + key);
        }
        return mTimersValues[index];
!!!7660165.java!!!	getTimersKeyCount() : int
        return mTimersKeys.length;
!!!7660293.java!!!	getTimersKeyAt(in index : int) : int
        return mTimersKeys[index];
!!!7660421.java!!!	hasMeasurements(in key : int) : boolean
        return getIndex(mMeasurementsKeys, key) >= 0;
!!!7660549.java!!!	getMeasurements(in key : int) : Map<String,Long>
        final int index = getIndex(mMeasurementsKeys, key);
        if (index < 0) {
            throw new IndexOutOfBoundsException("Bad measurements key dataType=" + mDataType
                    + " key=" + key);
        }
        return mMeasurementsValues[index];
!!!7660677.java!!!	getMeasurementsKeyCount() : int
        return mMeasurementsKeys.length;
!!!7660805.java!!!	getMeasurementsKeyAt(in index : int) : int
        return mMeasurementsKeys[index];
!!!7660933.java!!!	getIndex(inout keys : int [[]], in key : int) : int
        return Arrays.binarySearch(keys, key);
!!!7661061.java!!!	createHealthStatsMap(inout in : Parcel) : ArrayMap
        final int count = in.readInt();
        final ArrayMap<String,HealthStats> result = new ArrayMap<String,HealthStats>(count);
        for (int i=0; i<count; i++) {
            result.put(in.readString(), new HealthStats(in));
        }
        return result;
!!!7661189.java!!!	createParcelableMap(inout in : Parcel, inout creator : Parcelable::Creator) : ArrayMap
        final int count = in.readInt();
        final ArrayMap<String,T> result = new ArrayMap<String,T>(count);
        for (int i=0; i<count; i++) {
            result.put(in.readString(), creator.createFromParcel(in));
        }
        return result;
!!!7661317.java!!!	createLongsMap(inout in : Parcel) : ArrayMap
        final int count = in.readInt();
        final ArrayMap<String,Long> result = new ArrayMap<String,Long>(count);
        for (int i=0; i<count; i++) {
            result.put(in.readString(), in.readLong());
        }
        return result;
