class ContentProvider
!!!6108037.java!!!	ContentProvider(inout context : Context, in readPermission : String, in writePermission : String, inout pathPermissions : PathPermission [[]])
        mContext = context;
        mReadPermission = readPermission;
        mWritePermission = writePermission;
        mPathPermissions = pathPermissions;
!!!6108165.java!!!	coerceToLocalContentProvider(inout abstractInterface : IContentProvider) : ContentProvider
        if (abstractInterface instanceof Transport) {
            return ((Transport)abstractInterface).getContentProvider();
        }
        return null;
!!!6116101.java!!!	checkUser(in pid : int, in uid : int, inout context : Context) : boolean
        return UserHandle.getUserId(uid) == context.getUserId()
                || mSingleUser
                || context.checkPermission(INTERACT_ACROSS_USERS, pid, uid)
                == PERMISSION_GRANTED;
!!!6116229.java!!!	checkPermissionAndAppOp(in permission : String, in callingPkg : String, inout callerToken : IBinder) : int
        if (getContext().checkPermission(permission, Binder.getCallingPid(), Binder.getCallingUid(),
                callerToken) != PERMISSION_GRANTED) {
            return MODE_ERRORED;
        }

        final int permOp = AppOpsManager.permissionToOpCode(permission);
        if (permOp != AppOpsManager.OP_NONE) {
            return mTransport.mAppOpsManager.noteProxyOp(permOp, callingPkg);
        }

        return MODE_ALLOWED;
!!!6116357.java!!!	enforceReadPermissionInner(inout uri : Uri, in callingPkg : String, inout callerToken : IBinder) : int
        final Context context = getContext();
        final int pid = Binder.getCallingPid();
        final int uid = Binder.getCallingUid();
        String missingPerm = null;
        int strongestMode = MODE_ALLOWED;

        if (UserHandle.isSameApp(uid, mMyUid)) {
            return MODE_ALLOWED;
        }

        if (mExported && checkUser(pid, uid, context)) {
            final String componentPerm = getReadPermission();
            if (componentPerm != null) {
                final int mode = checkPermissionAndAppOp(componentPerm, callingPkg, callerToken);
                if (mode == MODE_ALLOWED) {
                    return MODE_ALLOWED;
                } else {
                    missingPerm = componentPerm;
                    strongestMode = Math.max(strongestMode, mode);
                }
            }

            // track if unprotected read is allowed; any denied
            // <path-permission> below removes this ability
            boolean allowDefaultRead = (componentPerm == null);

            final PathPermission[] pps = getPathPermissions();
            if (pps != null) {
                final String path = uri.getPath();
                for (PathPermission pp : pps) {
                    final String pathPerm = pp.getReadPermission();
                    if (pathPerm != null && pp.match(path)) {
                        final int mode = checkPermissionAndAppOp(pathPerm, callingPkg, callerToken);
                        if (mode == MODE_ALLOWED) {
                            return MODE_ALLOWED;
                        } else {
                            // any denied <path-permission> means we lose
                            // default <provider> access.
                            allowDefaultRead = false;
                            missingPerm = pathPerm;
                            strongestMode = Math.max(strongestMode, mode);
                        }
                    }
                }
            }

            // if we passed <path-permission> checks above, and no default
            // <provider> permission, then allow access.
            if (allowDefaultRead) return MODE_ALLOWED;
        }

        // last chance, check against any uri grants
        final int callingUserId = UserHandle.getUserId(uid);
        final Uri userUri = (mSingleUser && !UserHandle.isSameUser(mMyUid, uid))
                ? maybeAddUserId(uri, callingUserId) : uri;
        if (context.checkUriPermission(userUri, pid, uid, Intent.FLAG_GRANT_READ_URI_PERMISSION,
                callerToken) == PERMISSION_GRANTED) {
            return MODE_ALLOWED;
        }

        // If the worst denial we found above was ignored, then pass that
        // ignored through; otherwise we assume it should be a real error below.
        if (strongestMode == MODE_IGNORED) {
            return MODE_IGNORED;
        }

        final String suffix;
        if (android.Manifest.permission.MANAGE_DOCUMENTS.equals(mReadPermission)) {
            suffix = " requires that you obtain access using ACTION_OPEN_DOCUMENT or related APIs";
        } else if (mExported) {
            suffix = " requires " + missingPerm + ", or grantUriPermission()";
        } else {
            suffix = " requires the provider be exported, or grantUriPermission()";
        }
        throw new SecurityException("Permission Denial: reading "
                + ContentProvider.this.getClass().getName() + " uri " + uri + " from pid=" + pid
                + ", uid=" + uid + suffix);
!!!6116485.java!!!	enforceWritePermissionInner(inout uri : Uri, in callingPkg : String, inout callerToken : IBinder) : int
        final Context context = getContext();
        final int pid = Binder.getCallingPid();
        final int uid = Binder.getCallingUid();
        String missingPerm = null;
        int strongestMode = MODE_ALLOWED;

        if (UserHandle.isSameApp(uid, mMyUid)) {
            return MODE_ALLOWED;
        }

        if (mExported && checkUser(pid, uid, context)) {
            final String componentPerm = getWritePermission();
            if (componentPerm != null) {
                final int mode = checkPermissionAndAppOp(componentPerm, callingPkg, callerToken);
                if (mode == MODE_ALLOWED) {
                    return MODE_ALLOWED;
                } else {
                    missingPerm = componentPerm;
                    strongestMode = Math.max(strongestMode, mode);
                }
            }

            // track if unprotected write is allowed; any denied
            // <path-permission> below removes this ability
            boolean allowDefaultWrite = (componentPerm == null);

            final PathPermission[] pps = getPathPermissions();
            if (pps != null) {
                final String path = uri.getPath();
                for (PathPermission pp : pps) {
                    final String pathPerm = pp.getWritePermission();
                    if (pathPerm != null && pp.match(path)) {
                        final int mode = checkPermissionAndAppOp(pathPerm, callingPkg, callerToken);
                        if (mode == MODE_ALLOWED) {
                            return MODE_ALLOWED;
                        } else {
                            // any denied <path-permission> means we lose
                            // default <provider> access.
                            allowDefaultWrite = false;
                            missingPerm = pathPerm;
                            strongestMode = Math.max(strongestMode, mode);
                        }
                    }
                }
            }

            // if we passed <path-permission> checks above, and no default
            // <provider> permission, then allow access.
            if (allowDefaultWrite) return MODE_ALLOWED;
        }

        // last chance, check against any uri grants
        if (context.checkUriPermission(uri, pid, uid, Intent.FLAG_GRANT_WRITE_URI_PERMISSION,
                callerToken) == PERMISSION_GRANTED) {
            return MODE_ALLOWED;
        }

        // If the worst denial we found above was ignored, then pass that
        // ignored through; otherwise we assume it should be a real error below.
        if (strongestMode == MODE_IGNORED) {
            return MODE_IGNORED;
        }

        final String failReason = mExported
                ? " requires " + missingPerm + ", or grantUriPermission()"
                : " requires the provider be exported, or grantUriPermission()";
        throw new SecurityException("Permission Denial: writing "
                + ContentProvider.this.getClass().getName() + " uri " + uri + " from pid=" + pid
                + ", uid=" + uid + failReason);
!!!6116613.java!!!	getContext() : Context
        return mContext;
!!!6116741.java!!!	setCallingPackage(in callingPackage : String) : String
        final String original = mCallingPackage.get();
        mCallingPackage.set(callingPackage);
        return original;
!!!6116869.java!!!	getCallingPackage() : String
        final String pkg = mCallingPackage.get();
        if (pkg != null) {
            mTransport.mAppOpsManager.checkPackage(Binder.getCallingUid(), pkg);
        }
        return pkg;
!!!6116997.java!!!	setAuthorities(in authorities : String) : void
        if (authorities != null) {
            if (authorities.indexOf(';') == -1) {
                mAuthority = authorities;
                mAuthorities = null;
            } else {
                mAuthority = null;
                mAuthorities = authorities.split(";");
            }
        }
!!!6117125.java!!!	matchesOurAuthorities(in authority : String) : boolean
        if (mAuthority != null) {
            return mAuthority.equals(authority);
        }
        if (mAuthorities != null) {
            int length = mAuthorities.length;
            for (int i = 0; i < length; i++) {
                if (mAuthorities[i].equals(authority)) return true;
            }
        }
        return false;
!!!6117253.java!!!	setReadPermission(in permission : String) : void
        mReadPermission = permission;
!!!6117381.java!!!	getReadPermission() : String
        return mReadPermission;
!!!6117509.java!!!	setWritePermission(in permission : String) : void
        mWritePermission = permission;
!!!6117637.java!!!	getWritePermission() : String
        return mWritePermission;
!!!6117765.java!!!	setPathPermissions(inout permissions : PathPermission [[]]) : void
        mPathPermissions = permissions;
!!!6117893.java!!!	getPathPermissions() : PathPermission
        return mPathPermissions;
!!!6118021.java!!!	setAppOps(in readOp : int, in writeOp : int) : void
        if (!mNoPerms) {
            mTransport.mReadOp = readOp;
            mTransport.mWriteOp = writeOp;
        }
!!!6118149.java!!!	getAppOpsManager() : AppOpsManager
        return mTransport.mAppOpsManager;
!!!6118917.java!!!	query(inout uri : Uri, inout projection : String [[]], in selection : String, inout selectionArgs : String [[]], in sortOrder : String, inout cancellationSignal : CancellationSignal) : Cursor
        return query(uri, projection, selection, selectionArgs, sortOrder);
!!!6119045.java!!!	query(inout uri : Uri, inout projection : String [[]], inout queryArgs : Bundle, inout cancellationSignal : CancellationSignal) : Cursor
        queryArgs = queryArgs != null ? queryArgs : Bundle.EMPTY;

        // if client doesn't supply an SQL sort order argument, attempt to build one from
        // QUERY_ARG_SORT* arguments.
        String sortClause = queryArgs.getString(ContentResolver.QUERY_ARG_SQL_SORT_ORDER);
        if (sortClause == null && queryArgs.containsKey(ContentResolver.QUERY_ARG_SORT_COLUMNS)) {
            sortClause = ContentResolver.createSqlSortClause(queryArgs);
        }

        return query(
                uri,
                projection,
                queryArgs.getString(ContentResolver.QUERY_ARG_SQL_SELECTION),
                queryArgs.getStringArray(ContentResolver.QUERY_ARG_SQL_SELECTION_ARGS),
                sortClause,
                cancellationSignal);
!!!6119301.java!!!	canonicalize(inout url : Uri) : Uri
        return null;
!!!6119429.java!!!	uncanonicalize(inout url : Uri) : Uri
        return url;
!!!6119557.java!!!	refresh(inout uri : Uri, inout args : Bundle, inout cancellationSignal : CancellationSignal) : boolean
        return false;
!!!6119685.java!!!	rejectInsert(inout uri : Uri, inout values : ContentValues) : Uri
        // If not allowed, we need to return some reasonable URI.  Maybe the
        // content provider should be responsible for this, but for now we
        // will just return the base URI with a dummy '0' tagged on to it.
        // You shouldn't be able to read if you can't write, anyway, so it
        // shouldn't matter much what is returned.
        return uri.buildUpon().appendPath("0").build();
!!!6119941.java!!!	bulkInsert(inout uri : Uri, inout values : ContentValues [[]]) : int
        int numValues = values.length;
        for (int i = 0; i < numValues; i++) {
            insert(uri, values[i]);
        }
        return numValues;
!!!6120325.java!!!	openFile(inout uri : Uri, in mode : String) : ParcelFileDescriptor
        throw new FileNotFoundException("No files supported by provider at "
                + uri);
!!!6120453.java!!!	openFile(inout uri : Uri, in mode : String, inout signal : CancellationSignal) : ParcelFileDescriptor
        return openFile(uri, mode);
!!!6120581.java!!!	openAssetFile(inout uri : Uri, in mode : String) : AssetFileDescriptor
        ParcelFileDescriptor fd = openFile(uri, mode);
        return fd != null ? new AssetFileDescriptor(fd, 0, -1) : null;
!!!6120709.java!!!	openAssetFile(inout uri : Uri, in mode : String, inout signal : CancellationSignal) : AssetFileDescriptor
        return openAssetFile(uri, mode);
!!!6120837.java!!!	openFileHelper(inout uri : Uri, in mode : String) : ParcelFileDescriptor
        Cursor c = query(uri, new String[]{"_data"}, null, null, null);
        int count = (c != null) ? c.getCount() : 0;
        if (count != 1) {
            // If there is not exactly one result, throw an appropriate
            // exception.
            if (c != null) {
                c.close();
            }
            if (count == 0) {
                throw new FileNotFoundException("No entry for " + uri);
            }
            throw new FileNotFoundException("Multiple items at " + uri);
        }

        c.moveToFirst();
        int i = c.getColumnIndex("_data");
        String path = (i >= 0 ? c.getString(i) : null);
        c.close();
        if (path == null) {
            throw new FileNotFoundException("Column _data not found.");
        }

        int modeBits = ParcelFileDescriptor.parseMode(mode);
        return ParcelFileDescriptor.open(new File(path), modeBits);
!!!6120965.java!!!	getStreamTypes(inout uri : Uri, in mimeTypeFilter : String) : String
        return null;
!!!6121093.java!!!	openTypedAssetFile(inout uri : Uri, in mimeTypeFilter : String, inout opts : Bundle) : AssetFileDescriptor
        if ("*/*".equals(mimeTypeFilter)) {
            // If they can take anything, the untyped open call is good enough.
            return openAssetFile(uri, "r");
        }
        String baseType = getType(uri);
        if (baseType != null && ClipDescription.compareMimeTypes(baseType, mimeTypeFilter)) {
            // Use old untyped open call if this provider has a type for this
            // URI and it matches the request.
            return openAssetFile(uri, "r");
        }
        throw new FileNotFoundException("Can't open " + uri + " as type " + mimeTypeFilter);
!!!6121221.java!!!	openTypedAssetFile(inout uri : Uri, in mimeTypeFilter : String, inout opts : Bundle, inout signal : CancellationSignal) : AssetFileDescriptor
        return openTypedAssetFile(uri, mimeTypeFilter, opts);
!!!6121477.java!!!	openPipeHelper(in uri : Uri, in mimeType : String, in opts : Bundle, in args : T, in func : ContentProvider::PipeDataWriter) : ParcelFileDescriptor
        try {
            final ParcelFileDescriptor[] fds = ParcelFileDescriptor.createPipe();

            AsyncTask<Object, Object, Object> task = new AsyncTask<Object, Object, Object>() {
                @Override
                protected Object doInBackground(Object... params) {
                    func.writeDataToPipe(fds[1], uri, mimeType, opts, args);
                    try {
                        fds[1].close();
                    } catch (IOException e) {
                        Log.w(TAG, "Failure closing pipe", e);
                    }
                    return null;
                }
            };
            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Object[])null);

            return fds[0];
        } catch (IOException e) {
            throw new FileNotFoundException("failure making pipe");
        }
!!!6121605.java!!!	isTemporary() : boolean
        return false;
!!!6121733.java!!!	getIContentProvider() : IContentProvider
        return mTransport;
!!!6121861.java!!!	attachInfoForTesting(inout context : Context, inout info : ProviderInfo) : void
        attachInfo(context, info, true);
!!!6121989.java!!!	attachInfo(inout context : Context, inout info : ProviderInfo) : void
        attachInfo(context, info, false);
!!!6122117.java!!!	attachInfo(inout context : Context, inout info : ProviderInfo, inout testing : boolean) : void
        mNoPerms = testing;

        /*
         * Only allow it to be set once, so after the content service gives
         * this to us clients can't change it.
         */
        if (mContext == null) {
            mContext = context;
            if (context != null) {
                mTransport.mAppOpsManager = (AppOpsManager) context.getSystemService(
                        Context.APP_OPS_SERVICE);
            }
            mMyUid = Process.myUid();
            if (info != null) {
                setReadPermission(info.readPermission);
                setWritePermission(info.writePermission);
                setPathPermissions(info.pathPermissions);
                mExported = info.exported;
                mSingleUser = (info.flags & ProviderInfo.FLAG_SINGLE_USER) != 0;
                setAuthorities(info.authority);
            }
            ContentProvider.this.onCreate();
        }
!!!6122245.java!!!	applyBatch(inout operations : ArrayList<ContentProviderOperation>) : ContentProviderResult
        final int numOperations = operations.size();
        final ContentProviderResult[] results = new ContentProviderResult[numOperations];
        for (int i = 0; i < numOperations; i++) {
            results[i] = operations.get(i).apply(this, results, i);
        }
        return results;
!!!6122373.java!!!	call(in method : String, in arg : String, inout extras : Bundle) : Bundle
        return null;
!!!6122501.java!!!	shutdown() : void
        Log.w(TAG, "implement ContentProvider shutdown() to make sure all database " +
                "connections are gracefully shutdown");
!!!6122629.java!!!	dump(inout fd : FileDescriptor, inout writer : PrintWriter, inout args : String [[]]) : void
        writer.println("nothing to dump");
!!!6122757.java!!!	validateIncomingUri(inout uri : Uri) : void
        String auth = uri.getAuthority();
        if (!mSingleUser) {
            int userId = getUserIdFromAuthority(auth, UserHandle.USER_CURRENT);
            if (userId != UserHandle.USER_CURRENT && userId != mContext.getUserId()) {
                throw new SecurityException("trying to query a ContentProvider in user "
                        + mContext.getUserId() + " with a uri belonging to user " + userId);
            }
        }
        if (!matchesOurAuthorities(getAuthorityWithoutUserId(auth))) {
            String message = "The authority of the uri " + uri + " does not match the one of the "
                    + "contentProvider: ";
            if (mAuthority != null) {
                message += mAuthority;
            } else {
                message += Arrays.toString(mAuthorities);
            }
            throw new SecurityException(message);
        }
!!!6122885.java!!!	maybeGetUriWithoutUserId(inout uri : Uri) : Uri
        if (mSingleUser) {
            return uri;
        }
        return getUriWithoutUserId(uri);
!!!6123013.java!!!	getUserIdFromAuthority(in auth : String, in defaultUserId : int) : int
        if (auth == null) return defaultUserId;
        int end = auth.lastIndexOf('@');
        if (end == -1) return defaultUserId;
        String userIdString = auth.substring(0, end);
        try {
            return Integer.parseInt(userIdString);
        } catch (NumberFormatException e) {
            Log.w(TAG, "Error parsing userId.", e);
            return UserHandle.USER_NULL;
        }
!!!6123141.java!!!	getUserIdFromAuthority(in auth : String) : int
        return getUserIdFromAuthority(auth, UserHandle.USER_CURRENT);
!!!6123269.java!!!	getUserIdFromUri(inout uri : Uri, in defaultUserId : int) : int
        if (uri == null) return defaultUserId;
        return getUserIdFromAuthority(uri.getAuthority(), defaultUserId);
!!!6123397.java!!!	getUserIdFromUri(inout uri : Uri) : int
        return getUserIdFromUri(uri, UserHandle.USER_CURRENT);
!!!6123525.java!!!	getAuthorityWithoutUserId(in auth : String) : String
        if (auth == null) return null;
        int end = auth.lastIndexOf('@');
        return auth.substring(end+1);
!!!6123653.java!!!	getUriWithoutUserId(inout uri : Uri) : Uri
        if (uri == null) return null;
        Uri.Builder builder = uri.buildUpon();
        builder.authority(getAuthorityWithoutUserId(uri.getAuthority()));
        return builder.build();
!!!6123781.java!!!	uriHasUserId(inout uri : Uri) : boolean
        if (uri == null) return false;
        return !TextUtils.isEmpty(uri.getUserInfo());
!!!6123909.java!!!	maybeAddUserId(inout uri : Uri, in userId : int) : Uri
        if (uri == null) return null;
        if (userId != UserHandle.USER_CURRENT
                && ContentResolver.SCHEME_CONTENT.equals(uri.getScheme())) {
            if (!uriHasUserId(uri)) {
                //We don't add the user Id if there's already one
                Uri.Builder builder = uri.buildUpon();
                builder.encodedAuthority("" + userId + "@" + uri.getEncodedAuthority());
                return builder.build();
            }
        }
        return uri;
