class SparseBooleanArray
!!!8505349.java!!!	SparseBooleanArray()
        this(10);
!!!8505477.java!!!	SparseBooleanArray(in initialCapacity : int)
        if (initialCapacity == 0) {
            mKeys = EmptyArray.INT;
            mValues = EmptyArray.BOOLEAN;
        } else {
            mKeys = ArrayUtils.newUnpaddedIntArray(initialCapacity);
            mValues = new boolean[mKeys.length];
        }
        mSize = 0;
!!!8505605.java!!!	clone() : SparseBooleanArray
        SparseBooleanArray clone = null;
        try {
            clone = (SparseBooleanArray) super.clone();
            clone.mKeys = mKeys.clone();
            clone.mValues = mValues.clone();
        } catch (CloneNotSupportedException cnse) {
            /* ignore */
        }
        return clone;
!!!8505733.java!!!	get(in key : int) : boolean
        return get(key, false);
!!!8505861.java!!!	get(in key : int, inout valueIfKeyNotFound : boolean) : boolean
        int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

        if (i < 0) {
            return valueIfKeyNotFound;
        } else {
            return mValues[i];
        }
!!!8505989.java!!!	delete(in key : int) : void
        int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

        if (i >= 0) {
            System.arraycopy(mKeys, i + 1, mKeys, i, mSize - (i + 1));
            System.arraycopy(mValues, i + 1, mValues, i, mSize - (i + 1));
            mSize--;
        }
!!!8506117.java!!!	removeAt(in index : int) : void
        System.arraycopy(mKeys, index + 1, mKeys, index, mSize - (index + 1));
        System.arraycopy(mValues, index + 1, mValues, index, mSize - (index + 1));
        mSize--;
!!!8506245.java!!!	put(in key : int, inout value : boolean) : void
        int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

        if (i >= 0) {
            mValues[i] = value;
        } else {
            i = ~i;

            mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);
            mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);
            mSize++;
        }
!!!8506373.java!!!	size() : int
        return mSize;
!!!8506501.java!!!	keyAt(in index : int) : int
        return mKeys[index];
!!!8506629.java!!!	valueAt(in index : int) : boolean
        return mValues[index];
!!!8506757.java!!!	setValueAt(in index : int, inout value : boolean) : void
        mValues[index] = value;
!!!8506885.java!!!	setKeyAt(in index : int, in key : int) : void
        mKeys[index] = key;
!!!8507013.java!!!	indexOfKey(in key : int) : int
        return ContainerHelpers.binarySearch(mKeys, mSize, key);
!!!8507141.java!!!	indexOfValue(inout value : boolean) : int
        for (int i = 0; i < mSize; i++)
            if (mValues[i] == value)
                return i;

        return -1;
!!!8507269.java!!!	clear() : void
        mSize = 0;
!!!8507397.java!!!	append(in key : int, inout value : boolean) : void
        if (mSize != 0 && key <= mKeys[mSize - 1]) {
            put(key, value);
            return;
        }

        mKeys = GrowingArrayUtils.append(mKeys, mSize, key);
        mValues = GrowingArrayUtils.append(mValues, mSize, value);
        mSize++;
!!!8507525.java!!!	hashCode() : int
        int hashCode = mSize;
        for (int i = 0; i < mSize; i++) {
            hashCode = 31 * hashCode + mKeys[i] | (mValues[i] ? 1 : 0);
        }
        return hashCode;
!!!8507653.java!!!	equals(inout that : Object) : boolean
      if (this == that) {
          return true;
      }

      if (!(that instanceof SparseBooleanArray)) {
          return false;
      }

      SparseBooleanArray other = (SparseBooleanArray) that;
      if (mSize != other.mSize) {
          return false;
      }

      for (int i = 0; i < mSize; i++) {
          if (mKeys[i] != other.mKeys[i]) {
              return false;
          }
          if (mValues[i] != other.mValues[i]) {
              return false;
          }
      }
      return true;
!!!8507781.java!!!	toString() : String
        if (size() <= 0) {
            return "{}";
        }

        StringBuilder buffer = new StringBuilder(mSize * 28);
        buffer.append('{');
        for (int i=0; i<mSize; i++) {
            if (i > 0) {
                buffer.append(", ");
            }
            int key = keyAt(i);
            buffer.append(key);
            buffer.append('=');
            boolean value = valueAt(i);
            buffer.append(value);
        }
        buffer.append('}');
        return buffer.toString();
