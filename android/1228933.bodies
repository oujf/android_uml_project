class CompactExtractEditLayout
!!!6968581.java!!!	CompactExtractEditLayout(inout context : Context)
        super(context);
!!!6968709.java!!!	CompactExtractEditLayout(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!6968837.java!!!	CompactExtractEditLayout(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        super(context, attrs, defStyleAttr);
!!!6968965.java!!!	onFinishInflate() : void
        super.onFinishInflate();
        mInputExtractEditText = findViewById(com.android.internal.R.id.inputExtractEditText);
        mInputExtractAccessories = findViewById(com.android.internal.R.id.inputExtractAccessories);
        mInputExtractAction = findViewById(com.android.internal.R.id.inputExtractAction);

        if (mInputExtractEditText != null && mInputExtractAccessories != null
                && mInputExtractAction != null) {
            mPerformLayoutChanges = true;
        }
!!!6969093.java!!!	applyFractionInt(in fraction : int, in whole : int) : int
        return Math.round(getResources().getFraction(fraction, whole, whole));
!!!6969221.java!!!	setLayoutHeight(inout v : View, in px : int) : void
        ViewGroup.LayoutParams lp = v.getLayoutParams();
        lp.height = px;
        v.setLayoutParams(lp);
!!!6969349.java!!!	setLayoutMarginBottom(inout v : View, in px : int) : void
        ViewGroup.MarginLayoutParams lp = (MarginLayoutParams) v.getLayoutParams();
        lp.bottomMargin = px;
        v.setLayoutParams(lp);
!!!6969477.java!!!	applyProportionalLayout(in screenWidthPx : int, in screenHeightPx : int) : void
        if (getResources().getConfiguration().isScreenRound()) {
            setGravity(Gravity.BOTTOM);
        }
        setLayoutHeight(this, applyFractionInt(
                com.android.internal.R.fraction.input_extract_layout_height, screenHeightPx));

        setPadding(
                applyFractionInt(com.android.internal.R.fraction.input_extract_layout_padding_left,
                        screenWidthPx),
                0,
                applyFractionInt(com.android.internal.R.fraction.input_extract_layout_padding_right,
                        screenWidthPx),
                0);

        setLayoutMarginBottom(mInputExtractEditText,
                applyFractionInt(com.android.internal.R.fraction.input_extract_text_margin_bottom,
                        screenHeightPx));

        setLayoutMarginBottom(mInputExtractAccessories,
                applyFractionInt(com.android.internal.R.fraction.input_extract_action_margin_bottom,
                        screenHeightPx));
!!!6969605.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
        if (mPerformLayoutChanges) {
            Resources res = getResources();
            Configuration cfg = res.getConfiguration();
            DisplayMetrics dm = res.getDisplayMetrics();
            int widthPixels = dm.widthPixels;
            int heightPixels = dm.heightPixels;

            // Percentages must be based on the pixel height of the full (apparent) display height
            // which is sometimes different from display metrics.
            //
            // On a round device, a display height smaller than width indicates a chin (cropped
            // edge of the display) for which there is no screen buffer allocated. This is
            // typically 25-35px in height.
            //
            // getRootWindowInsets() does not function for InputMethod windows (always null).
            // Instead just set height to match width if less. This is safe because round wear
            // devices are by definition 1:1 aspect ratio.

            if (cfg.isScreenRound() && heightPixels < widthPixels) {
                heightPixels = widthPixels;
            }
            applyProportionalLayout(widthPixels, heightPixels);
        }
