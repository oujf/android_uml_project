class NotificationGuts
!!!3744517.java!!!	NotificationGuts(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        setWillNotDraw(false);
        mHandler = new Handler();
        mFalsingCheck = new Runnable() {
            @Override
            public void run() {
                if (mNeedsFalsingProtection && mExposed) {
                    closeControls(-1 /* x */, -1 /* y */, false /* save */, false /* force */);
                }
            }
        };
        final TypedArray ta = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.Theme, 0, 0);
        ta.recycle();
!!!3744645.java!!!	NotificationGuts(inout context : Context)
        this(context, null);
!!!3744773.java!!!	setGutsContent(inout content : NotificationGuts::GutsContent) : void
        mGutsContent = content;
        removeAllViews();
        addView(mGutsContent.getContentView());
!!!3744901.java!!!	getGutsContent() : NotificationGuts::GutsContent
        return mGutsContent;
!!!3745029.java!!!	resetFalsingCheck() : void
        mHandler.removeCallbacks(mFalsingCheck);
        if (mNeedsFalsingProtection && mExposed) {
            mHandler.postDelayed(mFalsingCheck, CLOSE_GUTS_DELAY);
        }
!!!3745157.java!!!	onDraw(inout canvas : Canvas) : void
        draw(canvas, mBackground);
!!!3745285.java!!!	draw(inout canvas : Canvas, inout drawable : Drawable) : void
        int top = mClipTopAmount;
        int bottom = mActualHeight - mClipBottomAmount;
        if (drawable != null && top < bottom) {
            drawable.setBounds(0, top, getWidth(), bottom);
            drawable.draw(canvas);
        }
!!!3745413.java!!!	onFinishInflate() : void
        super.onFinishInflate();
        mBackground = mContext.getDrawable(R.drawable.notification_guts_bg);
        if (mBackground != null) {
            mBackground.setCallback(this);
        }
!!!3745541.java!!!	verifyDrawable(inout who : Drawable) : boolean
        return super.verifyDrawable(who) || who == mBackground;
!!!3745669.java!!!	drawableStateChanged() : void
        drawableStateChanged(mBackground);
!!!3745797.java!!!	drawableStateChanged(inout d : Drawable) : void
        if (d != null && d.isStateful()) {
            d.setState(getDrawableState());
        }
!!!3745925.java!!!	drawableHotspotChanged(in x : float, in y : float) : void
        if (mBackground != null) {
            mBackground.setHotspot(x, y);
        }
!!!3746053.java!!!	closeControls(inout leavebehinds : boolean, inout controls : boolean, in x : int, in y : int, inout force : boolean) : void
        if (mGutsContent != null) {
            if (mGutsContent.isLeavebehind() && leavebehinds) {
                closeControls(x, y, true /* save */, force);
            } else if (!mGutsContent.isLeavebehind() && controls) {
                closeControls(x, y, true /* save */, force);
            }
        }
!!!3746181.java!!!	closeControls(in x : int, in y : int, inout save : boolean, inout force : boolean) : void
        if (getWindowToken() == null) {
            if (mClosedListener != null) {
                mClosedListener.onGutsClosed(this);
            }
            return;
        }

        if (mGutsContent == null || !mGutsContent.handleCloseControls(save, force)) {
            animateClose(x, y);
            setExposed(false, mNeedsFalsingProtection);
            if (mClosedListener != null) {
                mClosedListener.onGutsClosed(this);
            }
        }
!!!3746309.java!!!	animateClose(in x : int, in y : int) : void
        if (x == -1 || y == -1) {
            x = (getLeft() + getRight()) / 2;
            y = (getTop() + getHeight() / 2);
        }
        final double horz = Math.max(getWidth() - x, x);
        final double vert = Math.max(getHeight() - y, y);
        final float r = (float) Math.hypot(horz, vert);
        final Animator a = ViewAnimationUtils.createCircularReveal(this,
                x, y, r, 0);
        a.setDuration(StackStateAnimator.ANIMATION_DURATION_STANDARD);
        a.setInterpolator(Interpolators.FAST_OUT_LINEAR_IN);
        a.addListener(new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                super.onAnimationEnd(animation);
                setVisibility(View.GONE);
            }
        });
        a.start();
!!!3746437.java!!!	setActualHeight(in actualHeight : int) : void
        mActualHeight = actualHeight;
        invalidate();
!!!3746565.java!!!	getActualHeight() : int
        return mActualHeight;
!!!3746693.java!!!	getIntrinsicHeight() : int
        return mGutsContent != null && mExposed ? mGutsContent.getActualHeight() : getHeight();
!!!3746821.java!!!	setClipTopAmount(in clipTopAmount : int) : void
        mClipTopAmount = clipTopAmount;
        invalidate();
!!!3746949.java!!!	setClipBottomAmount(in clipBottomAmount : int) : void
        mClipBottomAmount = clipBottomAmount;
        invalidate();
!!!3747077.java!!!	hasOverlappingRendering() : boolean
        // Prevents this view from creating a layer when alpha is animating.
        return false;
!!!3747205.java!!!	setClosedListener(inout listener : NotificationGuts::OnGutsClosedListener) : void
        mClosedListener = listener;
!!!3747333.java!!!	setHeightChangedListener(inout listener : NotificationGuts::OnHeightChangedListener) : void
        mHeightListener = listener;
!!!3747461.java!!!	onHeightChanged() : void
        if (mHeightListener != null) {
            mHeightListener.onHeightChanged(this);
        }
!!!3747589.java!!!	setExposed(inout exposed : boolean, inout needsFalsingProtection : boolean) : void
        final boolean wasExposed = mExposed;
        mExposed = exposed;
        mNeedsFalsingProtection = needsFalsingProtection;
        if (mExposed && mNeedsFalsingProtection) {
            resetFalsingCheck();
        } else {
            mHandler.removeCallbacks(mFalsingCheck);
        }
        if (wasExposed != mExposed && mGutsContent != null) {
            final View contentView = mGutsContent.getContentView();
            contentView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
            if (mExposed) {
                contentView.requestAccessibilityFocus();
            }
        }
!!!3747717.java!!!	willBeRemoved() : boolean
        return mGutsContent != null ? mGutsContent.willBeRemoved() : false;
!!!3747845.java!!!	isExposed() : boolean
        return mExposed;
