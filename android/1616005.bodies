class OemLockService
!!!10810629.java!!!	OemLockService(inout context : Context)
        super(context);
        mContext = context;
!!!10810757.java!!!	onStart() : void
        publishBinderService(Context.OEM_LOCK_SERVICE, mService);
!!!10810885.java!!!	doIsOemUnlockAllowedByCarrier() : boolean
        return !UserManager.get(mContext).hasUserRestriction(UserManager.DISALLOW_OEM_UNLOCK);
!!!10811013.java!!!	doIsOemUnlockAllowedByUser() : boolean
        final PersistentDataBlockManager pdbm = (PersistentDataBlockManager)
            mContext.getSystemService(Context.PERSISTENT_DATA_BLOCK_SERVICE);

        final long token = Binder.clearCallingIdentity();
        try {
            return pdbm.getOemUnlockEnabled();
        } finally {
            Binder.restoreCallingIdentity(token);
        }
!!!10811141.java!!!	enforceManageCarrierOemUnlockPermission() : void
        mContext.enforceCallingOrSelfPermission(
                Manifest.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE,
                "Can't manage OEM unlock allowed by carrier");
!!!10811269.java!!!	enforceManageUserOemUnlockPermission() : void
        mContext.enforceCallingOrSelfPermission(
                Manifest.permission.MANAGE_USER_OEM_UNLOCK_STATE,
                "Can't manage OEM unlock allowed by user");
!!!10811397.java!!!	enforceUserIsAdmin() : void
        final int userId = UserHandle.getCallingUserId();
        final long token = Binder.clearCallingIdentity();
        try {
            if (!UserManager.get(mContext).isUserAdmin(userId)) {
                throw new SecurityException("Must be an admin user");
            }
        } finally {
            Binder.restoreCallingIdentity(token);
        }
