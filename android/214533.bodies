class SharedMemoryProxy
!!!544517.cpp!!!	~SharedMemoryProxy()
    if (mOriginalSharedMemory != nullptr) {
        munmap(mOriginalSharedMemory, mSharedMemorySizeInBytes);
        mOriginalSharedMemory = nullptr;
    }
    if (mProxySharedMemory != nullptr) {
        munmap(mProxySharedMemory, mSharedMemorySizeInBytes);
        close(mProxyFileDescriptor);
        mProxySharedMemory = nullptr;
    }
!!!544645.cpp!!!	open(in originalFD : int, in capacityInBytes : int32_t) : aaudio_result_t
    mOriginalFileDescriptor = originalFD;
    mSharedMemorySizeInBytes = capacityInBytes;

    mProxyFileDescriptor = ashmem_create_region("AAudioProxyDataBuffer", mSharedMemorySizeInBytes);
    if (mProxyFileDescriptor < 0) {
        ALOGE("SharedMemoryProxy::open() ashmem_create_region() failed %d", errno);
        return AAUDIO_ERROR_INTERNAL;
    }
    int err = ashmem_set_prot_region(mProxyFileDescriptor, PROT_READ|PROT_WRITE);
    if (err < 0) {
        ALOGE("SharedMemoryProxy::open() ashmem_set_prot_region() failed %d", errno);
        close(mProxyFileDescriptor);
        mProxyFileDescriptor = -1;
        return AAUDIO_ERROR_INTERNAL; // TODO convert errno to a better AAUDIO_ERROR;
    }

    // Get original memory address.
    mOriginalSharedMemory = (uint8_t *) mmap(0, mSharedMemorySizeInBytes,
                         PROT_READ|PROT_WRITE,
                         MAP_SHARED,
                         mOriginalFileDescriptor, 0);
    if (mOriginalSharedMemory == MAP_FAILED) {
        ALOGE("SharedMemoryProxy::open() original mmap(%d) failed %d (%s)",
                mOriginalFileDescriptor, errno, strerror(errno));
        return AAUDIO_ERROR_INTERNAL; // TODO convert errno to a better AAUDIO_ERROR;
    }

    // Map the fd to the same memory addresses.
    mProxySharedMemory = (uint8_t *) mmap(mOriginalSharedMemory, mSharedMemorySizeInBytes,
                         PROT_READ|PROT_WRITE,
                         MAP_SHARED,
                         mProxyFileDescriptor, 0);
    if (mProxySharedMemory != mOriginalSharedMemory) {
        ALOGE("SharedMemoryProxy::open() proxy mmap(%d) failed %d", mProxyFileDescriptor, errno);
        munmap(mOriginalSharedMemory, mSharedMemorySizeInBytes);
        mOriginalSharedMemory = nullptr;
        close(mProxyFileDescriptor);
        mProxyFileDescriptor = -1;
        return AAUDIO_ERROR_INTERNAL; // TODO convert errno to a better AAUDIO_ERROR;
    }

    return AAUDIO_OK;
