class ActionModeImpl
!!!9855621.java!!!	ActionModeImpl(inout context : Context, inout callback : ActionMode::Callback)
            mActionModeContext = context;
            mCallback = callback;
            mMenu = new MenuBuilder(context)
                        .setDefaultShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
            mMenu.setCallback(this);
!!!9855749.java!!!	getMenuInflater() : MenuInflater
            return new MenuInflater(mActionModeContext);
!!!9855877.java!!!	getMenu() : Menu
            return mMenu;
!!!9856005.java!!!	finish() : void
            if (mActionMode != this) {
                // Not the active action mode - no-op
                return;
            }

            // If this change in state is going to cause the action bar
            // to be hidden, defer the onDestroy callback until the animation
            // is finished and associated relayout is about to happen. This lets
            // apps better anticipate visibility and layout behavior.
            if (!checkShowingFlags(mHiddenByApp, mHiddenBySystem, false)) {
                // With the current state but the action bar hidden, our
                // overall showing state is going to be false.
                mDeferredDestroyActionMode = this;
                mDeferredModeDestroyCallback = mCallback;
            } else {
                mCallback.onDestroyActionMode(this);
            }
            mCallback = null;
            animateToMode(false);

            // Clear out the context mode views after the animation finishes
            mContextView.closeMode();
            mDecorToolbar.getViewGroup().sendAccessibilityEvent(
                    AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
            mOverlayLayout.setHideOnContentScrollEnabled(mHideOnContentScroll);

            mActionMode = null;
!!!9856133.java!!!	invalidate() : void
            if (mActionMode != this) {
                // Not the active action mode - no-op. It's possible we are
                // currently deferring onDestroy, so the app doesn't yet know we
                // are going away and is trying to use us. That's also a no-op.
                return;
            }

            mMenu.stopDispatchingItemsChanged();
            try {
                mCallback.onPrepareActionMode(this, mMenu);
            } finally {
                mMenu.startDispatchingItemsChanged();
            }
!!!9856261.java!!!	dispatchOnCreate() : boolean
            mMenu.stopDispatchingItemsChanged();
            try {
                return mCallback.onCreateActionMode(this, mMenu);
            } finally {
                mMenu.startDispatchingItemsChanged();
            }
!!!9856389.java!!!	setCustomView(inout view : View) : void
            mContextView.setCustomView(view);
            mCustomView = new WeakReference<View>(view);
!!!9856517.java!!!	setSubtitle(inout subtitle : CharSequence) : void
            mContextView.setSubtitle(subtitle);
!!!9856645.java!!!	setTitle(inout title : CharSequence) : void
            mContextView.setTitle(title);
!!!9856773.java!!!	setTitle(in resId : int) : void
            setTitle(mContext.getResources().getString(resId));
!!!9856901.java!!!	setSubtitle(in resId : int) : void
            setSubtitle(mContext.getResources().getString(resId));
!!!9857029.java!!!	getTitle() : CharSequence
            return mContextView.getTitle();
!!!9857157.java!!!	getSubtitle() : CharSequence
            return mContextView.getSubtitle();
!!!9857285.java!!!	setTitleOptionalHint(inout titleOptional : boolean) : void
            super.setTitleOptionalHint(titleOptional);
            mContextView.setTitleOptional(titleOptional);
!!!9857413.java!!!	isTitleOptional() : boolean
            return mContextView.isTitleOptional();
!!!9857541.java!!!	getCustomView() : View
            return mCustomView != null ? mCustomView.get() : null;
!!!9857669.java!!!	onMenuItemSelected(inout menu : MenuBuilder, inout item : MenuItem) : boolean
            if (mCallback != null) {
                return mCallback.onActionItemClicked(this, item);
            } else {
                return false;
            }
!!!9857925.java!!!	onSubMenuSelected(inout subMenu : SubMenuBuilder) : boolean
            if (mCallback == null) {
                return false;
            }

            if (!subMenu.hasVisibleItems()) {
                return true;
            }

            new MenuPopupHelper(getThemedContext(), subMenu).show();
            return true;
!!!9858181.java!!!	onMenuModeChange(inout menu : MenuBuilder) : void
            if (mCallback == null) {
                return;
            }
            invalidate();
            mContextView.showOverflowMenu();
