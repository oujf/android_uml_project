class RggbChannelVector
!!!6780549.java!!!	RggbChannelVector(in red : float, in greenEven : float, in greenOdd : float, in blue : float)
        mRed = checkArgumentFinite(red, "red");
        mGreenEven = checkArgumentFinite(greenEven, "greenEven");
        mGreenOdd = checkArgumentFinite(greenOdd, "greenOdd");
        mBlue = checkArgumentFinite(blue, "blue");
!!!6780677.java!!!	getRed() : float
        return mRed;
!!!6780805.java!!!	getGreenEven() : float
        return mGreenEven;
!!!6780933.java!!!	getGreenOdd() : float
        return mGreenOdd;
!!!6781061.java!!!	getBlue() : float
        return mBlue;
!!!6781189.java!!!	getComponent(in colorChannel : int) : float
        if (colorChannel < 0 || colorChannel >= COUNT) {
            throw new IllegalArgumentException("Color channel out of range");
        }

        switch (colorChannel) {
            case RED:
                return mRed;
            case GREEN_EVEN:
                return mGreenEven;
            case GREEN_ODD:
                return mGreenOdd;
            case BLUE:
                return mBlue;
            default:
                throw new AssertionError("Unhandled case " + colorChannel);
        }
!!!6781317.java!!!	copyTo(in destination : float [[]], in offset : int) : void
        checkNotNull(destination, "destination must not be null");
        if (destination.length - offset < COUNT) {
            throw new ArrayIndexOutOfBoundsException("destination too small to fit elements");
        }

        destination[offset + RED] = mRed;
        destination[offset + GREEN_EVEN] = mGreenEven;
        destination[offset + GREEN_ODD] = mGreenOdd;
        destination[offset + BLUE] = mBlue;
!!!6781445.java!!!	equals(in obj : Object) : boolean
        if (obj == null) {
            return false;
        } else if (this == obj) {
            return true;
        } else if (obj instanceof RggbChannelVector) {
            final RggbChannelVector other = (RggbChannelVector) obj;
            return mRed == other.mRed &&
                    mGreenEven == other.mGreenEven &&
                    mGreenOdd == other.mGreenOdd &&
                    mBlue == other.mBlue;
        }
        return false;
!!!6781573.java!!!	hashCode() : int
        return Float.floatToIntBits(mRed) ^
                Float.floatToIntBits(mGreenEven) ^
                Float.floatToIntBits(mGreenOdd) ^
                Float.floatToIntBits(mBlue);
!!!6781701.java!!!	toString() : String
        return String.format("RggbChannelVector%s", toShortString());
!!!6781829.java!!!	toShortString() : String
        return String.format("{R:%f, G_even:%f, G_odd:%f, B:%f}",
                mRed, mGreenEven, mGreenOdd, mBlue);
