class UserReceiver
!!!3623941.java!!!	UserReceiver(inout context : Context)
            mAppContext = context.getApplicationContext();
!!!3624069.java!!!	getInstance(inout context : Context) : CurrentUserTracker::UserReceiver
            if (sInstance == null) {
                sInstance = new UserReceiver(context);
            }
            return sInstance;
!!!3624197.java!!!	onReceive(inout context : Context, inout intent : Intent) : void
            if (Intent.ACTION_USER_SWITCHED.equals(intent.getAction())) {
                notifyUserSwitched(intent.getIntExtra(Intent.EXTRA_USER_HANDLE, 0));
            }
!!!3624325.java!!!	getCurrentUserId() : int
            return mCurrentUserId;
!!!3624453.java!!!	addTracker(inout callback : Consumer<Integer>) : void
            if (!mCallbacks.contains(callback)) {
                mCallbacks.add(callback);
            }
            if (!mReceiverRegistered) {
                mCurrentUserId = ActivityManager.getCurrentUser();
                IntentFilter filter = new IntentFilter(Intent.ACTION_USER_SWITCHED);
                mAppContext.registerReceiver(this, filter);
                mReceiverRegistered = true;
            }
!!!3624581.java!!!	removeTracker(inout callback : Consumer<Integer>) : void
            if (mCallbacks.contains(callback)) {
                mCallbacks.remove(callback);
                if (mCallbacks.size() == 0 && mReceiverRegistered) {
                    mAppContext.unregisterReceiver(this);
                    mReceiverRegistered = false;
                }
            }
!!!3624709.java!!!	notifyUserSwitched(in newUserId : int) : void
            if (mCurrentUserId != newUserId) {
                mCurrentUserId = newUserId;
                List<Consumer<Integer>> callbacks = new ArrayList<>(mCallbacks);
                for (Consumer<Integer> consumer : callbacks) {
                    // Accepting may modify this list
                    if (mCallbacks.contains(consumer)) {
                        consumer.accept(newUserId);
                    }
                }
            }
