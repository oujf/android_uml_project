class AudioPolicyClient
!!!392581.cpp!!!	loadHwModule(in name : char) : audio_module_handle_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        ALOGW("%s: could not get AudioFlinger", __func__);
        return AUDIO_MODULE_HANDLE_NONE;
    }

    return af->loadHwModule(name);
!!!392709.cpp!!!	openOutput(in module : audio_module_handle_t, inout output : audio_io_handle_t, inout config : audio_config_t, inout devices : audio_devices_t, in address : String8, inout latencyMs : uint32_t, in flags : audio_output_flags_t) : status_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        ALOGW("%s: could not get AudioFlinger", __func__);
        return PERMISSION_DENIED;
    }
    return af->openOutput(module, output, config, devices, address, latencyMs, flags);
!!!392837.cpp!!!	openDuplicateOutput(in output1 : audio_io_handle_t, in output2 : audio_io_handle_t) : audio_io_handle_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        ALOGW("%s: could not get AudioFlinger", __func__);
        return 0;
    }
    return af->openDuplicateOutput(output1, output2);
!!!392965.cpp!!!	closeOutput(in output : audio_io_handle_t) : status_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        return PERMISSION_DENIED;
    }

    return af->closeOutput(output);
!!!393093.cpp!!!	suspendOutput(in output : audio_io_handle_t) : status_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        ALOGW("%s: could not get AudioFlinger", __func__);
        return PERMISSION_DENIED;
    }

    return af->suspendOutput(output);
!!!393221.cpp!!!	restoreOutput(in output : audio_io_handle_t) : status_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        ALOGW("%s: could not get AudioFlinger", __func__);
        return PERMISSION_DENIED;
    }

    return af->restoreOutput(output);
!!!393349.cpp!!!	openInput(in module : audio_module_handle_t, inout input : audio_io_handle_t, inout config : audio_config_t, inout device : audio_devices_t, in address : String8, in source : audio_source_t, in flags : audio_input_flags_t) : audio_io_handle_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        ALOGW("%s: could not get AudioFlinger", __func__);
        return PERMISSION_DENIED;
    }

    return af->openInput(module, input, config, device, address, source, flags);
!!!393477.cpp!!!	closeInput(in input : audio_io_handle_t) : status_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        return PERMISSION_DENIED;
    }

    return af->closeInput(input);
!!!393605.cpp!!!	setStreamVolume(in stream : audio_stream_type_t, in volume : float, in output : audio_io_handle_t, in delay_ms : int = 0) : status_t
    return mAudioPolicyService->setStreamVolume(stream, volume, output,
                                               delay_ms);
!!!393733.cpp!!!	invalidateStream(in stream : audio_stream_type_t) : status_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        return PERMISSION_DENIED;
    }

    return af->invalidateStream(stream);
!!!393861.cpp!!!	setParameters(in io_handle : audio_io_handle_t, in keyValuePairs : String8, in delay_ms : int = 0) : void
    mAudioPolicyService->setParameters(io_handle, keyValuePairs.string(), delay_ms);
!!!393989.cpp!!!	getParameters(in io_handle : audio_io_handle_t, in keys : String8) : String8
    String8 result = AudioSystem::getParameters(io_handle, keys);
    return result;
!!!394117.cpp!!!	startTone(in tone : audio_policy_tone_t, in stream : audio_stream_type_t) : status_t
    return mAudioPolicyService->startTone(tone, stream);
!!!394245.cpp!!!	stopTone() : status_t
    return mAudioPolicyService->stopTone();
!!!394373.cpp!!!	setVoiceVolume(in volume : float, in delay_ms : int = 0) : status_t
    return mAudioPolicyService->setVoiceVolume(volume, delay_ms);
!!!394501.cpp!!!	moveEffects(in session : audio_session_t, in src_output : audio_io_handle_t, in dst_output : audio_io_handle_t) : status_t
    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
    if (af == 0) {
        return PERMISSION_DENIED;
    }

    return af->moveEffects(session, src_output, dst_output);
!!!394629.cpp!!!	createAudioPatch(in patch : audio_patch, inout handle : audio_patch_handle_t, in delayMs : int) : status_t
    return mAudioPolicyService->clientCreateAudioPatch(patch, handle, delayMs);
!!!394757.cpp!!!	releaseAudioPatch(in handle : audio_patch_handle_t, in delayMs : int) : status_t
    return mAudioPolicyService->clientReleaseAudioPatch(handle, delayMs);
!!!394885.cpp!!!	setAudioPortConfig(in config : audio_port_config, in delayMs : int) : status_t
    return mAudioPolicyService->clientSetAudioPortConfig(config, delayMs);
!!!395013.cpp!!!	onAudioPortListUpdate() : void
    mAudioPolicyService->onAudioPortListUpdate();
!!!395141.cpp!!!	onAudioPatchListUpdate() : void
    mAudioPolicyService->onAudioPatchListUpdate();
!!!395269.cpp!!!	onDynamicPolicyMixStateUpdate(in regId : String8, in state : int32_t) : void
    mAudioPolicyService->onDynamicPolicyMixStateUpdate(regId, state);
!!!395397.cpp!!!	onRecordingConfigurationUpdate(in event : int, in session : audio_session_t, in source : audio_source_t, in clientConfig : audio_config_base_t, in deviceConfig : audio_config_base_t, in patchHandle : audio_patch_handle_t) : void
    mAudioPolicyService->onRecordingConfigurationUpdate(event, session, source,
            clientConfig, deviceConfig, patchHandle);
!!!395525.cpp!!!	newAudioUniqueId(in use : audio_unique_id_use_t) : audio_unique_id_t
    return AudioSystem::newAudioUniqueId(use);
