class DozeServiceHost
!!!3837061.java!!!	toString() : String
            return "PSB.DozeServiceHost[mCallbacks=" + mCallbacks.size() + "]";
!!!3837189.java!!!	firePowerSaveChanged(inout active : boolean) : void
            for (Callback callback : mCallbacks) {
                callback.onPowerSaveChanged(active);
            }
!!!3837317.java!!!	fireNotificationHeadsUp() : void
            for (Callback callback : mCallbacks) {
                callback.onNotificationHeadsUp();
            }
!!!3837445.java!!!	addCallback(inout callback : DozeHost::Callback) : void
            mCallbacks.add(callback);
!!!3837573.java!!!	removeCallback(inout callback : DozeHost::Callback) : void
            mCallbacks.remove(callback);
!!!3837701.java!!!	startDozing() : void
            if (!mDozingRequested) {
                mDozingRequested = true;
                DozeLog.traceDozing(mContext, mDozing);
                updateDozing();
            }
!!!3837829.java!!!	pulseWhileDozing(inout callback : DozeHost::PulseCallback, in reason : int) : void
            mDozeScrimController.pulse(new PulseCallback() {

                @Override
                public void onPulseStarted() {
                    callback.onPulseStarted();
                    Collection<HeadsUpManager.HeadsUpEntry> pulsingEntries =
                            mHeadsUpManager.getAllEntries();
                    if (!pulsingEntries.isEmpty()) {
                        // Only pulse the stack scroller if there's actually something to show.
                        // Otherwise just show the always-on screen.
                        setPulsing(pulsingEntries);
                    }
                }

                @Override
                public void onPulseFinished() {
                    callback.onPulseFinished();
                    setPulsing(null);
                }

                private void setPulsing(Collection<HeadsUpManager.HeadsUpEntry> pulsing) {
                    mStackScroller.setPulsing(pulsing);
                    mNotificationPanel.setPulsing(pulsing != null);
                    mVisualStabilityManager.setPulsing(pulsing != null);
                }
            }, reason);
!!!3837957.java!!!	stopDozing() : void
            if (mDozingRequested) {
                mDozingRequested = false;
                DozeLog.traceDozing(mContext, mDozing);
                updateDozing();
            }
!!!3838085.java!!!	dozeTimeTick() : void
            mKeyguardStatusView.refreshTime();
!!!3838213.java!!!	isPowerSaveActive() : boolean
            return mBatteryController.isPowerSave();
!!!3838341.java!!!	isPulsingBlocked() : boolean
            return mFingerprintUnlockController.getMode()
                    == FingerprintUnlockController.MODE_WAKE_AND_UNLOCK;
!!!3838469.java!!!	startPendingIntentDismissingKeyguard(inout intent : PendingIntent) : void
            StatusBar.this.startPendingIntentDismissingKeyguard(intent);
!!!3838597.java!!!	abortPulsing() : void
            mDozeScrimController.abortPulsing();
!!!3838725.java!!!	extendPulse() : void
            mDozeScrimController.extendPulse();
!!!3838853.java!!!	setAnimateWakeup(inout animateWakeup : boolean) : void
            mAnimateWakeup = animateWakeup;
!!!3838981.java!!!	shouldAnimateWakeup() : boolean
            return mAnimateWakeup;
