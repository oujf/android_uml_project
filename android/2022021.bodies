class BnGraphicBufferConsumer
!!!14292485.cpp!!!	onTransact(in code : uint32_t, in data : Parcel, inout reply : Parcel, in flags : uint32_t = 0) : status_t
    if (code < IBinder::FIRST_CALL_TRANSACTION || code > static_cast<uint32_t>(Tag::LAST)) {
        return BBinder::onTransact(code, data, reply, flags);
    }
    auto tag = static_cast<Tag>(code);
    switch (tag) {
        case Tag::ACQUIRE_BUFFER:
            return callLocal(data, reply, &IGraphicBufferConsumer::acquireBuffer);
        case Tag::DETACH_BUFFER:
            return callLocal(data, reply, &IGraphicBufferConsumer::detachBuffer);
        case Tag::ATTACH_BUFFER:
            return callLocal(data, reply, &IGraphicBufferConsumer::attachBuffer);
        case Tag::RELEASE_BUFFER:
            return callLocal(data, reply, &IGraphicBufferConsumer::releaseHelper);
        case Tag::CONSUMER_CONNECT:
            return callLocal(data, reply, &IGraphicBufferConsumer::consumerConnect);
        case Tag::CONSUMER_DISCONNECT:
            return callLocal(data, reply, &IGraphicBufferConsumer::consumerDisconnect);
        case Tag::GET_RELEASED_BUFFERS:
            return callLocal(data, reply, &IGraphicBufferConsumer::getReleasedBuffers);
        case Tag::SET_DEFAULT_BUFFER_SIZE:
            return callLocal(data, reply, &IGraphicBufferConsumer::setDefaultBufferSize);
        case Tag::SET_MAX_BUFFER_COUNT:
            return callLocal(data, reply, &IGraphicBufferConsumer::setMaxBufferCount);
        case Tag::SET_MAX_ACQUIRED_BUFFER_COUNT:
            return callLocal(data, reply, &IGraphicBufferConsumer::setMaxAcquiredBufferCount);
        case Tag::SET_CONSUMER_NAME:
            return callLocal(data, reply, &IGraphicBufferConsumer::setConsumerName);
        case Tag::SET_DEFAULT_BUFFER_FORMAT:
            return callLocal(data, reply, &IGraphicBufferConsumer::setDefaultBufferFormat);
        case Tag::SET_DEFAULT_BUFFER_DATA_SPACE:
            return callLocal(data, reply, &IGraphicBufferConsumer::setDefaultBufferDataSpace);
        case Tag::SET_CONSUMER_USAGE_BITS:
            return callLocal(data, reply, &IGraphicBufferConsumer::setConsumerUsageBits);
        case Tag::SET_CONSUMER_IS_PROTECTED:
            return callLocal(data, reply, &IGraphicBufferConsumer::setConsumerIsProtected);
        case Tag::SET_TRANSFORM_HINT:
            return callLocal(data, reply, &IGraphicBufferConsumer::setTransformHint);
        case Tag::GET_SIDEBAND_STREAM:
            return callLocal(data, reply, &IGraphicBufferConsumer::getSidebandStream);
        case Tag::GET_OCCUPANCY_HISTORY:
            return callLocal(data, reply, &IGraphicBufferConsumer::getOccupancyHistory);
        case Tag::DISCARD_FREE_BUFFERS:
            return callLocal(data, reply, &IGraphicBufferConsumer::discardFreeBuffers);
        case Tag::DUMP_STATE: {
            using Signature = status_t (IGraphicBufferConsumer::*)(const String8&, String8*) const;
            return callLocal<Signature>(data, reply, &IGraphicBufferConsumer::dumpState);
        }
    }
