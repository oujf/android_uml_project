class KeyguardServiceDelegate
!!!12411525.java!!!	KeyguardServiceDelegate(inout context : Context, inout callback : KeyguardStateMonitor::StateCallback)
        mContext = context;
        mHandler = UiThread.getHandler();
        mCallback = callback;
!!!12411653.java!!!	bindService(inout context : Context) : void
        Intent intent = new Intent();
        final Resources resources = context.getApplicationContext().getResources();

        final ComponentName keyguardComponent = ComponentName.unflattenFromString(
                resources.getString(com.android.internal.R.string.config_keyguardComponent));
        intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);
        intent.setComponent(keyguardComponent);

        if (!context.bindServiceAsUser(intent, mKeyguardConnection,
                Context.BIND_AUTO_CREATE, mHandler, UserHandle.SYSTEM)) {
            Log.v(TAG, "*** Keyguard: can't bind to " + keyguardComponent);
            mKeyguardState.showing = false;
            mKeyguardState.showingAndNotOccluded = false;
            mKeyguardState.secure = false;
            synchronized (mKeyguardState) {
                // TODO: Fix synchronisation model in this class. The other state in this class
                // is at least self-healing but a race condition here can lead to the scrim being
                // stuck on keyguard-less devices.
                mKeyguardState.deviceHasKeyguard = false;
            }
        } else {
            if (DEBUG) Log.v(TAG, "*** Keyguard started");
        }
!!!12411781.java!!!	isShowing() : boolean
        if (mKeyguardService != null) {
            mKeyguardState.showing = mKeyguardService.isShowing();
        }
        return mKeyguardState.showing;
!!!12411909.java!!!	isTrusted() : boolean
        if (mKeyguardService != null) {
            return mKeyguardService.isTrusted();
        }
        return false;
!!!12412037.java!!!	hasLockscreenWallpaper() : boolean
        if (mKeyguardService != null) {
            return mKeyguardService.hasLockscreenWallpaper();
        }
        return false;
!!!12412165.java!!!	isInputRestricted() : boolean
        if (mKeyguardService != null) {
            mKeyguardState.inputRestricted = mKeyguardService.isInputRestricted();
        }
        return mKeyguardState.inputRestricted;
!!!12412293.java!!!	verifyUnlock(in onKeyguardExitResult : WindowManagerPolicy::OnKeyguardExitResult) : void
        if (mKeyguardService != null) {
            mKeyguardService.verifyUnlock(new KeyguardExitDelegate(onKeyguardExitResult));
        }
!!!12412421.java!!!	setOccluded(inout isOccluded : boolean, inout animate : boolean) : void
        if (mKeyguardService != null) {
            if (DEBUG) Log.v(TAG, "setOccluded(" + isOccluded + ") animate=" + animate);
            mKeyguardService.setOccluded(isOccluded, animate);
        }
        mKeyguardState.occluded = isOccluded;
!!!12412549.java!!!	dismiss(inout callback : IKeyguardDismissCallback) : void
        if (mKeyguardService != null) {
            mKeyguardService.dismiss(callback);
        }
!!!12412677.java!!!	isSecure(in userId : int) : boolean
        if (mKeyguardService != null) {
            mKeyguardState.secure = mKeyguardService.isSecure(userId);
        }
        return mKeyguardState.secure;
!!!12412805.java!!!	onDreamingStarted() : void
        if (mKeyguardService != null) {
            mKeyguardService.onDreamingStarted();
        }
        mKeyguardState.dreaming = true;
!!!12412933.java!!!	onDreamingStopped() : void
        if (mKeyguardService != null) {
            mKeyguardService.onDreamingStopped();
        }
        mKeyguardState.dreaming = false;
!!!12413061.java!!!	onStartedWakingUp() : void
        if (mKeyguardService != null) {
            if (DEBUG) Log.v(TAG, "onStartedWakingUp()");
            mKeyguardService.onStartedWakingUp();
        }
        mKeyguardState.interactiveState = INTERACTIVE_STATE_AWAKE;
!!!12413189.java!!!	onScreenTurnedOff() : void
        if (mKeyguardService != null) {
            if (DEBUG) Log.v(TAG, "onScreenTurnedOff()");
            mKeyguardService.onScreenTurnedOff();
        }
        mKeyguardState.screenState = SCREEN_STATE_OFF;
!!!12413317.java!!!	onScreenTurningOn(in drawnListener : KeyguardServiceDelegate::DrawnListener) : void
        if (mKeyguardService != null) {
            if (DEBUG) Log.v(TAG, "onScreenTurnedOn(showListener = " + drawnListener + ")");
            mKeyguardService.onScreenTurningOn(new KeyguardShowDelegate(drawnListener));
        } else {
            // try again when we establish a connection
            Slog.w(TAG, "onScreenTurningOn(): no keyguard service!");
            // This shouldn't happen, but if it does, show the scrim immediately and
            // invoke the listener's callback after the service actually connects.
            mDrawnListenerWhenConnect = drawnListener;
        }
        mKeyguardState.screenState = SCREEN_STATE_TURNING_ON;
!!!12413445.java!!!	onScreenTurnedOn() : void
        if (mKeyguardService != null) {
            if (DEBUG) Log.v(TAG, "onScreenTurnedOn()");
            mKeyguardService.onScreenTurnedOn();
        }
        mKeyguardState.screenState = SCREEN_STATE_ON;
!!!12413573.java!!!	onStartedGoingToSleep(in why : int) : void
        if (mKeyguardService != null) {
            mKeyguardService.onStartedGoingToSleep(why);
        }
        mKeyguardState.offReason = why;
        mKeyguardState.interactiveState = INTERACTIVE_STATE_GOING_TO_SLEEP;
!!!12413701.java!!!	onFinishedGoingToSleep(in why : int, inout cameraGestureTriggered : boolean) : void
        if (mKeyguardService != null) {
            mKeyguardService.onFinishedGoingToSleep(why, cameraGestureTriggered);
        }
        mKeyguardState.interactiveState = INTERACTIVE_STATE_SLEEP;
!!!12413829.java!!!	setKeyguardEnabled(inout enabled : boolean) : void
        if (mKeyguardService != null) {
            mKeyguardService.setKeyguardEnabled(enabled);
        }
        mKeyguardState.enabled = enabled;
!!!12413957.java!!!	onSystemReady() : void
        if (mKeyguardService != null) {
            mKeyguardService.onSystemReady();
        } else {
            mKeyguardState.systemIsReady = true;
        }
!!!12414085.java!!!	doKeyguardTimeout(inout options : Bundle) : void
        if (mKeyguardService != null) {
            mKeyguardService.doKeyguardTimeout(options);
        }
!!!12414213.java!!!	setCurrentUser(in newUserId : int) : void
        if (mKeyguardService != null) {
            mKeyguardService.setCurrentUser(newUserId);
        }
        mKeyguardState.currentUser = newUserId;
!!!12414341.java!!!	setSwitchingUser(inout switching : boolean) : void
        if (mKeyguardService != null) {
            mKeyguardService.setSwitchingUser(switching);
        }
!!!12414469.java!!!	startKeyguardExitAnimation(in startTime : long, in fadeoutDuration : long) : void
        if (mKeyguardService != null) {
            mKeyguardService.startKeyguardExitAnimation(startTime, fadeoutDuration);
        }
!!!12414597.java!!!	onBootCompleted() : void
        if (mKeyguardService != null) {
            mKeyguardService.onBootCompleted();
        }
        mKeyguardState.bootCompleted = true;
!!!12414725.java!!!	onShortPowerPressedGoHome() : void
        if (mKeyguardService != null) {
            mKeyguardService.onShortPowerPressedGoHome();
        }
!!!12414853.java!!!	dump(in prefix : String, inout pw : PrintWriter) : void
        pw.println(prefix + TAG);
        prefix += "  ";
        pw.println(prefix + "showing=" + mKeyguardState.showing);
        pw.println(prefix + "showingAndNotOccluded=" + mKeyguardState.showingAndNotOccluded);
        pw.println(prefix + "inputRestricted=" + mKeyguardState.inputRestricted);
        pw.println(prefix + "occluded=" + mKeyguardState.occluded);
        pw.println(prefix + "secure=" + mKeyguardState.secure);
        pw.println(prefix + "dreaming=" + mKeyguardState.dreaming);
        pw.println(prefix + "systemIsReady=" + mKeyguardState.systemIsReady);
        pw.println(prefix + "deviceHasKeyguard=" + mKeyguardState.deviceHasKeyguard);
        pw.println(prefix + "enabled=" + mKeyguardState.enabled);
        pw.println(prefix + "offReason=" + mKeyguardState.offReason);
        pw.println(prefix + "currentUser=" + mKeyguardState.currentUser);
        pw.println(prefix + "bootCompleted=" + mKeyguardState.bootCompleted);
        pw.println(prefix + "screenState=" + mKeyguardState.screenState);
        pw.println(prefix + "interactiveState=" + mKeyguardState.interactiveState);
        if (mKeyguardService != null) {
            mKeyguardService.dump(prefix, pw);
        }
