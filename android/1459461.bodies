class MenuPopup
!!!10197893.java!!!	setEpicenterBounds(inout bounds : Rect) : void
        mEpicenterBounds = bounds;
!!!10198021.java!!!	getEpicenterBounds() : Rect
        return mEpicenterBounds;
!!!10198405.java!!!	initForMenu(inout context : Context, inout menu : MenuBuilder) : void
        // Don't need to do anything; we added as a presenter in the constructor.
!!!10198533.java!!!	getMenuView(inout root : ViewGroup) : MenuView
        throw new UnsupportedOperationException("MenuPopups manage their own views");
!!!10198661.java!!!	expandItemActionView(inout menu : MenuBuilder, inout item : MenuItemImpl) : boolean
        return false;
!!!10198789.java!!!	collapseItemActionView(inout menu : MenuBuilder, inout item : MenuItemImpl) : boolean
        return false;
!!!10198917.java!!!	getId() : int
        return 0;
!!!10199045.java!!!	onItemClick(inout parent : AdapterView, inout view : View, in position : int, in id : long) : void
        ListAdapter outerAdapter = (ListAdapter) parent.getAdapter();
        MenuAdapter wrappedAdapter = toMenuAdapter(outerAdapter);

        // Use the position from the outer adapter so that if a header view was added, we don't get
        // an off-by-1 error in position.
        wrappedAdapter.mAdapterMenu.performItemAction((MenuItem) outerAdapter.getItem(position), 0);
!!!10199173.java!!!	measureIndividualMenuWidth(inout adapter : ListAdapter, inout parent : ViewGroup, inout context : Context, in maxAllowedWidth : int) : int
        // Menus don't tend to be long, so this is more sane than it looks.
        int maxWidth = 0;
        View itemView = null;
        int itemType = 0;

        final int widthMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
        final int heightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
        final int count = adapter.getCount();
        for (int i = 0; i < count; i++) {
            final int positionType = adapter.getItemViewType(i);
            if (positionType != itemType) {
                itemType = positionType;
                itemView = null;
            }

            if (parent == null) {
                parent = new FrameLayout(context);
            }

            itemView = adapter.getView(i, itemView, parent);
            itemView.measure(widthMeasureSpec, heightMeasureSpec);

            final int itemWidth = itemView.getMeasuredWidth();
            if (itemWidth >= maxAllowedWidth) {
                return maxAllowedWidth;
            } else if (itemWidth > maxWidth) {
                maxWidth = itemWidth;
            }
        }

        return maxWidth;
!!!10199301.java!!!	toMenuAdapter(inout adapter : ListAdapter) : MenuAdapter
        if (adapter instanceof HeaderViewListAdapter) {
            return (MenuAdapter) ((HeaderViewListAdapter) adapter).getWrappedAdapter();
        }
        return (MenuAdapter) adapter;
!!!10199429.java!!!	shouldPreserveIconSpacing(inout menu : MenuBuilder) : boolean
      boolean preserveIconSpacing = false;
      final int count = menu.size();

      for (int i = 0; i < count; i++) {
          MenuItem childItem = menu.getItem(i);
          if (childItem.isVisible() && childItem.getIcon() != null) {
              preserveIconSpacing = true;
              break;
          }
      }

      return preserveIconSpacing;
