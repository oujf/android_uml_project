class NetworkCapabilities
!!!7165317.java!!!	NetworkCapabilities()
        clearAll();
        mNetworkCapabilities = DEFAULT_CAPABILITIES;
!!!7165445.java!!!	NetworkCapabilities(inout nc : NetworkCapabilities)
        if (nc != null) {
            mNetworkCapabilities = nc.mNetworkCapabilities;
            mTransportTypes = nc.mTransportTypes;
            mLinkUpBandwidthKbps = nc.mLinkUpBandwidthKbps;
            mLinkDownBandwidthKbps = nc.mLinkDownBandwidthKbps;
            mNetworkSpecifier = nc.mNetworkSpecifier;
            mSignalStrength = nc.mSignalStrength;
        }
!!!7165573.java!!!	clearAll() : void
        mNetworkCapabilities = mTransportTypes = 0;
        mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = 0;
        mNetworkSpecifier = null;
        mSignalStrength = SIGNAL_STRENGTH_UNSPECIFIED;
!!!7165701.java!!!	addCapability(in capability : int) : NetworkCapabilities
        if (capability < MIN_NET_CAPABILITY || capability > MAX_NET_CAPABILITY) {
            throw new IllegalArgumentException("NetworkCapability out of range");
        }
        mNetworkCapabilities |= 1 << capability;
        return this;
!!!7165829.java!!!	removeCapability(in capability : int) : NetworkCapabilities
        if (capability < MIN_NET_CAPABILITY || capability > MAX_NET_CAPABILITY) {
            throw new IllegalArgumentException("NetworkCapability out of range");
        }
        mNetworkCapabilities &= ~(1 << capability);
        return this;
!!!7165957.java!!!	getCapabilities() : int
        return BitUtils.unpackBits(mNetworkCapabilities);
!!!7166085.java!!!	hasCapability(in capability : int) : boolean
        if (capability < MIN_NET_CAPABILITY || capability > MAX_NET_CAPABILITY) {
            return false;
        }
        return ((mNetworkCapabilities & (1 << capability)) != 0);
!!!7166213.java!!!	combineNetCapabilities(inout nc : NetworkCapabilities) : void
        this.mNetworkCapabilities |= nc.mNetworkCapabilities;
!!!7166341.java!!!	describeFirstNonRequestableCapability() : String
        if (hasCapability(NET_CAPABILITY_VALIDATED)) return "NET_CAPABILITY_VALIDATED";
        if (hasCapability(NET_CAPABILITY_CAPTIVE_PORTAL)) return "NET_CAPABILITY_CAPTIVE_PORTAL";
        if (hasCapability(NET_CAPABILITY_FOREGROUND)) return "NET_CAPABILITY_FOREGROUND";
        // This cannot happen unless the preceding checks are incomplete.
        if ((mNetworkCapabilities & NON_REQUESTABLE_CAPABILITIES) != 0) {
            return "unknown non-requestable capabilities " + Long.toHexString(mNetworkCapabilities);
        }
        if (mLinkUpBandwidthKbps != 0 || mLinkDownBandwidthKbps != 0) return "link bandwidth";
        if (hasSignalStrength()) return "signalStrength";
        return null;
!!!7166469.java!!!	satisfiedByNetCapabilities(inout nc : NetworkCapabilities, inout onlyImmutable : boolean) : boolean
        long networkCapabilities = this.mNetworkCapabilities;
        if (onlyImmutable) {
            networkCapabilities = networkCapabilities & ~MUTABLE_CAPABILITIES;
        }
        return ((nc.mNetworkCapabilities & networkCapabilities) == networkCapabilities);
!!!7166597.java!!!	equalsNetCapabilities(inout nc : NetworkCapabilities) : boolean
        return (nc.mNetworkCapabilities == this.mNetworkCapabilities);
!!!7166725.java!!!	equalsNetCapabilitiesImmutable(inout that : NetworkCapabilities) : boolean
        return ((this.mNetworkCapabilities & ~MUTABLE_CAPABILITIES) ==
                (that.mNetworkCapabilities & ~MUTABLE_CAPABILITIES));
!!!7166853.java!!!	equalsNetCapabilitiesRequestable(inout that : NetworkCapabilities) : boolean
        return ((this.mNetworkCapabilities & ~NON_REQUESTABLE_CAPABILITIES) ==
                (that.mNetworkCapabilities & ~NON_REQUESTABLE_CAPABILITIES));
!!!7166981.java!!!	maybeMarkCapabilitiesRestricted() : void
        // Verify there aren't any unrestricted capabilities.  If there are we say
        // the whole thing is unrestricted.
        final boolean hasUnrestrictedCapabilities =
                ((mNetworkCapabilities & UNRESTRICTED_CAPABILITIES) != 0);

        // Must have at least some restricted capabilities.
        final boolean hasRestrictedCapabilities =
                ((mNetworkCapabilities & RESTRICTED_CAPABILITIES) != 0);

        if (hasRestrictedCapabilities && !hasUnrestrictedCapabilities) {
            removeCapability(NET_CAPABILITY_NOT_RESTRICTED);
        }
!!!7167109.java!!!	addTransportType(in transportType : int) : NetworkCapabilities
        if (transportType < MIN_TRANSPORT || transportType > MAX_TRANSPORT) {
            throw new IllegalArgumentException("TransportType out of range");
        }
        mTransportTypes |= 1 << transportType;
        setNetworkSpecifier(mNetworkSpecifier); // used for exception checking
        return this;
!!!7167237.java!!!	removeTransportType(in transportType : int) : NetworkCapabilities
        if (transportType < MIN_TRANSPORT || transportType > MAX_TRANSPORT) {
            throw new IllegalArgumentException("TransportType out of range");
        }
        mTransportTypes &= ~(1 << transportType);
        setNetworkSpecifier(mNetworkSpecifier); // used for exception checking
        return this;
!!!7167365.java!!!	getTransportTypes() : int
        return BitUtils.unpackBits(mTransportTypes);
!!!7167493.java!!!	hasTransport(in transportType : int) : boolean
        if (transportType < MIN_TRANSPORT || transportType > MAX_TRANSPORT) {
            return false;
        }
        return ((mTransportTypes & (1 << transportType)) != 0);
!!!7167621.java!!!	combineTransportTypes(inout nc : NetworkCapabilities) : void
        this.mTransportTypes |= nc.mTransportTypes;
!!!7167749.java!!!	satisfiedByTransportTypes(inout nc : NetworkCapabilities) : boolean
        return ((this.mTransportTypes == 0) ||
                ((this.mTransportTypes & nc.mTransportTypes) != 0));
!!!7167877.java!!!	equalsTransportTypes(inout nc : NetworkCapabilities) : boolean
        return (nc.mTransportTypes == this.mTransportTypes);
!!!7168005.java!!!	setLinkUpstreamBandwidthKbps(in upKbps : int) : void
        mLinkUpBandwidthKbps = upKbps;
!!!7168133.java!!!	getLinkUpstreamBandwidthKbps() : int
        return mLinkUpBandwidthKbps;
!!!7168261.java!!!	setLinkDownstreamBandwidthKbps(in downKbps : int) : void
        mLinkDownBandwidthKbps = downKbps;
!!!7168389.java!!!	getLinkDownstreamBandwidthKbps() : int
        return mLinkDownBandwidthKbps;
!!!7168517.java!!!	combineLinkBandwidths(inout nc : NetworkCapabilities) : void
        this.mLinkUpBandwidthKbps =
                Math.max(this.mLinkUpBandwidthKbps, nc.mLinkUpBandwidthKbps);
        this.mLinkDownBandwidthKbps =
                Math.max(this.mLinkDownBandwidthKbps, nc.mLinkDownBandwidthKbps);
!!!7168645.java!!!	satisfiedByLinkBandwidths(inout nc : NetworkCapabilities) : boolean
        return !(this.mLinkUpBandwidthKbps > nc.mLinkUpBandwidthKbps ||
                this.mLinkDownBandwidthKbps > nc.mLinkDownBandwidthKbps);
!!!7168773.java!!!	equalsLinkBandwidths(inout nc : NetworkCapabilities) : boolean
        return (this.mLinkUpBandwidthKbps == nc.mLinkUpBandwidthKbps &&
                this.mLinkDownBandwidthKbps == nc.mLinkDownBandwidthKbps);
!!!7168901.java!!!	setNetworkSpecifier(inout networkSpecifier : NetworkSpecifier) : NetworkCapabilities
        if (networkSpecifier != null && Long.bitCount(mTransportTypes) != 1) {
            throw new IllegalStateException("Must have a single transport specified to use " +
                    "setNetworkSpecifier");
        }

        mNetworkSpecifier = networkSpecifier;

        return this;
!!!7169029.java!!!	getNetworkSpecifier() : NetworkSpecifier
        return mNetworkSpecifier;
!!!7169157.java!!!	combineSpecifiers(inout nc : NetworkCapabilities) : void
        if (mNetworkSpecifier != null && !mNetworkSpecifier.equals(nc.mNetworkSpecifier)) {
            throw new IllegalStateException("Can't combine two networkSpecifiers");
        }
        setNetworkSpecifier(nc.mNetworkSpecifier);
!!!7169285.java!!!	satisfiedBySpecifier(inout nc : NetworkCapabilities) : boolean
        return mNetworkSpecifier == null || mNetworkSpecifier.satisfiedBy(nc.mNetworkSpecifier)
                || nc.mNetworkSpecifier instanceof MatchAllNetworkSpecifier;
!!!7169413.java!!!	equalsSpecifier(inout nc : NetworkCapabilities) : boolean
        return Objects.equals(mNetworkSpecifier, nc.mNetworkSpecifier);
!!!7169541.java!!!	setSignalStrength(in signalStrength : int) : void
        mSignalStrength = signalStrength;
!!!7169669.java!!!	hasSignalStrength() : boolean
        return mSignalStrength > SIGNAL_STRENGTH_UNSPECIFIED;
!!!7169797.java!!!	getSignalStrength() : int
        return mSignalStrength;
!!!7169925.java!!!	combineSignalStrength(inout nc : NetworkCapabilities) : void
        this.mSignalStrength = Math.max(this.mSignalStrength, nc.mSignalStrength);
!!!7170053.java!!!	satisfiedBySignalStrength(inout nc : NetworkCapabilities) : boolean
        return this.mSignalStrength <= nc.mSignalStrength;
!!!7170181.java!!!	equalsSignalStrength(inout nc : NetworkCapabilities) : boolean
        return this.mSignalStrength == nc.mSignalStrength;
!!!7170309.java!!!	combineCapabilities(inout nc : NetworkCapabilities) : void
        combineNetCapabilities(nc);
        combineTransportTypes(nc);
        combineLinkBandwidths(nc);
        combineSpecifiers(nc);
        combineSignalStrength(nc);
!!!7170437.java!!!	satisfiedByNetworkCapabilities(inout nc : NetworkCapabilities, inout onlyImmutable : boolean) : boolean
        return (nc != null &&
                satisfiedByNetCapabilities(nc, onlyImmutable) &&
                satisfiedByTransportTypes(nc) &&
                (onlyImmutable || satisfiedByLinkBandwidths(nc)) &&
                satisfiedBySpecifier(nc) &&
                (onlyImmutable || satisfiedBySignalStrength(nc)));
!!!7170565.java!!!	satisfiedByNetworkCapabilities(inout nc : NetworkCapabilities) : boolean
        return satisfiedByNetworkCapabilities(nc, false);
!!!7170693.java!!!	satisfiedByImmutableNetworkCapabilities(inout nc : NetworkCapabilities) : boolean
        return satisfiedByNetworkCapabilities(nc, true);
!!!7170821.java!!!	equalImmutableCapabilities(inout nc : NetworkCapabilities) : boolean
        if (nc == null) return false;
        return (equalsNetCapabilitiesImmutable(nc) &&
                equalsTransportTypes(nc) &&
                equalsSpecifier(nc));
!!!7170949.java!!!	equalRequestableCapabilities(inout nc : NetworkCapabilities) : boolean
        if (nc == null) return false;
        return (equalsNetCapabilitiesRequestable(nc) &&
                equalsTransportTypes(nc) &&
                equalsSpecifier(nc));
!!!7171077.java!!!	equals(inout obj : Object) : boolean
        if (obj == null || (obj instanceof NetworkCapabilities == false)) return false;
        NetworkCapabilities that = (NetworkCapabilities)obj;
        return (equalsNetCapabilities(that) &&
                equalsTransportTypes(that) &&
                equalsLinkBandwidths(that) &&
                equalsSignalStrength(that) &&
                equalsSpecifier(that));
!!!7171205.java!!!	hashCode() : int
        return ((int)(mNetworkCapabilities & 0xFFFFFFFF) +
                ((int)(mNetworkCapabilities >> 32) * 3) +
                ((int)(mTransportTypes & 0xFFFFFFFF) * 5) +
                ((int)(mTransportTypes >> 32) * 7) +
                (mLinkUpBandwidthKbps * 11) +
                (mLinkDownBandwidthKbps * 13) +
                Objects.hashCode(mNetworkSpecifier) * 17 +
                (mSignalStrength * 19));
!!!7171333.java!!!	describeContents() : int
        return 0;
!!!7171461.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeLong(mNetworkCapabilities);
        dest.writeLong(mTransportTypes);
        dest.writeInt(mLinkUpBandwidthKbps);
        dest.writeInt(mLinkDownBandwidthKbps);
        dest.writeParcelable((Parcelable) mNetworkSpecifier, flags);
        dest.writeInt(mSignalStrength);
!!!7171589.java!!!	toString() : String
        int[] types = getTransportTypes();
        String transports = (types.length > 0) ? " Transports: " + transportNamesOf(types) : "";

        types = getCapabilities();
        String capabilities = (types.length > 0 ? " Capabilities: " : "");
        for (int i = 0; i < types.length; ) {
            switch (types[i]) {
                case NET_CAPABILITY_MMS:            capabilities += "MMS"; break;
                case NET_CAPABILITY_SUPL:           capabilities += "SUPL"; break;
                case NET_CAPABILITY_DUN:            capabilities += "DUN"; break;
                case NET_CAPABILITY_FOTA:           capabilities += "FOTA"; break;
                case NET_CAPABILITY_IMS:            capabilities += "IMS"; break;
                case NET_CAPABILITY_CBS:            capabilities += "CBS"; break;
                case NET_CAPABILITY_WIFI_P2P:       capabilities += "WIFI_P2P"; break;
                case NET_CAPABILITY_IA:             capabilities += "IA"; break;
                case NET_CAPABILITY_RCS:            capabilities += "RCS"; break;
                case NET_CAPABILITY_XCAP:           capabilities += "XCAP"; break;
                case NET_CAPABILITY_EIMS:           capabilities += "EIMS"; break;
                case NET_CAPABILITY_NOT_METERED:    capabilities += "NOT_METERED"; break;
                case NET_CAPABILITY_INTERNET:       capabilities += "INTERNET"; break;
                case NET_CAPABILITY_NOT_RESTRICTED: capabilities += "NOT_RESTRICTED"; break;
                case NET_CAPABILITY_TRUSTED:        capabilities += "TRUSTED"; break;
                case NET_CAPABILITY_NOT_VPN:        capabilities += "NOT_VPN"; break;
                case NET_CAPABILITY_VALIDATED:      capabilities += "VALIDATED"; break;
                case NET_CAPABILITY_CAPTIVE_PORTAL: capabilities += "CAPTIVE_PORTAL"; break;
                case NET_CAPABILITY_FOREGROUND:     capabilities += "FOREGROUND"; break;
            }
            if (++i < types.length) capabilities += "&";
        }

        String upBand = ((mLinkUpBandwidthKbps > 0) ? " LinkUpBandwidth>=" +
                mLinkUpBandwidthKbps + "Kbps" : "");
        String dnBand = ((mLinkDownBandwidthKbps > 0) ? " LinkDnBandwidth>=" +
                mLinkDownBandwidthKbps + "Kbps" : "");

        String specifier = (mNetworkSpecifier == null ?
                "" : " Specifier: <" + mNetworkSpecifier + ">");

        String signalStrength = (hasSignalStrength() ? " SignalStrength: " + mSignalStrength : "");

        return "[" + transports + capabilities + upBand + dnBand + specifier + signalStrength + "]";
!!!7171717.java!!!	transportNamesOf(inout types : int [[]]) : String
        if (types == null || types.length == 0) {
            return "";
        }
        StringBuilder transports = new StringBuilder();
        for (int t : types) {
            transports.append("|").append(transportNameOf(t));
        }
        return transports.substring(1);
!!!7171845.java!!!	transportNameOf(in transport : int) : String
        if (transport < 0 || TRANSPORT_NAMES.length <= transport) {
            return "UNKNOWN";
        }
        return TRANSPORT_NAMES[transport];
