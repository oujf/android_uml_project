class LayoutState
!!!10416645.java!!!	hasMore(inout state : RecyclerView::State) : boolean
            return mCurrentPosition >= 0 && mCurrentPosition < state.getItemCount();
!!!10416773.java!!!	next(inout recycler : RecyclerView::Recycler) : View
            if (mScrapList != null) {
                return nextViewFromScrapList();
            }
            final View view = recycler.getViewForPosition(mCurrentPosition);
            mCurrentPosition += mItemDirection;
            return view;
!!!10416901.java!!!	nextViewFromScrapList() : View
            final int size = mScrapList.size();
            for (int i = 0; i < size; i++) {
                final View view = mScrapList.get(i).itemView;
                final LayoutParams lp = (LayoutParams) view.getLayoutParams();
                if (lp.isItemRemoved()) {
                    continue;
                }
                if (mCurrentPosition == lp.getViewLayoutPosition()) {
                    assignPositionFromScrapList(view);
                    return view;
                }
            }
            return null;
!!!10417029.java!!!	assignPositionFromScrapList() : void
            assignPositionFromScrapList(null);
!!!10417157.java!!!	assignPositionFromScrapList(inout ignore : View) : void
            final View closest = nextViewInLimitedList(ignore);
            if (closest == null) {
                mCurrentPosition = NO_POSITION;
            } else {
                mCurrentPosition = ((LayoutParams) closest.getLayoutParams())
                        .getViewLayoutPosition();
            }
!!!10417285.java!!!	nextViewInLimitedList(inout ignore : View) : View
            int size = mScrapList.size();
            View closest = null;
            int closestDistance = Integer.MAX_VALUE;
            if (DEBUG && mIsPreLayout) {
                throw new IllegalStateException("Scrap list cannot be used in pre layout");
            }
            for (int i = 0; i < size; i++) {
                View view = mScrapList.get(i).itemView;
                final LayoutParams lp = (LayoutParams) view.getLayoutParams();
                if (view == ignore || lp.isItemRemoved()) {
                    continue;
                }
                final int distance = (lp.getViewLayoutPosition() - mCurrentPosition)
                        * mItemDirection;
                if (distance < 0) {
                    continue; // item is not in current direction
                }
                if (distance < closestDistance) {
                    closest = view;
                    closestDistance = distance;
                    if (distance == 0) {
                        break;
                    }
                }
            }
            return closest;
!!!10417413.java!!!	log() : void
            Log.d(TAG, "avail:" + mAvailable + ", ind:" + mCurrentPosition + ", dir:"
                    + mItemDirection + ", offset:" + mOffset + ", layoutDir:" + mLayoutDirection);
