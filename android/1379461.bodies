class DateTimeKeyListener
!!!8274181.java!!!	getInputType() : int
        if (mNeedsAdvancedInput) {
            return InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_NORMAL;
        } else {
            return InputType.TYPE_CLASS_DATETIME | InputType.TYPE_DATETIME_VARIATION_NORMAL;
        }
!!!8274309.java!!!	getAcceptedChars() : char
        return mCharacters;
!!!8274437.java!!!	DateTimeKeyListener()
        this(null);
!!!8274565.java!!!	DateTimeKeyListener(inout locale : Locale)
        final LinkedHashSet<Character> chars = new LinkedHashSet<>();
        // First add the digits. Then, add all the character in AM and PM markers. Finally, add all
        // the non-pattern characters seen in the patterns for "yMdhms" and "yMdHms".
        final boolean success = NumberKeyListener.addDigits(chars, locale)
                          && NumberKeyListener.addAmPmChars(chars, locale)
                          && NumberKeyListener.addFormatCharsFromSkeleton(
                              chars, locale, SKELETON_12HOUR, SYMBOLS_TO_IGNORE)
                          && NumberKeyListener.addFormatCharsFromSkeleton(
                              chars, locale, SKELETON_24HOUR, SYMBOLS_TO_IGNORE);
        if (success) {
            mCharacters = NumberKeyListener.collectionToArray(chars);
            if (locale != null && "en".equals(locale.getLanguage())) {
                // For backward compatibility reasons, assume we don't need advanced input for
                // English locales, although English locales literally also need a comma and perhaps
                // uppercase letters for AM and PM.
                mNeedsAdvancedInput = false;
            } else {
                mNeedsAdvancedInput = !ArrayUtils.containsAll(CHARACTERS, mCharacters);
            }
        } else {
            mCharacters = CHARACTERS;
            mNeedsAdvancedInput = false;
        }
!!!8274693.java!!!	getInstance() : DateTimeKeyListener
        return getInstance(null);
!!!8274821.java!!!	getInstance(inout locale : Locale) : DateTimeKeyListener
        DateTimeKeyListener instance;
        synchronized (sLock) {
            instance = sInstanceCache.get(locale);
            if (instance == null) {
                instance = new DateTimeKeyListener(locale);
                sInstanceCache.put(locale, instance);
            }
        }
        return instance;
