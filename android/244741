format 214
"helper" // source::frameworks::base::packages::SystemUI::internal::widget::helper
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\Users\\Jeff\\Documents\\aosp\\frameworks\\base\\core\\java/com/android/internal/widget/helper/"
  java_package "com.android.internal.widget.helper"
  classview 230789 "helper"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1558149 "ItemTouchHelper"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is a utility class to add swipe to dismiss and drag & drop support to RecyclerView.
<p>
It works with a RecyclerView and a Callback class, which configures what type of interactions
are enabled and also receives events when user performs these actions.
<p>
Depending on which functionality you support, you should override
{@link Callback#onMove(RecyclerView, ViewHolder, ViewHolder)} and / or
{@link Callback#onSwiped(ViewHolder, int)}.
<p>
This class is designed to work with any LayoutManager but for certain situations, it can be
optimized for your custom LayoutManager by extending methods in the
{@link ItemTouchHelper.Callback} class or implementing {@link ItemTouchHelper.ViewDropHandler}
interface in your LayoutManager.
<p>
By default, ItemTouchHelper moves the items' translateX/Y properties to reposition them. On
platforms older than Honeycomb, ItemTouchHelper uses canvas translations and View's visibility
property to move items in response to touch events. You can customize these behaviors by
overriding {@link Callback#onChildDraw(Canvas, RecyclerView, ViewHolder, float, float, int,
boolean)}
or {@link Callback#onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int,
boolean)}.
<p/>
Most of the time, you only need to override <code>onChildDraw</code> but due to limitations of
platform prior to Honeycomb, you may need to implement <code>onChildDrawOver</code> as well.
"
      class 1558277 "ViewDropHandler"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	operation 10398725 "prepareForDrop"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "view" type class_ref 970757 // View
	    param inout name "target" type class_ref 970757 // View
	    param in name "x" explicit_type "int"
	    param in name "y" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called by the {@link ItemTouchHelper} after a View is dropped over another View.
<p>
A LayoutManager should implement this interface to get ready for the upcoming move
operation.
<p>
For example, LinearLayoutManager sets up a \"scrollToPositionWithOffset\" calls so that
the View under drag will be used as an anchor View while calculating the next layout,
making layout stay consistent.

@param view   The View which is being dragged. It is very likely that user is still
              dragging this View so there might be other
              {@link #prepareForDrop(View, View, int, int)} after this one.
@param target The target view which is being dropped on.
@param x      The <code>left</code> offset of the View that is being dragged. This value
              includes the movement caused by the user.
@param y      The <code>top</code> offset of the View that is being dragged. This value
              includes the movement caused by the user.
"
	end
      end

      classrelation 2558853 // <generalisation>
	relation 2558853 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 2558853 // <generalisation>
	  b parent class_ref 1553541 // ItemDecoration
      end

      classrelation 2558981 // <realization>
	relation 2558981 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 2558981 // <realization>
	  b parent class_ref 1553797 // OnChildAttachStateChangeListener
      end

      attribute 6512133 "UP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Up direction, used for swipe & drag control.

"
      end

      attribute 6512261 "DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Down direction, used for swipe & drag control.

"
      end

      attribute 6512389 "LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Left direction, used for swipe & drag control.

"
      end

      attribute 6512517 "RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Right direction, used for swipe & drag control.

"
      end

      attribute 6512645 "START"
	class_attribute const_attribute public explicit_type "int"
	init_value " LEFT << 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " If you change these relative direction values, update Callback#convertToAbsoluteDirection,
 Callback#convertToRelativeDirection.

Horizontal start direction. Resolved to LEFT or RIGHT depending on RecyclerView's layout
direction. Used for swipe & drag control.

"
      end

      attribute 6512773 "END"
	class_attribute const_attribute public explicit_type "int"
	init_value " RIGHT << 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Horizontal end direction. Resolved to LEFT or RIGHT depending on RecyclerView's layout
direction. Used for swipe & drag control.

"
      end

      attribute 6512901 "ACTION_STATE_IDLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "ItemTouchHelper is in idle state. At this state, either there is no related motion event by
the user or latest motion events have not yet triggered a swipe or drag.

"
      end

      attribute 6513029 "ACTION_STATE_SWIPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "A View is currently being swiped.

"
      end

      attribute 6513157 "ACTION_STATE_DRAG"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "A View is currently being dragged.

"
      end

      attribute 6513285 "ANIMATION_TYPE_SWIPE_SUCCESS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Animation type for views which are swiped successfully.

"
      end

      attribute 6513413 "ANIMATION_TYPE_SWIPE_CANCEL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Animation type for views which are not completely swiped thus will animate back to their
original position.

"
      end

      attribute 6513541 "ANIMATION_TYPE_DRAG"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Animation type for views that were dragged and now will animate to their final position.

"
      end

      attribute 6513669 "TAG"
	class_attribute const_attribute package explicit_type "String"
	init_value " \"ItemTouchHelper\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6513797 "DEBUG"
	class_attribute const_attribute package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6513925 "ACTIVE_POINTER_ID_NONE"
	class_attribute const_attribute package explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6514053 "DIRECTION_FLAG_COUNT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 8"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6514181 "ACTION_MODE_IDLE_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " (1 << DIRECTION_FLAG_COUNT) - 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6514309 "ACTION_MODE_SWIPE_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " ACTION_MODE_IDLE_MASK << DIRECTION_FLAG_COUNT"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6514437 "ACTION_MODE_DRAG_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " ACTION_MODE_SWIPE_MASK << DIRECTION_FLAG_COUNT"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6514565 "PIXELS_PER_SECOND"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The unit we are using to track velocity

"
      end

      classrelation 2559109 // mPendingCleanup (<unidirectional association>)
	relation 2559109 --->
	  stereotype "List"
	  a role_name "mPendingCleanup" init_value " new ArrayList<View>()" const_relation package
	    comment "Views, whose state should be cleared after they are detached from RecyclerView.
This is necessary after swipe dismissing an item. We wait until animator finishes its job
to clean these views.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2559109 // mPendingCleanup (<unidirectional association>)
	  b parent class_ref 970757 // View
      end

      attribute 6514693 "mTmpPosition"
	const_attribute private explicit_type "float"
	multiplicity "[]"
	init_value " new float[2]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Re-use array to calculate dx dy for a ViewHolder

"
      end

      classrelation 2559237 // mSelected (<unidirectional association>)
	relation 2559237 --->
	  a role_name "mSelected" init_value " null" package
	    comment "
Currently selected view holder

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2559237 // mSelected (<unidirectional association>)
	  b parent class_ref 1551877 // ViewHolder
      end

      attribute 6514821 "mInitialTouchX"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The reference coordinates for the action start. For drag & drop, this is the time long
press is completed vs for swipe, this is the initial touch point.

"
      end

      attribute 6514949 "mInitialTouchY"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6515077 "mSwipeEscapeVelocity"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Set when ItemTouchHelper is assigned to a RecyclerView.

"
      end

      attribute 6515205 "mMaxSwipeVelocity"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Set when ItemTouchHelper is assigned to a RecyclerView.

"
      end

      attribute 6515333 "mDx"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The diff between the last event and initial touch.

"
      end

      attribute 6515461 "mDy"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6515589 "mSelectedStartX"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The coordinates of the selected view at the time it is selected. We record these values
when action starts so that we can consistently position it even if LayoutManager moves the
View.

"
      end

      attribute 6515717 "mSelectedStartY"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 6515845 "mActivePointerId"
	package explicit_type "int"
	init_value " ACTIVE_POINTER_ID_NONE"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The pointer we are tracking.

"
      end

      class 1558405 "Callback"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"UnusedParameters\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 6516997 "DEFAULT_DRAG_ANIMATION_DURATION"
	  class_attribute const_attribute public explicit_type "int"
	  init_value " 200"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6517125 "DEFAULT_SWIPE_ANIMATION_DURATION"
	  class_attribute const_attribute public explicit_type "int"
	  init_value " 250"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6517253 "RELATIVE_DIR_FLAGS"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " START | END
                | ((START | END) << DIRECTION_FLAG_COUNT)
                | ((START | END) << (2 * DIRECTION_FLAG_COUNT))"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 2560517 // sUICallback (<unidirectional association>)
	  relation 2560517 --->
	    a role_name "sUICallback" init_value " new ItemTouchUIUtilImpl()" class_relation const_relation private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 2560517 // sUICallback (<unidirectional association>)
	    b parent class_ref 1558661 // ItemTouchUIUtil
	end

	attribute 6517381 "ABS_HORIZONTAL_DIR_FLAGS"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " LEFT | RIGHT
                | ((LEFT | RIGHT) << DIRECTION_FLAG_COUNT)
                | ((LEFT | RIGHT) << (2 * DIRECTION_FLAG_COUNT))"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 2560645 // sDragScrollInterpolator (<unidirectional association>)
	  relation 2560645 --->
	    a role_name "sDragScrollInterpolator" init_value " new Interpolator() {
            @Override
            public float getInterpolation(float t) {
                return t * t * t * t * t;
            }
        }" class_relation const_relation private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 2560645 // sDragScrollInterpolator (<unidirectional association>)
	    b parent class_ref 1072517 // Interpolator
	end

	classrelation 2560773 // sDragViewScrollCapInterpolator (<unidirectional association>)
	  relation 2560773 --->
	    a role_name "sDragViewScrollCapInterpolator" init_value " new Interpolator() {
            @Override
            public float getInterpolation(float t) {
                t -= 1.0f;
                return t * t * t * t * t + 1.0f;
            }
        }" class_relation const_relation private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 2560773 // sDragViewScrollCapInterpolator (<unidirectional association>)
	    b parent class_ref 1072517 // Interpolator
	end

	attribute 6517509 "DRAG_SCROLL_ACCELERATION_LIMIT_TIME_MS"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2000"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	  comment "Drag scroll speed keeps accelerating until this many milliseconds before being capped.

"
	end

	attribute 6517637 "mCachedMaxScrollSpeed"
	  private explicit_type "int"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10398853 "getDefaultUIUtil"
	  class_operation public return_type class_ref 1558661 // ItemTouchUIUtil
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Returns the {@link ItemTouchUIUtil} that is used by the {@link Callback} class for
visual
changes on Views in response to user interactions. {@link ItemTouchUIUtil} has different
implementations for different platform versions.
<p>
By default, {@link Callback} applies these changes on
{@link RecyclerView.ViewHolder#itemView}.
<p>
For example, if you have a use case where you only want the text to move when user
swipes over the view, you can do the following:
<pre>
    public void clearView(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder){
        getDefaultUIUtil().clearView(((ItemTouchViewHolder) viewHolder).textView);
    }
    public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {
        if (viewHolder != null){
            getDefaultUIUtil().onSelected(((ItemTouchViewHolder) viewHolder).textView);
        }
    }
    public void onChildDraw(Canvas c, RecyclerView recyclerView,
            RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState,
            boolean isCurrentlyActive) {
        getDefaultUIUtil().onDraw(c, recyclerView,
                ((ItemTouchViewHolder) viewHolder).textView, dX, dY,
                actionState, isCurrentlyActive);
        return true;
    }
    public void onChildDrawOver(Canvas c, RecyclerView recyclerView,
            RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState,
            boolean isCurrentlyActive) {
        getDefaultUIUtil().onDrawOver(c, recyclerView,
                ((ItemTouchViewHolder) viewHolder).textView, dX, dY,
                actionState, isCurrentlyActive);
        return true;
    }
</pre>

@return The {@link ItemTouchUIUtil} instance that is used by the {@link Callback}
"
	end

	operation 10398981 "convertToRelativeDirection"
	  class_operation public explicit_return_type "int"
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param in name "layoutDirection" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Replaces a movement direction with its relative version by taking layout direction into
account.

@param flags           The flag value that include any number of movement flags.
@param layoutDirection The layout direction of the View. Can be obtained from
                       {@link View#getLayoutDirection()}.
@return Updated flags which uses relative flags ({@link #START}, {@link #END}) instead
of {@link #LEFT}, {@link #RIGHT}.
@see #convertToAbsoluteDirection(int, int)
"
	end

	operation 10399109 "makeMovementFlags"
	  class_operation public explicit_return_type "int"
	  nparams 2
	    param in name "dragFlags" explicit_type "int"
	    param in name "swipeFlags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Convenience method to create movement flags.
<p>
For instance, if you want to let your items be drag & dropped vertically and swiped
left to be dismissed, you can call this method with:
<code>makeMovementFlags(UP | DOWN, LEFT);</code>

@param dragFlags  The directions in which the item can be dragged.
@param swipeFlags The directions in which the item can be swiped.
@return Returns an integer composed of the given drag and swipe flags.
"
	end

	operation 10399237 "makeFlag"
	  class_operation public explicit_return_type "int"
	  nparams 2
	    param in name "actionState" explicit_type "int"
	    param in name "directions" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Shifts the given direction flags to the offset of the given action state.

@param actionState The action state you want to get flags in. Should be one of
                   {@link #ACTION_STATE_IDLE}, {@link #ACTION_STATE_SWIPE} or
                   {@link #ACTION_STATE_DRAG}.
@param directions  The direction flags. Can be composed from {@link #UP}, {@link #DOWN},
                   {@link #RIGHT}, {@link #LEFT} {@link #START} and {@link #END}.
@return And integer that represents the given directions in the provided actionState.
"
	end

	operation 10399365 "getMovementFlags"
	  abstract public explicit_return_type "int"
	  nparams 2
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Should return a composite flag which defines the enabled move directions in each state
(idle, swiping, dragging).
<p>
Instead of composing this flag manually, you can use {@link #makeMovementFlags(int,
int)}
or {@link #makeFlag(int, int)}.
<p>
This flag is composed of 3 sets of 8 bits, where first 8 bits are for IDLE state, next
8 bits are for SWIPE state and third 8 bits are for DRAG state.
Each 8 bit sections can be constructed by simply OR'ing direction flags defined in
{@link ItemTouchHelper}.
<p>
For example, if you want it to allow swiping LEFT and RIGHT but only allow starting to
swipe by swiping RIGHT, you can return:
<pre>
     makeFlag(ACTION_STATE_IDLE, RIGHT) | makeFlag(ACTION_STATE_SWIPE, LEFT | RIGHT);
</pre>
This means, allow right movement while IDLE and allow right and left movement while
swiping.

@param recyclerView The RecyclerView to which ItemTouchHelper is attached.
@param viewHolder   The ViewHolder for which the movement information is necessary.
@return flags specifying which movements are allowed on this ViewHolder.
@see #makeMovementFlags(int, int)
@see #makeFlag(int, int)
"
	end

	operation 10399493 "convertToAbsoluteDirection"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param in name "layoutDirection" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Converts a given set of flags to absolution direction which means {@link #START} and
{@link #END} are replaced with {@link #LEFT} and {@link #RIGHT} depending on the layout
direction.

@param flags           The flag value that include any number of movement flags.
@param layoutDirection The layout direction of the RecyclerView.
@return Updated flags which includes only absolute direction values.
"
	end

	operation 10399621 "getAbsoluteMovementFlags"
	  package explicit_return_type "int"
	  nparams 2
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10399749 "hasDragFlag"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10399877 "hasSwipeFlag"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10400005 "canDropOver"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "current" type class_ref 1551877 // ViewHolder
	    param inout name "target" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Return true if the current ViewHolder can be dropped over the the target ViewHolder.
<p>
This method is used when selecting drop target for the dragged View. After Views are
eliminated either via bounds check or via this method, resulting set of views will be
passed to {@link #chooseDropTarget(ViewHolder, java.util.List, int, int)}.
<p>
Default implementation returns true.

@param recyclerView The RecyclerView to which ItemTouchHelper is attached to.
@param current      The ViewHolder that user is dragging.
@param target       The ViewHolder which is below the dragged ViewHolder.
@return True if the dragged ViewHolder can be replaced with the target ViewHolder, false
otherwise.
"
	end

	operation 10400133 "onMove"
	  abstract public explicit_return_type "boolean"
	  nparams 3
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	    param inout name "target" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called when ItemTouchHelper wants to move the dragged item from its old position to
the new position.
<p>
If this method returns true, ItemTouchHelper assumes {@code viewHolder} has been moved
to the adapter position of {@code target} ViewHolder
({@link ViewHolder#getAdapterPosition()
ViewHolder#getAdapterPosition()}).
<p>
If you don't support drag & drop, this method will never be called.

@param recyclerView The RecyclerView to which ItemTouchHelper is attached to.
@param viewHolder   The ViewHolder which is being dragged by the user.
@param target       The ViewHolder over which the currently active item is being
                    dragged.
@return True if the {@code viewHolder} has been moved to the adapter position of
{@code target}.
@see #onMoved(RecyclerView, ViewHolder, int, ViewHolder, int, int, int)
"
	end

	operation 10400261 "isLongPressDragEnabled"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Returns whether ItemTouchHelper should start a drag and drop operation if an item is
long pressed.
<p>
Default value returns true but you may want to disable this if you want to start
dragging on a custom view touch using {@link #startDrag(ViewHolder)}.

@return True if ItemTouchHelper should start dragging an item when it is long pressed,
false otherwise. Default value is <code>true</code>.
@see #startDrag(ViewHolder)
"
	end

	operation 10400389 "isItemViewSwipeEnabled"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Returns whether ItemTouchHelper should start a swipe operation if a pointer is swiped
over the View.
<p>
Default value returns true but you may want to disable this if you want to start
swiping on a custom view touch using {@link #startSwipe(ViewHolder)}.

@return True if ItemTouchHelper should start swiping an item when user swipes a pointer
over the View, false otherwise. Default value is <code>true</code>.
@see #startSwipe(ViewHolder)
"
	end

	operation 10400517 "getBoundingBoxMargin"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "When finding views under a dragged view, by default, ItemTouchHelper searches for views
that overlap with the dragged View. By overriding this method, you can extend or shrink
the search box.

@return The extra margin to be added to the hit box of the dragged View.
"
	end

	operation 10400645 "getSwipeThreshold"
	  public explicit_return_type "float"
	  nparams 1
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Returns the fraction that the user should move the View to be considered as swiped.
The fraction is calculated with respect to RecyclerView's bounds.
<p>
Default value is .5f, which means, to swipe a View, user must move the View at least
half of RecyclerView's width or height, depending on the swipe direction.

@param viewHolder The ViewHolder that is being dragged.
@return A float value that denotes the fraction of the View size. Default value
is .5f .
"
	end

	operation 10400773 "getMoveThreshold"
	  public explicit_return_type "float"
	  nparams 1
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Returns the fraction that the user should move the View to be considered as it is
dragged. After a view is moved this amount, ItemTouchHelper starts checking for Views
below it for a possible drop.

@param viewHolder The ViewHolder that is being dragged.
@return A float value that denotes the fraction of the View size. Default value is
.5f .
"
	end

	operation 10400901 "getSwipeEscapeVelocity"
	  public explicit_return_type "float"
	  nparams 1
	    param in name "defaultValue" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Defines the minimum velocity which will be considered as a swipe action by the user.
<p>
You can increase this value to make it harder to swipe or decrease it to make it easier.
Keep in mind that ItemTouchHelper also checks the perpendicular velocity and makes sure
current direction velocity is larger then the perpendicular one. Otherwise, user's
movement is ambiguous. You can change the threshold by overriding
{@link #getSwipeVelocityThreshold(float)}.
<p>
The velocity is calculated in pixels per second.
<p>
The default framework value is passed as a parameter so that you can modify it with a
multiplier.

@param defaultValue The default value (in pixels per second) used by the
                    ItemTouchHelper.
@return The minimum swipe velocity. The default implementation returns the
<code>defaultValue</code> parameter.
@see #getSwipeVelocityThreshold(float)
@see #getSwipeThreshold(ViewHolder)
"
	end

	operation 10401029 "getSwipeVelocityThreshold"
	  public explicit_return_type "float"
	  nparams 1
	    param in name "defaultValue" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Defines the maximum velocity ItemTouchHelper will ever calculate for pointer movements.
<p>
To consider a movement as swipe, ItemTouchHelper requires it to be larger than the
perpendicular movement. If both directions reach to the max threshold, none of them will
be considered as a swipe because it is usually an indication that user rather tried to
scroll then swipe.
<p>
The velocity is calculated in pixels per second.
<p>
You can customize this behavior by changing this method. If you increase the value, it
will be easier for the user to swipe diagonally and if you decrease the value, user will
need to make a rather straight finger movement to trigger a swipe.

@param defaultValue The default value(in pixels per second) used by the ItemTouchHelper.
@return The velocity cap for pointer movements. The default implementation returns the
<code>defaultValue</code> parameter.
@see #getSwipeEscapeVelocity(float)
"
	end

	operation 10401157 "chooseDropTarget"
	  public return_type class_ref 1551877 // ViewHolder
	  nparams 4
	    param inout name "selected" type class_ref 1551877 // ViewHolder
	    param inout name "dropTargets" explicit_type "List<ViewHolder>"
	    param in name "curX" explicit_type "int"
	    param in name "curY" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called by ItemTouchHelper to select a drop target from the list of ViewHolders that
are under the dragged View.
<p>
Default implementation filters the View with which dragged item have changed position
in the drag direction. For instance, if the view is dragged UP, it compares the
<code>view.getTop()</code> of the two views before and after drag started. If that value
is different, the target view passes the filter.
<p>
Among these Views which pass the test, the one closest to the dragged view is chosen.
<p>
This method is called on the main thread every time user moves the View. If you want to
override it, make sure it does not do any expensive operations.

@param selected    The ViewHolder being dragged by the user.
@param dropTargets The list of ViewHolder that are under the dragged View and
                   candidate as a drop.
@param curX        The updated left value of the dragged View after drag translations
                   are applied. This value does not include margins added by
                   {@link RecyclerView.ItemDecoration}s.
@param curY        The updated top value of the dragged View after drag translations
                   are applied. This value does not include margins added by
                   {@link RecyclerView.ItemDecoration}s.
@return A ViewHolder to whose position the dragged ViewHolder should be
moved to.
"
	end

	operation 10401285 "onSwiped"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	    param in name "direction" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called when a ViewHolder is swiped by the user.
<p>
If you are returning relative directions ({@link #START} , {@link #END}) from the
{@link #getMovementFlags(RecyclerView, ViewHolder)} method, this method
will also use relative directions. Otherwise, it will use absolute directions.
<p>
If you don't support swiping, this method will never be called.
<p>
ItemTouchHelper will keep a reference to the View until it is detached from
RecyclerView.
As soon as it is detached, ItemTouchHelper will call
{@link #clearView(RecyclerView, ViewHolder)}.

@param viewHolder The ViewHolder which has been swiped by the user.
@param direction  The direction to which the ViewHolder is swiped. It is one of
                  {@link #UP}, {@link #DOWN},
                  {@link #LEFT} or {@link #RIGHT}. If your
                  {@link #getMovementFlags(RecyclerView, ViewHolder)}
                  method
                  returned relative flags instead of {@link #LEFT} / {@link #RIGHT};
                  `direction` will be relative as well. ({@link #START} or {@link
                  #END}).
"
	end

	operation 10401413 "onSelectedChanged"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	    param in name "actionState" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called when the ViewHolder swiped or dragged by the ItemTouchHelper is changed.
<p/>
If you override this method, you should call super.

@param viewHolder  The new ViewHolder that is being swiped or dragged. Might be null if
                   it is cleared.
@param actionState One of {@link ItemTouchHelper#ACTION_STATE_IDLE},
                   {@link ItemTouchHelper#ACTION_STATE_SWIPE} or
                   {@link ItemTouchHelper#ACTION_STATE_DRAG}.
@see #clearView(RecyclerView, RecyclerView.ViewHolder)
"
	end

	operation 10401541 "getMaxDragScroll"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10401669 "onMoved"
	  public explicit_return_type "void"
	  nparams 7
	    param in name "recyclerView" type class_ref 1551749 // RecyclerView
	    param in name "viewHolder" type class_ref 1551877 // ViewHolder
	    param in name "fromPos" explicit_type "int"
	    param in name "target" type class_ref 1551877 // ViewHolder
	    param in name "toPos" explicit_type "int"
	    param in name "x" explicit_type "int"
	    param in name "y" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, ${t2} ${p2}, final ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called when {@link #onMove(RecyclerView, ViewHolder, ViewHolder)} returns true.
<p>
ItemTouchHelper does not create an extra Bitmap or View while dragging, instead, it
modifies the existing View. Because of this reason, it is important that the View is
still part of the layout after it is moved. This may not work as intended when swapped
Views are close to RecyclerView bounds or there are gaps between them (e.g. other Views
which were not eligible for dropping over).
<p>
This method is responsible to give necessary hint to the LayoutManager so that it will
keep the View in visible area. For example, for LinearLayoutManager, this is as simple
as calling {@link LinearLayoutManager#scrollToPositionWithOffset(int, int)}.

Default implementation calls {@link RecyclerView#scrollToPosition(int)} if the View's
new position is likely to be out of bounds.
<p>
It is important to ensure the ViewHolder will stay visible as otherwise, it might be
removed by the LayoutManager if the move causes the View to go out of bounds. In that
case, drag will end prematurely.

@param recyclerView The RecyclerView controlled by the ItemTouchHelper.
@param viewHolder   The ViewHolder under user's control.
@param fromPos      The previous adapter position of the dragged item (before it was
                    moved).
@param target       The ViewHolder on which the currently active item has been dropped.
@param toPos        The new adapter position of the dragged item.
@param x            The updated left value of the dragged View after drag translations
                    are applied. This value does not include margins added by
                    {@link RecyclerView.ItemDecoration}s.
@param y            The updated top value of the dragged View after drag translations
                    are applied. This value does not include margins added by
                    {@link RecyclerView.ItemDecoration}s.
"
	end

	operation 10401797 "onDraw"
	  package explicit_return_type "void"
	  nparams 7
	    param inout name "c" explicit_type "Canvas"
	    param inout name "parent" type class_ref 1551749 // RecyclerView
	    param inout name "selected" type class_ref 1551877 // ViewHolder
	    param inout name "recoverAnimationList" explicit_type "List<ItemTouchHelper.RecoverAnimation>"
	    param in name "actionState" explicit_type "int"
	    param in name "dX" explicit_type "float"
	    param in name "dY" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10401925 "onDrawOver"
	  package explicit_return_type "void"
	  nparams 7
	    param inout name "c" explicit_type "Canvas"
	    param inout name "parent" type class_ref 1551749 // RecyclerView
	    param inout name "selected" type class_ref 1551877 // ViewHolder
	    param inout name "recoverAnimationList" explicit_type "List<ItemTouchHelper.RecoverAnimation>"
	    param in name "actionState" explicit_type "int"
	    param in name "dX" explicit_type "float"
	    param in name "dY" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10402053 "clearView"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called by the ItemTouchHelper when the user interaction with an element is over and it
also completed its animation.
<p>
This is a good place to clear all changes on the View that was done in
{@link #onSelectedChanged(RecyclerView.ViewHolder, int)},
{@link #onChildDraw(Canvas, RecyclerView, ViewHolder, float, float, int,
boolean)} or
{@link #onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int, boolean)}.

@param recyclerView The RecyclerView which is controlled by the ItemTouchHelper.
@param viewHolder   The View that was interacted by the user.
"
	end

	operation 10402181 "onChildDraw"
	  public explicit_return_type "void"
	  nparams 7
	    param inout name "c" explicit_type "Canvas"
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	    param in name "dX" explicit_type "float"
	    param in name "dY" explicit_type "float"
	    param in name "actionState" explicit_type "int"
	    param inout name "isCurrentlyActive" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called by ItemTouchHelper on RecyclerView's onDraw callback.
<p>
If you would like to customize how your View's respond to user interactions, this is
a good place to override.
<p>
Default implementation translates the child by the given <code>dX</code>,
<code>dY</code>.
ItemTouchHelper also takes care of drawing the child after other children if it is being
dragged. This is done using child re-ordering mechanism. On platforms prior to L, this
is
achieved via {@link android.view.ViewGroup#getChildDrawingOrder(int, int)} and on L
and after, it changes View's elevation value to be greater than all other children.)

@param c                 The canvas which RecyclerView is drawing its children
@param recyclerView      The RecyclerView to which ItemTouchHelper is attached to
@param viewHolder        The ViewHolder which is being interacted by the User or it was
                         interacted and simply animating to its original position
@param dX                The amount of horizontal displacement caused by user's action
@param dY                The amount of vertical displacement caused by user's action
@param actionState       The type of interaction on the View. Is either {@link
                         #ACTION_STATE_DRAG} or {@link #ACTION_STATE_SWIPE}.
@param isCurrentlyActive True if this view is currently being controlled by the user or
                         false it is simply animating back to its original state.
@see #onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int,
boolean)
"
	end

	operation 10402309 "onChildDrawOver"
	  public explicit_return_type "void"
	  nparams 7
	    param inout name "c" explicit_type "Canvas"
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	    param in name "dX" explicit_type "float"
	    param in name "dY" explicit_type "float"
	    param in name "actionState" explicit_type "int"
	    param inout name "isCurrentlyActive" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called by ItemTouchHelper on RecyclerView's onDraw callback.
<p>
If you would like to customize how your View's respond to user interactions, this is
a good place to override.
<p>
Default implementation translates the child by the given <code>dX</code>,
<code>dY</code>.
ItemTouchHelper also takes care of drawing the child after other children if it is being
dragged. This is done using child re-ordering mechanism. On platforms prior to L, this
is
achieved via {@link android.view.ViewGroup#getChildDrawingOrder(int, int)} and on L
and after, it changes View's elevation value to be greater than all other children.)

@param c                 The canvas which RecyclerView is drawing its children
@param recyclerView      The RecyclerView to which ItemTouchHelper is attached to
@param viewHolder        The ViewHolder which is being interacted by the User or it was
                         interacted and simply animating to its original position
@param dX                The amount of horizontal displacement caused by user's action
@param dY                The amount of vertical displacement caused by user's action
@param actionState       The type of interaction on the View. Is either {@link
                         #ACTION_STATE_DRAG} or {@link #ACTION_STATE_SWIPE}.
@param isCurrentlyActive True if this view is currently being controlled by the user or
                         false it is simply animating back to its original state.
@see #onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int,
boolean)
"
	end

	operation 10402437 "getAnimationDuration"
	  public explicit_return_type "long"
	  nparams 4
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param in name "animationType" explicit_type "int"
	    param in name "animateDx" explicit_type "float"
	    param in name "animateDy" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called by the ItemTouchHelper when user action finished on a ViewHolder and now the View
will be animated to its final position.
<p>
Default implementation uses ItemAnimator's duration values. If
<code>animationType</code> is {@link #ANIMATION_TYPE_DRAG}, it returns
{@link RecyclerView.ItemAnimator#getMoveDuration()}, otherwise, it returns
{@link RecyclerView.ItemAnimator#getRemoveDuration()}. If RecyclerView does not have
any {@link RecyclerView.ItemAnimator} attached, this method returns
{@code DEFAULT_DRAG_ANIMATION_DURATION} or {@code DEFAULT_SWIPE_ANIMATION_DURATION}
depending on the animation type.

@param recyclerView  The RecyclerView to which the ItemTouchHelper is attached to.
@param animationType The type of animation. Is one of {@link #ANIMATION_TYPE_DRAG},
                     {@link #ANIMATION_TYPE_SWIPE_CANCEL} or
                     {@link #ANIMATION_TYPE_SWIPE_SUCCESS}.
@param animateDx     The horizontal distance that the animation will offset
@param animateDy     The vertical distance that the animation will offset
@return The duration for the animation
"
	end

	operation 10402565 "interpolateOutOfBoundsScroll"
	  public explicit_return_type "int"
	  nparams 5
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param in name "viewSize" explicit_type "int"
	    param in name "viewSizeOutOfBounds" explicit_type "int"
	    param in name "totalSize" explicit_type "int"
	    param in name "msSinceStartScroll" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Called by the ItemTouchHelper when user is dragging a view out of bounds.
<p>
You can override this method to decide how much RecyclerView should scroll in response
to this action. Default implementation calculates a value based on the amount of View
out of bounds and the time it spent there. The longer user keeps the View out of bounds,
the faster the list will scroll. Similarly, the larger portion of the View is out of
bounds, the faster the RecyclerView will scroll.

@param recyclerView        The RecyclerView instance to which ItemTouchHelper is
                           attached to.
@param viewSize            The total size of the View in scroll direction, excluding
                           item decorations.
@param viewSizeOutOfBounds The total size of the View that is out of bounds. This value
                           is negative if the View is dragged towards left or top edge.
@param totalSize           The total size of RecyclerView in the scroll direction.
@param msSinceStartScroll  The time passed since View is kept out of bounds.
@return The amount that RecyclerView should scroll. Keep in mind that this value will
be passed to {@link RecyclerView#scrollBy(int, int)} method.
"
	end
      end

      classrelation 2559365 // mCallback (<unidirectional association>)
	relation 2559365 --->
	  a role_name "mCallback" package
	    comment "
Developer callback which controls the behavior of ItemTouchHelper.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2559365 // mCallback (<unidirectional association>)
	  b parent class_ref 1558405 // Callback
      end

      attribute 6515973 "mActionState"
	package explicit_type "int"
	init_value " ACTION_STATE_IDLE"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Current mode.

"
      end

      attribute 6516101 "mSelectedFlags"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "The direction flags obtained from unmasking
{@link Callback#getAbsoluteMovementFlags(RecyclerView, ViewHolder)} for the current
action state.

"
      end

      class 1558533 "RecoverAnimation"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2561157 // <realization>
	  relation 2561157 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 2561157 // <realization>
	    b parent class_ref 1004933 // AnimatorListener
	end

	attribute 6518021 "mStartDx"
	  const_attribute package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6518149 "mStartDy"
	  const_attribute package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6518277 "mTargetX"
	  const_attribute package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6518405 "mTargetY"
	  const_attribute package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 2561285 // mViewHolder (<unidirectional association>)
	  relation 2561285 --->
	    a role_name "mViewHolder" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 2561285 // mViewHolder (<unidirectional association>)
	    b parent class_ref 1551877 // ViewHolder
	end

	attribute 6518533 "mActionState"
	  const_attribute package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 2561413 // mValueAnimator (<unidirectional association>)
	  relation 2561413 --->
	    a role_name "mValueAnimator" const_relation private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${visibility}${type} ${name};
"
	      classrelation_ref 2561413 // mValueAnimator (<unidirectional association>)
	    b parent class_ref 1006341 // ValueAnimator
	end

	attribute 6518661 "mAnimationType"
	  const_attribute package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6518789 "mIsPendingCleanup"
	  public explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6518917 "mX"
	  package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6519045 "mY"
	  package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6519173 "mOverridden"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	  comment " if user starts touching a recovering view, we put it into interaction mode again,
 instantly.
"
	end

	attribute 6519301 "mEnded"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6519429 "mFraction"
	  private explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10403845 "RecoverAnimation"
	  package explicit_return_type ""
	  nparams 7
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	    param in name "animationType" explicit_type "int"
	    param in name "actionState" explicit_type "int"
	    param in name "startDx" explicit_type "float"
	    param in name "startDy" explicit_type "float"
	    param in name "targetX" explicit_type "float"
	    param in name "targetY" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10403973 "setDuration"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "duration" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10404101 "start"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10404229 "cancel"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10404357 "setFraction"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10404485 "update"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "We run updates on onDraw method but use the fraction from animator callback.
This way, we can sync translate x/y values w/ the animators to avoid one-off frames.
"
	end

	operation 10404613 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10404741 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10404869 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10404997 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 1004677 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      classrelation 2559493 // mRecoverAnimations (<unidirectional association>)
	relation 2559493 --->
	  stereotype "List"
	  a role_name "mRecoverAnimations" init_value " new ArrayList<RecoverAnimation>()" package
	    comment "When a View is dragged or swiped and needs to go back to where it was, we create a Recover
Animation and animate it to its location using this custom Animator, instead of using
framework Animators.
Using framework animators has the side effect of clashing with ItemAnimator, creating
jumpy UIs.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2559493 // mRecoverAnimations (<unidirectional association>)
	  b parent class_ref 1558533 // RecoverAnimation
      end

      attribute 6516229 "mSlop"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 2559621 // mRecyclerView (<unidirectional association>)
	relation 2559621 --->
	  a role_name "mRecyclerView" package
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2559621 // mRecyclerView (<unidirectional association>)
	  b parent class_ref 1551749 // RecyclerView
      end

      attribute 6516357 "mScrollRunnable"
	const_attribute package explicit_type "Runnable"
	init_value " new Runnable() {
        @Override
        public void run() {
            if (mSelected != null && scrollIfNecessary()) {
                if (mSelected != null) { //it might be lost during scrolling
                    moveIfNecessary(mSelected);
                }
                mRecyclerView.removeCallbacks(mScrollRunnable);
                mRecyclerView.postOnAnimation(this);
            }
        }
    }"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "When user drags a view to the edge, we start scrolling the LayoutManager as long as View
is partially out of bounds.

"
      end

      classrelation 2559749 // mVelocityTracker (<unidirectional association>)
	relation 2559749 --->
	  a role_name "mVelocityTracker" package
	    comment "
Used for detecting fling swipe

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2559749 // mVelocityTracker (<unidirectional association>)
	  b parent class_ref 1070853 // VelocityTracker
      end

      classrelation 2559877 // mSwapTargets (<unidirectional association>)
	relation 2559877 --->
	  stereotype "List"
	  a role_name "mSwapTargets" private
	    comment "re-used list for selecting a swap target
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2559877 // mSwapTargets (<unidirectional association>)
	  b parent class_ref 1551877 // ViewHolder
      end

      attribute 6516485 "mDistances"
	private explicit_type "Integer"
	stereotype "List"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "re used for for sorting swap targets
"
      end

      classrelation 2560005 // mChildDrawingOrderCallback (<unidirectional association>)
	relation 2560005 --->
	  a role_name "mChildDrawingOrderCallback" init_value " null" private
	    comment "
If drag & drop is supported, we use child drawing order to bring them to front.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2560005 // mChildDrawingOrderCallback (<unidirectional association>)
	  b parent class_ref 1554949 // ChildDrawingOrderCallback
      end

      classrelation 2560133 // mOverdrawChild (<unidirectional association>)
	relation 2560133 --->
	  a role_name "mOverdrawChild" init_value " null" package
	    comment "
This keeps a reference to the child dragged by the user. Even after user stops dragging,
until view reaches its final position (end of recover animation), we keep a reference so
that it can be drawn above other children.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2560133 // mOverdrawChild (<unidirectional association>)
	  b parent class_ref 970757 // View
      end

      attribute 6516613 "mOverdrawChildPosition"
	package explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "We cache the position of the overdraw child to avoid recalculating it each time child
position callback is called. This value is invalidated whenever a child is attached or
detached.

"
      end

      classrelation 2560261 // mGestureDetector (<unidirectional association>)
	relation 2560261 --->
	  a role_name "mGestureDetector" package
	    comment "
Used to detect long press.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2560261 // mGestureDetector (<unidirectional association>)
	  b parent class_ref 1236741 // GestureDetector
      end

      classrelation 2560389 // mOnItemTouchListener (<unidirectional association>)
	relation 2560389 --->
	  a role_name "mOnItemTouchListener" init_value " new OnItemTouchListener() {
        @Override
        public boolean onInterceptTouchEvent(RecyclerView recyclerView, MotionEvent event) {
            mGestureDetector.onTouchEvent(event);
            if (DEBUG) {
                Log.d(TAG, \"intercept: x:\" + event.getX() + \",y:\" + event.getY() + \", \" + event);
            }
            final int action = event.getActionMasked();
            if (action == MotionEvent.ACTION_DOWN) {
                mActivePointerId = event.getPointerId(0);
                mInitialTouchX = event.getX();
                mInitialTouchY = event.getY();
                obtainVelocityTracker();
                if (mSelected == null) {
                    final RecoverAnimation animation = findAnimation(event);
                    if (animation != null) {
                        mInitialTouchX -= animation.mX;
                        mInitialTouchY -= animation.mY;
                        endRecoverAnimation(animation.mViewHolder, true);
                        if (mPendingCleanup.remove(animation.mViewHolder.itemView)) {
                            mCallback.clearView(mRecyclerView, animation.mViewHolder);
                        }
                        select(animation.mViewHolder, animation.mActionState);
                        updateDxDy(event, mSelectedFlags, 0);
                    }
                }
            } else if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
                mActivePointerId = ACTIVE_POINTER_ID_NONE;
                select(null, ACTION_STATE_IDLE);
            } else if (mActivePointerId != ACTIVE_POINTER_ID_NONE) {
                // in a non scroll orientation, if distance change is above threshold, we
                // can select the item
                final int index = event.findPointerIndex(mActivePointerId);
                if (DEBUG) {
                    Log.d(TAG, \"pointer index \" + index);
                }
                if (index >= 0) {
                    checkSelectForSwipe(action, event, index);
                }
            }
            if (mVelocityTracker != null) {
                mVelocityTracker.addMovement(event);
            }
            return mSelected != null;
        }

        @Override
        public void onTouchEvent(RecyclerView recyclerView, MotionEvent event) {
            mGestureDetector.onTouchEvent(event);
            if (DEBUG) {
                Log.d(TAG,
                        \"on touch: x:\" + mInitialTouchX + \",y:\" + mInitialTouchY + \", :\" + event);
            }
            if (mVelocityTracker != null) {
                mVelocityTracker.addMovement(event);
            }
            if (mActivePointerId == ACTIVE_POINTER_ID_NONE) {
                return;
            }
            final int action = event.getActionMasked();
            final int activePointerIndex = event.findPointerIndex(mActivePointerId);
            if (activePointerIndex >= 0) {
                checkSelectForSwipe(action, event, activePointerIndex);
            }
            ViewHolder viewHolder = mSelected;
            if (viewHolder == null) {
                return;
            }
            switch (action) {
                case MotionEvent.ACTION_MOVE: {
                    // Find the index of the active pointer and fetch its position
                    if (activePointerIndex >= 0) {
                        updateDxDy(event, mSelectedFlags, activePointerIndex);
                        moveIfNecessary(viewHolder);
                        mRecyclerView.removeCallbacks(mScrollRunnable);
                        mScrollRunnable.run();
                        mRecyclerView.invalidate();
                    }
                    break;
                }
                case MotionEvent.ACTION_CANCEL:
                    if (mVelocityTracker != null) {
                        mVelocityTracker.clear();
                    }
                    // fall through
                case MotionEvent.ACTION_UP:
                    select(null, ACTION_STATE_IDLE);
                    mActivePointerId = ACTIVE_POINTER_ID_NONE;
                    break;
                case MotionEvent.ACTION_POINTER_UP: {
                    final int pointerIndex = event.getActionIndex();
                    final int pointerId = event.getPointerId(pointerIndex);
                    if (pointerId == mActivePointerId) {
                        // This was our active pointer going up. Choose a new
                        // active pointer and adjust accordingly.
                        final int newPointerIndex = pointerIndex == 0 ? 1 : 0;
                        mActivePointerId = event.getPointerId(newPointerIndex);
                        updateDxDy(event, mSelectedFlags, pointerIndex);
                    }
                    break;
                }
            }
        }

        @Override
        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {
            if (!disallowIntercept) {
                return;
            }
            select(null, ACTION_STATE_IDLE);
        }
    }" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 2560389 // mOnItemTouchListener (<unidirectional association>)
	  b parent class_ref 1553669 // OnItemTouchListener
      end

      attribute 6516741 "mTmpRect"
	private explicit_type "Rect"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "Temporary rect instance that is used when we need to lookup Item decorations.

"
      end

      attribute 6516869 "mDragScrollStartTimeInMs"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "When user started to drag scroll. Reset when we don't scroll

"
      end

      operation 10394501 "ItemTouchHelper"
	public explicit_return_type ""
	nparams 1
	  param inout name "callback" type class_ref 1558405 // Callback
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Creates an ItemTouchHelper that will work with the given Callback.
<p>
You can attach ItemTouchHelper to a RecyclerView via
{@link #attachToRecyclerView(RecyclerView)}. Upon attaching, it will add an item decoration,
an onItemTouchListener and a Child attach / detach listener to the RecyclerView.

@param callback The Callback which controls the behavior of this touch helper.
"
      end

      operation 10394629 "hitTest"
	class_operation private explicit_return_type "boolean"
	nparams 5
	  param inout name "child" type class_ref 970757 // View
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	  param in name "left" explicit_type "float"
	  param in name "top" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10394757 "attachToRecyclerView"
	public explicit_return_type "void"
	nparams 1
	  param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Attaches the ItemTouchHelper to the provided RecyclerView. If TouchHelper is already
attached to a RecyclerView, it will first detach from the previous one. You can call this
method with {@code null} to detach it from the current RecyclerView.

@param recyclerView The RecyclerView instance to which you want to add this helper or
                    {@code null} if you want to remove ItemTouchHelper from the current
                    RecyclerView.
"
      end

      operation 10394885 "setupCallbacks"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10395013 "destroyCallbacks"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10395141 "initGestureDetector"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10395269 "getSelectedDxDy"
	private explicit_return_type "void"
	nparams 1
	  param inout name "outPosition" explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10395397 "onDrawOver"
	public explicit_return_type "void"
	nparams 3
	  param inout name "c" explicit_type "Canvas"
	  param inout name "parent" type class_ref 1551749 // RecyclerView
	  param inout name "state" type class_ref 1554437 // State
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10395525 "onDraw"
	public explicit_return_type "void"
	nparams 3
	  param inout name "c" explicit_type "Canvas"
	  param inout name "parent" type class_ref 1551749 // RecyclerView
	  param inout name "state" type class_ref 1554437 // State
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10395653 "select"
	package explicit_return_type "void"
	nparams 2
	  param inout name "selected" type class_ref 1551877 // ViewHolder
	  param in name "actionState" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Starts dragging or swiping the given View. Call with null if you want to clear it.

@param selected    The ViewHolder to drag or swipe. Can be null if you want to cancel the
                   current action
@param actionState The type of action
"
      end

      operation 10395781 "postDispatchSwipe"
	package explicit_return_type "void"
	nparams 2
	  param in name "anim" type class_ref 1558533 // RecoverAnimation
	  param in name "swipeDir" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10395909 "hasRunningRecoverAnim"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10396037 "scrollIfNecessary"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "If user drags the view to the edge, trigger a scroll if necessary.
"
      end

      operation 10396165 "findSwapTargets"
	private return_type class_ref 1551877 // ViewHolder
	nparams 1
	  param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10396293 "moveIfNecessary"
	package explicit_return_type "void"
	nparams 1
	  param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Checks if we should swap w/ another view holder.
"
      end

      operation 10396421 "onChildViewAttachedToWindow"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10396549 "onChildViewDetachedFromWindow"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10396677 "endRecoverAnimation"
	package explicit_return_type "int"
	nparams 2
	  param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  param inout name "override" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the animation type or 0 if cannot be found.
"
      end

      operation 10396805 "getItemOffsets"
	public explicit_return_type "void"
	nparams 4
	  param inout name "outRect" explicit_type "Rect"
	  param inout name "view" type class_ref 970757 // View
	  param inout name "parent" type class_ref 1551749 // RecyclerView
	  param inout name "state" type class_ref 1554437 // State
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10396933 "obtainVelocityTracker"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10397061 "releaseVelocityTracker"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10397189 "findSwipedView"
	private return_type class_ref 1551877 // ViewHolder
	nparams 1
	  param inout name "motionEvent" type class_ref 981509 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10397317 "checkSelectForSwipe"
	package explicit_return_type "boolean"
	nparams 3
	  param in name "action" explicit_type "int"
	  param inout name "motionEvent" type class_ref 981509 // MotionEvent
	  param in name "pointerIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Checks whether we should select a View for swiping.
"
      end

      operation 10397445 "findChildView"
	package return_type class_ref 970757 // View
	nparams 1
	  param inout name "event" type class_ref 981509 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10397573 "startDrag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Starts dragging the provided ViewHolder. By default, ItemTouchHelper starts a drag when a
View is long pressed. You can disable that behavior by overriding
{@link ItemTouchHelper.Callback#isLongPressDragEnabled()}.
<p>
For this method to work:
<ul>
<li>The provided ViewHolder must be a child of the RecyclerView to which this
ItemTouchHelper
is attached.</li>
<li>{@link ItemTouchHelper.Callback} must have dragging enabled.</li>
<li>There must be a previous touch event that was reported to the ItemTouchHelper
through RecyclerView's ItemTouchListener mechanism. As long as no other ItemTouchListener
grabs previous events, this should work as expected.</li>
</ul>

For example, if you would like to let your user to be able to drag an Item by touching one
of its descendants, you may implement it as follows:
<pre>
    viewHolder.dragButton.setOnTouchListener(new View.OnTouchListener() {
        public boolean onTouch(View v, MotionEvent event) {
            if (MotionEvent.getActionMasked(event) == MotionEvent.ACTION_DOWN) {
                mItemTouchHelper.startDrag(viewHolder);
            }
            return false;
        }
    });
</pre>
<p>

@param viewHolder The ViewHolder to start dragging. It must be a direct child of
                  RecyclerView.
@see ItemTouchHelper.Callback#isItemViewSwipeEnabled()
"
      end

      operation 10397701 "startSwipe"
	public explicit_return_type "void"
	nparams 1
	  param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Starts swiping the provided ViewHolder. By default, ItemTouchHelper starts swiping a View
when user swipes their finger (or mouse pointer) over the View. You can disable this
behavior
by overriding {@link ItemTouchHelper.Callback}
<p>
For this method to work:
<ul>
<li>The provided ViewHolder must be a child of the RecyclerView to which this
ItemTouchHelper is attached.</li>
<li>{@link ItemTouchHelper.Callback} must have swiping enabled.</li>
<li>There must be a previous touch event that was reported to the ItemTouchHelper
through RecyclerView's ItemTouchListener mechanism. As long as no other ItemTouchListener
grabs previous events, this should work as expected.</li>
</ul>

For example, if you would like to let your user to be able to swipe an Item by touching one
of its descendants, you may implement it as follows:
<pre>
    viewHolder.dragButton.setOnTouchListener(new View.OnTouchListener() {
        public boolean onTouch(View v, MotionEvent event) {
            if (MotionEvent.getActionMasked(event) == MotionEvent.ACTION_DOWN) {
                mItemTouchHelper.startSwipe(viewHolder);
            }
            return false;
        }
    });
</pre>

@param viewHolder The ViewHolder to start swiping. It must be a direct child of
                  RecyclerView.
"
      end

      operation 10397829 "findAnimation"
	package return_type class_ref 1558533 // RecoverAnimation
	nparams 1
	  param inout name "event" type class_ref 981509 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10397957 "updateDxDy"
	package explicit_return_type "void"
	nparams 3
	  param inout name "ev" type class_ref 981509 // MotionEvent
	  param in name "directionFlags" explicit_type "int"
	  param in name "pointerIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10398085 "swipeIfNecessary"
	private explicit_return_type "int"
	nparams 1
	  param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10398213 "checkHorizontalSwipe"
	private explicit_return_type "int"
	nparams 2
	  param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10398341 "checkVerticalSwipe"
	private explicit_return_type "int"
	nparams 2
	  param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10398469 "addChildDrawingOrderCallback"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10398597 "removeChildDrawingOrderCallbackIfNecessary"
	package explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      class 1558789 "SimpleCallback"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2560901 // <generalisation>
	  relation 2560901 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 2560901 // <generalisation>
	    b parent class_ref 1558405 // Callback
	end

	attribute 6517765 "mDefaultSwipeDirs"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 6517893 "mDefaultDragDirs"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${visibility}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10402693 "SimpleCallback"
	  public explicit_return_type ""
	  nparams 2
	    param in name "dragDirs" explicit_type "int"
	    param in name "swipeDirs" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment "Creates a Callback for the given drag and swipe allowance. These values serve as
defaults
and if you want to customize behavior per ViewHolder, you can override
{@link #getSwipeDirs(RecyclerView, ViewHolder)}
and / or {@link #getDragDirs(RecyclerView, ViewHolder)}.

@param dragDirs  Binary OR of direction flags in which the Views can be dragged. Must be
                 composed of {@link #LEFT}, {@link #RIGHT}, {@link #START}, {@link
                 #END},
                 {@link #UP} and {@link #DOWN}.
@param swipeDirs Binary OR of direction flags in which the Views can be swiped. Must be
                 composed of {@link #LEFT}, {@link #RIGHT}, {@link #START}, {@link
                 #END},
                 {@link #UP} and {@link #DOWN}.
"
	end

	operation 10402821 "setDefaultSwipeDirs"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "defaultSwipeDirs" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Updates the default swipe directions. For example, you can use this method to toggle
certain directions depending on your use case.

@param defaultSwipeDirs Binary OR of directions in which the ViewHolders can be swiped.
"
	end

	operation 10402949 "setDefaultDragDirs"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "defaultDragDirs" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Updates the default drag directions. For example, you can use this method to toggle
certain directions depending on your use case.

@param defaultDragDirs Binary OR of directions in which the ViewHolders can be dragged.
"
	end

	operation 10403077 "getSwipeDirs"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Returns the swipe directions for the provided ViewHolder.
Default implementation returns the swipe directions that was set via constructor or
{@link #setDefaultSwipeDirs(int)}.

@param recyclerView The RecyclerView to which the ItemTouchHelper is attached to.
@param viewHolder   The RecyclerView for which the swipe direction is queried.
@return A binary OR of direction flags.
"
	end

	operation 10403205 "getDragDirs"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Returns the drag directions for the provided ViewHolder.
Default implementation returns the drag directions that was set via constructor or
{@link #setDefaultDragDirs(int)}.

@param recyclerView The RecyclerView to which the ItemTouchHelper is attached to.
@param viewHolder   The RecyclerView for which the swipe direction is queried.
@return A binary OR of direction flags.
"
	end

	operation 10403333 "getMovementFlags"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	    param inout name "viewHolder" type class_ref 1551877 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 1558917 "ItemTouchHelperGestureListener"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2561029 // <generalisation>
	  relation 2561029 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 2561029 // <generalisation>
	    b parent class_ref 1421445 // SimpleOnGestureListener
	end

	operation 10403461 "ItemTouchHelperGestureListener"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10403589 "onDown"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "e" type class_ref 981509 // MotionEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 10403717 "onLongPress"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "e" type class_ref 981509 // MotionEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end
    end

    class 1558661 "ItemTouchUIUtil"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility class for {@link ItemTouchHelper} which handles item transformations for different
API versions.
<p/>
This class has methods that map to {@link ItemTouchHelper.Callback}'s drawing methods. Default
implementations in {@link ItemTouchHelper.Callback} call these methods with
{@link RecyclerView.ViewHolder#itemView} and {@link ItemTouchUIUtil} makes necessary changes
on the View depending on the API level. You can access the instance of {@link ItemTouchUIUtil}
via {@link ItemTouchHelper.Callback#getDefaultUIUtil()} and call its methods with the children
of ViewHolder that you want to apply default effects.

@see ItemTouchHelper.Callback#getDefaultUIUtil()
"
      operation 10511237 "onDraw"
	public explicit_return_type "void"
	nparams 7
	  param inout name "c" explicit_type "Canvas"
	  param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	  param inout name "view" type class_ref 970757 // View
	  param in name "dX" explicit_type "float"
	  param in name "dY" explicit_type "float"
	  param in name "actionState" explicit_type "int"
	  param inout name "isCurrentlyActive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The default implementation for {@link ItemTouchHelper.Callback#onChildDraw(Canvas,
RecyclerView, RecyclerView.ViewHolder, float, float, int, boolean)}
"
      end

      operation 10511365 "onDrawOver"
	public explicit_return_type "void"
	nparams 7
	  param inout name "c" explicit_type "Canvas"
	  param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	  param inout name "view" type class_ref 970757 // View
	  param in name "dX" explicit_type "float"
	  param in name "dY" explicit_type "float"
	  param in name "actionState" explicit_type "int"
	  param inout name "isCurrentlyActive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The default implementation for {@link ItemTouchHelper.Callback#onChildDrawOver(Canvas,
RecyclerView, RecyclerView.ViewHolder, float, float, int, boolean)}
"
      end

      operation 10511493 "clearView"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The default implementation for {@link ItemTouchHelper.Callback#clearView(RecyclerView,
RecyclerView.ViewHolder)}
"
      end

      operation 10511621 "onSelected"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "The default implementation for {@link ItemTouchHelper.Callback#onSelectedChanged(
RecyclerView.ViewHolder, int)}
"
      end
    end

    class 1566469 "ItemTouchUIUtilImpl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Package private class to keep implementations. Putting them inside ItemTouchUIUtil makes them
public API, which is not desired in this case.
"
      classrelation 2581125 // <realization>
	relation 2581125 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 2581125 // <realization>
	  b parent class_ref 1558661 // ItemTouchUIUtil
      end

      operation 10511749 "onDraw"
	public explicit_return_type "void"
	nparams 7
	  param inout name "c" explicit_type "Canvas"
	  param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	  param inout name "view" type class_ref 970757 // View
	  param in name "dX" explicit_type "float"
	  param in name "dY" explicit_type "float"
	  param in name "actionState" explicit_type "int"
	  param inout name "isCurrentlyActive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10511877 "findMaxElevation"
	private explicit_return_type "float"
	nparams 2
	  param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	  param inout name "itemView" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10512005 "clearView"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10512133 "onSelected"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 970757 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 10512261 "onDrawOver"
	public explicit_return_type "void"
	nparams 7
	  param inout name "c" explicit_type "Canvas"
	  param inout name "recyclerView" type class_ref 1551749 // RecyclerView
	  param inout name "view" type class_ref 970757 // View
	  param in name "dX" explicit_type "float"
	  param in name "dY" explicit_type "float"
	  param in name "actionState" explicit_type "int"
	  param inout name "isCurrentlyActive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end
  end

  deploymentview 208005 "helper"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 784517 "ItemTouchHelper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.ValueAnimator;
import android.annotation.Nullable;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.os.Build;
import android.util.Log;
import android.view.GestureDetector;
import android.view.HapticFeedbackConstants;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewParent;
import android.view.animation.Interpolator;
import com.android.internal.R;
import com.android.internal.widget.LinearLayoutManager;
import com.android.internal.widget.RecyclerView;
import com.android.internal.widget.RecyclerView.OnItemTouchListener;
import com.android.internal.widget.RecyclerView.ViewHolder;
import java.util.ArrayList;
import java.util.List;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1558149 // ItemTouchHelper
      end
      comment "Copyright (C) 2017 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 788485 "ItemTouchUIUtil"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Canvas;
import android.view.View;
import com.android.internal.widget.RecyclerView;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1558661 // ItemTouchUIUtil
      end
      comment "Copyright (C) 2017 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 788613 "ItemTouchUIUtilImpl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Canvas;
import android.view.View;
import com.android.internal.R;
import com.android.internal.widget.RecyclerView;
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 1566469 // ItemTouchUIUtilImpl
      end
      comment "Copyright (C) 2017 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
