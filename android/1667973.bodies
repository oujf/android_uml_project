class SimChangeListener
!!!11399557.java!!!	SimChangeListener(inout ctx : Context)
                mContext = ctx;
                mSimBcastGenerationNumber = new AtomicInteger(0);
!!!11399685.java!!!	generationNumber() : int
                return mSimBcastGenerationNumber.get();
!!!11399813.java!!!	startListening() : void
                if (DBG) Log.d(TAG, "startListening for SIM changes");

                if (mBroadcastReceiver != null) return;

                mBroadcastReceiver = new SimChangeBroadcastReceiver(
                        mSimBcastGenerationNumber.incrementAndGet());
                final IntentFilter filter = new IntentFilter();
                filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);

                mContext.registerReceiver(mBroadcastReceiver, filter, null,
                        mTetherMasterSM.getHandler());
!!!11399941.java!!!	stopListening() : void
                if (DBG) Log.d(TAG, "stopListening for SIM changes");

                if (mBroadcastReceiver == null) return;

                mSimBcastGenerationNumber.incrementAndGet();
                mContext.unregisterReceiver(mBroadcastReceiver);
                mBroadcastReceiver = null;
!!!11400069.java!!!	hasMobileHotspotProvisionApp() : boolean
                try {
                    if (!mContext.getResources().getString(com.android.internal.R.string.
                            config_mobile_hotspot_provision_app_no_ui).isEmpty()) {
                        Log.d(TAG, "re-evaluate provisioning");
                        return true;
                    }
                } catch (Resources.NotFoundException e) {}
                Log.d(TAG, "no prov-check needed for new SIM");
                return false;
!!!11400197.java!!!	isSimCardLoaded(in state : String) : boolean
                return IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(state);
!!!11400325.java!!!	startProvisionIntent(in tetherType : int) : void
                final Intent startProvIntent = new Intent();
                startProvIntent.putExtra(ConnectivityManager.EXTRA_ADD_TETHER_TYPE, tetherType);
                startProvIntent.putExtra(ConnectivityManager.EXTRA_RUN_PROVISION, true);
                startProvIntent.setComponent(TETHER_SERVICE);
                mContext.startServiceAsUser(startProvIntent, UserHandle.CURRENT);
