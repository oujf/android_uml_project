class VisualStabilityManager
!!!3801349.java!!!	addReorderingAllowedCallback(inout callback : VisualStabilityManager::Callback) : void
        if (mCallbacks.contains(callback)) {
            return;
        }
        mCallbacks.add(callback);
!!!3801477.java!!!	setPanelExpanded(inout expanded : boolean) : void
        mPanelExpanded = expanded;
        updateReorderingAllowed();
!!!3801605.java!!!	setScreenOn(inout screenOn : boolean) : void
        mScreenOn = screenOn;
        updateReorderingAllowed();
!!!3801733.java!!!	setPulsing(inout pulsing : boolean) : void
        if (mPulsing == pulsing) {
            return;
        }
        mPulsing = pulsing;
        updateReorderingAllowed();
!!!3801861.java!!!	updateReorderingAllowed() : void
        boolean reorderingAllowed = (!mScreenOn || !mPanelExpanded) && !mPulsing;
        boolean changed = reorderingAllowed && !mReorderingAllowed;
        mReorderingAllowed = reorderingAllowed;
        if (changed) {
            notifyCallbacks();
        }
!!!3801989.java!!!	notifyCallbacks() : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            Callback callback = mCallbacks.get(i);
            callback.onReorderingAllowed();
        }
        mCallbacks.clear();
!!!3802117.java!!!	isReorderingAllowed() : boolean
        return mReorderingAllowed;
!!!3802245.java!!!	canReorderNotification(inout row : ExpandableNotificationRow) : boolean
        if (mReorderingAllowed) {
            return true;
        }
        if (mAddedChildren.contains(row)) {
            return true;
        }
        if (mLowPriorityReorderingViews.contains(row)) {
            return true;
        }
        if (mAllowedReorderViews.contains(row)
                && !mVisibilityLocationProvider.isInVisibleLocation(row)) {
            return true;
        }
        return false;
!!!3802373.java!!!	setVisibilityLocationProvider(inout visibilityLocationProvider : VisibilityLocationProvider) : void
        mVisibilityLocationProvider = visibilityLocationProvider;
!!!3802501.java!!!	onReorderingFinished() : void
        mAllowedReorderViews.clear();
        mAddedChildren.clear();
        mLowPriorityReorderingViews.clear();
!!!3802629.java!!!	onHeadsUpStateChanged(inout entry : NotificationData::Entry, inout isHeadsUp : boolean) : void
        if (isHeadsUp) {
            // Heads up notifications should in general be allowed to reorder if they are out of
            // view and stay at the current location if they aren't.
            mAllowedReorderViews.add(entry.row);
        }
!!!3802757.java!!!	onLowPriorityUpdated(inout entry : NotificationData::Entry) : void
        mLowPriorityReorderingViews.add(entry.row);
!!!3802885.java!!!	notifyViewAddition(inout view : View) : void
        mAddedChildren.add(view);
