class TwilightAutoMode
!!!11508741.java!!!	TwilightAutoMode()
            mTwilightManager = getLocalService(TwilightManager.class);
!!!11508869.java!!!	updateActivated(inout state : TwilightState) : void
            if (state == null) {
                // If there isn't a valid TwilightState then just keep the current activated
                // state.
                return;
            }

            boolean activate = state.isNight();
            final Calendar lastActivatedTime = mController.getLastActivatedTime();
            if (lastActivatedTime != null) {
                final Calendar now = Calendar.getInstance();
                final Calendar sunrise = state.sunrise();
                final Calendar sunset = state.sunset();

                // Maintain the existing activated state if within the current period.
                if (lastActivatedTime.before(now)
                        && (lastActivatedTime.after(sunrise) ^ lastActivatedTime.after(sunset))) {
                    activate = mController.isActivated();
                }
            }

            if (mIsActivated == null || mIsActivated != activate) {
                mController.setActivated(activate);
            }
!!!11508997.java!!!	onStart() : void
            mTwilightManager.registerListener(this, mHandler);

            // Force an update to initialize state.
            updateActivated(mTwilightManager.getLastTwilightState());
!!!11509125.java!!!	onStop() : void
            mTwilightManager.unregisterListener(this);
!!!11509381.java!!!	onTwilightStateChanged(inout state : TwilightState) : void
            Slog.d(TAG, "onTwilightStateChanged: isNight="
                    + (state == null ? null : state.isNight()));
            updateActivated(state);
