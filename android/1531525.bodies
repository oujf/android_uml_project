class FloatingToolbar
!!!10380549.java!!!	FloatingToolbar(inout context : Context, inout window : Window)
        mContext = applyDefaultTheme(Preconditions.checkNotNull(context));
        mWindow = Preconditions.checkNotNull(window);
        mPopup = new FloatingToolbarPopup(mContext, window.getDecorView());
!!!10380677.java!!!	setMenu(inout menu : Menu) : FloatingToolbar
        mMenu = Preconditions.checkNotNull(menu);
        return this;
!!!10380805.java!!!	setOnMenuItemClickListener(inout menuItemClickListener : MenuItem::OnMenuItemClickListener) : FloatingToolbar
        if (menuItemClickListener != null) {
            mMenuItemClickListener = menuItemClickListener;
        } else {
            mMenuItemClickListener = NO_OP_MENUITEM_CLICK_LISTENER;
        }
        return this;
!!!10380933.java!!!	setContentRect(inout rect : Rect) : FloatingToolbar
        mContentRect.set(Preconditions.checkNotNull(rect));
        return this;
!!!10381061.java!!!	setSuggestedWidth(in suggestedWidth : int) : FloatingToolbar
        // Check if there's been a substantial width spec change.
        int difference = Math.abs(suggestedWidth - mSuggestedWidth);
        mWidthChanged = difference > (mSuggestedWidth * 0.2);

        mSuggestedWidth = suggestedWidth;
        return this;
!!!10381189.java!!!	show() : FloatingToolbar
        registerOrientationHandler();
        doShow();
        return this;
!!!10381317.java!!!	updateLayout() : FloatingToolbar
        if (mPopup.isShowing()) {
            doShow();
        }
        return this;
!!!10381445.java!!!	dismiss() : void
        unregisterOrientationHandler();
        mPopup.dismiss();
!!!10381573.java!!!	hide() : void
        mPopup.hide();
!!!10381701.java!!!	isShowing() : boolean
        return mPopup.isShowing();
!!!10381829.java!!!	isHidden() : boolean
        return mPopup.isHidden();
!!!10381957.java!!!	doShow() : void
        List<MenuItem> menuItems = getVisibleAndEnabledMenuItems(mMenu);
        tidy(menuItems);
        if (!isCurrentlyShowing(menuItems) || mWidthChanged) {
            mPopup.dismiss();
            mPopup.layoutMenuItems(menuItems, mMenuItemClickListener, mSuggestedWidth);
            mShowingMenuItems = menuItems;
        }
        if (!mPopup.isShowing()) {
            mPopup.show(mContentRect);
        } else if (!mPreviousContentRect.equals(mContentRect)) {
            mPopup.updateCoordinates(mContentRect);
        }
        mWidthChanged = false;
        mPreviousContentRect.set(mContentRect);
!!!10382085.java!!!	isCurrentlyShowing(inout menuItems : List<MenuItem>) : boolean
        if (mShowingMenuItems == null || menuItems.size() != mShowingMenuItems.size()) {
            return false;
        }

        final int size = menuItems.size();
        for (int i = 0; i < size; i++) {
            final MenuItem menuItem = menuItems.get(i);
            final MenuItem showingItem = mShowingMenuItems.get(i);
            if (menuItem.getItemId() != showingItem.getItemId()
                    || !TextUtils.equals(menuItem.getTitle(), showingItem.getTitle())
                    || !Objects.equals(menuItem.getIcon(), showingItem.getIcon())
                    || menuItem.getGroupId() != showingItem.getGroupId()) {
                return false;
            }
        }

        return true;
!!!10382213.java!!!	getVisibleAndEnabledMenuItems(inout menu : Menu) : MenuItem
        List<MenuItem> menuItems = new ArrayList<>();
        for (int i = 0; (menu != null) && (i < menu.size()); i++) {
            MenuItem menuItem = menu.getItem(i);
            if (menuItem.isVisible() && menuItem.isEnabled()) {
                Menu subMenu = menuItem.getSubMenu();
                if (subMenu != null) {
                    menuItems.addAll(getVisibleAndEnabledMenuItems(subMenu));
                } else {
                    menuItems.add(menuItem);
                }
            }
        }
        return menuItems;
!!!10382341.java!!!	tidy(inout menuItems : List<MenuItem>) : void
        int assistItemIndex = -1;
        Drawable assistItemDrawable = null;

        final int size = menuItems.size();
        for (int i = 0; i < size; i++) {
            final MenuItem menuItem = menuItems.get(i);

            if (menuItem.getItemId() == android.R.id.textAssist) {
                assistItemIndex = i;
                assistItemDrawable = menuItem.getIcon();
            }

            // Remove icons for all menu items with text.
            if (!TextUtils.isEmpty(menuItem.getTitle())) {
                menuItem.setIcon(null);
            }
        }
        if (assistItemIndex > -1) {
            final MenuItem assistMenuItem = menuItems.remove(assistItemIndex);
            // Ensure the assist menu item preserves its icon.
            assistMenuItem.setIcon(assistItemDrawable);
            // Ensure the assist menu item is always the first item.
            menuItems.add(0, assistMenuItem);
        }
!!!10382469.java!!!	registerOrientationHandler() : void
        unregisterOrientationHandler();
        mWindow.getDecorView().addOnLayoutChangeListener(mOrientationChangeHandler);
!!!10382597.java!!!	unregisterOrientationHandler() : void
        mWindow.getDecorView().removeOnLayoutChangeListener(mOrientationChangeHandler);
!!!10389893.java!!!	createMenuItemButton(inout context : Context, inout menuItem : MenuItem, in iconTextSpacing : int) : View
        final View menuItemButton = LayoutInflater.from(context)
                .inflate(R.layout.floating_popup_menu_button, null);
        if (menuItem != null) {
            updateMenuItemButton(menuItemButton, menuItem, iconTextSpacing);
        }
        return menuItemButton;
!!!10390021.java!!!	updateMenuItemButton(inout menuItemButton : View, inout menuItem : MenuItem, in iconTextSpacing : int) : void
        final TextView buttonText = (TextView) menuItemButton.findViewById(
                R.id.floating_toolbar_menu_item_text);
        if (TextUtils.isEmpty(menuItem.getTitle())) {
            buttonText.setVisibility(View.GONE);
        } else {
            buttonText.setVisibility(View.VISIBLE);
            buttonText.setText(menuItem.getTitle());
        }
        final ImageView buttonIcon = (ImageView) menuItemButton
                .findViewById(R.id.floating_toolbar_menu_item_image);
        if (menuItem.getIcon() == null) {
            buttonIcon.setVisibility(View.GONE);
            if (buttonText != null) {
                buttonText.setPaddingRelative(0, 0, 0, 0);
            }
        } else {
            buttonIcon.setVisibility(View.VISIBLE);
            buttonIcon.setImageDrawable(menuItem.getIcon());
            if (buttonText != null) {
                buttonText.setPaddingRelative(iconTextSpacing, 0, 0, 0);
            }
        }
        final CharSequence contentDescription = menuItem.getContentDescription();
        if (TextUtils.isEmpty(contentDescription)) {
            menuItemButton.setContentDescription(menuItem.getTitle());
        } else {
            menuItemButton.setContentDescription(contentDescription);
        }
!!!10390149.java!!!	createContentContainer(inout context : Context) : ViewGroup
        ViewGroup contentContainer = (ViewGroup) LayoutInflater.from(context)
                .inflate(R.layout.floating_popup_container, null);
        contentContainer.setLayoutParams(new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        contentContainer.setTag(FLOATING_TOOLBAR_TAG);
        return contentContainer;
!!!10390277.java!!!	createPopupWindow(inout content : ViewGroup) : PopupWindow
        ViewGroup popupContentHolder = new LinearLayout(content.getContext());
        PopupWindow popupWindow = new PopupWindow(popupContentHolder);
        // TODO: Use .setLayoutInScreenEnabled(true) instead of .setClippingEnabled(false)
        // unless FLAG_LAYOUT_IN_SCREEN has any unintentional side-effects.
        popupWindow.setClippingEnabled(false);
        popupWindow.setWindowLayoutType(
                WindowManager.LayoutParams.TYPE_APPLICATION_ABOVE_SUB_PANEL);
        popupWindow.setAnimationStyle(0);
        popupWindow.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        content.setLayoutParams(new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        popupContentHolder.addView(content);
        return popupWindow;
!!!10390405.java!!!	createDivider(inout context : Context) : View
        // TODO: Inflate this instead.
        View divider = new View(context);

        int _1dp = (int) TypedValue.applyDimension(
                TypedValue.COMPLEX_UNIT_DIP, 1, context.getResources().getDisplayMetrics());
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                _1dp, ViewGroup.LayoutParams.MATCH_PARENT);
        params.setMarginsRelative(0, _1dp * 10, 0, _1dp * 10);
        divider.setLayoutParams(params);

        TypedArray a = context.obtainStyledAttributes(
                new TypedValue().data, new int[] { R.attr.floatingToolbarDividerColor });
        divider.setBackgroundColor(a.getColor(0, 0));
        a.recycle();

        divider.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
        divider.setEnabled(false);
        divider.setFocusable(false);
        divider.setContentDescription(null);

        return divider;
!!!10390533.java!!!	createEnterAnimation(inout view : View) : AnimatorSet
        AnimatorSet animation = new AnimatorSet();
        animation.playTogether(
                ObjectAnimator.ofFloat(view, View.ALPHA, 0, 1).setDuration(150));
        return animation;
!!!10390661.java!!!	createExitAnimation(inout view : View, in startDelay : int, inout listener : Animator::AnimatorListener) : AnimatorSet
        AnimatorSet animation =  new AnimatorSet();
        animation.playTogether(
                ObjectAnimator.ofFloat(view, View.ALPHA, 1, 0).setDuration(100));
        animation.setStartDelay(startDelay);
        animation.addListener(listener);
        return animation;
!!!10390789.java!!!	applyDefaultTheme(inout originalContext : Context) : Context
        TypedArray a = originalContext.obtainStyledAttributes(new int[]{R.attr.isLightTheme});
        boolean isLightTheme = a.getBoolean(0, true);
        int themeId = isLightTheme ? R.style.Theme_Material_Light : R.style.Theme_Material;
        a.recycle();
        return new ContextThemeWrapper(originalContext, themeId);
