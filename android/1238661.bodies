class NetworkRequest
!!!7188997.java!!!	NetworkRequest(inout nc : NetworkCapabilities, in legacyType : int, in rId : int, inout type : NetworkRequest::Type)
        if (nc == null) {
            throw new NullPointerException();
        }
        requestId = rId;
        networkCapabilities = nc;
        this.legacyType = legacyType;
        this.type = type;
!!!7189125.java!!!	NetworkRequest(inout that : NetworkRequest)
        networkCapabilities = new NetworkCapabilities(that.networkCapabilities);
        requestId = that.requestId;
        this.legacyType = that.legacyType;
        this.type = that.type;
!!!7190917.java!!!	describeContents() : int
        return 0;
!!!7191045.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeParcelable(networkCapabilities, flags);
        dest.writeInt(legacyType);
        dest.writeInt(requestId);
        dest.writeString(type.name());
!!!7191173.java!!!	isListen() : boolean
        return type == Type.LISTEN;
!!!7191301.java!!!	isRequest() : boolean
        return isForegroundRequest() || isBackgroundRequest();
!!!7191429.java!!!	isForegroundRequest() : boolean
        return type == Type.TRACK_DEFAULT || type == Type.REQUEST;
!!!7191557.java!!!	isBackgroundRequest() : boolean
        return type == Type.BACKGROUND_REQUEST;
!!!7191685.java!!!	toString() : String
        return "NetworkRequest [ " + type + " id=" + requestId +
                (legacyType != ConnectivityManager.TYPE_NONE ? ", legacyType=" + legacyType : "") +
                ", " + networkCapabilities.toString() + " ]";
!!!7191813.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof NetworkRequest == false) return false;
        NetworkRequest that = (NetworkRequest)obj;
        return (that.legacyType == this.legacyType &&
                that.requestId == this.requestId &&
                that.type == this.type &&
                Objects.equals(that.networkCapabilities, this.networkCapabilities));
!!!7191941.java!!!	hashCode() : int
        return Objects.hash(requestId, legacyType, networkCapabilities, type);
