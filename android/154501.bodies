class AudioSessionCollection
!!!308613.cpp!!!	addSession(in session : audio_session_t, in audioSession : sp<AudioSession>, inout provider : AudioSessionInfoProvider) : status_t
    ssize_t index = indexOfKey(session);

    if (index >= 0) {
        ALOGW("addSession() session %d already in", session);
        return ALREADY_EXISTS;
    }
    audioSession->setInfoProvider(provider);
    add(session, audioSession);
    ALOGV("addSession() session %d  client %d source %d",
            session, audioSession->uid(), audioSession->inputSource());
    return NO_ERROR;
!!!308741.cpp!!!	removeSession(in session : audio_session_t) : status_t
    ssize_t index = indexOfKey(session);

    if (index < 0) {
        ALOGW("removeSession() session %d not in", session);
        return ALREADY_EXISTS;
    }
    ALOGV("removeSession() session %d", session);
    valueAt(index)->setInfoProvider(NULL);
    removeItemsAt(index);
    return NO_ERROR;
!!!308869.cpp!!!	getOpenCount() : uint32_t
    uint32_t openCount = 0;
    for (size_t i = 0; i < size(); i++) {
        openCount += valueAt(i)->openCount();
    }
    return openCount;
!!!308997.cpp!!!	getActiveSessions() : AudioSessionCollection
    AudioSessionCollection activeSessions;
    for (size_t i = 0; i < size(); i++) {
        if (valueAt(i)->activeCount() != 0) {
            activeSessions.add(valueAt(i)->session(), valueAt(i));
        }
    }
    return activeSessions;
!!!309125.cpp!!!	getActiveSessionCount() : size_t
    size_t activeCount = 0;
    for (size_t i = 0; i < size(); i++) {
        if (valueAt(i)->activeCount() != 0) {
            activeCount++;
        }
    }
    return activeCount;
!!!309253.cpp!!!	hasActiveSession() : bool
    return getActiveSessionCount() != 0;
!!!309381.cpp!!!	isSourceActive(in source : audio_source_t) : bool
    for (size_t i = 0; i < size(); i++) {
        const sp<AudioSession>  audioSession = valueAt(i);
        // AUDIO_SOURCE_HOTWORD is equivalent to AUDIO_SOURCE_VOICE_RECOGNITION only if it
        // corresponds to an active capture triggered by a hardware hotword recognition
        if (audioSession->activeCount() > 0 &&
                ((audioSession->inputSource() == source) ||
                ((source == AUDIO_SOURCE_VOICE_RECOGNITION) &&
                 (audioSession->inputSource() == AUDIO_SOURCE_HOTWORD) &&
                 audioSession->isSoundTrigger()))) {
            return true;
        }
    }
    return false;
!!!309509.cpp!!!	getHighestPrioritySource(in activeOnly : bool) : audio_source_t
    audio_source_t source = AUDIO_SOURCE_DEFAULT;
    int32_t priority = -1;

    for (size_t i = 0; i < size(); i++) {
        const sp<AudioSession>  audioSession = valueAt(i);
        if (activeOnly && audioSession->activeCount() == 0) {
            continue;
        }
        int32_t curPriority = source_priority(audioSession->inputSource());
        if (curPriority > priority) {
            priority = curPriority;
            source = audioSession->inputSource();
        }
    }
    return source;
!!!309637.cpp!!!	onSessionInfoUpdate() : void
    for (size_t i = 0; i < size(); i++) {
        valueAt(i)->onSessionInfoUpdate();
    }
!!!309765.cpp!!!	dump(in fd : int, in spaces : int) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    snprintf(buffer, SIZE, "%*sAudio Sessions:\n", spaces, "");
    write(fd, buffer, strlen(buffer));
    for (size_t i = 0; i < size(); i++) {
        valueAt(i)->dump(fd, spaces + 2, i);
    }
    return NO_ERROR;
