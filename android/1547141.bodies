class ActionMenu
!!!10186117.java!!!	ActionMenu(inout context : Context)
        mContext = context;
        mItems = new ArrayList<ActionMenuItem>();
!!!10186245.java!!!	getContext() : Context
        return mContext;
!!!10186373.java!!!	add(inout title : CharSequence) : MenuItem
        return add(0, 0, 0, title);
!!!10186501.java!!!	add(in titleRes : int) : MenuItem
        return add(0, 0, 0, titleRes);
!!!10186629.java!!!	add(in groupId : int, in itemId : int, in order : int, in titleRes : int) : MenuItem
        return add(groupId, itemId, order, mContext.getResources().getString(titleRes));
!!!10186757.java!!!	add(in groupId : int, in itemId : int, in order : int, inout title : CharSequence) : MenuItem
        ActionMenuItem item = new ActionMenuItem(getContext(),
                groupId, itemId, 0, order, title);
        mItems.add(order, item);
        return item;
!!!10186885.java!!!	addIntentOptions(in groupId : int, in itemId : int, in order : int, inout caller : ComponentName, inout specifics : Intent [[]], inout intent : Intent, in flags : int, inout outSpecificItems : MenuItem [[]]) : int
        PackageManager pm = mContext.getPackageManager();
        final List<ResolveInfo> lri =
                pm.queryIntentActivityOptions(caller, specifics, intent, 0);
        final int N = lri != null ? lri.size() : 0;

        if ((flags & FLAG_APPEND_TO_GROUP) == 0) {
            removeGroup(groupId);
        }

        for (int i=0; i<N; i++) {
            final ResolveInfo ri = lri.get(i);
            Intent rintent = new Intent(
                ri.specificIndex < 0 ? intent : specifics[ri.specificIndex]);
            rintent.setComponent(new ComponentName(
                    ri.activityInfo.applicationInfo.packageName,
                    ri.activityInfo.name));
            final MenuItem item = add(groupId, itemId, order, ri.loadLabel(pm))
                    .setIcon(ri.loadIcon(pm))
                    .setIntent(rintent);
            if (outSpecificItems != null && ri.specificIndex >= 0) {
                outSpecificItems[ri.specificIndex] = item;
            }
        }

        return N;
!!!10187013.java!!!	addSubMenu(inout title : CharSequence) : SubMenu
        // TODO Implement submenus
        return null;
!!!10187141.java!!!	addSubMenu(in titleRes : int) : SubMenu
        // TODO Implement submenus
        return null;
!!!10187269.java!!!	addSubMenu(in groupId : int, in itemId : int, in order : int, inout title : CharSequence) : SubMenu
        // TODO Implement submenus
        return null;
!!!10187397.java!!!	addSubMenu(in groupId : int, in itemId : int, in order : int, in titleRes : int) : SubMenu
        // TODO Implement submenus
        return null;
!!!10187525.java!!!	clear() : void
        mItems.clear();
!!!10187781.java!!!	findItemIndex(in id : int) : int
        final ArrayList<ActionMenuItem> items = mItems;
        final int itemCount = items.size();
        for (int i = 0; i < itemCount; i++) {
            if (items.get(i).getItemId() == id) {
                return i;
            }
        }
        
        return -1;
!!!10187909.java!!!	findItem(in id : int) : MenuItem
        return mItems.get(findItemIndex(id));
!!!10188037.java!!!	getItem(in index : int) : MenuItem
        return mItems.get(index);
!!!10188165.java!!!	hasVisibleItems() : boolean
        final ArrayList<ActionMenuItem> items = mItems;
        final int itemCount = items.size();
        
        for (int i = 0; i < itemCount; i++) {
            if (items.get(i).isVisible()) {
                return true;
            }
        }
        
        return false;
!!!10188293.java!!!	findItemWithShortcut(in keyCode : int, inout event : KeyEvent) : ActionMenuItem
        // TODO Make this smarter.
        final boolean qwerty = mIsQwerty;
        final ArrayList<ActionMenuItem> items = mItems;
        final int itemCount = items.size();
        final int modifierState = event.getModifiers();
        for (int i = 0; i < itemCount; i++) {
            ActionMenuItem item = items.get(i);
            final char shortcut = qwerty ? item.getAlphabeticShortcut() :
                    item.getNumericShortcut();
            final int shortcutModifiers =
                    qwerty ? item.getAlphabeticModifiers() : item.getNumericModifiers();
            final boolean is_modifiers_exact_match = (modifierState & SUPPORTED_MODIFIERS_MASK)
                    == (shortcutModifiers & SUPPORTED_MODIFIERS_MASK);
            if ((keyCode == shortcut) && is_modifiers_exact_match) {
                return item;
            }
        }
        return null;
!!!10188421.java!!!	isShortcutKey(in keyCode : int, inout event : KeyEvent) : boolean
        return findItemWithShortcut(keyCode, event) != null;
!!!10188549.java!!!	performIdentifierAction(in id : int, in flags : int) : boolean
        final int index = findItemIndex(id);
        if (index < 0) {
            return false;
        }

        return mItems.get(index).invoke();
!!!10188677.java!!!	performShortcut(in keyCode : int, inout event : KeyEvent, in flags : int) : boolean
        ActionMenuItem item = findItemWithShortcut(keyCode, event);
        if (item == null) {
            return false;
        }
        
        return item.invoke();
!!!10188805.java!!!	removeGroup(in groupId : int) : void
        final ArrayList<ActionMenuItem> items = mItems;
        int itemCount = items.size();
        int i = 0;
        while (i < itemCount) {
            if (items.get(i).getGroupId() == groupId) {
                items.remove(i);
                itemCount--;
            } else {
                i++;
            }
        }
!!!10188933.java!!!	removeItem(in id : int) : void
        mItems.remove(findItemIndex(id));
!!!10189061.java!!!	setGroupCheckable(in group : int, inout checkable : boolean, inout exclusive : boolean) : void
        final ArrayList<ActionMenuItem> items = mItems;
        final int itemCount = items.size();
        
        for (int i = 0; i < itemCount; i++) {
            ActionMenuItem item = items.get(i);
            if (item.getGroupId() == group) {
                item.setCheckable(checkable);
                item.setExclusiveCheckable(exclusive);
            }
        }
!!!10189189.java!!!	setGroupEnabled(in group : int, inout enabled : boolean) : void
        final ArrayList<ActionMenuItem> items = mItems;
        final int itemCount = items.size();
        
        for (int i = 0; i < itemCount; i++) {
            ActionMenuItem item = items.get(i);
            if (item.getGroupId() == group) {
                item.setEnabled(enabled);
            }
        }
!!!10189317.java!!!	setGroupVisible(in group : int, inout visible : boolean) : void
        final ArrayList<ActionMenuItem> items = mItems;
        final int itemCount = items.size();
        
        for (int i = 0; i < itemCount; i++) {
            ActionMenuItem item = items.get(i);
            if (item.getGroupId() == group) {
                item.setVisible(visible);
            }
        }
!!!10189445.java!!!	setQwertyMode(inout isQwerty : boolean) : void
        mIsQwerty = isQwerty;
!!!10189573.java!!!	size() : int
        return mItems.size();
