class SearchAutoComplete
!!!9613829.java!!!	SearchAutoComplete(inout context : Context)
            super(context);
            mThreshold = getThreshold();
!!!9613957.java!!!	SearchAutoComplete(inout context : Context, inout attrs : AttributeSet)
            super(context, attrs);
            mThreshold = getThreshold();
!!!9614085.java!!!	SearchAutoComplete(inout context : Context, inout attrs : AttributeSet, in defStyleAttrs : int)
            super(context, attrs, defStyleAttrs);
            mThreshold = getThreshold();
!!!9614213.java!!!	SearchAutoComplete(inout context : Context, inout attrs : AttributeSet, in defStyleAttrs : int, in defStyleRes : int)
            super(context, attrs, defStyleAttrs, defStyleRes);
            mThreshold = getThreshold();
!!!9614341.java!!!	onFinishInflate() : void
            super.onFinishInflate();
            DisplayMetrics metrics = getResources().getDisplayMetrics();
            setMinWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                    getSearchViewTextMinWidthDp(), metrics));
!!!9614469.java!!!	setSearchView(inout searchView : SearchView) : void
            mSearchView = searchView;
!!!9614597.java!!!	setThreshold(in threshold : int) : void
            super.setThreshold(threshold);
            mThreshold = threshold;
!!!9614725.java!!!	isEmpty() : boolean
            return TextUtils.getTrimmedLength(getText()) == 0;
!!!9615109.java!!!	onWindowFocusChanged(inout hasWindowFocus : boolean) : void
            super.onWindowFocusChanged(hasWindowFocus);

            if (hasWindowFocus && mSearchView.hasFocus() && getVisibility() == VISIBLE) {
                // Since InputMethodManager#onPostWindowFocus() will be called after this callback,
                // it is a bit too early to call InputMethodManager#showSoftInput() here. We still
                // need to wait until the system calls back onCreateInputConnection() to call
                // InputMethodManager#showSoftInput().
                mHasPendingShowSoftInputRequest = true;

                // If in landscape mode, then make sure that the ime is in front of the dropdown.
                if (isLandscapeMode(getContext())) {
                    ensureImeVisible(true);
                }
            }
!!!9615237.java!!!	onFocusChanged(inout focused : boolean, in direction : int, inout previouslyFocusedRect : Rect) : void
            super.onFocusChanged(focused, direction, previouslyFocusedRect);
            mSearchView.onTextFocusChanged();
!!!9615365.java!!!	enoughToFilter() : boolean
            return mThreshold <= 0 || super.enoughToFilter();
!!!9615493.java!!!	onKeyPreIme(in keyCode : int, inout event : KeyEvent) : boolean
            if (keyCode == KeyEvent.KEYCODE_BACK) {
                // special case for the back key, we do not even try to send it
                // to the drop down list but instead, consume it immediately
                if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {
                    KeyEvent.DispatcherState state = getKeyDispatcherState();
                    if (state != null) {
                        state.startTracking(event, this);
                    }
                    return true;
                } else if (event.getAction() == KeyEvent.ACTION_UP) {
                    KeyEvent.DispatcherState state = getKeyDispatcherState();
                    if (state != null) {
                        state.handleUpEvent(event);
                    }
                    if (event.isTracking() && !event.isCanceled()) {
                        mSearchView.clearFocus();
                        setImeVisibility(false);
                        return true;
                    }
                }
            }
            return super.onKeyPreIme(keyCode, event);
!!!9615621.java!!!	getSearchViewTextMinWidthDp() : int
            final Configuration configuration = getResources().getConfiguration();
            final int width = configuration.screenWidthDp;
            final int height = configuration.screenHeightDp;
            final int orientation = configuration.orientation;
            if (width >= 960 && height >= 720
                    && orientation == Configuration.ORIENTATION_LANDSCAPE) {
                return 256;
            } else if (width >= 600 || (width >= 640 && height >= 480)) {
                return 192;
            };
            return 160;
!!!9615749.java!!!	onCreateInputConnection(inout editorInfo : EditorInfo) : InputConnection
            final InputConnection ic = super.onCreateInputConnection(editorInfo);
            if (mHasPendingShowSoftInputRequest) {
                removeCallbacks(mRunShowSoftInputIfNecessary);
                post(mRunShowSoftInputIfNecessary);
            }
            return ic;
!!!9615877.java!!!	showSoftInputIfNecessary() : void
            if (mHasPendingShowSoftInputRequest) {
                final InputMethodManager imm =
                        getContext().getSystemService(InputMethodManager.class);
                imm.showSoftInput(this, 0);
                mHasPendingShowSoftInputRequest = false;
            }
!!!9616005.java!!!	setImeVisibility(in visible : boolean) : void
            final InputMethodManager imm = getContext().getSystemService(InputMethodManager.class);
            if (!visible) {
                mHasPendingShowSoftInputRequest = false;
                removeCallbacks(mRunShowSoftInputIfNecessary);
                imm.hideSoftInputFromWindow(getWindowToken(), 0);
                return;
            }

            if (imm.isActive(this)) {
                // This means that SearchAutoComplete is already connected to the IME.
                // InputMethodManager#showSoftInput() is guaranteed to pass client-side focus check.
                mHasPendingShowSoftInputRequest = false;
                removeCallbacks(mRunShowSoftInputIfNecessary);
                imm.showSoftInput(this, 0);
                return;
            }

            // Otherwise, InputMethodManager#showSoftInput() should be deferred after
            // onCreateInputConnection().
            mHasPendingShowSoftInputRequest = true;
