class MediaStore
!!!7907461.java!!!	getMediaScannerUri() : Uri
        return Uri.parse(CONTENT_AUTHORITY_SLASH + "none/media_scanner");
!!!7907589.java!!!	getVersion(inout context : Context) : String
        Cursor c = context.getContentResolver().query(
                Uri.parse(CONTENT_AUTHORITY_SLASH + "none/version"),
                null, null, null, null);
        if (c != null) {
            try {
                if (c.moveToFirst()) {
                    return c.getString(0);
                }
            } finally {
                c.close();
            }
        }
        return null;
!!!7907717.java!!!	getDocumentUri(inout context : Context, inout mediaUri : Uri) : Uri

        try {
            final ContentResolver resolver = context.getContentResolver();

            final String path = getFilePath(resolver, mediaUri);
            final List<UriPermission> uriPermissions = resolver.getPersistedUriPermissions();

            return getDocumentUri(resolver, path, uriPermissions);
        } catch (RemoteException e) {
            throw e.rethrowAsRuntimeException();
        }
!!!7907845.java!!!	getFilePath(inout resolver : ContentResolver, inout mediaUri : Uri) : String

        try (ContentProviderClient client =
                     resolver.acquireUnstableContentProviderClient(AUTHORITY)) {
            final Cursor c = client.query(
                    mediaUri,
                    new String[]{ MediaColumns.DATA },
                    null, /* selection */
                    null, /* selectionArg */
                    null /* sortOrder */);

            final String path;
            try {
                if (c.getCount() == 0) {
                    throw new IllegalStateException("Not found media file under URI: " + mediaUri);
                }

                if (!c.moveToFirst()) {
                    throw new IllegalStateException("Failed to move cursor to the first item.");
                }

                path = c.getString(0);
            } finally {
                IoUtils.closeQuietly(c);
            }

            return path;
        }
!!!7907973.java!!!	getDocumentUri(inout resolver : ContentResolver, in path : String, inout uriPermissions : List<UriPermission>) : Uri

        try (ContentProviderClient client = resolver.acquireUnstableContentProviderClient(
                DocumentsContract.EXTERNAL_STORAGE_PROVIDER_AUTHORITY)) {
            final Bundle in = new Bundle();
            in.putParcelableList(
                    DocumentsContract.EXTERNAL_STORAGE_PROVIDER_AUTHORITY + ".extra.uriPermissions",
                    uriPermissions);
            final Bundle out = client.call("getDocumentId", path, in);
            return out.getParcelable(DocumentsContract.EXTRA_URI);
        }
