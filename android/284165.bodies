class TrackPlayerBase
!!!763141.cpp!!!	TrackPlayerBase()
    ALOGD("TrackPlayerBase::TrackPlayerBase()");
!!!763269.cpp!!!	~TrackPlayerBase()
    ALOGD("TrackPlayerBase::~TrackPlayerBase()");
    doDestroy();
!!!763397.cpp!!!	init(inout pat : AudioTrack, in playerType : player_type_t, in usage : audio_usage_t) : void
    PlayerBase::init(playerType, usage);
    mAudioTrack = pat;
!!!763525.cpp!!!	destroy() : void
    doDestroy();
    baseDestroy();
!!!763653.cpp!!!	applyVolumeShaper(in configuration : sp<VolumeShaper::Configuration>, in operation : sp<VolumeShaper::Operation>) : void
    if (mAudioTrack != 0) {
        ALOGD("TrackPlayerBase::applyVolumeShaper() from IPlayer");
        VolumeShaper::Status status = mAudioTrack->applyVolumeShaper(configuration, operation);
        if (status < 0) { // a non-negative value is the volume shaper id.
            ALOGE("TrackPlayerBase::applyVolumeShaper() failed with status %d", status);
        }
    } else {
        ALOGD("TrackPlayerBase::applyVolumeShaper()"
                " no AudioTrack for volume control from IPlayer");
    }
!!!763781.cpp!!!	setPlayerVolume(in vl : float, in vr : float) : void
    {
        Mutex::Autolock _l(mSettingsLock);
        mPlayerVolumeL = vl;
        mPlayerVolumeR = vr;
    }
    doSetVolume();
!!!763909.cpp!!!	playerStart() : status_t
    status_t status = NO_INIT;
    if (mAudioTrack != 0) {
        status = mAudioTrack->start();
    }
    return status;
!!!764037.cpp!!!	playerPause() : status_t
    status_t status = NO_INIT;
    if (mAudioTrack != 0) {
        mAudioTrack->pause();
        status = NO_ERROR;
    }
    return status;
!!!764165.cpp!!!	playerStop() : status_t
    status_t status = NO_INIT;
    if (mAudioTrack != 0) {
        mAudioTrack->stop();
        status = NO_ERROR;
    }
    return status;
!!!764293.cpp!!!	playerSetVolume() : status_t
    return doSetVolume();
!!!764421.cpp!!!	doDestroy() : void
    if (mAudioTrack != 0) {
        mAudioTrack->stop();
        // Note that there may still be another reference in post-unlock phase of SetPlayState
        mAudioTrack.clear();
    }
!!!764549.cpp!!!	doSetVolume() : status_t
    status_t status = NO_INIT;
    if (mAudioTrack != 0) {
        float tl = mPlayerVolumeL * mPanMultiplierL * mVolumeMultiplierL;
        float tr = mPlayerVolumeR * mPanMultiplierR * mVolumeMultiplierR;
        mAudioTrack->setVolume(tl, tr);
        status = NO_ERROR;
    }
    return status;
