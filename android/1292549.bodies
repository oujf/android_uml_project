class PreferenceGroup
!!!7751045.java!!!	PreferenceGroup(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        mPreferenceList = new ArrayList<Preference>();

        final TypedArray a = context.obtainStyledAttributes(
                attrs, com.android.internal.R.styleable.PreferenceGroup, defStyleAttr, defStyleRes);
        mOrderingAsAdded = a.getBoolean(com.android.internal.R.styleable.PreferenceGroup_orderingFromXml,
                mOrderingAsAdded);
        a.recycle();
!!!7751173.java!!!	PreferenceGroup(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!7751301.java!!!	PreferenceGroup(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!7751429.java!!!	setOrderingAsAdded(inout orderingAsAdded : boolean) : void
        mOrderingAsAdded = orderingAsAdded;
!!!7751557.java!!!	isOrderingAsAdded() : boolean
        return mOrderingAsAdded;
!!!7751685.java!!!	addItemFromInflater(inout preference : Preference) : void
        addPreference(preference);
!!!7751813.java!!!	getPreferenceCount() : int
        return mPreferenceList.size();
!!!7751941.java!!!	getPreference(in index : int) : Preference
        return mPreferenceList.get(index);
!!!7752069.java!!!	addPreference(inout preference : Preference) : boolean
        if (mPreferenceList.contains(preference)) {
            // Exists
            return true;
        }

        if (preference.getOrder() == Preference.DEFAULT_ORDER) {
            if (mOrderingAsAdded) {
                preference.setOrder(mCurrentPreferenceOrder++);
            }

            if (preference instanceof PreferenceGroup) {
                // TODO: fix (method is called tail recursively when inflating,
                // so we won't end up properly passing this flag down to children
                ((PreferenceGroup)preference).setOrderingAsAdded(mOrderingAsAdded);
            }
        }

        if (!onPrepareAddPreference(preference)) {
            return false;
        }

        synchronized(this) {
            int insertionIndex = Collections.binarySearch(mPreferenceList, preference);
            if (insertionIndex < 0) {
                insertionIndex = insertionIndex * -1 - 1;
            }
            mPreferenceList.add(insertionIndex, preference);
        }

        preference.onAttachedToHierarchy(getPreferenceManager());
        preference.assignParent(this);

        if (mAttachedToActivity) {
            preference.onAttachedToActivity();
        }

        notifyHierarchyChanged();

        return true;
!!!7752197.java!!!	removePreference(inout preference : Preference) : boolean
        final boolean returnValue = removePreferenceInt(preference);
        notifyHierarchyChanged();
        return returnValue;
!!!7752325.java!!!	removePreferenceInt(inout preference : Preference) : boolean
        synchronized(this) {
            preference.onPrepareForRemoval();
            if (preference.getParent() == this) {
                preference.assignParent(null);
            }
            return mPreferenceList.remove(preference);
        }
!!!7752453.java!!!	removeAll() : void
        synchronized(this) {
            List<Preference> preferenceList = mPreferenceList;
            for (int i = preferenceList.size() - 1; i >= 0; i--) {
                removePreferenceInt(preferenceList.get(0));
            }
        }
        notifyHierarchyChanged();
!!!7752581.java!!!	onPrepareAddPreference(inout preference : Preference) : boolean
        preference.onParentChanged(this, shouldDisableDependents());
        return true;
!!!7752709.java!!!	findPreference(inout key : CharSequence) : Preference
        if (TextUtils.equals(getKey(), key)) {
            return this;
        }
        final int preferenceCount = getPreferenceCount();
        for (int i = 0; i < preferenceCount; i++) {
            final Preference preference = getPreference(i);
            final String curKey = preference.getKey();

            if (curKey != null && curKey.equals(key)) {
                return preference;
            }

            if (preference instanceof PreferenceGroup) {
                final Preference returnedPreference = ((PreferenceGroup)preference)
                        .findPreference(key);
                if (returnedPreference != null) {
                    return returnedPreference;
                }
            }
        }

        return null;
!!!7752837.java!!!	isOnSameScreenAsChildren() : boolean
        return true;
!!!7752965.java!!!	onAttachedToActivity() : void
        super.onAttachedToActivity();

        // Mark as attached so if a preference is later added to this group, we
        // can tell it we are already attached
        mAttachedToActivity = true;

        // Dispatch to all contained preferences
        final int preferenceCount = getPreferenceCount();
        for (int i = 0; i < preferenceCount; i++) {
            getPreference(i).onAttachedToActivity();
        }
!!!7753093.java!!!	onPrepareForRemoval() : void
        super.onPrepareForRemoval();

        // We won't be attached to the activity anymore
        mAttachedToActivity = false;
!!!7753221.java!!!	notifyDependencyChange(inout disableDependents : boolean) : void
        super.notifyDependencyChange(disableDependents);

        // Child preferences have an implicit dependency on their containing
        // group. Dispatch dependency change to all contained preferences.
        final int preferenceCount = getPreferenceCount();
        for (int i = 0; i < preferenceCount; i++) {
            getPreference(i).onParentChanged(this, disableDependents);
        }
!!!7753349.java!!!	sortPreferences() : void
        synchronized (this) {
            Collections.sort(mPreferenceList);
        }
!!!7753477.java!!!	dispatchSaveInstanceState(inout container : Bundle) : void
        super.dispatchSaveInstanceState(container);

        // Dispatch to all contained preferences
        final int preferenceCount = getPreferenceCount();
        for (int i = 0; i < preferenceCount; i++) {
            getPreference(i).dispatchSaveInstanceState(container);
        }
!!!7753605.java!!!	dispatchRestoreInstanceState(inout container : Bundle) : void
        super.dispatchRestoreInstanceState(container);

        // Dispatch to all contained preferences
        final int preferenceCount = getPreferenceCount();
        for (int i = 0; i < preferenceCount; i++) {
            getPreference(i).dispatchRestoreInstanceState(container);
        }
