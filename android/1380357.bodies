class LinkMovementMethod
!!!8282373.java!!!	canSelectArbitrarily() : boolean
        return true;
!!!8282501.java!!!	handleMovementKey(inout widget : TextView, inout buffer : Spannable, in keyCode : int, in movementMetaState : int, inout event : KeyEvent) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_DPAD_CENTER:
            case KeyEvent.KEYCODE_ENTER:
                if (KeyEvent.metaStateHasNoModifiers(movementMetaState)) {
                    if (event.getAction() == KeyEvent.ACTION_DOWN &&
                            event.getRepeatCount() == 0 && action(CLICK, widget, buffer)) {
                        return true;
                    }
                }
                break;
        }
        return super.handleMovementKey(widget, buffer, keyCode, movementMetaState, event);
!!!8282629.java!!!	up(inout widget : TextView, inout buffer : Spannable) : boolean
        if (action(UP, widget, buffer)) {
            return true;
        }

        return super.up(widget, buffer);
!!!8282757.java!!!	down(inout widget : TextView, inout buffer : Spannable) : boolean
        if (action(DOWN, widget, buffer)) {
            return true;
        }

        return super.down(widget, buffer);
!!!8282885.java!!!	left(inout widget : TextView, inout buffer : Spannable) : boolean
        if (action(UP, widget, buffer)) {
            return true;
        }

        return super.left(widget, buffer);
!!!8283013.java!!!	right(inout widget : TextView, inout buffer : Spannable) : boolean
        if (action(DOWN, widget, buffer)) {
            return true;
        }

        return super.right(widget, buffer);
!!!8283141.java!!!	action(in what : int, inout widget : TextView, inout buffer : Spannable) : boolean
        Layout layout = widget.getLayout();

        int padding = widget.getTotalPaddingTop() +
                      widget.getTotalPaddingBottom();
        int areaTop = widget.getScrollY();
        int areaBot = areaTop + widget.getHeight() - padding;

        int lineTop = layout.getLineForVertical(areaTop);
        int lineBot = layout.getLineForVertical(areaBot);

        int first = layout.getLineStart(lineTop);
        int last = layout.getLineEnd(lineBot);

        ClickableSpan[] candidates = buffer.getSpans(first, last, ClickableSpan.class);

        int a = Selection.getSelectionStart(buffer);
        int b = Selection.getSelectionEnd(buffer);

        int selStart = Math.min(a, b);
        int selEnd = Math.max(a, b);

        if (selStart < 0) {
            if (buffer.getSpanStart(FROM_BELOW) >= 0) {
                selStart = selEnd = buffer.length();
            }
        }

        if (selStart > last)
            selStart = selEnd = Integer.MAX_VALUE;
        if (selEnd < first)
            selStart = selEnd = -1;

        switch (what) {
        case CLICK:
            if (selStart == selEnd) {
                return false;
            }

            ClickableSpan[] link = buffer.getSpans(selStart, selEnd, ClickableSpan.class);

            if (link.length != 1)
                return false;

            link[0].onClick(widget);
            break;

        case UP:
            int bestStart, bestEnd;

            bestStart = -1;
            bestEnd = -1;

            for (int i = 0; i < candidates.length; i++) {
                int end = buffer.getSpanEnd(candidates[i]);

                if (end < selEnd || selStart == selEnd) {
                    if (end > bestEnd) {
                        bestStart = buffer.getSpanStart(candidates[i]);
                        bestEnd = end;
                    }
                }
            }

            if (bestStart >= 0) {
                Selection.setSelection(buffer, bestEnd, bestStart);
                return true;
            }

            break;

        case DOWN:
            bestStart = Integer.MAX_VALUE;
            bestEnd = Integer.MAX_VALUE;

            for (int i = 0; i < candidates.length; i++) {
                int start = buffer.getSpanStart(candidates[i]);

                if (start > selStart || selStart == selEnd) {
                    if (start < bestStart) {
                        bestStart = start;
                        bestEnd = buffer.getSpanEnd(candidates[i]);
                    }
                }
            }

            if (bestEnd < Integer.MAX_VALUE) {
                Selection.setSelection(buffer, bestStart, bestEnd);
                return true;
            }

            break;
        }

        return false;
!!!8283269.java!!!	onTouchEvent(inout widget : TextView, inout buffer : Spannable, inout event : MotionEvent) : boolean
        int action = event.getAction();

        if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_DOWN) {
            int x = (int) event.getX();
            int y = (int) event.getY();

            x -= widget.getTotalPaddingLeft();
            y -= widget.getTotalPaddingTop();

            x += widget.getScrollX();
            y += widget.getScrollY();

            Layout layout = widget.getLayout();
            int line = layout.getLineForVertical(y);
            int off = layout.getOffsetForHorizontal(line, x);

            ClickableSpan[] links = buffer.getSpans(off, off, ClickableSpan.class);

            if (links.length != 0) {
                if (action == MotionEvent.ACTION_UP) {
                    links[0].onClick(widget);
                } else if (action == MotionEvent.ACTION_DOWN) {
                    Selection.setSelection(buffer,
                        buffer.getSpanStart(links[0]),
                        buffer.getSpanEnd(links[0]));
                }
                return true;
            } else {
                Selection.removeSelection(buffer);
            }
        }

        return super.onTouchEvent(widget, buffer, event);
!!!8283397.java!!!	initialize(inout widget : TextView, inout text : Spannable) : void
        Selection.removeSelection(text);
        text.removeSpan(FROM_BELOW);
!!!8283525.java!!!	onTakeFocus(inout view : TextView, inout text : Spannable, in dir : int) : void
        Selection.removeSelection(text);

        if ((dir & View.FOCUS_BACKWARD) != 0) {
            text.setSpan(FROM_BELOW, 0, 0, Spannable.SPAN_POINT_POINT);
        } else {
            text.removeSpan(FROM_BELOW);
        }
!!!8283653.java!!!	getInstance() : MovementMethod
        if (sInstance == null)
            sInstance = new LinkMovementMethod();

        return sInstance;
