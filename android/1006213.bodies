class PropertyValuesHolder
!!!4944261.java!!!	PropertyValuesHolder(in propertyName : String)
        mPropertyName = propertyName;
!!!4944389.java!!!	PropertyValuesHolder(inout property : Property)
        mProperty = property;
        if (property != null) {
            mPropertyName = property.getName();
        }
!!!4944517.java!!!	ofInt(in propertyName : String, inout  : int...values) : PropertyValuesHolder
        return new IntPropertyValuesHolder(propertyName, values);
!!!4944645.java!!!	ofInt(inout property : Property, inout  : int...values) : PropertyValuesHolder
        return new IntPropertyValuesHolder(property, values);
!!!4944773.java!!!	ofMultiInt(in propertyName : String, inout values : int [[][]]) : PropertyValuesHolder
        if (values.length < 2) {
            throw new IllegalArgumentException("At least 2 values must be supplied");
        }
        int numParameters = 0;
        for (int i = 0; i < values.length; i++) {
            if (values[i] == null) {
                throw new IllegalArgumentException("values must not be null");
            }
            int length = values[i].length;
            if (i == 0) {
                numParameters = length;
            } else if (length != numParameters) {
                throw new IllegalArgumentException("Values must all have the same length");
            }
        }
        IntArrayEvaluator evaluator = new IntArrayEvaluator(new int[numParameters]);
        return new MultiIntValuesHolder(propertyName, null, evaluator, (Object[]) values);
!!!4944901.java!!!	ofMultiInt(in propertyName : String, inout path : Path) : PropertyValuesHolder
        Keyframes keyframes = KeyframeSet.ofPath(path);
        PointFToIntArray converter = new PointFToIntArray();
        return new MultiIntValuesHolder(propertyName, converter, null, keyframes);
!!!4945029.java!!!	ofMultiInt(in propertyName : String, inout converter : TypeConverter, inout evaluator : TypeEvaluator, inout  : V...values) : PropertyValuesHolder
        return new MultiIntValuesHolder(propertyName, converter, evaluator, values);
!!!4945157.java!!!	ofMultiInt(in propertyName : String, inout converter : TypeConverter, inout evaluator : TypeEvaluator, inout  : Keyframe...values) : PropertyValuesHolder
        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
        return new MultiIntValuesHolder(propertyName, converter, evaluator, keyframeSet);
!!!4945285.java!!!	ofFloat(in propertyName : String, inout  : float...values) : PropertyValuesHolder
        return new FloatPropertyValuesHolder(propertyName, values);
!!!4945413.java!!!	ofFloat(inout property : Property, inout  : float...values) : PropertyValuesHolder
        return new FloatPropertyValuesHolder(property, values);
!!!4945541.java!!!	ofMultiFloat(in propertyName : String, inout values : float [[][]]) : PropertyValuesHolder
        if (values.length < 2) {
            throw new IllegalArgumentException("At least 2 values must be supplied");
        }
        int numParameters = 0;
        for (int i = 0; i < values.length; i++) {
            if (values[i] == null) {
                throw new IllegalArgumentException("values must not be null");
            }
            int length = values[i].length;
            if (i == 0) {
                numParameters = length;
            } else if (length != numParameters) {
                throw new IllegalArgumentException("Values must all have the same length");
            }
        }
        FloatArrayEvaluator evaluator = new FloatArrayEvaluator(new float[numParameters]);
        return new MultiFloatValuesHolder(propertyName, null, evaluator, (Object[]) values);
!!!4945669.java!!!	ofMultiFloat(in propertyName : String, inout path : Path) : PropertyValuesHolder
        Keyframes keyframes = KeyframeSet.ofPath(path);
        PointFToFloatArray converter = new PointFToFloatArray();
        return new MultiFloatValuesHolder(propertyName, converter, null, keyframes);
!!!4945797.java!!!	ofMultiFloat(in propertyName : String, inout converter : TypeConverter, inout evaluator : TypeEvaluator, inout  : V...values) : PropertyValuesHolder
        return new MultiFloatValuesHolder(propertyName, converter, evaluator, values);
!!!4945925.java!!!	ofMultiFloat(in propertyName : String, inout converter : TypeConverter, inout evaluator : TypeEvaluator, inout  : Keyframe...values) : PropertyValuesHolder
        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
        return new MultiFloatValuesHolder(propertyName, converter, evaluator, keyframeSet);
!!!4946053.java!!!	ofObject(in propertyName : String, inout evaluator : TypeEvaluator, inout  : Object...values) : PropertyValuesHolder
        PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
        pvh.setObjectValues(values);
        pvh.setEvaluator(evaluator);
        return pvh;
!!!4946181.java!!!	ofObject(in propertyName : String, inout converter : TypeConverter, inout path : Path) : PropertyValuesHolder
        PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
        pvh.mKeyframes = KeyframeSet.ofPath(path);
        pvh.mValueType = PointF.class;
        pvh.setConverter(converter);
        return pvh;
!!!4946309.java!!!	ofObject(inout property : Property, inout evaluator : TypeEvaluator, inout  : V...values) : PropertyValuesHolder
        PropertyValuesHolder pvh = new PropertyValuesHolder(property);
        pvh.setObjectValues(values);
        pvh.setEvaluator(evaluator);
        return pvh;
!!!4946437.java!!!	ofObject(inout property : Property, inout converter : TypeConverter, inout evaluator : TypeEvaluator, inout  : T...values) : PropertyValuesHolder
        PropertyValuesHolder pvh = new PropertyValuesHolder(property);
        pvh.setConverter(converter);
        pvh.setObjectValues(values);
        pvh.setEvaluator(evaluator);
        return pvh;
!!!4946565.java!!!	ofObject(inout property : Property, inout converter : TypeConverter, inout path : Path) : PropertyValuesHolder
        PropertyValuesHolder pvh = new PropertyValuesHolder(property);
        pvh.mKeyframes = KeyframeSet.ofPath(path);
        pvh.mValueType = PointF.class;
        pvh.setConverter(converter);
        return pvh;
!!!4946693.java!!!	ofKeyframe(in propertyName : String, inout  : Keyframe...values) : PropertyValuesHolder
        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
        return ofKeyframes(propertyName, keyframeSet);
!!!4946821.java!!!	ofKeyframe(inout property : Property, inout  : Keyframe...values) : PropertyValuesHolder
        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
        return ofKeyframes(property, keyframeSet);
!!!4946949.java!!!	ofKeyframes(in propertyName : String, inout keyframes : Keyframes) : PropertyValuesHolder
        if (keyframes instanceof Keyframes.IntKeyframes) {
            return new IntPropertyValuesHolder(propertyName, (Keyframes.IntKeyframes) keyframes);
        } else if (keyframes instanceof Keyframes.FloatKeyframes) {
            return new FloatPropertyValuesHolder(propertyName,
                    (Keyframes.FloatKeyframes) keyframes);
        } else {
            PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
            pvh.mKeyframes = keyframes;
            pvh.mValueType = keyframes.getType();
            return pvh;
        }
!!!4947077.java!!!	ofKeyframes(inout property : Property, inout keyframes : Keyframes) : PropertyValuesHolder
        if (keyframes instanceof Keyframes.IntKeyframes) {
            return new IntPropertyValuesHolder(property, (Keyframes.IntKeyframes) keyframes);
        } else if (keyframes instanceof Keyframes.FloatKeyframes) {
            return new FloatPropertyValuesHolder(property, (Keyframes.FloatKeyframes) keyframes);
        } else {
            PropertyValuesHolder pvh = new PropertyValuesHolder(property);
            pvh.mKeyframes = keyframes;
            pvh.mValueType = keyframes.getType();
            return pvh;
        }
!!!4947205.java!!!	setIntValues(inout  : int...values) : void
        mValueType = int.class;
        mKeyframes = KeyframeSet.ofInt(values);
!!!4947333.java!!!	setFloatValues(inout  : float...values) : void
        mValueType = float.class;
        mKeyframes = KeyframeSet.ofFloat(values);
!!!4947461.java!!!	setKeyframes(inout  : Keyframe...values) : void
        int numKeyframes = values.length;
        Keyframe keyframes[] = new Keyframe[Math.max(numKeyframes,2)];
        mValueType = ((Keyframe)values[0]).getType();
        for (int i = 0; i < numKeyframes; ++i) {
            keyframes[i] = (Keyframe)values[i];
        }
        mKeyframes = new KeyframeSet(keyframes);
!!!4947589.java!!!	setObjectValues(inout  : Object...values) : void
        mValueType = values[0].getClass();
        mKeyframes = KeyframeSet.ofObject(values);
        if (mEvaluator != null) {
            mKeyframes.setEvaluator(mEvaluator);
        }
!!!4947717.java!!!	setConverter(inout converter : TypeConverter) : void
        mConverter = converter;
!!!4947845.java!!!	getPropertyFunction(inout targetClass : Class, in prefix : String, inout valueType : Class) : Method
        // TODO: faster implementation...
        Method returnVal = null;
        String methodName = getMethodName(prefix, mPropertyName);
        Class args[] = null;
        if (valueType == null) {
            try {
                returnVal = targetClass.getMethod(methodName, args);
            } catch (NoSuchMethodException e) {
                // Swallow the error, log it later
            }
        } else {
            args = new Class[1];
            Class typeVariants[];
            if (valueType.equals(Float.class)) {
                typeVariants = FLOAT_VARIANTS;
            } else if (valueType.equals(Integer.class)) {
                typeVariants = INTEGER_VARIANTS;
            } else if (valueType.equals(Double.class)) {
                typeVariants = DOUBLE_VARIANTS;
            } else {
                typeVariants = new Class[1];
                typeVariants[0] = valueType;
            }
            for (Class typeVariant : typeVariants) {
                args[0] = typeVariant;
                try {
                    returnVal = targetClass.getMethod(methodName, args);
                    if (mConverter == null) {
                        // change the value type to suit
                        mValueType = typeVariant;
                    }
                    return returnVal;
                } catch (NoSuchMethodException e) {
                    // Swallow the error and keep trying other variants
                }
            }
            // If we got here, then no appropriate function was found
        }

        if (returnVal == null) {
            Log.w("PropertyValuesHolder", "Method " +
                    getMethodName(prefix, mPropertyName) + "() with type " + valueType +
                    " not found on target class " + targetClass);
        }

        return returnVal;
!!!4947973.java!!!	setupSetterOrGetter(inout targetClass : Class, inout propertyMapMap : HashMap<Class, HashMap<String, Method>>, in prefix : String, inout valueType : Class) : Method
        Method setterOrGetter = null;
        synchronized(propertyMapMap) {
            // Have to lock property map prior to reading it, to guard against
            // another thread putting something in there after we've checked it
            // but before we've added an entry to it
            HashMap<String, Method> propertyMap = propertyMapMap.get(targetClass);
            boolean wasInMap = false;
            if (propertyMap != null) {
                wasInMap = propertyMap.containsKey(mPropertyName);
                if (wasInMap) {
                    setterOrGetter = propertyMap.get(mPropertyName);
                }
            }
            if (!wasInMap) {
                setterOrGetter = getPropertyFunction(targetClass, prefix, valueType);
                if (propertyMap == null) {
                    propertyMap = new HashMap<String, Method>();
                    propertyMapMap.put(targetClass, propertyMap);
                }
                propertyMap.put(mPropertyName, setterOrGetter);
            }
        }
        return setterOrGetter;
!!!4948101.java!!!	setupSetter(inout targetClass : Class) : void
        Class<?> propertyType = mConverter == null ? mValueType : mConverter.getTargetType();
        mSetter = setupSetterOrGetter(targetClass, sSetterPropertyMap, "set", propertyType);
!!!4948229.java!!!	setupGetter(inout targetClass : Class) : void
        mGetter = setupSetterOrGetter(targetClass, sGetterPropertyMap, "get", null);
!!!4948357.java!!!	setupSetterAndGetter(inout target : Object) : void
        if (mProperty != null) {
            // check to make sure that mProperty is on the class of target
            try {
                Object testValue = null;
                List<Keyframe> keyframes = mKeyframes.getKeyframes();
                int keyframeCount = keyframes == null ? 0 : keyframes.size();
                for (int i = 0; i < keyframeCount; i++) {
                    Keyframe kf = keyframes.get(i);
                    if (!kf.hasValue() || kf.valueWasSetOnStart()) {
                        if (testValue == null) {
                            testValue = convertBack(mProperty.get(target));
                        }
                        kf.setValue(testValue);
                        kf.setValueWasSetOnStart(true);
                    }
                }
                return;
            } catch (ClassCastException e) {
                Log.w("PropertyValuesHolder","No such property (" + mProperty.getName() +
                        ") on target object " + target + ". Trying reflection instead");
                mProperty = null;
            }
        }
        // We can't just say 'else' here because the catch statement sets mProperty to null.
        if (mProperty == null) {
            Class targetClass = target.getClass();
            if (mSetter == null) {
                setupSetter(targetClass);
            }
            List<Keyframe> keyframes = mKeyframes.getKeyframes();
            int keyframeCount = keyframes == null ? 0 : keyframes.size();
            for (int i = 0; i < keyframeCount; i++) {
                Keyframe kf = keyframes.get(i);
                if (!kf.hasValue() || kf.valueWasSetOnStart()) {
                    if (mGetter == null) {
                        setupGetter(targetClass);
                        if (mGetter == null) {
                            // Already logged the error - just return to avoid NPE
                            return;
                        }
                    }
                    try {
                        Object value = convertBack(mGetter.invoke(target));
                        kf.setValue(value);
                        kf.setValueWasSetOnStart(true);
                    } catch (InvocationTargetException e) {
                        Log.e("PropertyValuesHolder", e.toString());
                    } catch (IllegalAccessException e) {
                        Log.e("PropertyValuesHolder", e.toString());
                    }
                }
            }
        }
!!!4948485.java!!!	convertBack(inout value : Object) : Object
        if (mConverter != null) {
            if (!(mConverter instanceof BidirectionalTypeConverter)) {
                throw new IllegalArgumentException("Converter "
                        + mConverter.getClass().getName()
                        + " must be a BidirectionalTypeConverter");
            }
            value = ((BidirectionalTypeConverter) mConverter).convertBack(value);
        }
        return value;
!!!4948613.java!!!	setupValue(inout target : Object, inout kf : Keyframe) : void
        if (mProperty != null) {
            Object value = convertBack(mProperty.get(target));
            kf.setValue(value);
        } else {
            try {
                if (mGetter == null) {
                    Class targetClass = target.getClass();
                    setupGetter(targetClass);
                    if (mGetter == null) {
                        // Already logged the error - just return to avoid NPE
                        return;
                    }
                }
                Object value = convertBack(mGetter.invoke(target));
                kf.setValue(value);
            } catch (InvocationTargetException e) {
                Log.e("PropertyValuesHolder", e.toString());
            } catch (IllegalAccessException e) {
                Log.e("PropertyValuesHolder", e.toString());
            }
        }
!!!4948741.java!!!	setupStartValue(inout target : Object) : void
        List<Keyframe> keyframes = mKeyframes.getKeyframes();
        if (!keyframes.isEmpty()) {
            setupValue(target, keyframes.get(0));
        }
!!!4948869.java!!!	setupEndValue(inout target : Object) : void
        List<Keyframe> keyframes = mKeyframes.getKeyframes();
        if (!keyframes.isEmpty()) {
            setupValue(target, keyframes.get(keyframes.size() - 1));
        }
!!!4948997.java!!!	clone() : PropertyValuesHolder
        try {
            PropertyValuesHolder newPVH = (PropertyValuesHolder) super.clone();
            newPVH.mPropertyName = mPropertyName;
            newPVH.mProperty = mProperty;
            newPVH.mKeyframes = mKeyframes.clone();
            newPVH.mEvaluator = mEvaluator;
            return newPVH;
        } catch (CloneNotSupportedException e) {
            // won't reach here
            return null;
        }
!!!4949125.java!!!	setAnimatedValue(inout target : Object) : void
        if (mProperty != null) {
            mProperty.set(target, getAnimatedValue());
        }
        if (mSetter != null) {
            try {
                mTmpValueArray[0] = getAnimatedValue();
                mSetter.invoke(target, mTmpValueArray);
            } catch (InvocationTargetException e) {
                Log.e("PropertyValuesHolder", e.toString());
            } catch (IllegalAccessException e) {
                Log.e("PropertyValuesHolder", e.toString());
            }
        }
!!!4949253.java!!!	init() : void
        if (mEvaluator == null) {
            // We already handle int and float automatically, but not their Object
            // equivalents
            mEvaluator = (mValueType == Integer.class) ? sIntEvaluator :
                    (mValueType == Float.class) ? sFloatEvaluator :
                    null;
        }
        if (mEvaluator != null) {
            // KeyframeSet knows how to evaluate the common types - only give it a custom
            // evaluator if one has been set on this class
            mKeyframes.setEvaluator(mEvaluator);
        }
!!!4949381.java!!!	setEvaluator(inout evaluator : TypeEvaluator) : void
        mEvaluator = evaluator;
        mKeyframes.setEvaluator(evaluator);
!!!4949509.java!!!	calculateValue(in fraction : float) : void
        Object value = mKeyframes.getValue(fraction);
        mAnimatedValue = mConverter == null ? value : mConverter.convert(value);
!!!4949637.java!!!	setPropertyName(in propertyName : String) : void
        mPropertyName = propertyName;
!!!4949765.java!!!	setProperty(inout property : Property) : void
        mProperty = property;
!!!4949893.java!!!	getPropertyName() : String
        return mPropertyName;
!!!4950021.java!!!	getAnimatedValue() : Object
        return mAnimatedValue;
!!!4950149.java!!!	getPropertyValues(inout values : PropertyValuesHolder::PropertyValues) : void
        init();
        values.propertyName = mPropertyName;
        values.type = mValueType;
        values.startValue = mKeyframes.getValue(0);
        if (values.startValue instanceof PathParser.PathData) {
            // PathData evaluator returns the same mutable PathData object when query fraction,
            // so we have to make a copy here.
            values.startValue = new PathParser.PathData((PathParser.PathData) values.startValue);
        }
        values.endValue = mKeyframes.getValue(1);
        if (values.endValue instanceof PathParser.PathData) {
            // PathData evaluator returns the same mutable PathData object when query fraction,
            // so we have to make a copy here.
            values.endValue = new PathParser.PathData((PathParser.PathData) values.endValue);
        }
        // TODO: We need a better way to get data out of keyframes.
        if (mKeyframes instanceof PathKeyframes.FloatKeyframesBase
                || mKeyframes instanceof PathKeyframes.IntKeyframesBase
                || (mKeyframes.getKeyframes() != null && mKeyframes.getKeyframes().size() > 2)) {
            // When a pvh has more than 2 keyframes, that means there are intermediate values in
            // addition to start/end values defined for animators. Another case where such
            // intermediate values are defined is when animator has a path to animate along. In
            // these cases, a data source is needed to capture these intermediate values.
            values.dataSource = new PropertyValues.DataSource() {
                @Override
                public Object getValueAtFraction(float fraction) {
                    return mKeyframes.getValue(fraction);
                }
            };
        } else {
            values.dataSource = null;
        }
!!!4950277.java!!!	getValueType() : Class
        return mValueType;
!!!4950405.java!!!	toString() : String
        return mPropertyName + ": " + mKeyframes.toString();
!!!4950533.java!!!	getMethodName(in prefix : String, in propertyName : String) : String
        if (propertyName == null || propertyName.length() == 0) {
            // shouldn't get here
            return prefix;
        }
        char firstLetter = Character.toUpperCase(propertyName.charAt(0));
        String theRest = propertyName.substring(1);
        return prefix + firstLetter + theRest;
