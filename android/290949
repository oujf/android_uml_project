format 214
"drm" // source::frameworks::native::include::media::drm
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/include/media/drm/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/include/media/drm/"
  cpp_namespace "android"
  classview 275077 "drm"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 2047237 "DrmFactory"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " DRMs are implemented in DrmEngine plugins, which are dynamically
 loadable shared libraries that implement the entry points
 createDrmFactory and createCryptoFactory.  createDrmFactory
 constructs and returns an instance of a DrmFactory object.  Similarly,
 createCryptoFactory creates an instance of a CryptoFactory object.
 When a MediaCrypto or MediaDrm object needs to be constructed, all
 available DrmEngines present in the plugins directory on the device
 are scanned for a matching DrmEngine that can support the crypto
 scheme.  When a match is found, the DrmEngine's createCryptoPlugin and
 createDrmPlugin methods are used to create CryptoPlugin or
 DrmPlugin instances to support that DRM scheme."
      operation 14384133 "DrmFactory"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14384261 "~DrmFactory"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 14384389 "isCryptoSchemeSupported"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "uuid" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[16]${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " DrmFactory::isCryptoSchemeSupported can be called to determine
 if the plugin factory is able to construct plugins that support a
 given crypto scheme, which is specified by a UUID."
      end

      operation 14384517 "isContentTypeSupported"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "mimeType" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " DrmFactory::isContentTypeSupported can be called to determine
 if the plugin factory is able to construct plugins that support a
 given media container format specified by mimeType"
      end

      operation 14384645 "createDrmPlugin"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uuid" explicit_type "uint8_t"
	  param inout name "plugin" type class_ref 2047365 // DrmPlugin
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[16]${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Construct a DrmPlugin for the crypto scheme specified by UUID."
      end

      operation 14384773 "DrmFactory"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 2047237 // DrmFactory
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14384901 "operator ="
	private return_type class_ref 2047237 // DrmFactory
	nparams 1
	  param in name "" type class_ref 2047237 // DrmFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 2047365 "DrmPlugin"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      class 2047493 "EventType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 8820229 "kDrmPluginEventProvisionRequired"
	  public type class_ref 2047493 // EventType
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8820357 "kDrmPluginEventKeyNeeded"
	  public type class_ref 2047493 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8820485 "kDrmPluginEventKeyExpired"
	  public type class_ref 2047493 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8820613 "kDrmPluginEventVendorDefined"
	  public type class_ref 2047493 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8820741 "kDrmPluginEventSessionReclaimed"
	  public type class_ref 2047493 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8820869 "kDrmPluginEventExpirationUpdate"
	  public type class_ref 2047493 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8820997 "kDrmPluginEventKeysChange"
	  public type class_ref 2047493 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 2047621 "KeyType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 8821125 "kKeyType_Offline"
	  public type class_ref 2047621 // KeyType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8821253 "kKeyType_Streaming"
	  public type class_ref 2047621 // KeyType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8821381 "kKeyType_Release"
	  public type class_ref 2047621 // KeyType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 2047749 "KeyRequestType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 8821509 "kKeyRequestType_Unknown"
	  public type class_ref 2047749 // KeyRequestType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8821637 "kKeyRequestType_Initial"
	  public type class_ref 2047749 // KeyRequestType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8821765 "kKeyRequestType_Renewal"
	  public type class_ref 2047749 // KeyRequestType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8821893 "kKeyRequestType_Release"
	  public type class_ref 2047749 // KeyRequestType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 2047877 "KeyStatusType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 8822021 "kKeyStatusType_Usable"
	  public type class_ref 2047877 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8822149 "kKeyStatusType_Expired"
	  public type class_ref 2047877 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8822277 "kKeyStatusType_OutputNotAllowed"
	  public type class_ref 2047877 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8822405 "kKeyStatusType_StatusPending"
	  public type class_ref 2047877 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 8822533 "kKeyStatusType_InternalError"
	  public type class_ref 2047877 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 2048005 "KeyStatus"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 8822661 "mKeyId"
	  public explicit_type "uint8_t"
	  stereotype "Vector"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3442437 // mType (<directional composition>)
	  relation 3442437 *-->
	    a role_name "mType" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	      classrelation_ref 3442437 // mType (<directional composition>)
	    b parent class_ref 2047877 // KeyStatusType
	end
      end

      operation 14385029 "DrmPlugin"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14385157 "~DrmPlugin"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 14385285 "openSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "sessionId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Open a new session with the DrmPlugin object.  A session ID is returned
 in the sessionId parameter."
      end

      operation 14385413 "closeSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Close a session on the DrmPlugin object."
      end

      operation 14385541 "getKeyRequest"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 8
	  param in name "scope" explicit_type "Vector<uint8_t>"
	  param in name "initData" explicit_type "Vector<uint8_t>"
	  param in name "mimeType" explicit_type "String8"
	  param in name "keyType" type class_ref 2047621 // KeyType
	  param in name "optionalParameters" explicit_type "KeyedVector<String8, String8>"
	  param inout name "request" explicit_type "Vector<uint8_t>"
	  param inout name "defaultUrl" explicit_type "String8"
	  param inout name "keyRequestType" type class_ref 2047749 // KeyRequestType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}, ${t5} & ${p5}${v5}, ${t6} & ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " A key request/response exchange occurs between the app and a License
 Server to obtain the keys required to decrypt the content.  getKeyRequest()
 is used to obtain an opaque key request blob that is delivered to the
 license server.

 The scope parameter may be a sessionId or a keySetId, depending on the
 specified keyType.  When the keyType is kKeyType_Offline or
 kKeyType_Streaming, scope should be set to the sessionId the keys will be
 provided to.  When the keyType is kKeyType_Release, scope should be set to
 the keySetId of the keys being released.  Releasing keys from a device
 invalidates them for all sessions.

 The init data passed to getKeyRequest is container-specific and its
 meaning is interpreted based on the mime type provided in the mimeType
 parameter to getKeyRequest.  It could contain, for example, the content
 ID, key ID or other data obtained from the content metadata that is required
 in generating the key request.  Init may be null when keyType is
 kKeyType_Release.

 mimeType identifies the mime type of the content

 keyType specifies if the keys are to be used for streaming or offline content

 optionalParameters are included in the key request message to allow a
 client application to provide additional message parameters to the server.

 If successful, the opaque key request blob is returned to the caller."
      end

      operation 14385669 "provideKeyResponse"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "scope" explicit_type "Vector<uint8_t>"
	  param in name "response" explicit_type "Vector<uint8_t>"
	  param inout name "keySetId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " After a key response is received by the app, it is provided to the
 Drm plugin using provideKeyResponse.

 scope may be a sessionId or a keySetId depending on the type of the
 response.  Scope should be set to the sessionId when the response is
 for either streaming or offline key requests.  Scope should be set to the
 keySetId when the response is for a release request.

 When the response is for an offline key request, a keySetId is returned
 in the keySetId vector parameter that can be used to later restore the
 keys to a new session with the method restoreKeys. When the response is
 for a streaming or release request, no keySetId is returned.
"
      end

      operation 14385797 "removeKeys"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Remove the current keys from a session"
      end

      operation 14385925 "restoreKeys"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keySetId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Restore persisted offline keys into a new session.  keySetId identifies
 the keys to load, obtained from a prior call to provideKeyResponse()."
      end

      operation 14386053 "queryKeyStatus"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param inout name "infoMap" explicit_type "KeyedVector<String8, String8>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Request an informative description of the license for the session.  The status
 is in the form of {name, value} pairs.  Since DRM license policies vary by
 vendor, the specific status field names are determined by each DRM vendor.
 Refer to your DRM provider documentation for definitions of the field names
 for a particular DrmEngine."
      end

      operation 14386181 "getProvisionRequest"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "cert_type" explicit_type "String8"
	  param in name "cert_authority" explicit_type "String8"
	  param inout name "request" explicit_type "Vector<uint8_t>"
	  param inout name "defaultUrl" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " A provision request/response exchange occurs between the app and a
 provisioning server to retrieve a device certificate.  getProvisionRequest
 is used to obtain an opaque key request blob that is delivered to the
 provisioning server.

 If successful, the opaque provision request blob is returned to the caller."
      end

      operation 14386309 "provideProvisionResponse"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "response" explicit_type "Vector<uint8_t>"
	  param inout name "certificate" explicit_type "Vector<uint8_t>"
	  param inout name "wrapped_key" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " After a provision response is received by the app, it is provided to the
 Drm plugin using provideProvisionResponse."
      end

      operation 14386437 "getSecureStops"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "secureStops" explicit_type "List<Vector<uint8_t> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " A means of enforcing the contractual requirement for a concurrent stream
 limit per subscriber across devices is provided via SecureStop.  SecureStop
 is a means of securely monitoring the lifetime of sessions. Since playback
 on a device can be interrupted due to reboot, power failure, etc. a means
 of persisting the lifetime information on the device is needed.

 A signed version of the sessionID is written to persistent storage on the
 device when each MediaCrypto object is created. The sessionID is signed by
 the device private key to prevent tampering.

 In the normal case, playback will be completed, the session destroyed and
 the Secure Stops will be queried. The App queries secure stops and forwards
 the secure stop message to the server which verifies the signature and
 notifies the server side database that the session destruction has been
 confirmed. The persisted record on the client is only removed after positive
 confirmation that the server received the message using releaseSecureStops()."
      end

      operation 14386565 "getSecureStop"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "ssid" explicit_type "Vector<uint8_t>"
	  param inout name "secureStop" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14386693 "releaseSecureStops"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "ssRelease" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14386821 "releaseAllSecureStops"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14386949 "getPropertyString"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "name" explicit_type "String8"
	  param inout name "value" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Read a property value given the device property string.  There are a few forms
 of property access methods, depending on the data type returned.
 Since DRM plugin properties may vary, additional field names may be defined
 by each DRM vendor.  Refer to your DRM provider documentation for definitions
 of its additional field names.

 Standard values are:
   \"vendor\" [string] identifies the maker of the plugin
   \"version\" [string] identifies the version of the plugin
   \"description\" [string] describes the plugin
   'deviceUniqueId' [byte array] The device unique identifier is established
   during device provisioning and provides a means of uniquely identifying
   each device."
      end

      operation 14387077 "getPropertyByteArray"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "name" explicit_type "String8"
	  param inout name "value" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14387205 "setPropertyString"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "name" explicit_type "String8"
	  param in name "value" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Write  a property value given the device property string.  There are a few forms
 of property setting methods, depending on the data type.
 Since DRM plugin properties may vary, additional field names may be defined
 by each DRM vendor.  Refer to your DRM provider documentation for definitions
 of its field names."
      end

      operation 14387333 "setPropertyByteArray"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "name" explicit_type "String8"
	  param in name "value" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14387461 "setCipherAlgorithm"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "algorithm" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " The following methods implement operations on a CryptoSession to support
 encrypt, decrypt, sign verify operations on operator-provided
 session keys.

 The algorithm string conforms to JCA Standard Names for Cipher
 Transforms and is case insensitive.  For example \"AES/CBC/PKCS5Padding\".

 Return OK if the algorithm is supported, otherwise return BAD_VALUE
"
      end

      operation 14387589 "setMacAlgorithm"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "algorithm" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " The algorithm string conforms to JCA Standard Names for Mac
 Algorithms and is case insensitive.  For example \"HmacSHA256\".

 Return OK if the algorithm is supported, otherwise return BAD_VALUE
"
      end

      operation 14387717 "encrypt"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyId" explicit_type "Vector<uint8_t>"
	  param in name "input" explicit_type "Vector<uint8_t>"
	  param in name "iv" explicit_type "Vector<uint8_t>"
	  param inout name "output" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Encrypt the provided input buffer with the cipher algorithm
 specified by setCipherAlgorithm and the key selected by keyId,
 and return the encrypted data."
      end

      operation 14387845 "decrypt"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyId" explicit_type "Vector<uint8_t>"
	  param in name "input" explicit_type "Vector<uint8_t>"
	  param in name "iv" explicit_type "Vector<uint8_t>"
	  param inout name "output" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Decrypt the provided input buffer with the cipher algorithm
 specified by setCipherAlgorithm and the key selected by keyId,
 and return the decrypted data."
      end

      operation 14387973 "sign"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyId" explicit_type "Vector<uint8_t>"
	  param in name "message" explicit_type "Vector<uint8_t>"
	  param inout name "signature" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Compute a signature on the provided message using the mac algorithm
 specified by setMacAlgorithm and the key selected by keyId,
 and return the signature."
      end

      operation 14388101 "verify"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyId" explicit_type "Vector<uint8_t>"
	  param in name "message" explicit_type "Vector<uint8_t>"
	  param in name "signature" explicit_type "Vector<uint8_t>"
	  param inout name "match" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Compute a signature on the provided message using the mac algorithm
 specified by setMacAlgorithm and the key selected by keyId,
 and compare with the expected result.  Set result to true or
 false depending on the outcome."
      end

      operation 14388229 "signRSA"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "algorithm" explicit_type "String8"
	  param in name "message" explicit_type "Vector<uint8_t>"
	  param in name "wrapped_key" explicit_type "Vector<uint8_t>"
	  param inout name "signature" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Compute an RSA signature on the provided message using the algorithm
 specified by algorithm."
      end

      operation 14388357 "setListener"
	cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "listener" explicit_type "sp<DrmPluginListener>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mEventLock);
            mListener = listener;
            return OK;
        };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14388485 "sendEvent"
	preserve_cpp_body_indent cpp_inline protected explicit_return_type "void"
	nparams 4
	  param in name "eventType" type class_ref 2047493 // EventType
	  param in name "extra" explicit_type "int"
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "data" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} * ${p2}, const ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Plugins call these methods to deliver events to the java app"
      end

      operation 14388613 "sendExpirationUpdate"
	preserve_cpp_body_indent cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "expiryTimeInMS" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14388741 "sendKeysChange"
	preserve_cpp_body_indent cpp_inline protected explicit_return_type "void"
	nparams 3
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyStatusList" explicit_type "Vector<DrmPlugin::KeyStatus>"
	  param in name "hasNewUsableKey" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      attribute 8822789 "mEventLock"
	private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3442565 // mListener (<directional composition>)
	relation 3442565 *-->
	  stereotype "sp"
	  a role_name "mListener" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 3442565 // mListener (<directional composition>)
	  b parent class_ref 2048133 // DrmPluginListener
      end
    end

    class 2048133 "DrmPluginListener"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3442693 // <generalisation>
	relation 3442693 ---|>
	  a public
	    cpp virtual default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 3442693 // <generalisation>
	  b parent class_ref 2048261 // typedef35
      end

      operation 14388869 "sendEvent"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 4
	  param in name "eventType" type class_ref 2047493 // EventType
	  param in name "extra" explicit_type "int"
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "data" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14388997 "sendExpirationUpdate"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "expiryTimeInMS" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 14389125 "sendKeysChange"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 3
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyStatusList" explicit_type "Vector<DrmPlugin::KeyStatus>"
	  param in name "hasNewUsableKey" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 2048261 "typedef35"
      visibility package stereotype "typedef" explicit_base_type "RefBase"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
    end
  end

  deploymentview 238469 "drm"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1004165 "DrmAPI"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 2047237 // DrmFactory
	class_ref 2047365 // DrmPlugin
	class_ref 2048261 // typedef35
	class_ref 2048133 // DrmPluginListener
      end
    end
  end
end
