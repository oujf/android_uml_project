class sp
!!!14525317.cpp!!!	sp(inout other : T)
    if (other)
        other->incStrong(this);
!!!14525445.cpp!!!	sp(in other : sp)
    if (m_ptr)
        m_ptr->incStrong(this);
!!!14525573.cpp!!!	sp(inout other : sp)
    other.m_ptr = nullptr;
!!!14525701.cpp!!!	sp(inout other : U)
    if (other)
        (static_cast<T*>(other))->incStrong(this);
!!!14525829.cpp!!!	sp(in other : sp<U>)
    if (m_ptr)
        m_ptr->incStrong(this);
!!!14525957.cpp!!!	sp(inout other : sp<U>)
    other.m_ptr = nullptr;
!!!14526085.cpp!!!	~sp()
    if (m_ptr)
        m_ptr->decStrong(this);
!!!14526213.cpp!!!	operator =(inout other : T) : sp
    T* oldPtr(*const_cast<T* volatile*>(&m_ptr));
    if (other) other->incStrong(this);
    if (oldPtr) oldPtr->decStrong(this);
    if (oldPtr != *const_cast<T* volatile*>(&m_ptr)) sp_report_race();
    m_ptr = other;
    return *this;
!!!14526341.cpp!!!	operator =(in other : sp) : sp
    // Force m_ptr to be read twice, to heuristically check for data races.
    T* oldPtr(*const_cast<T* volatile*>(&m_ptr));
    T* otherPtr(other.m_ptr);
    if (otherPtr) otherPtr->incStrong(this);
    if (oldPtr) oldPtr->decStrong(this);
    if (oldPtr != *const_cast<T* volatile*>(&m_ptr)) sp_report_race();
    m_ptr = otherPtr;
    return *this;
!!!14526469.cpp!!!	operator =(inout other : sp) : sp
    T* oldPtr(*const_cast<T* volatile*>(&m_ptr));
    if (oldPtr) oldPtr->decStrong(this);
    if (oldPtr != *const_cast<T* volatile*>(&m_ptr)) sp_report_race();
    m_ptr = other.m_ptr;
    other.m_ptr = nullptr;
    return *this;
!!!14526597.cpp!!!	operator =(in other : sp<U>) : sp
    T* oldPtr(*const_cast<T* volatile*>(&m_ptr));
    T* otherPtr(other.m_ptr);
    if (otherPtr) otherPtr->incStrong(this);
    if (oldPtr) oldPtr->decStrong(this);
    if (oldPtr != *const_cast<T* volatile*>(&m_ptr)) sp_report_race();
    m_ptr = otherPtr;
    return *this;
!!!14526725.cpp!!!	operator =(inout other : sp<U>) : sp
    T* oldPtr(*const_cast<T* volatile*>(&m_ptr));
    if (m_ptr) m_ptr->decStrong(this);
    if (oldPtr != *const_cast<T* volatile*>(&m_ptr)) sp_report_race();
    m_ptr = other.m_ptr;
    other.m_ptr = nullptr;
    return *this;
!!!14526853.cpp!!!	operator =(inout other : U) : sp
    T* oldPtr(*const_cast<T* volatile*>(&m_ptr));
    if (other) (static_cast<T*>(other))->incStrong(this);
    if (oldPtr) oldPtr->decStrong(this);
    if (oldPtr != *const_cast<T* volatile*>(&m_ptr)) sp_report_race();
    m_ptr = other;
    return *this;
!!!14526981.cpp!!!	force_set(inout other : T) : void
    other->forceIncStrong(this);
    m_ptr = other;
!!!14527109.cpp!!!	clear() : void
    if (m_ptr) {
        m_ptr->decStrong(this);
        m_ptr = 0;
    }
!!!14527621.cpp!!!	set_pointer(inout ptr : T) : void
    m_ptr = ptr;
