class IpSecAlgorithm
!!!7118725.java!!!	IpSecAlgorithm(in algorithm : String, inout key : byte [[]])
        this(algorithm, key, key.length * 8);
!!!7118853.java!!!	IpSecAlgorithm(in algoName : String, inout key : byte [[]], in truncLenBits : int)
        if (!isTruncationLengthValid(algoName, truncLenBits)) {
            throw new IllegalArgumentException("Unknown algorithm or invalid length");
        }
        mName = algoName;
        mKey = key.clone();
        mTruncLenBits = Math.min(truncLenBits, key.length * 8);
!!!7118981.java!!!	getName() : String
        return mName;
!!!7119109.java!!!	getKey() : byte
        return mKey.clone();
!!!7119237.java!!!	getTruncationLengthBits() : int
        return mTruncLenBits;
!!!7119365.java!!!	describeContents() : int
        return 0;
!!!7119493.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeString(mName);
        out.writeByteArray(mKey);
        out.writeInt(mTruncLenBits);
!!!7119621.java!!!	IpSecAlgorithm(inout in : Parcel)
        mName = in.readString();
        mKey = in.createByteArray();
        mTruncLenBits = in.readInt();
!!!7119749.java!!!	isTruncationLengthValid(in algo : String, in truncLenBits : int) : boolean
        switch (algo) {
            case CRYPT_AES_CBC:
                return (truncLenBits == 128 || truncLenBits == 192 || truncLenBits == 256);
            case AUTH_HMAC_MD5:
                return (truncLenBits >= 96 && truncLenBits <= 128);
            case AUTH_HMAC_SHA1:
                return (truncLenBits >= 96 && truncLenBits <= 160);
            case AUTH_HMAC_SHA256:
                return (truncLenBits >= 96 && truncLenBits <= 256);
            case AUTH_HMAC_SHA384:
                return (truncLenBits >= 192 && truncLenBits <= 384);
            case AUTH_HMAC_SHA512:
                return (truncLenBits >= 256 && truncLenBits <= 512);
            default:
                return false;
        }
