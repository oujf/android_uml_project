class Hwc2TestSurfaceDamage
!!!15115909.cpp!!!	Hwc2TestSurfaceDamage(in coverage : Hwc2TestCoverage)
    update();
!!!15116037.cpp!!!	~Hwc2TestSurfaceDamage()
    freeSurfaceDamages();
!!!15116165.cpp!!!	dump() : std::string
    std::stringstream dmp;

    const hwc_region_t& curr = get();
    dmp << "\tsurface damage: region count " << curr.numRects << "\n";
    for (size_t i = 0; i < curr.numRects; i++) {
        const hwc_rect_t& rect = curr.rects[i];
        dmp << "\t\trect: left " << rect.left << ", top " << rect.top
                << ", right " << rect.right << ", bottom " << rect.bottom << "\n";
    }

    return dmp.str();
!!!15116293.cpp!!!	updateBufferArea(in bufferArea : Area) : void
    mBufferArea = bufferArea;
    update();
!!!15116421.cpp!!!	update() : void
    freeSurfaceDamages();

    if (mBufferArea.width == 0 && mBufferArea.height == 0) {
        mSurfaceDamages.push_back({0, nullptr});
        return;
    }

    hwc_region_t damage;

    for (const auto& regionScalar : mRegionScalars) {
        damage.numRects = regionScalar.size();

        if (damage.numRects > 0) {
            hwc_rect_t* rects = new hwc_rect_t[damage.numRects];
            if (!rects) {
                ALOGW("failed to allocate new hwc_rect_t array");
                continue;
            }

            for (size_t i = 0; i < damage.numRects; i++) {
                rects[i].left = regionScalar[i].left * mBufferArea.width;
                rects[i].top = regionScalar[i].top * mBufferArea.height;
                rects[i].right = regionScalar[i].right * mBufferArea.width;
                rects[i].bottom = regionScalar[i].bottom * mBufferArea.height;
            }

            damage.rects = static_cast<hwc_rect_t const*>(rects);
        } else {
            damage.rects = nullptr;
        }

        mSurfaceDamages.push_back(damage);
    }
!!!15116549.cpp!!!	freeSurfaceDamages() : void
    for (const auto& surfaceDamage : mSurfaceDamages) {
        if (surfaceDamage.numRects > 0 && surfaceDamage.rects)
            delete[] surfaceDamage.rects;
    }
    mSurfaceDamages.clear();
