class Proxy
!!!14022149.java!!!	Proxy(inout remote : android.os.IBinder)
mRemote = remote;
!!!14022277.java!!!	asBinder() : android.os.IBinder
return mRemote;
!!!14022405.java!!!	getInterfaceDescriptor() : java.lang.String
return DESCRIPTOR;
!!!14022533.java!!!	setBoolean(inout key : java.lang.String, inout value : boolean, in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(key);
_data.writeInt(((value)?(1):(0)));
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_setBoolean, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14022661.java!!!	setLong(inout key : java.lang.String, in value : long, in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(key);
_data.writeLong(value);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_setLong, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14022789.java!!!	setString(inout key : java.lang.String, inout value : java.lang.String, in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(key);
_data.writeString(value);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_setString, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14022917.java!!!	getBoolean(inout key : java.lang.String, inout defaultValue : boolean, in userId : int) : boolean
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(key);
_data.writeInt(((defaultValue)?(1):(0)));
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_getBoolean, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14023045.java!!!	getLong(inout key : java.lang.String, in defaultValue : long, in userId : int) : long
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
long _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(key);
_data.writeLong(defaultValue);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_getLong, _data, _reply, 0);
_reply.readException();
_result = _reply.readLong();
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14023173.java!!!	getString(inout key : java.lang.String, inout defaultValue : java.lang.String, in userId : int) : java.lang.String
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
java.lang.String _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(key);
_data.writeString(defaultValue);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_getString, _data, _reply, 0);
_reply.readException();
_result = _reply.readString();
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14023301.java!!!	setLockCredential(inout credential : java.lang.String, in type : int, inout savedCredential : java.lang.String, in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(credential);
_data.writeInt(type);
_data.writeString(savedCredential);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_setLockCredential, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14023429.java!!!	resetKeyStore(in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_resetKeyStore, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14023557.java!!!	checkCredential(inout credential : java.lang.String, in type : int, in userId : int, inout progressCallback : ICheckCredentialProgressCallback) : com.android.internal.widget.VerifyCredentialResponse
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
com.android.internal.widget.VerifyCredentialResponse _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(credential);
_data.writeInt(type);
_data.writeInt(userId);
_data.writeStrongBinder((((progressCallback!=null))?(progressCallback.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_checkCredential, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = com.android.internal.widget.VerifyCredentialResponse.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14023685.java!!!	verifyCredential(inout credential : java.lang.String, in type : int, in challenge : long, in userId : int) : com.android.internal.widget.VerifyCredentialResponse
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
com.android.internal.widget.VerifyCredentialResponse _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(credential);
_data.writeInt(type);
_data.writeLong(challenge);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_verifyCredential, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = com.android.internal.widget.VerifyCredentialResponse.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14023813.java!!!	verifyTiedProfileChallenge(inout credential : java.lang.String, in type : int, in challenge : long, in userId : int) : com.android.internal.widget.VerifyCredentialResponse
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
com.android.internal.widget.VerifyCredentialResponse _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(credential);
_data.writeInt(type);
_data.writeLong(challenge);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_verifyTiedProfileChallenge, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = com.android.internal.widget.VerifyCredentialResponse.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14023941.java!!!	checkVoldPassword(in userId : int) : boolean
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_checkVoldPassword, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14024069.java!!!	havePattern(in userId : int) : boolean
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_havePattern, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14024197.java!!!	havePassword(in userId : int) : boolean
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_havePassword, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14024325.java!!!	setSeparateProfileChallengeEnabled(in userId : int, inout enabled : boolean, inout managedUserPassword : java.lang.String) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(userId);
_data.writeInt(((enabled)?(1):(0)));
_data.writeString(managedUserPassword);
mRemote.transact(Stub.TRANSACTION_setSeparateProfileChallengeEnabled, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14024453.java!!!	getSeparateProfileChallengeEnabled(in userId : int) : boolean
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_getSeparateProfileChallengeEnabled, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14024581.java!!!	registerStrongAuthTracker(inout tracker : IStrongAuthTracker) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((tracker!=null))?(tracker.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_registerStrongAuthTracker, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14024709.java!!!	unregisterStrongAuthTracker(inout tracker : IStrongAuthTracker) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((tracker!=null))?(tracker.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_unregisterStrongAuthTracker, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14024837.java!!!	requireStrongAuth(in strongAuthReason : int, in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(strongAuthReason);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_requireStrongAuth, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14024965.java!!!	systemReady() : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_systemReady, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14025093.java!!!	userPresent(in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_userPresent, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!14025221.java!!!	getStrongAuthForUser(in userId : int) : int
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
int _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_getStrongAuthForUser, _data, _reply, 0);
_reply.readException();
_result = _reply.readInt();
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14025349.java!!!	addEscrowToken(inout token : byte [[]], in userId : int) : long
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
long _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeByteArray(token);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_addEscrowToken, _data, _reply, 0);
_reply.readException();
_result = _reply.readLong();
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14025477.java!!!	removeEscrowToken(in handle : long, in userId : int) : boolean
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeLong(handle);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_removeEscrowToken, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14025605.java!!!	isEscrowTokenActive(in handle : long, in userId : int) : boolean
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeLong(handle);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_isEscrowTokenActive, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14025733.java!!!	setLockCredentialWithToken(inout credential : java.lang.String, in type : int, in tokenHandle : long, inout token : byte [[]], in userId : int) : boolean
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(credential);
_data.writeInt(type);
_data.writeLong(tokenHandle);
_data.writeByteArray(token);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_setLockCredentialWithToken, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!14025861.java!!!	unlockUserWithToken(in tokenHandle : long, inout token : byte [[]], in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeLong(tokenHandle);
_data.writeByteArray(token);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_unlockUserWithToken, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
