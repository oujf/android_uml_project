class WifiSignalController
!!!4184709.java!!!	WifiSignalController(inout context : Context, inout hasMobileData : boolean, inout callbackHandler : CallbackHandler, inout networkController : NetworkControllerImpl, inout networkScoreManager : NetworkScoreManager)
        super("WifiSignalController", context, NetworkCapabilities.TRANSPORT_WIFI,
                callbackHandler, networkController);
        mWifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
        mWifiTracker = new WifiStatusTracker(mWifiManager);
        mHasMobileData = hasMobileData;
        Handler handler = new WifiHandler(Looper.getMainLooper());
        mWifiChannel = new AsyncChannel();
        Messenger wifiMessenger = mWifiManager.getWifiServiceMessenger();
        if (wifiMessenger != null) {
            mWifiChannel.connect(context, handler, wifiMessenger);
        }
        // WiFi only has one state.
        mCurrentState.iconGroup = mLastState.iconGroup = new IconGroup(
                "Wi-Fi Icons",
                WifiIcons.WIFI_SIGNAL_STRENGTH,
                WifiIcons.QS_WIFI_SIGNAL_STRENGTH,
                AccessibilityContentDescriptions.WIFI_CONNECTION_STRENGTH,
                WifiIcons.WIFI_NO_NETWORK,
                WifiIcons.QS_WIFI_NO_NETWORK,
                WifiIcons.WIFI_NO_NETWORK,
                WifiIcons.QS_WIFI_NO_NETWORK,
                AccessibilityContentDescriptions.WIFI_NO_CONNECTION
                );

        mScoreCache = new WifiNetworkScoreCache(context, new CacheListener(handler) {
            @Override
            public void networkCacheUpdated(List<ScoredNetwork> networks) {
                mCurrentState.badgeEnum = getWifiBadgeEnum();
                notifyListenersIfNecessary();
            }
        });

        // Setup scoring
        mNetworkScoreManager = networkScoreManager;
        configureScoringGating();
        registerScoreCache();
!!!4184837.java!!!	configureScoringGating() : void
        ContentObserver observer = new ContentObserver(new Handler(Looper.getMainLooper())) {
            @Override
            public void onChange(boolean selfChange) {
                mScoringUiEnabled =
                        Settings.Global.getInt(
                                mContext.getContentResolver(),
                                Settings.Global.NETWORK_SCORING_UI_ENABLED, 0) == 1;
            }
        };
        mContext.getContentResolver().registerContentObserver(
                Settings.Global.getUriFor(Settings.Global.NETWORK_SCORING_UI_ENABLED),
                false /* notifyForDescendants */,
                observer);

        observer.onChange(false /* selfChange */); // Set the initial values
!!!4184965.java!!!	registerScoreCache() : void
        Log.d(mTag, "Registered score cache");
        mNetworkScoreManager.registerNetworkScoreCache(
                NetworkKey.TYPE_WIFI,
                mScoreCache,
                NetworkScoreManager.CACHE_FILTER_CURRENT_NETWORK);
!!!4185093.java!!!	cleanState() : WifiSignalController::WifiState
        return new WifiState();
!!!4185221.java!!!	notifyListeners(inout callback : NetworkController::SignalCallback) : void
        // only show wifi in the cluster if connected or if wifi-only
        boolean wifiVisible = mCurrentState.enabled
                && (mCurrentState.connected || !mHasMobileData);
        String wifiDesc = wifiVisible ? mCurrentState.ssid : null;
        boolean ssidPresent = wifiVisible && mCurrentState.ssid != null;
        String contentDescription = getStringIfExists(getContentDescription());
        if (mCurrentState.inetCondition == 0) {
            contentDescription +=
                    ("," + mContext.getString(R.string.accessibility_quick_settings_no_internet));
        }

        IconState statusIcon = new IconState(wifiVisible, getCurrentIconId(),
                Utils.getWifiBadgeResource(mCurrentState.badgeEnum), contentDescription);
        IconState qsIcon = new IconState(
                mCurrentState.connected, getQsCurrentIconId(),
                Utils.getWifiBadgeResource(mCurrentState.badgeEnum), contentDescription);
        callback.setWifiIndicators(mCurrentState.enabled, statusIcon, qsIcon,
                ssidPresent && mCurrentState.activityIn, ssidPresent && mCurrentState.activityOut,
                wifiDesc, mCurrentState.isTransient);
!!!4185349.java!!!	getCurrentIconId() : int
        if (mCurrentState.badgeEnum != NetworkBadging.BADGING_NONE) {
            return Utils.WIFI_PIE_FOR_BADGING[mCurrentState.level];
        }
        return super.getCurrentIconId();
!!!4185477.java!!!	handleBroadcast(inout intent : Intent) : void
        // Update the WifiStatusTracker with the new information and update the score cache.
        NetworkKey previousNetworkKey = mWifiTracker.networkKey;
        mWifiTracker.handleBroadcast(intent);
        updateScoreCacheIfNecessary(previousNetworkKey);

        mCurrentState.isTransient = mWifiTracker.state == WifiManager.WIFI_STATE_ENABLING
                || mWifiTracker.state == WifiManager.WIFI_AP_STATE_DISABLING
                || mWifiTracker.connecting;
        mCurrentState.enabled = mWifiTracker.enabled;
        mCurrentState.connected = mWifiTracker.connected;
        mCurrentState.ssid = mWifiTracker.ssid;
        mCurrentState.rssi = mWifiTracker.rssi;
        mCurrentState.level = mWifiTracker.level;
        mCurrentState.badgeEnum = getWifiBadgeEnum();
        notifyListenersIfNecessary();
!!!4185605.java!!!	updateScoreCacheIfNecessary(inout previousNetworkKey : NetworkKey) : void
        if (mWifiTracker.networkKey == null) {
            return;
        }
        if ((previousNetworkKey == null) || !mWifiTracker.networkKey.equals(previousNetworkKey)) {
            mScoreCache.clearScores();
            mNetworkScoreManager.requestScores(new NetworkKey[]{mWifiTracker.networkKey});
        }
!!!4185733.java!!!	getWifiBadgeEnum() : int
        if (!mScoringUiEnabled || mWifiTracker.networkKey == null) {
            return NetworkBadging.BADGING_NONE;
        }
        ScoredNetwork score = mScoreCache.getScoredNetwork(mWifiTracker.networkKey);

        if (score != null) {
            return score.calculateBadge(mWifiTracker.rssi);
        }
        return NetworkBadging.BADGING_NONE;
!!!4185861.java!!!	setActivity(in wifiActivity : int) : void
        mCurrentState.activityIn = wifiActivity == WifiManager.DATA_ACTIVITY_INOUT
                || wifiActivity == WifiManager.DATA_ACTIVITY_IN;
        mCurrentState.activityOut = wifiActivity == WifiManager.DATA_ACTIVITY_INOUT
                || wifiActivity == WifiManager.DATA_ACTIVITY_OUT;
        notifyListenersIfNecessary();
