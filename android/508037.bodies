class TWGraphicBufferSource
!!!1469829.cpp!!!	configure(in omxNode : sp<IOmxNode>, in dataspace : Dataspace) : Return<Status>
    if (omxNode == NULL) {
        return toStatus(BAD_VALUE);
    }

    // Do setInputSurface() first, the node will try to enable metadata
    // mode on input, and does necessary error checking. If this fails,
    // we can't use this input surface on the node.
    Return<Status> err(omxNode->setInputSurface(mOmxBufferSource));
    status_t fnStatus = toStatusT(err);
    if (fnStatus != NO_ERROR) {
        ALOGE("Unable to set input surface: %d", fnStatus);
        return err;
    }

    // use consumer usage bits queried from encoder, but always add
    // HW_VIDEO_ENCODER for backward compatibility.
    uint32_t  consumerUsage;
    void *_params = &consumerUsage;
    uint8_t *params = static_cast<uint8_t*>(_params);
    fnStatus = UNKNOWN_ERROR;
    IOmxNode::getParameter_cb _hidl_cb(
            [&fnStatus, &params](Status status, hidl_vec<uint8_t> const& outParams) {
                fnStatus = toStatusT(status);
                std::copy(
                        outParams.data(),
                        outParams.data() + outParams.size(),
                        params);
            });
    omxNode->getParameter(
            static_cast<uint32_t>(OMX_IndexParamConsumerUsageBits),
            inHidlBytes(&consumerUsage, sizeof(consumerUsage)),
            _hidl_cb);
    if (fnStatus != OK) {
        consumerUsage = 0;
    }

    OMX_PARAM_PORTDEFINITIONTYPE def;
    InitOMXParams(&def);
    def.nPortIndex = kPortIndexInput;

    _params = &def;
    params = static_cast<uint8_t*>(_params);
    omxNode->getParameter(
            static_cast<uint32_t>(OMX_IndexParamPortDefinition),
            inHidlBytes(&def, sizeof(def)),
            _hidl_cb);
    if (fnStatus != NO_ERROR) {
        ALOGE("Failed to get port definition: %d", fnStatus);
        return toStatus(fnStatus);
    }


    return toStatus(mBase->configure(
            new TWOmxNodeWrapper(omxNode),
            toRawDataspace(dataspace),
            def.nBufferCountActual,
            def.format.video.nFrameWidth,
            def.format.video.nFrameHeight,
            consumerUsage));
!!!1469957.cpp!!!	setSuspend(in suspend : bool, in timeUs : int64_t) : Return<Status>
    return toStatus(mBase->setSuspend(suspend, timeUs));
!!!1470085.cpp!!!	setRepeatPreviousFrameDelayUs(in repeatAfterUs : int64_t) : Return<Status>
    return toStatus(mBase->setRepeatPreviousFrameDelayUs(repeatAfterUs));
!!!1470213.cpp!!!	setMaxFps(in maxFps : float) : Return<Status>
    return toStatus(mBase->setMaxFps(maxFps));
!!!1470341.cpp!!!	setTimeLapseConfig(in fps : double, in captureFps : double) : Return<Status>
    return toStatus(mBase->setTimeLapseConfig(fps, captureFps));
!!!1470469.cpp!!!	setStartTimeUs(in startTimeUs : int64_t) : Return<Status>
    return toStatus(mBase->setStartTimeUs(startTimeUs));
!!!1470597.cpp!!!	setStopTimeUs(in stopTimeUs : int64_t) : Return<Status>
    return toStatus(mBase->setStopTimeUs(stopTimeUs));
!!!1470725.cpp!!!	getStopTimeOffsetUs(in _hidl_cb : getStopTimeOffsetUs_cb) : Return<void>
    // TODO: Implement this when needed.
    _hidl_cb(Status::OK, 0);
    return Void();
!!!1470853.cpp!!!	setColorAspects(in aspects : ColorAspects) : Return<Status>
    return toStatus(mBase->setColorAspects(toCompactColorAspects(aspects)));
!!!1470981.cpp!!!	setTimeOffsetUs(in timeOffsetUs : int64_t) : Return<Status>
    return toStatus(mBase->setTimeOffsetUs(timeOffsetUs));
!!!1471109.cpp!!!	signalEndOfInputStream() : Return<Status>
    return toStatus(mBase->signalEndOfInputStream());
