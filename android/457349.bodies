class AString
!!!1424517.cpp!!!	AString(in s : char)
    if (!s) {
        ALOGW("ctor got NULL, using empty string instead");
        clear();
    } else {
        setTo(s);
    }
!!!1424645.cpp!!!	AString(in s : char, in size : size_t)
    if (!s) {
        ALOGW("ctor got NULL, using empty string instead");
        clear();
    } else {
        setTo(s, size);
    }
!!!1424773.cpp!!!	AString(in from : String8)
    setTo(from.string(), from.length());
!!!1424901.cpp!!!	AString(in from : AString)
    setTo(from, 0, from.size());
!!!1425029.cpp!!!	AString(in from : AString, in offset : size_t, in n : size_t)
    setTo(from, offset, n);
!!!1425157.cpp!!!	~AString()
    clear();
!!!1425285.cpp!!!	operator =(in from : AString) : AString
    if (&from != this) {
        setTo(from, 0, from.size());
    }

    return *this;
!!!1425413.cpp!!!	setTo(in s : char) : void
    setTo(s, strlen(s));
!!!1425541.cpp!!!	setTo(in s : char, in size : size_t) : void
    clear();
    append(s, size);
!!!1425669.cpp!!!	setTo(in from : AString, in offset : size_t, in n : size_t) : void
    CHECK(&from != this);

    clear();
    setTo(from.mData + offset, n);
!!!1425797.cpp!!!	size() : size_t
    return mSize;
!!!1425925.cpp!!!	c_str() : char
    return mData;
!!!1426053.cpp!!!	empty() : bool
    return mSize == 0;
!!!1426181.cpp!!!	clear() : void
    if (mData && mData != kEmptyString) {
        free(mData);
        mData = NULL;
    }

    mData = (char *)kEmptyString;
    mSize = 0;
    mAllocSize = 1;
!!!1426309.cpp!!!	trim() : void
    makeMutable();

    size_t i = 0;
    while (i < mSize && isspace(mData[i])) {
        ++i;
    }

    size_t j = mSize;
    while (j > i && isspace(mData[j - 1])) {
        --j;
    }

    memmove(mData, &mData[i], j - i);
    mSize = j - i;
    mData[mSize] = '\0';
!!!1426437.cpp!!!	erase(in start : size_t, in n : size_t) : void
    CHECK_LT(start, mSize);
    CHECK_LE(start + n, mSize);

    makeMutable();

    memmove(&mData[start], &mData[start + n], mSize - start - n);
    mSize -= n;
    mData[mSize] = '\0';
!!!1426693.cpp!!!	append(in s : char) : void
    append(s, strlen(s));
!!!1426821.cpp!!!	append(in s : char, in size : size_t) : void
    makeMutable();

    if (mSize + size + 1 > mAllocSize) {
        mAllocSize = (mAllocSize + size + 31) & -32;
        mData = (char *)realloc(mData, mAllocSize);
        CHECK(mData != NULL);
    }

    memcpy(&mData[mSize], s, size);
    mSize += size;
    mData[mSize] = '\0';
!!!1426949.cpp!!!	append(in from : AString) : void
    append(from.c_str(), from.size());
!!!1427077.cpp!!!	append(in from : AString, in offset : size_t, in n : size_t) : void
    append(from.c_str() + offset, n);
!!!1427205.cpp!!!	append(in x : int) : void
    char s[16];
    int result = snprintf(s, sizeof(s), "%d", x);
    CHECK((result > 0) && ((size_t) result) < sizeof(s));
    append(s);
!!!1427333.cpp!!!	append(in x : uint) : void
    char s[16];
    int result = snprintf(s, sizeof(s), "%u", x);
    CHECK((result > 0) && ((size_t) result) < sizeof(s));
    append(s);
!!!1427461.cpp!!!	append(in x : long) : void
    char s[32];
    int result = snprintf(s, sizeof(s), "%ld", x);
    CHECK((result > 0) && ((size_t) result) < sizeof(s));
    append(s);
!!!1427589.cpp!!!	append(in x : ulong) : void
    char s[32];
    int result = snprintf(s, sizeof(s), "%lu", x);
    CHECK((result > 0) && ((size_t) result) < sizeof(s));
    append(s);
!!!1427717.cpp!!!	append(in x : long long) : void
    char s[32];
    int result = snprintf(s, sizeof(s), "%lld", x);
    CHECK((result > 0) && ((size_t) result) < sizeof(s));
    append(s);
!!!1427845.cpp!!!	append(in x : unsigned long long) : void
    char s[32];
    int result = snprintf(s, sizeof(s), "%llu", x);
    CHECK((result > 0) && ((size_t) result) < sizeof(s));
    append(s);
!!!1427973.cpp!!!	append(in x : float) : void
    char s[16];
    int result = snprintf(s, sizeof(s), "%f", x);
    CHECK((result > 0) && ((size_t) result) < sizeof(s));
    append(s);
!!!1428101.cpp!!!	append(in x : double) : void
    char s[16];
    int result = snprintf(s, sizeof(s), "%f", x);
    CHECK((result > 0) && ((size_t) result) < sizeof(s));
    append(s);
!!!1428229.cpp!!!	append(inout x : void) : void
    char s[32];
    int result = snprintf(s, sizeof(s), "%p", x);
    CHECK((result > 0) && ((size_t) result) < sizeof(s));
    append(s);
!!!1428357.cpp!!!	insert(in from : AString, in insertionPos : size_t) : void
    insert(from.c_str(), from.size(), insertionPos);
!!!1428485.cpp!!!	insert(in from : char, in size : size_t, in insertionPos : size_t) : void
    CHECK_GE(insertionPos, 0u);
    CHECK_LE(insertionPos, mSize);

    makeMutable();

    if (mSize + size + 1 > mAllocSize) {
        mAllocSize = (mAllocSize + size + 31) & -32;
        mData = (char *)realloc(mData, mAllocSize);
        CHECK(mData != NULL);
    }

    memmove(&mData[insertionPos + size],
            &mData[insertionPos], mSize - insertionPos + 1);

    memcpy(&mData[insertionPos], from, size);

    mSize += size;
!!!1428613.cpp!!!	find(in substring : char, in start : size_t = 0) : ssize_t
    CHECK_LE(start, size());

    const char *match = strstr(mData + start, substring);

    if (match == NULL) {
        return -1;
    }

    return match - mData;
!!!1428741.cpp!!!	hash() : size_t
    size_t x = 0;
    for (size_t i = 0; i < mSize; ++i) {
        x = (x * 31) + mData[i];
    }

    return x;
!!!1428869.cpp!!!	operator ==(in other : AString) : bool
    return mSize == other.mSize && !memcmp(mData, other.mData, mSize);
!!!1429125.cpp!!!	operator <(in other : AString) : bool
    return compare(other) < 0;
!!!1429253.cpp!!!	operator >(in other : AString) : bool
    return compare(other) > 0;
!!!1429381.cpp!!!	compare(in other : AString) : int
    return strcmp(mData, other.mData);
!!!1429509.cpp!!!	compareIgnoreCase(in other : AString) : int
    return strcasecmp(mData, other.mData);
!!!1429637.cpp!!!	equalsIgnoreCase(in other : AString) : bool
    return compareIgnoreCase(other) == 0;
!!!1429765.cpp!!!	startsWith(in prefix : char) : bool
    return !strncmp(mData, prefix, strlen(prefix));
!!!1429893.cpp!!!	endsWith(in suffix : char) : bool
    size_t suffixLen = strlen(suffix);

    if (mSize < suffixLen) {
        return false;
    }

    return !strcmp(mData + mSize - suffixLen, suffix);
!!!1430021.cpp!!!	startsWithIgnoreCase(in prefix : char) : bool
    return !strncasecmp(mData, prefix, strlen(prefix));
!!!1430149.cpp!!!	endsWithIgnoreCase(in suffix : char) : bool
    size_t suffixLen = strlen(suffix);

    if (mSize < suffixLen) {
        return false;
    }

    return !strcasecmp(mData + mSize - suffixLen, suffix);
!!!1430277.cpp!!!	tolower() : void
    makeMutable();

    for (size_t i = 0; i < mSize; ++i) {
        mData[i] = ::tolower(mData[i]);
    }
!!!1430405.cpp!!!	FromParcel(in parcel : Parcel) : AString
    size_t size = static_cast<size_t>(parcel.readInt32());
    return AString(static_cast<const char *>(parcel.readInplace(size)), size);
!!!1430533.cpp!!!	writeToParcel(inout parcel : Parcel) : status_t
    CHECK_LE(mSize, static_cast<size_t>(INT32_MAX));
    status_t err = parcel->writeInt32(mSize);
    if (err == OK) {
        err = parcel->write(mData, mSize);
    }
    return err;
!!!1430661.cpp!!!	makeMutable() : void
    if (mData == kEmptyString) {
        mData = strdup(kEmptyString);
    }
