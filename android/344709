format 216
"performanced" // source::frameworks::native::services::vr::performanced::performanced
  revision 1
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/services/vr/performanced/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/native/services/vr/performanced/"
  deploymentview 289157 "performanced"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1135621 "main"
      stereotype "source"
      cpp_src "// anonymous namespace

int main(int /*argc*/, char** /*argv*/) {
  int ret = -1;

  struct __user_cap_header_struct capheader;
  struct __user_cap_data_struct capdata[kMaxCapNumber];

  std::shared_ptr<android::pdx::Service> service;
  std::unique_ptr<android::pdx::ServiceDispatcher> dispatcher;

  ALOGI(\"Starting up...\");

  // We need to be able to create endpoints with full perms.
  umask(0000);

  // Keep capabilities when switching UID to AID_SYSTEM.
  ret = prctl(PR_SET_KEEPCAPS, 1, 0, 0, 0);
  CHECK_ERROR(ret < 0, error, \"Failed to set KEEPCAPS: %s\", strerror(errno));

  // Set UID and GID to system.
  ret = setresgid(AID_SYSTEM, AID_SYSTEM, AID_SYSTEM);
  CHECK_ERROR(ret < 0, error, \"Failed to set GID: %s\", strerror(errno));
  ret = setresuid(AID_SYSTEM, AID_SYSTEM, AID_SYSTEM);
  CHECK_ERROR(ret < 0, error, \"Failed to set UID: %s\", strerror(errno));

  // Keep CAP_SYS_NICE, allowing control of scheduler class, priority, and
  // cpuset for other tasks in the system.
  memset(&capheader, 0, sizeof(capheader));
  memset(&capdata, 0, sizeof(capdata));
  capheader.version = _LINUX_CAPABILITY_VERSION_3;
  capdata[CAP_TO_INDEX(CAP_SYS_NICE)].effective |= CAP_TO_MASK(CAP_SYS_NICE);
  capdata[CAP_TO_INDEX(CAP_SYS_NICE)].permitted |= CAP_TO_MASK(CAP_SYS_NICE);

  // Drop all caps but the ones configured above.
  ret = capset(&capheader, capdata);
  CHECK_ERROR(ret < 0, error, \"Could not set capabilities: %s\",
              strerror(errno));

  dispatcher = android::pdx::default_transport::ServiceDispatcher::Create();
  CHECK_ERROR(!dispatcher, error, \"Failed to create service dispatcher.\");

  service = android::dvr::PerformanceService::Create();
  CHECK_ERROR(!service, error, \"Failed to create performance service service.\");
  dispatcher->AddService(service);

  ALOGI(\"Entering message loop.\");

  ret = dispatcher->EnterDispatchLoop();
  CHECK_ERROR(ret < 0, error, \"Dispatch loop exited because: %s\\n\",
              strerror(-ret));

error:
  return ret;
}
"
      associated_elems
      end
    end
  end
end
