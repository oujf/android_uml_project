class FlashlightTile
!!!3441925.java!!!	FlashlightTile(inout host : QSHost)
        super(host);
        mFlashlightController = Dependency.get(FlashlightController.class);
!!!3442053.java!!!	handleDestroy() : void
        super.handleDestroy();
!!!3442181.java!!!	newTileState() : BooleanState
        return new BooleanState();
!!!3442309.java!!!	setListening(inout listening : boolean) : void
        if (listening) {
            mFlashlightController.addCallback(this);
        } else {
            mFlashlightController.removeCallback(this);
        }
!!!3442565.java!!!	getLongClickIntent() : Intent
        return new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
!!!3442693.java!!!	isAvailable() : boolean
        return mFlashlightController.hasFlashlight();
!!!3442821.java!!!	handleClick() : void
        if (ActivityManager.isUserAMonkey()) {
            return;
        }
        boolean newState = !mState.value;
        refreshState(newState);
        mFlashlightController.setFlashlight(newState);
!!!3442949.java!!!	getTileLabel() : CharSequence
        return mContext.getString(R.string.quick_settings_flashlight_label);
!!!3443077.java!!!	handleLongClick() : void
        handleClick();
!!!3443205.java!!!	handleUpdateState(inout state : BooleanState, inout arg : Object) : void
        state.label = mHost.getContext().getString(R.string.quick_settings_flashlight_label);
        if (!mFlashlightController.isAvailable()) {
            Drawable icon = mHost.getContext().getDrawable(R.drawable.ic_signal_flashlight_enable)
                    .mutate();
            state.icon = new DrawableIcon(icon);
            state.contentDescription = mContext.getString(
                    R.string.accessibility_quick_settings_flashlight_unavailable);
            state.state = Tile.STATE_UNAVAILABLE;
            return;
        }
        if (arg instanceof Boolean) {
            boolean value = (Boolean) arg;
            if (value == state.value) {
                return;
            }
            state.value = value;
        } else {
            state.value = mFlashlightController.isEnabled();
        }
        final AnimationIcon icon = state.value ? mEnable : mDisable;
        state.icon = icon;
        state.contentDescription = mContext.getString(R.string.quick_settings_flashlight_label);
        state.expandedAccessibilityClassName = Switch.class.getName();
        state.state = state.value ? Tile.STATE_ACTIVE : Tile.STATE_INACTIVE;
!!!3443333.java!!!	getMetricsCategory() : int
        return MetricsEvent.QS_FLASHLIGHT;
!!!3443461.java!!!	composeChangeAnnouncement() : String
        if (mState.value) {
            return mContext.getString(R.string.accessibility_quick_settings_flashlight_changed_on);
        } else {
            return mContext.getString(R.string.accessibility_quick_settings_flashlight_changed_off);
        }
!!!3443589.java!!!	onFlashlightChanged(inout enabled : boolean) : void
        refreshState(enabled);
!!!3443717.java!!!	onFlashlightError() : void
        refreshState(false);
!!!3443845.java!!!	onFlashlightAvailabilityChanged(inout available : boolean) : void
        refreshState();
