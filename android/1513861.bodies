class AnimationScaleListDrawable
!!!9911173.java!!!	AnimationScaleListDrawable()
        this(null, null);
!!!9911301.java!!!	AnimationScaleListDrawable(inout state : AnimationScaleListDrawable::AnimationScaleListState, inout res : Resources)
        // Every scale list drawable has its own constant state.
        final AnimationScaleListState newState = new AnimationScaleListState(state, this, res);
        setConstantState(newState);
        onStateChange(getState());
!!!9911429.java!!!	onStateChange(inout stateSet : int [[]]) : boolean
        final boolean changed = super.onStateChange(stateSet);
        int idx = mAnimationScaleListState.getCurrentDrawableIndexBasedOnScale();
        return selectDrawable(idx) || changed;
!!!9911557.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        final TypedArray a = obtainAttributes(r, theme, attrs,
                R.styleable.AnimationScaleListDrawable);
        updateDensity(r);
        a.recycle();

        inflateChildElements(r, parser, attrs, theme);

        onStateChange(getState());
!!!9911685.java!!!	inflateChildElements(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        final AnimationScaleListState state = mAnimationScaleListState;
        final int innerDepth = parser.getDepth() + 1;
        int type;
        int depth;
        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT
                && ((depth = parser.getDepth()) >= innerDepth
                || type != XmlPullParser.END_TAG)) {
            if (type != XmlPullParser.START_TAG) {
                continue;
            }

            if (depth > innerDepth || !parser.getName().equals("item")) {
                continue;
            }

            // Either pick up the android:drawable attribute.
            final TypedArray a = obtainAttributes(r, theme, attrs,
                    R.styleable.AnimationScaleListDrawableItem);
            Drawable dr = a.getDrawable(R.styleable.AnimationScaleListDrawableItem_drawable);
            a.recycle();

            // Or parse the child element under <item>.
            if (dr == null) {
                while ((type = parser.next()) == XmlPullParser.TEXT) {
                }
                if (type != XmlPullParser.START_TAG) {
                    throw new XmlPullParserException(
                            parser.getPositionDescription()
                                    + ": <item> tag requires a 'drawable' attribute or "
                                    + "child tag defining a drawable");
                }
                dr = Drawable.createFromXmlInner(r, parser, attrs, theme);
            }

            state.addDrawable(dr);
        }
!!!9911813.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mAnimationScaleListState.mutate();
            mMutated = true;
        }
        return this;
!!!9911941.java!!!	clearMutated() : void
        super.clearMutated();
        mMutated = false;
!!!9912069.java!!!	start() : void
        Drawable dr = getCurrent();
        if (dr != null && dr instanceof Animatable) {
            ((Animatable) dr).start();
        }
!!!9912197.java!!!	stop() : void
        Drawable dr = getCurrent();
        if (dr != null && dr instanceof Animatable) {
            ((Animatable) dr).stop();
        }
!!!9912325.java!!!	isRunning() : boolean
        boolean result = false;
        Drawable dr = getCurrent();
        if (dr != null && dr instanceof Animatable) {
            result = ((Animatable) dr).isRunning();
        }
        return result;
!!!9913349.java!!!	applyTheme(inout theme : Resources::Theme) : void
        super.applyTheme(theme);

        onStateChange(getState());
!!!9913477.java!!!	setConstantState(inout state : DrawableContainerState) : void
        super.setConstantState(state);

        if (state instanceof AnimationScaleListState) {
            mAnimationScaleListState = (AnimationScaleListState) state;
        }
