class AbstractEventLogger
!!!8094853.java!!!	AbstractEventLogger(in callerUid : int, in callerPid : int, in serviceApp : String)
        mCallerUid = callerUid;
        mCallerPid = callerPid;
        mServiceApp = serviceApp;
        mReceivedTime = SystemClock.elapsedRealtime();
!!!8094981.java!!!	onRequestProcessingStart() : void
        mRequestProcessingStartTime = SystemClock.elapsedRealtime();
!!!8095109.java!!!	onEngineDataReceived() : void
        if (mEngineStartTime == -1) {
            mEngineStartTime = SystemClock.elapsedRealtime();
        }
!!!8095237.java!!!	onEngineComplete() : void
        mEngineCompleteTime = SystemClock.elapsedRealtime();
!!!8095365.java!!!	onAudioDataWritten() : void
        // For now, keep track of only the first chunk of audio
        // that was played.
        if (mPlaybackStartTime == -1) {
            mPlaybackStartTime = SystemClock.elapsedRealtime();
        }
!!!8095493.java!!!	onCompleted(in statusCode : int) : void
        if (mLogWritten) {
            return;
        } else {
            mLogWritten = true;
        }

        long completionTime = SystemClock.elapsedRealtime();

        // We don't report latency for stopped syntheses because their overall
        // total time spent will be inaccurate (will not correlate with
        // the length of the utterance).

        // onAudioDataWritten() should normally always be called, and hence mPlaybackStartTime
        // should be set, if an error does not occur.
        if (statusCode != TextToSpeech.SUCCESS
                || mPlaybackStartTime == -1 || mEngineCompleteTime == -1) {
            logFailure(statusCode);
            return;
        }

        final long audioLatency = mPlaybackStartTime - mReceivedTime;
        final long engineLatency = mEngineStartTime - mRequestProcessingStartTime;
        final long engineTotal = mEngineCompleteTime - mRequestProcessingStartTime;
        logSuccess(audioLatency, engineLatency, engineTotal);
