class PanelBar
!!!4053509.java!!!	LOG(in fmt : String, inout  : Object...args) : void
        if (!DEBUG) return;
        Log.v(TAG, String.format(fmt, args));
!!!4053637.java!!!	go(in state : int) : void
        if (DEBUG) LOG("go state: %d -> %d", mState, state);
        mState = state;
!!!4053765.java!!!	getState() : int
        return mState;
!!!4053893.java!!!	PanelBar(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!4054021.java!!!	onFinishInflate() : void
        super.onFinishInflate();
!!!4054149.java!!!	setPanel(inout pv : PanelView) : void
        mPanel = pv;
        pv.setBar(this);
!!!4054277.java!!!	setBouncerShowing(inout showing : boolean) : void
        int important = showing ? IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS
                : IMPORTANT_FOR_ACCESSIBILITY_AUTO;

        setImportantForAccessibility(important);

        if (mPanel != null) mPanel.setImportantForAccessibility(important);
!!!4054405.java!!!	panelEnabled() : boolean
        return true;
!!!4054533.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        // Allow subclasses to implement enable/disable semantics
        if (!panelEnabled()) {
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                Log.v(TAG, String.format("onTouch: all panels disabled, ignoring touch at (%d,%d)",
                        (int) event.getX(), (int) event.getY()));
            }
            return false;
        }

        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            final PanelView panel = mPanel;
            if (panel == null) {
                // panel is not there, so we'll eat the gesture
                Log.v(TAG, String.format("onTouch: no panel for touch at (%d,%d)",
                        (int) event.getX(), (int) event.getY()));
                return true;
            }
            boolean enabled = panel.isEnabled();
            if (DEBUG) LOG("PanelBar.onTouch: state=%d ACTION_DOWN: panel %s %s", mState, panel,
                    (enabled ? "" : " (disabled)"));
            if (!enabled) {
                // panel is disabled, so we'll eat the gesture
                Log.v(TAG, String.format(
                        "onTouch: panel (%s) is disabled, ignoring touch at (%d,%d)",
                        panel, (int) event.getX(), (int) event.getY()));
                return true;
            }
        }
        return mPanel == null || mPanel.onTouchEvent(event);
!!!4054789.java!!!	panelExpansionChanged(in frac : float, inout expanded : boolean) : void
        boolean fullyClosed = true;
        boolean fullyOpened = false;
        if (SPEW) LOG("panelExpansionChanged: start state=%d", mState);
        PanelView pv = mPanel;
        pv.setVisibility(expanded ? VISIBLE : INVISIBLE);
        // adjust any other panels that may be partially visible
        if (expanded) {
            if (mState == STATE_CLOSED) {
                go(STATE_OPENING);
                onPanelPeeked();
            }
            fullyClosed = false;
            final float thisFrac = pv.getExpandedFraction();
            if (SPEW) LOG("panelExpansionChanged:  -> %s: f=%.1f", pv.getName(), thisFrac);
            fullyOpened = thisFrac >= 1f;
        }
        if (fullyOpened && !mTracking) {
            go(STATE_OPEN);
            onPanelFullyOpened();
        } else if (fullyClosed && !mTracking && mState != STATE_CLOSED) {
            go(STATE_CLOSED);
            onPanelCollapsed();
        }

        if (SPEW) LOG("panelExpansionChanged: end state=%d [%s%s ]", mState,
                fullyOpened?" fullyOpened":"", fullyClosed?" fullyClosed":"");
!!!4054917.java!!!	collapsePanel(inout animate : boolean, inout delayed : boolean, in speedUpFactor : float) : void
        boolean waiting = false;
        PanelView pv = mPanel;
        if (animate && !pv.isFullyCollapsed()) {
            pv.collapse(delayed, speedUpFactor);
            waiting = true;
        } else {
            pv.resetViews();
            pv.setExpandedFraction(0); // just in case
            pv.cancelPeek();
        }
        if (DEBUG) LOG("collapsePanel: animate=%s waiting=%s", animate, waiting);
        if (!waiting && mState != STATE_CLOSED) {
            // it's possible that nothing animated, so we replicate the termination
            // conditions of panelExpansionChanged here
            go(STATE_CLOSED);
            onPanelCollapsed();
        }
!!!4055045.java!!!	onPanelPeeked() : void
        if (DEBUG) LOG("onPanelPeeked");
!!!4055173.java!!!	isClosed() : boolean
        return mState == STATE_CLOSED;
!!!4055301.java!!!	onPanelCollapsed() : void
        if (DEBUG) LOG("onPanelCollapsed");
!!!4055429.java!!!	onPanelFullyOpened() : void
        if (DEBUG) LOG("onPanelFullyOpened");
!!!4055557.java!!!	onTrackingStarted() : void
        mTracking = true;
!!!4055685.java!!!	onTrackingStopped(inout expand : boolean) : void
        mTracking = false;
!!!4055813.java!!!	onExpandingFinished() : void
        if (DEBUG) LOG("onExpandingFinished");
!!!4055941.java!!!	onClosingFinished() : void

