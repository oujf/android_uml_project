class ContentProviderClient
!!!6124037.java!!!	ContentProviderClient(inout contentResolver : ContentResolver, inout contentProvider : IContentProvider, inout stable : boolean)
        mContentResolver = contentResolver;
        mContentProvider = contentProvider;
        mPackageName = contentResolver.mPackageName;

        mStable = stable;

        mCloseGuard.open("close");
!!!6124165.java!!!	setDetectNotResponding(in timeoutMillis : long) : void
        synchronized (ContentProviderClient.class) {
            mAnrTimeout = timeoutMillis;

            if (timeoutMillis > 0) {
                if (mAnrRunnable == null) {
                    mAnrRunnable = new NotRespondingRunnable();
                }
                if (sAnrHandler == null) {
                    sAnrHandler = new Handler(Looper.getMainLooper(), null, true /* async */);
                }
            } else {
                mAnrRunnable = null;
            }
        }
!!!6124293.java!!!	beforeRemote() : void
        if (mAnrRunnable != null) {
            sAnrHandler.postDelayed(mAnrRunnable, mAnrTimeout);
        }
!!!6124421.java!!!	afterRemote() : void
        if (mAnrRunnable != null) {
            sAnrHandler.removeCallbacks(mAnrRunnable);
        }
!!!6124549.java!!!	query(inout url : Uri, inout projection : String [[]], in selection : String, inout selectionArgs : String [[]], in sortOrder : String) : Cursor
        return query(url, projection, selection,  selectionArgs, sortOrder, null);
!!!6124677.java!!!	query(inout uri : Uri, inout projection : String [[]], in selection : String, inout selectionArgs : String [[]], in sortOrder : String, inout cancellationSignal : CancellationSignal) : Cursor
        Bundle queryArgs =
                ContentResolver.createSqlQueryBundle(selection, selectionArgs, sortOrder);
        return query(uri, projection, queryArgs, cancellationSignal);
!!!6124805.java!!!	query(inout uri : Uri, inout projection : String [[]], inout queryArgs : Bundle, inout cancellationSignal : CancellationSignal) : Cursor
        Preconditions.checkNotNull(uri, "url");

        beforeRemote();
        try {
            ICancellationSignal remoteCancellationSignal = null;
            if (cancellationSignal != null) {
                cancellationSignal.throwIfCanceled();
                remoteCancellationSignal = mContentProvider.createCancellationSignal();
                cancellationSignal.setRemote(remoteCancellationSignal);
            }
            final Cursor cursor = mContentProvider.query(
                    mPackageName, uri, projection, queryArgs, remoteCancellationSignal);
            if (cursor == null) {
                return null;
            }
            return new CursorWrapperInner(cursor);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6124933.java!!!	getType(inout url : Uri) : String
        Preconditions.checkNotNull(url, "url");

        beforeRemote();
        try {
            return mContentProvider.getType(url);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6125061.java!!!	getStreamTypes(inout url : Uri, in mimeTypeFilter : String) : String
        Preconditions.checkNotNull(url, "url");
        Preconditions.checkNotNull(mimeTypeFilter, "mimeTypeFilter");

        beforeRemote();
        try {
            return mContentProvider.getStreamTypes(url, mimeTypeFilter);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6125189.java!!!	canonicalize(inout url : Uri) : Uri
        Preconditions.checkNotNull(url, "url");

        beforeRemote();
        try {
            return mContentProvider.canonicalize(mPackageName, url);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6125317.java!!!	uncanonicalize(inout url : Uri) : Uri
        Preconditions.checkNotNull(url, "url");

        beforeRemote();
        try {
            return mContentProvider.uncanonicalize(mPackageName, url);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6125445.java!!!	refresh(inout url : Uri, inout args : Bundle, inout cancellationSignal : CancellationSignal) : boolean
        Preconditions.checkNotNull(url, "url");

        beforeRemote();
        try {
            ICancellationSignal remoteCancellationSignal = null;
            if (cancellationSignal != null) {
                cancellationSignal.throwIfCanceled();
                remoteCancellationSignal = mContentProvider.createCancellationSignal();
                cancellationSignal.setRemote(remoteCancellationSignal);
            }
            return mContentProvider.refresh(mPackageName, url, args, remoteCancellationSignal);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6125573.java!!!	insert(inout url : Uri, inout initialValues : ContentValues) : Uri
        Preconditions.checkNotNull(url, "url");

        beforeRemote();
        try {
            return mContentProvider.insert(mPackageName, url, initialValues);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6125701.java!!!	bulkInsert(inout url : Uri, inout initialValues : ContentValues [[]]) : int
        Preconditions.checkNotNull(url, "url");
        Preconditions.checkNotNull(initialValues, "initialValues");

        beforeRemote();
        try {
            return mContentProvider.bulkInsert(mPackageName, url, initialValues);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6125829.java!!!	delete(inout url : Uri, in selection : String, inout selectionArgs : String [[]]) : int
        Preconditions.checkNotNull(url, "url");

        beforeRemote();
        try {
            return mContentProvider.delete(mPackageName, url, selection, selectionArgs);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6125957.java!!!	update(inout url : Uri, inout values : ContentValues, in selection : String, inout selectionArgs : String [[]]) : int
        Preconditions.checkNotNull(url, "url");

        beforeRemote();
        try {
            return mContentProvider.update(mPackageName, url, values, selection, selectionArgs);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6126085.java!!!	openFile(inout url : Uri, in mode : String) : ParcelFileDescriptor
        return openFile(url, mode, null);
!!!6126213.java!!!	openFile(inout url : Uri, in mode : String, inout signal : CancellationSignal) : ParcelFileDescriptor
        Preconditions.checkNotNull(url, "url");
        Preconditions.checkNotNull(mode, "mode");

        beforeRemote();
        try {
            ICancellationSignal remoteSignal = null;
            if (signal != null) {
                signal.throwIfCanceled();
                remoteSignal = mContentProvider.createCancellationSignal();
                signal.setRemote(remoteSignal);
            }
            return mContentProvider.openFile(mPackageName, url, mode, remoteSignal, null);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6126341.java!!!	openAssetFile(inout url : Uri, in mode : String) : AssetFileDescriptor
        return openAssetFile(url, mode, null);
!!!6126469.java!!!	openAssetFile(inout url : Uri, in mode : String, inout signal : CancellationSignal) : AssetFileDescriptor
        Preconditions.checkNotNull(url, "url");
        Preconditions.checkNotNull(mode, "mode");

        beforeRemote();
        try {
            ICancellationSignal remoteSignal = null;
            if (signal != null) {
                signal.throwIfCanceled();
                remoteSignal = mContentProvider.createCancellationSignal();
                signal.setRemote(remoteSignal);
            }
            return mContentProvider.openAssetFile(mPackageName, url, mode, remoteSignal);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6126597.java!!!	openTypedAssetFileDescriptor(inout uri : Uri, in mimeType : String, inout opts : Bundle) : AssetFileDescriptor
        return openTypedAssetFileDescriptor(uri, mimeType, opts, null);
!!!6126725.java!!!	openTypedAssetFileDescriptor(inout uri : Uri, in mimeType : String, inout opts : Bundle, inout signal : CancellationSignal) : AssetFileDescriptor
        Preconditions.checkNotNull(uri, "uri");
        Preconditions.checkNotNull(mimeType, "mimeType");

        beforeRemote();
        try {
            ICancellationSignal remoteSignal = null;
            if (signal != null) {
                signal.throwIfCanceled();
                remoteSignal = mContentProvider.createCancellationSignal();
                signal.setRemote(remoteSignal);
            }
            return mContentProvider.openTypedAssetFile(
                    mPackageName, uri, mimeType, opts, remoteSignal);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6126853.java!!!	applyBatch(inout operations : ArrayList<ContentProviderOperation>) : ContentProviderResult
        Preconditions.checkNotNull(operations, "operations");

        beforeRemote();
        try {
            return mContentProvider.applyBatch(mPackageName, operations);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6126981.java!!!	call(in method : String, in arg : String, inout extras : Bundle) : Bundle
        Preconditions.checkNotNull(method, "method");

        beforeRemote();
        try {
            return mContentProvider.call(mPackageName, method, arg, extras);
        } catch (DeadObjectException e) {
            if (!mStable) {
                mContentResolver.unstableProviderDied(mContentProvider);
            }
            throw e;
        } finally {
            afterRemote();
        }
!!!6127109.java!!!	close() : void
        closeInternal();
!!!6127237.java!!!	release() : boolean
        return closeInternal();
!!!6127365.java!!!	closeInternal() : boolean
        mCloseGuard.close();
        if (mClosed.compareAndSet(false, true)) {
            if (mStable) {
                return mContentResolver.releaseProvider(mContentProvider);
            } else {
                return mContentResolver.releaseUnstableProvider(mContentProvider);
            }
        } else {
            return false;
        }
!!!6127493.java!!!	finalize() : void
        try {
            mCloseGuard.warnIfOpen();
            close();
        } finally {
            super.finalize();
        }
!!!6127621.java!!!	getLocalContentProvider() : ContentProvider
        return ContentProvider.coerceToLocalContentProvider(mContentProvider);
!!!6127749.java!!!	releaseQuietly(inout client : ContentProviderClient) : void
        if (client != null) {
            try {
                client.release();
            } catch (Exception ignored) {
            }
        }
