class ActivityOptions
!!!5021445.java!!!	makeCustomAnimation(inout context : Context, in enterResId : int, in exitResId : int) : ActivityOptions
        return makeCustomAnimation(context, enterResId, exitResId, null, null);
!!!5021573.java!!!	makeCustomAnimation(inout context : Context, in enterResId : int, in exitResId : int, inout handler : Handler, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = context.getPackageName();
        opts.mAnimationType = ANIM_CUSTOM;
        opts.mCustomEnterResId = enterResId;
        opts.mCustomExitResId = exitResId;
        opts.setOnAnimationStartedListener(handler, listener);
        return opts;
!!!5021701.java!!!	makeCustomInPlaceAnimation(inout context : Context, in animId : int) : ActivityOptions
        if (animId == 0) {
            throw new RuntimeException("You must specify a valid animation.");
        }

        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = context.getPackageName();
        opts.mAnimationType = ANIM_CUSTOM_IN_PLACE;
        opts.mCustomInPlaceResId = animId;
        return opts;
!!!5021829.java!!!	setOnAnimationStartedListener(in handler : Handler, in listener : ActivityOptions::OnAnimationStartedListener) : void
        if (listener != null) {
            mAnimationStartedListener = new IRemoteCallback.Stub() {
                @Override
                public void sendResult(Bundle data) throws RemoteException {
                    handler.post(new Runnable() {
                        @Override public void run() {
                            listener.onAnimationStarted();
                        }
                    });
                }
            };
        }
!!!5022085.java!!!	setOnAnimationFinishedListener(in handler : Handler, in listener : ActivityOptions::OnAnimationFinishedListener) : void
        if (listener != null) {
            mAnimationFinishedListener = new IRemoteCallback.Stub() {
                @Override
                public void sendResult(Bundle data) throws RemoteException {
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            listener.onAnimationFinished();
                        }
                    });
                }
            };
        }
!!!5022341.java!!!	makeScaleUpAnimation(inout source : View, in startX : int, in startY : int, in width : int, in height : int) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = ANIM_SCALE_UP;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.mWidth = width;
        opts.mHeight = height;
        return opts;
!!!5022469.java!!!	makeClipRevealAnimation(inout source : View, in startX : int, in startY : int, in width : int, in height : int) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mAnimationType = ANIM_CLIP_REVEAL;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.mWidth = width;
        opts.mHeight = height;
        return opts;
!!!5022597.java!!!	makeThumbnailScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int) : ActivityOptions
        return makeThumbnailScaleUpAnimation(source, thumbnail, startX, startY, null);
!!!5022725.java!!!	makeThumbnailScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeThumbnailAnimation(source, thumbnail, startX, startY, listener, true);
!!!5022853.java!!!	makeThumbnailAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : ActivityOptions::OnAnimationStartedListener, inout scaleUp : boolean) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = scaleUp ? ANIM_THUMBNAIL_SCALE_UP : ANIM_THUMBNAIL_SCALE_DOWN;
        opts.mThumbnail = thumbnail;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.setOnAnimationStartedListener(source.getHandler(), listener);
        return opts;
!!!5022981.java!!!	makeMultiThumbFutureAspectScaleAnimation(inout context : Context, inout handler : Handler, inout specsFuture : IAppTransitionAnimationSpecsFuture, inout listener : ActivityOptions::OnAnimationStartedListener, inout scaleUp : boolean) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = context.getPackageName();
        opts.mAnimationType = scaleUp
                ? ANIM_THUMBNAIL_ASPECT_SCALE_UP
                : ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
        opts.mSpecsFuture = specsFuture;
        opts.setOnAnimationStartedListener(handler, listener);
        return opts;
!!!5023109.java!!!	makeThumbnailAspectScaleDownAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, in targetWidth : int, in targetHeight : int, inout handler : Handler, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeAspectScaledThumbnailAnimation(source, thumbnail, startX, startY,
                targetWidth, targetHeight, handler, listener, false);
!!!5023237.java!!!	makeAspectScaledThumbnailAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, in targetWidth : int, in targetHeight : int, inout handler : Handler, inout listener : ActivityOptions::OnAnimationStartedListener, inout scaleUp : boolean) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP :
                ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
        opts.mThumbnail = thumbnail;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.mWidth = targetWidth;
        opts.mHeight = targetHeight;
        opts.setOnAnimationStartedListener(handler, listener);
        return opts;
!!!5023365.java!!!	makeThumbnailAspectScaleDownAnimation(inout source : View, inout specs : AppTransitionAnimationSpec [[]], inout handler : Handler, inout onAnimationStartedListener : ActivityOptions::OnAnimationStartedListener, inout onAnimationFinishedListener : ActivityOptions::OnAnimationFinishedListener) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
        opts.mAnimSpecs = specs;
        opts.setOnAnimationStartedListener(handler, onAnimationStartedListener);
        opts.setOnAnimationFinishedListener(handler, onAnimationFinishedListener);
        return opts;
!!!5023493.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout sharedElement : View, in sharedElementName : String) : ActivityOptions
        return makeSceneTransitionAnimation(activity, Pair.create(sharedElement, sharedElementName));
!!!5023621.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout sharedElements : Pair<View, String>...) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        makeSceneTransitionAnimation(activity, activity.getWindow(), opts,
                activity.mExitTransitionListener, sharedElements);
        return opts;
!!!5023749.java!!!	startSharedElementAnimation(inout window : Window, inout sharedElements : Pair<View, String>...) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        final View decorView = window.getDecorView();
        if (decorView == null) {
            return opts;
        }
        final ExitTransitionCoordinator exit =
                makeSceneTransitionAnimation(null, window, opts, null, sharedElements);
        if (exit != null) {
            HideWindowListener listener = new HideWindowListener(window, exit);
            exit.setHideSharedElementsCallback(listener);
            exit.startExit();
        }
        return opts;
!!!5023877.java!!!	stopSharedElementAnimation(inout window : Window) : void
        final View decorView = window.getDecorView();
        if (decorView == null) {
            return;
        }
        final ExitTransitionCoordinator exit = (ExitTransitionCoordinator)
                decorView.getTag(com.android.internal.R.id.cross_task_transition);
        if (exit != null) {
            exit.cancelPendingTransitions();
            decorView.setTagInternal(com.android.internal.R.id.cross_task_transition, null);
            TransitionManager.endTransitions((ViewGroup) decorView);
            exit.resetViews();
            exit.clearState();
            decorView.setVisibility(View.VISIBLE);
        }
!!!5024005.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout window : Window, inout opts : ActivityOptions, inout callback : SharedElementCallback, inout sharedElements : Pair [[]]) : ExitTransitionCoordinator
        if (!window.hasFeature(Window.FEATURE_ACTIVITY_TRANSITIONS)) {
            opts.mAnimationType = ANIM_DEFAULT;
            return null;
        }
        opts.mAnimationType = ANIM_SCENE_TRANSITION;

        ArrayList<String> names = new ArrayList<String>();
        ArrayList<View> views = new ArrayList<View>();

        if (sharedElements != null) {
            for (int i = 0; i < sharedElements.length; i++) {
                Pair<View, String> sharedElement = sharedElements[i];
                String sharedElementName = sharedElement.second;
                if (sharedElementName == null) {
                    throw new IllegalArgumentException("Shared element name must not be null");
                }
                names.add(sharedElementName);
                View view = sharedElement.first;
                if (view == null) {
                    throw new IllegalArgumentException("Shared element must not be null");
                }
                views.add(sharedElement.first);
            }
        }

        ExitTransitionCoordinator exit = new ExitTransitionCoordinator(activity, window,
                callback, names, names, views, false);
        opts.mTransitionReceiver = exit;
        opts.mSharedElementNames = names;
        opts.mIsReturning = (activity == null);
        if (activity == null) {
            opts.mExitCoordinatorIndex = -1;
        } else {
            opts.mExitCoordinatorIndex =
                    activity.mActivityTransitionState.addExitTransitionCoordinator(exit);
        }
        return exit;
!!!5024133.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout exitCoordinator : ExitTransitionCoordinator, inout sharedElementNames : ArrayList<String>, in resultCode : int, inout resultData : Intent) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mAnimationType = ANIM_SCENE_TRANSITION;
        opts.mSharedElementNames = sharedElementNames;
        opts.mTransitionReceiver = exitCoordinator;
        opts.mIsReturning = true;
        opts.mResultCode = resultCode;
        opts.mResultData = resultData;
        opts.mExitCoordinatorIndex =
                activity.mActivityTransitionState.addExitTransitionCoordinator(exitCoordinator);
        return opts;
!!!5024261.java!!!	makeTaskLaunchBehind() : ActivityOptions
        final ActivityOptions opts = new ActivityOptions();
        opts.mAnimationType = ANIM_LAUNCH_TASK_BEHIND;
        return opts;
!!!5024389.java!!!	makeBasic() : ActivityOptions
        final ActivityOptions opts = new ActivityOptions();
        return opts;
!!!5024517.java!!!	getLaunchTaskBehind() : boolean
        return mAnimationType == ANIM_LAUNCH_TASK_BEHIND;
!!!5024773.java!!!	ActivityOptions(inout opts : Bundle)
        // If the remote side sent us bad parcelables, they won't get the
        // results they want, which is their loss.
        opts.setDefusable(true);

        mPackageName = opts.getString(KEY_PACKAGE_NAME);
        try {
            mUsageTimeReport = opts.getParcelable(KEY_USAGE_TIME_REPORT);
        } catch (RuntimeException e) {
            Slog.w(TAG, e);
        }
        mLaunchBounds = opts.getParcelable(KEY_LAUNCH_BOUNDS);
        mAnimationType = opts.getInt(KEY_ANIM_TYPE);
        switch (mAnimationType) {
            case ANIM_CUSTOM:
                mCustomEnterResId = opts.getInt(KEY_ANIM_ENTER_RES_ID, 0);
                mCustomExitResId = opts.getInt(KEY_ANIM_EXIT_RES_ID, 0);
                mAnimationStartedListener = IRemoteCallback.Stub.asInterface(
                        opts.getBinder(KEY_ANIM_START_LISTENER));
                break;

            case ANIM_CUSTOM_IN_PLACE:
                mCustomInPlaceResId = opts.getInt(KEY_ANIM_IN_PLACE_RES_ID, 0);
                break;

            case ANIM_SCALE_UP:
            case ANIM_CLIP_REVEAL:
                mStartX = opts.getInt(KEY_ANIM_START_X, 0);
                mStartY = opts.getInt(KEY_ANIM_START_Y, 0);
                mWidth = opts.getInt(KEY_ANIM_WIDTH, 0);
                mHeight = opts.getInt(KEY_ANIM_HEIGHT, 0);
                break;

            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
            case ANIM_THUMBNAIL_ASPECT_SCALE_UP:
            case ANIM_THUMBNAIL_ASPECT_SCALE_DOWN:
                // Unpackage the GraphicBuffer from the parceled thumbnail
                final GraphicBuffer buffer = opts.getParcelable(KEY_ANIM_THUMBNAIL);
                if (buffer != null) {
                    mThumbnail = Bitmap.createHardwareBitmap(buffer);
                }
                mStartX = opts.getInt(KEY_ANIM_START_X, 0);
                mStartY = opts.getInt(KEY_ANIM_START_Y, 0);
                mWidth = opts.getInt(KEY_ANIM_WIDTH, 0);
                mHeight = opts.getInt(KEY_ANIM_HEIGHT, 0);
                mAnimationStartedListener = IRemoteCallback.Stub.asInterface(
                        opts.getBinder(KEY_ANIM_START_LISTENER));
                break;

            case ANIM_SCENE_TRANSITION:
                mTransitionReceiver = opts.getParcelable(KEY_TRANSITION_COMPLETE_LISTENER);
                mIsReturning = opts.getBoolean(KEY_TRANSITION_IS_RETURNING, false);
                mSharedElementNames = opts.getStringArrayList(KEY_TRANSITION_SHARED_ELEMENTS);
                mResultData = opts.getParcelable(KEY_RESULT_DATA);
                mResultCode = opts.getInt(KEY_RESULT_CODE);
                mExitCoordinatorIndex = opts.getInt(KEY_EXIT_COORDINATOR_INDEX);
                break;
        }
        mLaunchDisplayId = opts.getInt(KEY_LAUNCH_DISPLAY_ID, INVALID_DISPLAY);
        mLaunchStackId = opts.getInt(KEY_LAUNCH_STACK_ID, INVALID_STACK_ID);
        mLaunchTaskId = opts.getInt(KEY_LAUNCH_TASK_ID, -1);
        mTaskOverlay = opts.getBoolean(KEY_TASK_OVERLAY, false);
        mTaskOverlayCanResume = opts.getBoolean(KEY_TASK_OVERLAY_CAN_RESUME, false);
        mDockCreateMode = opts.getInt(KEY_DOCK_CREATE_MODE, DOCKED_STACK_CREATE_MODE_TOP_OR_LEFT);
        if (opts.containsKey(KEY_ANIM_SPECS)) {
            Parcelable[] specs = opts.getParcelableArray(KEY_ANIM_SPECS);
            mAnimSpecs = new AppTransitionAnimationSpec[specs.length];
            for (int i = specs.length - 1; i >= 0; i--) {
                mAnimSpecs[i] = (AppTransitionAnimationSpec) specs[i];
            }
        }
        if (opts.containsKey(KEY_ANIMATION_FINISHED_LISTENER)) {
            mAnimationFinishedListener = IRemoteCallback.Stub.asInterface(
                    opts.getBinder(KEY_ANIMATION_FINISHED_LISTENER));
        }
        mRotationAnimationHint = opts.getInt(KEY_ROTATION_ANIMATION_HINT);
        mAppVerificationBundle = opts.getBundle(KEY_INSTANT_APP_VERIFICATION_BUNDLE);
        if (opts.containsKey(KEY_SPECS_FUTURE)) {
            mSpecsFuture = IAppTransitionAnimationSpecsFuture.Stub.asInterface(opts.getBinder(
                    KEY_SPECS_FUTURE));
        }
!!!5024901.java!!!	setLaunchBounds(inout screenSpacePixelRect : Rect) : ActivityOptions
        mLaunchBounds = screenSpacePixelRect != null ? new Rect(screenSpacePixelRect) : null;
        return this;
!!!5025029.java!!!	getPackageName() : String
        return mPackageName;
!!!5025157.java!!!	getLaunchBounds() : Rect
        return mLaunchBounds;
!!!5025285.java!!!	getAnimationType() : int
        return mAnimationType;
!!!5025413.java!!!	getCustomEnterResId() : int
        return mCustomEnterResId;
!!!5025541.java!!!	getCustomExitResId() : int
        return mCustomExitResId;
!!!5025669.java!!!	getCustomInPlaceResId() : int
        return mCustomInPlaceResId;
!!!5025797.java!!!	getThumbnail() : GraphicBuffer
        return mThumbnail != null ? mThumbnail.createGraphicBufferHandle() : null;
!!!5025925.java!!!	getStartX() : int
        return mStartX;
!!!5026053.java!!!	getStartY() : int
        return mStartY;
!!!5026181.java!!!	getWidth() : int
        return mWidth;
!!!5026309.java!!!	getHeight() : int
        return mHeight;
!!!5026437.java!!!	getOnAnimationStartListener() : IRemoteCallback
        return mAnimationStartedListener;
!!!5026565.java!!!	getAnimationFinishedListener() : IRemoteCallback
        return mAnimationFinishedListener;
!!!5026693.java!!!	getExitCoordinatorKey() : int
 return mExitCoordinatorIndex;
!!!5026821.java!!!	abort() : void
        if (mAnimationStartedListener != null) {
            try {
                mAnimationStartedListener.sendResult(null);
            } catch (RemoteException e) {
            }
        }
!!!5026949.java!!!	isReturning() : boolean
        return mIsReturning;
!!!5027077.java!!!	isCrossTask() : boolean
        return mExitCoordinatorIndex < 0;
!!!5027205.java!!!	getSharedElementNames() : ArrayList<String>
        return mSharedElementNames;
!!!5027333.java!!!	getResultReceiver() : ResultReceiver
 return mTransitionReceiver;
!!!5027461.java!!!	getResultCode() : int
 return mResultCode;
!!!5027589.java!!!	getResultData() : Intent
 return mResultData;
!!!5027717.java!!!	getUsageTimeReport() : PendingIntent
        return mUsageTimeReport;
!!!5027845.java!!!	getAnimSpecs() : AppTransitionAnimationSpec
 return mAnimSpecs;
!!!5027973.java!!!	getSpecsFuture() : IAppTransitionAnimationSpecsFuture
        return mSpecsFuture;
!!!5028101.java!!!	fromBundle(inout bOptions : Bundle) : ActivityOptions
        return bOptions != null ? new ActivityOptions(bOptions) : null;
!!!5028229.java!!!	abort(inout options : ActivityOptions) : void
        if (options != null) {
            options.abort();
        }
!!!5028357.java!!!	getLaunchDisplayId() : int
        return mLaunchDisplayId;
!!!5028485.java!!!	setLaunchDisplayId(in launchDisplayId : int) : ActivityOptions
        mLaunchDisplayId = launchDisplayId;
        return this;
!!!5028613.java!!!	getLaunchStackId() : int
        return mLaunchStackId;
!!!5028741.java!!!	setLaunchStackId(in launchStackId : int) : void
        mLaunchStackId = launchStackId;
!!!5028869.java!!!	setLaunchTaskId(in taskId : int) : void
        mLaunchTaskId = taskId;
!!!5028997.java!!!	getLaunchTaskId() : int
        return mLaunchTaskId;
!!!5029125.java!!!	setTaskOverlay(inout taskOverlay : boolean, inout canResume : boolean) : void
        mTaskOverlay = taskOverlay;
        mTaskOverlayCanResume = canResume;
!!!5029253.java!!!	getTaskOverlay() : boolean
        return mTaskOverlay;
!!!5029381.java!!!	canTaskOverlayResume() : boolean
        return mTaskOverlayCanResume;
!!!5029509.java!!!	getDockCreateMode() : int
        return mDockCreateMode;
!!!5029637.java!!!	setDockCreateMode(in dockCreateMode : int) : void
        mDockCreateMode = dockCreateMode;
!!!5029765.java!!!	update(inout otherOptions : ActivityOptions) : void
        if (otherOptions.mPackageName != null) {
            mPackageName = otherOptions.mPackageName;
        }
        mUsageTimeReport = otherOptions.mUsageTimeReport;
        mTransitionReceiver = null;
        mSharedElementNames = null;
        mIsReturning = false;
        mResultData = null;
        mResultCode = 0;
        mExitCoordinatorIndex = 0;
        mAnimationType = otherOptions.mAnimationType;
        switch (otherOptions.mAnimationType) {
            case ANIM_CUSTOM:
                mCustomEnterResId = otherOptions.mCustomEnterResId;
                mCustomExitResId = otherOptions.mCustomExitResId;
                mThumbnail = null;
                if (mAnimationStartedListener != null) {
                    try {
                        mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = otherOptions.mAnimationStartedListener;
                break;
            case ANIM_CUSTOM_IN_PLACE:
                mCustomInPlaceResId = otherOptions.mCustomInPlaceResId;
                break;
            case ANIM_SCALE_UP:
                mStartX = otherOptions.mStartX;
                mStartY = otherOptions.mStartY;
                mWidth = otherOptions.mWidth;
                mHeight = otherOptions.mHeight;
                if (mAnimationStartedListener != null) {
                    try {
                        mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = null;
                break;
            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
            case ANIM_THUMBNAIL_ASPECT_SCALE_UP:
            case ANIM_THUMBNAIL_ASPECT_SCALE_DOWN:
                mThumbnail = otherOptions.mThumbnail;
                mStartX = otherOptions.mStartX;
                mStartY = otherOptions.mStartY;
                mWidth = otherOptions.mWidth;
                mHeight = otherOptions.mHeight;
                if (mAnimationStartedListener != null) {
                    try {
                        mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = otherOptions.mAnimationStartedListener;
                break;
            case ANIM_SCENE_TRANSITION:
                mTransitionReceiver = otherOptions.mTransitionReceiver;
                mSharedElementNames = otherOptions.mSharedElementNames;
                mIsReturning = otherOptions.mIsReturning;
                mThumbnail = null;
                mAnimationStartedListener = null;
                mResultData = otherOptions.mResultData;
                mResultCode = otherOptions.mResultCode;
                mExitCoordinatorIndex = otherOptions.mExitCoordinatorIndex;
                break;
        }
        mAnimSpecs = otherOptions.mAnimSpecs;
        mAnimationFinishedListener = otherOptions.mAnimationFinishedListener;
        mSpecsFuture = otherOptions.mSpecsFuture;
!!!5029893.java!!!	toBundle() : Bundle
        Bundle b = new Bundle();
        if (mPackageName != null) {
            b.putString(KEY_PACKAGE_NAME, mPackageName);
        }
        if (mLaunchBounds != null) {
            b.putParcelable(KEY_LAUNCH_BOUNDS, mLaunchBounds);
        }
        b.putInt(KEY_ANIM_TYPE, mAnimationType);
        if (mUsageTimeReport != null) {
            b.putParcelable(KEY_USAGE_TIME_REPORT, mUsageTimeReport);
        }
        switch (mAnimationType) {
            case ANIM_CUSTOM:
                b.putInt(KEY_ANIM_ENTER_RES_ID, mCustomEnterResId);
                b.putInt(KEY_ANIM_EXIT_RES_ID, mCustomExitResId);
                b.putBinder(KEY_ANIM_START_LISTENER, mAnimationStartedListener
                        != null ? mAnimationStartedListener.asBinder() : null);
                break;
            case ANIM_CUSTOM_IN_PLACE:
                b.putInt(KEY_ANIM_IN_PLACE_RES_ID, mCustomInPlaceResId);
                break;
            case ANIM_SCALE_UP:
            case ANIM_CLIP_REVEAL:
                b.putInt(KEY_ANIM_START_X, mStartX);
                b.putInt(KEY_ANIM_START_Y, mStartY);
                b.putInt(KEY_ANIM_WIDTH, mWidth);
                b.putInt(KEY_ANIM_HEIGHT, mHeight);
                break;
            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
            case ANIM_THUMBNAIL_ASPECT_SCALE_UP:
            case ANIM_THUMBNAIL_ASPECT_SCALE_DOWN:
                // Once we parcel the thumbnail for transfering over to the system, create a copy of
                // the bitmap to a hardware bitmap and pass through the GraphicBuffer
                if (mThumbnail != null) {
                    final Bitmap hwBitmap = mThumbnail.copy(Config.HARDWARE, false /* isMutable */);
                    if (hwBitmap != null) {
                        b.putParcelable(KEY_ANIM_THUMBNAIL, hwBitmap.createGraphicBufferHandle());
                    } else {
                        Slog.w(TAG, "Failed to copy thumbnail");
                    }
                }
                b.putInt(KEY_ANIM_START_X, mStartX);
                b.putInt(KEY_ANIM_START_Y, mStartY);
                b.putInt(KEY_ANIM_WIDTH, mWidth);
                b.putInt(KEY_ANIM_HEIGHT, mHeight);
                b.putBinder(KEY_ANIM_START_LISTENER, mAnimationStartedListener
                        != null ? mAnimationStartedListener.asBinder() : null);
                break;
            case ANIM_SCENE_TRANSITION:
                if (mTransitionReceiver != null) {
                    b.putParcelable(KEY_TRANSITION_COMPLETE_LISTENER, mTransitionReceiver);
                }
                b.putBoolean(KEY_TRANSITION_IS_RETURNING, mIsReturning);
                b.putStringArrayList(KEY_TRANSITION_SHARED_ELEMENTS, mSharedElementNames);
                b.putParcelable(KEY_RESULT_DATA, mResultData);
                b.putInt(KEY_RESULT_CODE, mResultCode);
                b.putInt(KEY_EXIT_COORDINATOR_INDEX, mExitCoordinatorIndex);
                break;
        }
        b.putInt(KEY_LAUNCH_DISPLAY_ID, mLaunchDisplayId);
        b.putInt(KEY_LAUNCH_STACK_ID, mLaunchStackId);
        b.putInt(KEY_LAUNCH_TASK_ID, mLaunchTaskId);
        b.putBoolean(KEY_TASK_OVERLAY, mTaskOverlay);
        b.putBoolean(KEY_TASK_OVERLAY_CAN_RESUME, mTaskOverlayCanResume);
        b.putInt(KEY_DOCK_CREATE_MODE, mDockCreateMode);
        if (mAnimSpecs != null) {
            b.putParcelableArray(KEY_ANIM_SPECS, mAnimSpecs);
        }
        if (mAnimationFinishedListener != null) {
            b.putBinder(KEY_ANIMATION_FINISHED_LISTENER, mAnimationFinishedListener.asBinder());
        }
        if (mSpecsFuture != null) {
            b.putBinder(KEY_SPECS_FUTURE, mSpecsFuture.asBinder());
        }
        b.putInt(KEY_ROTATION_ANIMATION_HINT, mRotationAnimationHint);
        if (mAppVerificationBundle != null) {
            b.putBundle(KEY_INSTANT_APP_VERIFICATION_BUNDLE, mAppVerificationBundle);
        }

        return b;
!!!5030021.java!!!	requestUsageTimeReport(inout receiver : PendingIntent) : void
        mUsageTimeReport = receiver;
!!!5030149.java!!!	forTargetActivity() : ActivityOptions
        if (mAnimationType == ANIM_SCENE_TRANSITION) {
            final ActivityOptions result = new ActivityOptions();
            result.update(this);
            return result;
        }

        return null;
!!!5030277.java!!!	getRotationAnimationHint() : int
        return mRotationAnimationHint;
!!!5030405.java!!!	setRotationAnimationHint(in hint : int) : void
        mRotationAnimationHint = hint;
!!!5030533.java!!!	popAppVerificationBundle() : Bundle
        Bundle out = mAppVerificationBundle;
        mAppVerificationBundle = null;
        return out;
!!!5030661.java!!!	setAppVerificationBundle(inout bundle : Bundle) : ActivityOptions
        mAppVerificationBundle = bundle;
        return this;

!!!5030789.java!!!	toString() : String
        return "ActivityOptions(" + hashCode() + "), mPackageName=" + mPackageName
                + ", mAnimationType=" + mAnimationType + ", mStartX=" + mStartX + ", mStartY="
                + mStartY + ", mWidth=" + mWidth + ", mHeight=" + mHeight;
