class TWOmxNode
!!!1475333.cpp!!!	freeNode() : Return<Status>
    return toStatus(mBase->freeNode());
!!!1475461.cpp!!!	sendCommand(in cmd : uint32_t, in param : int32_t) : Return<Status>
    return toStatus(mBase->sendCommand(toEnumCommandType(cmd), param));
!!!1475589.cpp!!!	getParameter(in index : uint32_t, in inParams : hidl_vec<uint8_t>, in _hidl_cb : getParameter_cb) : Return<void>
    hidl_vec<uint8_t> params(inParams);
    Status status = toStatus(mBase->getParameter(
            toEnumIndexType(index),
            static_cast<void*>(params.data()),
            params.size()));
    _hidl_cb(status, params);
    return Void();
!!!1475717.cpp!!!	setParameter(in index : uint32_t, in inParams : hidl_vec<uint8_t>) : Return<Status>
    hidl_vec<uint8_t> params(inParams);
    return toStatus(mBase->setParameter(
            toEnumIndexType(index),
            static_cast<void const*>(params.data()),
            params.size()));
!!!1475845.cpp!!!	getConfig(in index : uint32_t, in inConfig : hidl_vec<uint8_t>, in _hidl_cb : getConfig_cb) : Return<void>
    hidl_vec<uint8_t> config(inConfig);
    Status status = toStatus(mBase->getConfig(
            toEnumIndexType(index),
            static_cast<void*>(config.data()),
            config.size()));
    _hidl_cb(status, config);
    return Void();
!!!1475973.cpp!!!	setConfig(in index : uint32_t, in inConfig : hidl_vec<uint8_t>) : Return<Status>
    hidl_vec<uint8_t> config(inConfig);
    return toStatus(mBase->setConfig(
            toEnumIndexType(index),
            static_cast<void const*>(config.data()),
            config.size()));
!!!1476101.cpp!!!	setPortMode(in portIndex : uint32_t, in mode : PortMode) : Return<Status>
    return toStatus(mBase->setPortMode(portIndex, toIOMXPortMode(mode)));
!!!1476229.cpp!!!	prepareForAdaptivePlayback(in portIndex : uint32_t, in enable : bool, in maxFrameWidth : uint32_t, in maxFrameHeight : uint32_t) : Return<Status>
    return toStatus(mBase->prepareForAdaptivePlayback(
            portIndex,
            toEnumBool(enable),
            maxFrameWidth,
            maxFrameHeight));
!!!1476357.cpp!!!	configureVideoTunnelMode(in portIndex : uint32_t, in tunneled : bool, in audioHwSync : uint32_t, in _hidl_cb : configureVideoTunnelMode_cb) : Return<void>
    native_handle_t* sidebandHandle = nullptr;
    Status status = toStatus(mBase->configureVideoTunnelMode(
            portIndex,
            toEnumBool(tunneled),
            audioHwSync,
            &sidebandHandle));
    _hidl_cb(status, hidl_handle(sidebandHandle));
    return Void();
!!!1476485.cpp!!!	getGraphicBufferUsage(in portIndex : uint32_t, in _hidl_cb : getGraphicBufferUsage_cb) : Return<void>
    OMX_U32 usage;
    Status status = toStatus(mBase->getGraphicBufferUsage(
            portIndex, &usage));
    _hidl_cb(status, usage);
    return Void();
!!!1476613.cpp!!!	setInputSurface(in bufferSource : sp<IOmxBufferSource>) : Return<Status>
    return toStatus(mBase->setInputSurface(new LWOmxBufferSource(
            bufferSource)));
!!!1476741.cpp!!!	allocateSecureBuffer(in portIndex : uint32_t, in size : uint64_t, in _hidl_cb : allocateSecureBuffer_cb) : Return<void>
    IOMX::buffer_id buffer;
    void* bufferData;
    sp<NativeHandle> nativeHandle;
    Status status = toStatus(mBase->allocateSecureBuffer(
            portIndex,
            static_cast<size_t>(size),
            &buffer,
            &bufferData,
            &nativeHandle));
    _hidl_cb(status, buffer, nativeHandle == nullptr ?
            nullptr : nativeHandle->handle());
    return Void();
!!!1476869.cpp!!!	useBuffer(in portIndex : uint32_t, in codecBuffer : CodecBuffer, in _hidl_cb : useBuffer_cb) : Return<void>
    IOMX::buffer_id buffer;
    OMXBuffer omxBuffer;
    if (!convertTo(&omxBuffer, codecBuffer)) {
        _hidl_cb(Status::BAD_VALUE, 0);
        return Void();
    }
    Status status = toStatus(mBase->useBuffer(
            portIndex, omxBuffer, &buffer));
    _hidl_cb(status, buffer);
    return Void();
!!!1476997.cpp!!!	freeBuffer(in portIndex : uint32_t, in buffer : uint32_t) : Return<Status>
    return toStatus(mBase->freeBuffer(portIndex, buffer));
!!!1477125.cpp!!!	fillBuffer(in buffer : uint32_t, in codecBuffer : CodecBuffer, in fence : hidl_handle) : Return<Status>
    OMXBuffer omxBuffer;
    if (!convertTo(&omxBuffer, codecBuffer)) {
        return Status::BAD_VALUE;
    }
    return toStatus(mBase->fillBuffer(
            buffer,
            omxBuffer,
            dup(native_handle_read_fd(fence))));
!!!1477253.cpp!!!	emptyBuffer(in buffer : uint32_t, in codecBuffer : CodecBuffer, in flags : uint32_t, in timestampUs : uint64_t, in fence : hidl_handle) : Return<Status>
    OMXBuffer omxBuffer;
    if (!convertTo(&omxBuffer, codecBuffer)) {
        return Status::BAD_VALUE;
    }
    return toStatus(mBase->emptyBuffer(
            buffer,
            omxBuffer,
            flags,
            toOMXTicks(timestampUs),
            dup(native_handle_read_fd(fence))));
!!!1477381.cpp!!!	getExtensionIndex(in parameterName : hidl_string, in _hidl_cb : getExtensionIndex_cb) : Return<void>
    OMX_INDEXTYPE index;
    Status status = toStatus(mBase->getExtensionIndex(
            parameterName.c_str(), &index));
    _hidl_cb(status, toRawIndexType(index));
    return Void();
!!!1477509.cpp!!!	dispatchMessage(in tMsg : Message) : Return<Status>
    omx_message lMsg;
    if (!convertTo(&lMsg, tMsg)) {
        return Status::BAD_VALUE;
    }
    return toStatus(mBase->dispatchMessage(lMsg));
