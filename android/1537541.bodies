class CollectionUtils
!!!10095493.java!!!	CollectionUtils()
 /* cannot be instantiated */
!!!10095621.java!!!	filter(inout list : List<T>, inout predicate : java.util.function.Predicate<? super T>) : List<T>
        ArrayList<T> result = null;
        for (int i = 0; i < size(list); i++) {
            final T item = list.get(i);
            if (predicate.test(item)) {
                result = ArrayUtils.add(result, item);
            }
        }
        return emptyIfNull(result);
!!!10095749.java!!!	map(inout cur : List<I>, inout f : Function<? super I, ? extends O>) : List<O>
        if (isEmpty(cur)) return Collections.emptyList();
        final ArrayList<O> result = new ArrayList<>();
        for (int i = 0; i < cur.size(); i++) {
            result.add(f.apply(cur.get(i)));
        }
        return result;
!!!10095877.java!!!	mapNotNull(inout cur : List<I>, inout f : Function<? super I, ? extends O>) : List<O>
        if (isEmpty(cur)) return Collections.emptyList();
        final ArrayList<O> result = new ArrayList<>();
        for (int i = 0; i < cur.size(); i++) {
            O transformed = f.apply(cur.get(i));
            if (transformed != null) {
                result.add(transformed);
            }
        }
        return result;
!!!10096005.java!!!	emptyIfNull(inout cur : List<T>) : List<T>
        return cur == null ? Collections.emptyList() : cur;
!!!10096133.java!!!	emptyIfNull(inout cur : Set<T>) : Set<T>
        return cur == null ? Collections.emptySet() : cur;
!!!10096261.java!!!	size(inout cur : Collection<?>) : int
        return cur != null ? cur.size() : 0;
!!!10096389.java!!!	filter(inout list : List<?>, inout c : Class<T>) : List<T>
        if (isEmpty(list)) return Collections.emptyList();
        ArrayList<T> result = null;
        for (int i = 0; i < list.size(); i++) {
            final Object item = list.get(i);
            if (c.isInstance(item)) {
                result = ArrayUtils.add(result, (T) item);
            }
        }
        return emptyIfNull(result);
!!!10096517.java!!!	any(inout items : List<T>, inout predicate : java.util.function.Predicate<T>) : boolean
        return find(items, predicate) != null;
!!!10096645.java!!!	find(inout items : List<T>, inout predicate : java.util.function.Predicate<T>) : T
        if (isEmpty(items)) return null;
        for (int i = 0; i < items.size(); i++) {
            final T item = items.get(i);
            if (predicate.test(item)) return item;
        }
        return null;
!!!10096773.java!!!	add(inout cur : List<T>, inout val : T) : List<T>
        if (cur == null || cur == Collections.emptyList()) {
            cur = new ArrayList<>();
        }
        cur.add(val);
        return cur;
!!!10096901.java!!!	remove(inout cur : List<T>, inout val : T) : List<T>
        if (isEmpty(cur)) {
            return emptyIfNull(cur);
        }
        cur.remove(val);
        return cur;
!!!10097029.java!!!	copyOf(inout cur : List<T>) : List<T>
        return isEmpty(cur) ? Collections.emptyList() : new ArrayList<>(cur);
