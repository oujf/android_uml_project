class BitUtils
!!!10090373.java!!!	maskedEquals(in a : long, in b : long, in mask : long) : boolean
        return (a & mask) == (b & mask);
!!!10090501.java!!!	maskedEquals(in a : byte, in b : byte, in mask : byte) : boolean
        return (a & mask) == (b & mask);
!!!10090629.java!!!	maskedEquals(inout a : byte [[]], inout b : byte [[]], inout mask : byte [[]]) : boolean
        if (a == null || b == null) return a == b;
        Preconditions.checkArgument(a.length == b.length, "Inputs must be of same size");
        if (mask == null) return Arrays.equals(a, b);
        Preconditions.checkArgument(a.length == mask.length, "Mask must be of same size as inputs");
        for (int i = 0; i < mask.length; i++) {
            if (!maskedEquals(a[i], b[i], mask[i])) return false;
        }
        return true;
!!!10090757.java!!!	maskedEquals(inout a : UUID, inout b : UUID, inout mask : UUID) : boolean
        if (mask == null) {
            return Objects.equal(a, b);
        }
        return maskedEquals(a.getLeastSignificantBits(), b.getLeastSignificantBits(),
                    mask.getLeastSignificantBits())
                && maskedEquals(a.getMostSignificantBits(), b.getMostSignificantBits(),
                    mask.getMostSignificantBits());
!!!10090885.java!!!	unpackBits(in val : long) : int
        int size = Long.bitCount(val);
        int[] result = new int[size];
        int index = 0;
        int bitPos = 0;
        while (val > 0) {
            if ((val & 1) == 1) result[index++] = bitPos;
            val = val >> 1;
            bitPos++;
        }
        return result;
!!!10091013.java!!!	packBits(inout bits : int [[]]) : long
        long packed = 0;
        for (int b : bits) {
            packed |= (1 << b);
        }
        return packed;
