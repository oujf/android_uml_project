class AudioSystem
!!!726277.cpp!!!	muteMicrophone(in state : bool) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setMicMute(state);
!!!726405.cpp!!!	isMicrophoneMuted(inout state : bool) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *state = af->getMicMute();
    return NO_ERROR;
!!!726533.cpp!!!	setMasterVolume(in value : float) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    af->setMasterVolume(value);
    return NO_ERROR;
!!!726661.cpp!!!	getMasterVolume(inout volume : float) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *volume = af->masterVolume();
    return NO_ERROR;
!!!726789.cpp!!!	setMasterMute(in mute : bool) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    af->setMasterMute(mute);
    return NO_ERROR;
!!!726917.cpp!!!	getMasterMute(inout mute : bool) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *mute = af->masterMute();
    return NO_ERROR;
!!!727045.cpp!!!	setStreamVolume(in stream : audio_stream_type_t, in value : float, in output : audio_io_handle_t) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    af->setStreamVolume(stream, value, output);
    return NO_ERROR;
!!!727173.cpp!!!	getStreamVolume(in stream : audio_stream_type_t, inout volume : float, in output : audio_io_handle_t) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *volume = af->streamVolume(stream, output);
    return NO_ERROR;
!!!727301.cpp!!!	setStreamMute(in stream : audio_stream_type_t, in mute : bool) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    af->setStreamMute(stream, mute);
    return NO_ERROR;
!!!727429.cpp!!!	getStreamMute(in stream : audio_stream_type_t, inout mute : bool) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *mute = af->streamMute(stream);
    return NO_ERROR;
!!!727557.cpp!!!	setMode(in mode : audio_mode_t) : status_t
    if (uint32_t(mode) >= AUDIO_MODE_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setMode(mode);
!!!727685.cpp!!!	isStreamActive(in stream : audio_stream_type_t, inout state : bool, in inPastMs : uint32_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    if (state == NULL) return BAD_VALUE;
    *state = aps->isStreamActive(stream, inPastMs);
    return NO_ERROR;
!!!727813.cpp!!!	isStreamActiveRemotely(in stream : audio_stream_type_t, inout state : bool, in inPastMs : uint32_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    if (state == NULL) return BAD_VALUE;
    *state = aps->isStreamActiveRemotely(stream, inPastMs);
    return NO_ERROR;
!!!727941.cpp!!!	isSourceActive(in stream : audio_source_t, inout state : bool) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    if (state == NULL) return BAD_VALUE;
    *state = aps->isSourceActive(stream);
    return NO_ERROR;
!!!728069.cpp!!!	setParameters(in ioHandle : audio_io_handle_t, in keyValuePairs : String8) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setParameters(ioHandle, keyValuePairs);
!!!728197.cpp!!!	getParameters(in ioHandle : audio_io_handle_t, in keys : String8) : String8
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    String8 result = String8("");
    if (af == 0) return result;

    result = af->getParameters(ioHandle, keys);
    return result;
!!!728325.cpp!!!	setParameters(in keyValuePairs : String8) : status_t
    return setParameters(AUDIO_IO_HANDLE_NONE, keyValuePairs);
!!!728453.cpp!!!	getParameters(in keys : String8) : String8
    return getParameters(AUDIO_IO_HANDLE_NONE, keys);
!!!728581.cpp!!!	setErrorCallback(in cb : audio_error_callback) : void
    Mutex::Autolock _l(gLock);
    gAudioErrorCallback = cb;
!!!728709.cpp!!!	setDynPolicyCallback(in cb : dynamic_policy_callback) : void
    Mutex::Autolock _l(gLock);
    gDynPolicyCallback = cb;
!!!728837.cpp!!!	setRecordConfigCallback(in cb : record_config_callback) : void
    Mutex::Autolock _l(gLock);
    gRecordConfigCallback = cb;
!!!728965.cpp!!!	get_audio_flinger() : sp<IAudioFlinger>
    sp<IAudioFlinger> af;
    sp<AudioFlingerClient> afc;
    {
        Mutex::Autolock _l(gLock);
        if (gAudioFlinger == 0) {
            sp<IServiceManager> sm = defaultServiceManager();
            sp<IBinder> binder;
            do {
                binder = sm->getService(String16("media.audio_flinger"));
                if (binder != 0)
                    break;
                ALOGW("AudioFlinger not published, waiting...");
                usleep(500000); // 0.5 s
            } while (true);
            if (gAudioFlingerClient == NULL) {
                gAudioFlingerClient = new AudioFlingerClient();
            } else {
                if (gAudioErrorCallback) {
                    gAudioErrorCallback(NO_ERROR);
                }
            }
            binder->linkToDeath(gAudioFlingerClient);
            gAudioFlinger = interface_cast<IAudioFlinger>(binder);
            LOG_ALWAYS_FATAL_IF(gAudioFlinger == 0);
            afc = gAudioFlingerClient;
            // Make sure callbacks can be received by gAudioFlingerClient
            ProcessState::self()->startThreadPool();
        }
        af = gAudioFlinger;
    }
    if (afc != 0) {
        af->registerClient(afc);
    }
    return af;
!!!729093.cpp!!!	linearToLog(in volume : int) : float
    // float v = volume ? exp(float(100 - volume) * dBConvert) : 0;
    // ALOGD("linearToLog(%d)=%f", volume, v);
    // return v;
    return volume ? exp(float(100 - volume) * dBConvert) : 0;
!!!729221.cpp!!!	logToLinear(in volume : float) : int
    // int v = volume ? 100 - int(dBConvertInverse * log(volume) + 0.5) : 0;
    // ALOGD("logTolinear(%d)=%f", v, volume);
    // return v;
    return volume ? 100 - int(dBConvertInverse * log(volume) + 0.5) : 0;
!!!729349.cpp!!!	getOutputSamplingRate(inout samplingRate : uint32_t, in streamType : audio_stream_type_t) : status_t
    audio_io_handle_t output;

    if (streamType == AUDIO_STREAM_DEFAULT) {
        streamType = AUDIO_STREAM_MUSIC;
    }

    output = getOutput(streamType);
    if (output == 0) {
        return PERMISSION_DENIED;
    }

    return getSamplingRate(output, samplingRate);
!!!729477.cpp!!!	getOutputFrameCount(inout frameCount : size_t, in streamType : audio_stream_type_t) : status_t
    audio_io_handle_t output;

    if (streamType == AUDIO_STREAM_DEFAULT) {
        streamType = AUDIO_STREAM_MUSIC;
    }

    output = getOutput(streamType);
    if (output == AUDIO_IO_HANDLE_NONE) {
        return PERMISSION_DENIED;
    }

    return getFrameCount(output, frameCount);
!!!729605.cpp!!!	getOutputLatency(inout latency : uint32_t, in streamType : audio_stream_type_t) : status_t
    audio_io_handle_t output;

    if (streamType == AUDIO_STREAM_DEFAULT) {
        streamType = AUDIO_STREAM_MUSIC;
    }

    output = getOutput(streamType);
    if (output == AUDIO_IO_HANDLE_NONE) {
        return PERMISSION_DENIED;
    }

    return getLatency(output, latency);
!!!729733.cpp!!!	getSamplingRate(in ioHandle : audio_io_handle_t, inout samplingRate : uint32_t) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    sp<AudioIoDescriptor> desc = getIoDescriptor(ioHandle);
    if (desc == 0) {
        *samplingRate = af->sampleRate(ioHandle);
    } else {
        *samplingRate = desc->mSamplingRate;
    }
    if (*samplingRate == 0) {
        ALOGE("AudioSystem::getSamplingRate failed for ioHandle %d", ioHandle);
        return BAD_VALUE;
    }

    ALOGV("getSamplingRate() ioHandle %d, sampling rate %u", ioHandle, *samplingRate);

    return NO_ERROR;
!!!729861.cpp!!!	getFrameCount(in ioHandle : audio_io_handle_t, inout frameCount : size_t) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    sp<AudioIoDescriptor> desc = getIoDescriptor(ioHandle);
    if (desc == 0) {
        *frameCount = af->frameCount(ioHandle);
    } else {
        *frameCount = desc->mFrameCount;
    }
    if (*frameCount == 0) {
        ALOGE("AudioSystem::getFrameCount failed for ioHandle %d", ioHandle);
        return BAD_VALUE;
    }

    ALOGV("getFrameCount() ioHandle %d, frameCount %zu", ioHandle, *frameCount);

    return NO_ERROR;
!!!729989.cpp!!!	getLatency(in output : audio_io_handle_t, inout latency : uint32_t) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    sp<AudioIoDescriptor> outputDesc = getIoDescriptor(output);
    if (outputDesc == 0) {
        *latency = af->latency(output);
    } else {
        *latency = outputDesc->mLatency;
    }

    ALOGV("getLatency() output %d, latency %d", output, *latency);

    return NO_ERROR;
!!!730117.cpp!!!	getInputBufferSize(in sampleRate : uint32_t, in format : audio_format_t, in channelMask : audio_channel_mask_t, inout buffSize : size_t) : status_t
    const sp<AudioFlingerClient> afc = getAudioFlingerClient();
    if (afc == 0) {
        return NO_INIT;
    }
    return afc->getInputBufferSize(sampleRate, format, channelMask, buffSize);
!!!730245.cpp!!!	setVoiceVolume(in value : float) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setVoiceVolume(value);
!!!730373.cpp!!!	getRenderPosition(in output : audio_io_handle_t, inout halFrames : uint32_t, inout dspFrames : uint32_t) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;

    return af->getRenderPosition(halFrames, dspFrames, output);
!!!730501.cpp!!!	getInputFramesLost(in ioHandle : audio_io_handle_t) : uint32_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    uint32_t result = 0;
    if (af == 0) return result;
    if (ioHandle == AUDIO_IO_HANDLE_NONE) return result;

    result = af->getInputFramesLost(ioHandle);
    return result;
!!!730629.cpp!!!	newAudioUniqueId(in use : audio_unique_id_use_t) : audio_unique_id_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return AUDIO_UNIQUE_ID_ALLOCATE;
    return af->newAudioUniqueId(use);
!!!730757.cpp!!!	acquireAudioSessionId(in audioSession : audio_session_t, in pid : pid_t) : void
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af != 0) {
        af->acquireAudioSessionId(audioSession, pid);
    }
!!!730885.cpp!!!	releaseAudioSessionId(in audioSession : audio_session_t, in pid : pid_t) : void
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af != 0) {
        af->releaseAudioSessionId(audioSession, pid);
    }
!!!731013.cpp!!!	getAudioHwSyncForSession(in sessionId : audio_session_t) : audio_hw_sync_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return AUDIO_HW_SYNC_INVALID;
    return af->getAudioHwSyncForSession(sessionId);
!!!731141.cpp!!!	systemReady() : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return NO_INIT;
    return af->systemReady();
!!!731269.cpp!!!	getFrameCountHAL(in ioHandle : audio_io_handle_t, inout frameCount : size_t) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    sp<AudioIoDescriptor> desc = getIoDescriptor(ioHandle);
    if (desc == 0) {
        *frameCount = af->frameCountHAL(ioHandle);
    } else {
        *frameCount = desc->mFrameCountHAL;
    }
    if (*frameCount == 0) {
        ALOGE("AudioSystem::getFrameCountHAL failed for ioHandle %d", ioHandle);
        return BAD_VALUE;
    }

    ALOGV("getFrameCountHAL() ioHandle %d, frameCount %zu", ioHandle, *frameCount);

    return NO_ERROR;
!!!731397.cpp!!!	setDeviceConnectionState(in device : audio_devices_t, in state : audio_policy_dev_state_t, in device_address : char, in device_name : char) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    const char *address = "";
    const char *name = "";

    if (aps == 0) return PERMISSION_DENIED;

    if (device_address != NULL) {
        address = device_address;
    }
    if (device_name != NULL) {
        name = device_name;
    }
    return aps->setDeviceConnectionState(device, state, address, name);
!!!731525.cpp!!!	getDeviceConnectionState(in device : audio_devices_t, in device_address : char) : audio_policy_dev_state_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return AUDIO_POLICY_DEVICE_STATE_UNAVAILABLE;

    return aps->getDeviceConnectionState(device, device_address);
!!!731653.cpp!!!	handleDeviceConfigChange(in device : audio_devices_t, in device_address : char, in device_name : char) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    const char *address = "";
    const char *name = "";

    if (aps == 0) return PERMISSION_DENIED;

    if (device_address != NULL) {
        address = device_address;
    }
    if (device_name != NULL) {
        name = device_name;
    }
    return aps->handleDeviceConfigChange(device, address, name);
!!!731781.cpp!!!	setPhoneState(in state : audio_mode_t) : status_t
    if (uint32_t(state) >= AUDIO_MODE_CNT) return BAD_VALUE;
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;

    return aps->setPhoneState(state);
!!!731909.cpp!!!	setForceUse(in usage : audio_policy_force_use_t, in config : audio_policy_forced_cfg_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->setForceUse(usage, config);
!!!732037.cpp!!!	getForceUse(in usage : audio_policy_force_use_t) : audio_policy_forced_cfg_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return AUDIO_POLICY_FORCE_NONE;
    return aps->getForceUse(usage);
!!!732165.cpp!!!	getOutput(in stream : audio_stream_type_t, in samplingRate : uint32_t = 0, in format : audio_format_t = AUDIO_FORMAT_DEFAULT, in channelMask : audio_channel_mask_t = AUDIO_CHANNEL_OUT_STEREO, in flags : audio_output_flags_t = AUDIO_OUTPUT_FLAG_NONE, in offloadInfo : audio_offload_info_t = NULL) : audio_io_handle_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return 0;
    return aps->getOutput(stream, samplingRate, format, channelMask, flags, offloadInfo);
!!!732293.cpp!!!	getOutputForAttr(in attr : audio_attributes_t, inout output : audio_io_handle_t, in session : audio_session_t, inout stream : audio_stream_type_t, in uid : uid_t, in config : audio_config_t, in flags : audio_output_flags_t, in selectedDeviceId : audio_port_handle_t, inout portId : audio_port_handle_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return NO_INIT;
    return aps->getOutputForAttr(attr, output, session, stream, uid,
                                 config,
                                 flags, selectedDeviceId, portId);
!!!732421.cpp!!!	startOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : audio_session_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->startOutput(output, stream, session);
!!!732549.cpp!!!	stopOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : audio_session_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->stopOutput(output, stream, session);
!!!732677.cpp!!!	releaseOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : audio_session_t) : void
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return;
    aps->releaseOutput(output, stream, session);
!!!732805.cpp!!!	getInputForAttr(in attr : audio_attributes_t, inout input : audio_io_handle_t, in session : audio_session_t, in pid : pid_t, in uid : uid_t, in config : audio_config_base_t, in flags : audio_input_flags_t, in selectedDeviceId : audio_port_handle_t, inout portId : audio_port_handle_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return NO_INIT;
    return aps->getInputForAttr(
            attr, input, session, pid, uid,
            config, flags, selectedDeviceId, portId);
!!!732933.cpp!!!	startInput(in input : audio_io_handle_t, in session : audio_session_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->startInput(input, session);
!!!733061.cpp!!!	stopInput(in input : audio_io_handle_t, in session : audio_session_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->stopInput(input, session);
!!!733189.cpp!!!	releaseInput(in input : audio_io_handle_t, in session : audio_session_t) : void
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return;
    aps->releaseInput(input, session);
!!!733317.cpp!!!	initStreamVolume(in stream : audio_stream_type_t, in indexMin : int, in indexMax : int) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->initStreamVolume(stream, indexMin, indexMax);
!!!733445.cpp!!!	setStreamVolumeIndex(in stream : audio_stream_type_t, in index : int, in device : audio_devices_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->setStreamVolumeIndex(stream, index, device);
!!!733573.cpp!!!	getStreamVolumeIndex(in stream : audio_stream_type_t, inout index : int, in device : audio_devices_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->getStreamVolumeIndex(stream, index, device);
!!!733701.cpp!!!	getStrategyForStream(in stream : audio_stream_type_t) : uint32_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return 0;
    return aps->getStrategyForStream(stream);
!!!733829.cpp!!!	getDevicesForStream(in stream : audio_stream_type_t) : audio_devices_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return AUDIO_DEVICE_NONE;
    return aps->getDevicesForStream(stream);
!!!733957.cpp!!!	getOutputForEffect(in desc : effect_descriptor_t) : audio_io_handle_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    // FIXME change return type to status_t, and return PERMISSION_DENIED here
    if (aps == 0) return AUDIO_IO_HANDLE_NONE;
    return aps->getOutputForEffect(desc);
!!!734085.cpp!!!	registerEffect(in desc : effect_descriptor_t, in io : audio_io_handle_t, in strategy : uint32_t, in session : audio_session_t, in id : int) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->registerEffect(desc, io, strategy, session, id);
!!!734213.cpp!!!	unregisterEffect(in id : int) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->unregisterEffect(id);
!!!734341.cpp!!!	setEffectEnabled(in id : int, in enabled : bool) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->setEffectEnabled(id, enabled);
!!!734469.cpp!!!	clearAudioConfigCache() : void
    // called by restoreTrack_l(), which needs new IAudioFlinger and IAudioPolicyService instances
    ALOGV("clearAudioConfigCache()");
    {
        Mutex::Autolock _l(gLock);
        if (gAudioFlingerClient != 0) {
            gAudioFlingerClient->clearIoCache();
        }
        gAudioFlinger.clear();
    }
    {
        Mutex::Autolock _l(gLockAPS);
        gAudioPolicyService.clear();
    }
!!!734597.cpp!!!	get_audio_policy_service() : sp<IAudioPolicyService>
    sp<IAudioPolicyService> ap;
    sp<AudioPolicyServiceClient> apc;
    {
        Mutex::Autolock _l(gLockAPS);
        if (gAudioPolicyService == 0) {
            sp<IServiceManager> sm = defaultServiceManager();
            sp<IBinder> binder;
            do {
                binder = sm->getService(String16("media.audio_policy"));
                if (binder != 0)
                    break;
                ALOGW("AudioPolicyService not published, waiting...");
                usleep(500000); // 0.5 s
            } while (true);
            if (gAudioPolicyServiceClient == NULL) {
                gAudioPolicyServiceClient = new AudioPolicyServiceClient();
            }
            binder->linkToDeath(gAudioPolicyServiceClient);
            gAudioPolicyService = interface_cast<IAudioPolicyService>(binder);
            LOG_ALWAYS_FATAL_IF(gAudioPolicyService == 0);
            apc = gAudioPolicyServiceClient;
            // Make sure callbacks can be received by gAudioPolicyServiceClient
            ProcessState::self()->startThreadPool();
        }
        ap = gAudioPolicyService;
    }
    if (apc != 0) {
        ap->registerClient(apc);
    }

    return ap;
!!!734725.cpp!!!	getPrimaryOutputSamplingRate() : uint32_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return 0;
    return af->getPrimaryOutputSamplingRate();
!!!734853.cpp!!!	getPrimaryOutputFrameCount() : size_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return 0;
    return af->getPrimaryOutputFrameCount();
!!!734981.cpp!!!	setLowRamDevice(in isLowRamDevice : bool) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setLowRamDevice(isLowRamDevice);
!!!735109.cpp!!!	isOffloadSupported(in info : audio_offload_info_t) : bool
    ALOGV("isOffloadSupported()");
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return false;
    return aps->isOffloadSupported(info);
!!!735237.cpp!!!	checkAudioFlinger() : status_t
    if (defaultServiceManager()->checkService(String16("media.audio_flinger")) != 0) {
        return NO_ERROR;
    }
    return DEAD_OBJECT;
!!!735365.cpp!!!	listAudioPorts(in role : audio_port_role_t, in type : audio_port_type_t, inout num_ports : uint, inout ports : audio_port, inout generation : uint) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->listAudioPorts(role, type, num_ports, ports, generation);
!!!735493.cpp!!!	getAudioPort(inout port : audio_port) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->getAudioPort(port);
!!!735621.cpp!!!	createAudioPatch(in patch : audio_patch, inout handle : audio_patch_handle_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->createAudioPatch(patch, handle);
!!!735749.cpp!!!	releaseAudioPatch(in handle : audio_patch_handle_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->releaseAudioPatch(handle);
!!!735877.cpp!!!	listAudioPatches(inout num_patches : uint, inout patches : audio_patch, inout generation : uint) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->listAudioPatches(num_patches, patches, generation);
!!!736005.cpp!!!	setAudioPortConfig(in config : audio_port_config) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->setAudioPortConfig(config);
!!!736133.cpp!!!	acquireSoundTriggerSession(inout session : audio_session_t, inout ioHandle : audio_io_handle_t, inout device : audio_devices_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->acquireSoundTriggerSession(session, ioHandle, device);
!!!736261.cpp!!!	releaseSoundTriggerSession(in session : audio_session_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->releaseSoundTriggerSession(session);
!!!736389.cpp!!!	getPhoneState() : audio_mode_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return AUDIO_MODE_INVALID;
    return aps->getPhoneState();
!!!736517.cpp!!!	registerPolicyMixes(in mixes : Vector<AudioMix>, in registration : bool) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->registerPolicyMixes(mixes, registration);
!!!736645.cpp!!!	startAudioSource(in source : audio_port_config, in attributes : audio_attributes_t, inout handle : audio_patch_handle_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->startAudioSource(source, attributes, handle);
!!!736773.cpp!!!	stopAudioSource(in handle : audio_patch_handle_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->stopAudioSource(handle);
!!!736901.cpp!!!	setMasterMono(in mono : bool) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->setMasterMono(mono);
!!!737029.cpp!!!	getMasterMono(inout mono : bool) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->getMasterMono(mono);
!!!737797.cpp!!!	addAudioPortCallback(in callback : sp<AudioPortCallback>) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;

    Mutex::Autolock _l(gLockAPS);
    if (gAudioPolicyServiceClient == 0) {
        return NO_INIT;
    }
    int ret = gAudioPolicyServiceClient->addAudioPortCallback(callback);
    if (ret == 1) {
        aps->setAudioPortCallbacksEnabled(true);
    }
    return (ret < 0) ? INVALID_OPERATION : NO_ERROR;
!!!737925.cpp!!!	removeAudioPortCallback(in callback : sp<AudioPortCallback>) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;

    Mutex::Autolock _l(gLockAPS);
    if (gAudioPolicyServiceClient == 0) {
        return NO_INIT;
    }
    int ret = gAudioPolicyServiceClient->removeAudioPortCallback(callback);
    if (ret == 0) {
        aps->setAudioPortCallbacksEnabled(false);
    }
    return (ret < 0) ? INVALID_OPERATION : NO_ERROR;
!!!738437.cpp!!!	addAudioDeviceCallback(in callback : sp<AudioDeviceCallback>, in audioIo : audio_io_handle_t) : status_t
    const sp<AudioFlingerClient> afc = getAudioFlingerClient();
    if (afc == 0) {
        return NO_INIT;
    }
    status_t status = afc->addAudioDeviceCallback(callback, audioIo);
    if (status == NO_ERROR) {
        const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
        if (af != 0) {
            af->registerClient(afc);
        }
    }
    return status;
!!!738565.cpp!!!	removeAudioDeviceCallback(in callback : sp<AudioDeviceCallback>, in audioIo : audio_io_handle_t) : status_t
    const sp<AudioFlingerClient> afc = getAudioFlingerClient();
    if (afc == 0) {
        return NO_INIT;
    }
    return afc->removeAudioDeviceCallback(callback, audioIo);
!!!738693.cpp!!!	getDeviceIdForIo(in audioIo : audio_io_handle_t) : audio_port_handle_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    const sp<AudioIoDescriptor> desc = getIoDescriptor(audioIo);
    if (desc == 0) {
        return AUDIO_PORT_HANDLE_NONE;
    }
    return desc->getDeviceId();
!!!741125.cpp!!!	getAudioFlingerClient() : sp<AudioFlingerClient>
    // calling get_audio_flinger() will initialize gAudioFlingerClient if needed
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return 0;
    Mutex::Autolock _l(gLock);
    return gAudioFlingerClient;
!!!741253.cpp!!!	getIoDescriptor(in ioHandle : audio_io_handle_t) : sp<AudioIoDescriptor>
    sp<AudioIoDescriptor> desc;
    const sp<AudioFlingerClient> afc = getAudioFlingerClient();
    if (afc != 0) {
        desc = afc->getIoDescriptor(ioHandle);
    }
    return desc;
