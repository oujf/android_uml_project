class RootTrustManager
!!!7961861.java!!!	RootTrustManager(inout config : ApplicationConfig)
        if (config == null) {
            throw new NullPointerException("config must not be null");
        }
        mConfig = config;
!!!7961989.java!!!	checkClientTrusted(inout chain : X509Certificate [[]], in authType : String) : void
        // Use the default configuration for all client authentication. Domain specific configs are
        // only for use in checking server trust not client trust.
        NetworkSecurityConfig config = mConfig.getConfigForHostname("");
        config.getTrustManager().checkClientTrusted(chain, authType);
!!!7962117.java!!!	checkClientTrusted(inout certs : X509Certificate [[]], in authType : String, inout socket : Socket) : void
        // Use the default configuration for all client authentication. Domain specific configs are
        // only for use in checking server trust not client trust.
        NetworkSecurityConfig config = mConfig.getConfigForHostname("");
        config.getTrustManager().checkClientTrusted(certs, authType, socket);
!!!7962245.java!!!	checkClientTrusted(inout certs : X509Certificate [[]], in authType : String, inout engine : SSLEngine) : void
        // Use the default configuration for all client authentication. Domain specific configs are
        // only for use in checking server trust not client trust.
        NetworkSecurityConfig config = mConfig.getConfigForHostname("");
        config.getTrustManager().checkClientTrusted(certs, authType, engine);
!!!7962373.java!!!	checkServerTrusted(inout certs : X509Certificate [[]], in authType : String, inout socket : Socket) : void
        if (socket instanceof SSLSocket) {
            SSLSocket sslSocket = (SSLSocket) socket;
            SSLSession session = sslSocket.getHandshakeSession();
            if (session == null) {
                throw new CertificateException("Not in handshake; no session available");
            }
            String host = session.getPeerHost();
            NetworkSecurityConfig config = mConfig.getConfigForHostname(host);
            config.getTrustManager().checkServerTrusted(certs, authType, socket);
        } else {
            // Not an SSLSocket, use the hostname unaware checkServerTrusted.
            checkServerTrusted(certs, authType);
        }
!!!7962501.java!!!	checkServerTrusted(inout certs : X509Certificate [[]], in authType : String, inout engine : SSLEngine) : void
        SSLSession session = engine.getHandshakeSession();
        if (session == null) {
            throw new CertificateException("Not in handshake; no session available");
        }
        String host = session.getPeerHost();
        NetworkSecurityConfig config = mConfig.getConfigForHostname(host);
        config.getTrustManager().checkServerTrusted(certs, authType, engine);
!!!7962629.java!!!	checkServerTrusted(inout certs : X509Certificate [[]], in authType : String) : void
        if (mConfig.hasPerDomainConfigs()) {
            throw new CertificateException(
                    "Domain specific configurations require that hostname aware"
                    + " checkServerTrusted(X509Certificate[], String, String) is used");
        }
        NetworkSecurityConfig config = mConfig.getConfigForHostname("");
        config.getTrustManager().checkServerTrusted(certs, authType);
!!!7962757.java!!!	checkServerTrusted(inout certs : X509Certificate [[]], in authType : String, in hostname : String) : List<X509Certificate>
        if (hostname == null && mConfig.hasPerDomainConfigs()) {
            throw new CertificateException(
                    "Domain specific configurations require that the hostname be provided");
        }
        NetworkSecurityConfig config = mConfig.getConfigForHostname(hostname);
        return config.getTrustManager().checkServerTrusted(certs, authType, hostname);
!!!7962885.java!!!	getAcceptedIssuers() : X509Certificate
        // getAcceptedIssuers is meant to be used to determine which trust anchors the server will
        // accept when verifying clients. Domain specific configs are only for use in checking
        // server trust not client trust so use the default config.
        NetworkSecurityConfig config = mConfig.getConfigForHostname("");
        return config.getTrustManager().getAcceptedIssuers();
!!!7963013.java!!!	isSameTrustConfiguration(in hostname1 : String, in hostname2 : String) : boolean
        return mConfig.getConfigForHostname(hostname1)
                .equals(mConfig.getConfigForHostname(hostname2));
