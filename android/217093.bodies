class CallbackThread
!!!556549.cpp!!!	~CallbackThread()
    mEventQueue.clear();
!!!556677.cpp!!!	threadLoop() : bool
    while (!exitPending()) {
        sp<IMemory> eventMemory;
        sp<ModuleClient> moduleClient;
        {
            Mutex::Autolock _l(mCallbackLock);
            while (mEventQueue.isEmpty() && !exitPending()) {
                ALOGV("CallbackThread::threadLoop() sleep");
                mCallbackCond.wait(mCallbackLock);
                ALOGV("CallbackThread::threadLoop() wake up");
            }
            if (exitPending()) {
                break;
            }
            eventMemory = mEventQueue[0];
            mEventQueue.removeAt(0);
            moduleClient = mModuleClient.promote();
        }
        if (moduleClient != 0) {
            moduleClient->onCallbackEvent(eventMemory);
            eventMemory.clear();
        }
    }
    return false;
!!!556805.cpp!!!	onFirstRef() : void
    run("RadioService cbk", ANDROID_PRIORITY_URGENT_AUDIO);
!!!556933.cpp!!!	exit() : void
    Mutex::Autolock _l(mCallbackLock);
    requestExit();
    mCallbackCond.broadcast();
!!!557061.cpp!!!	sendEvent(inout event : radio_hal_event_t) : void
     sp<IMemory> eventMemory = prepareEvent(event);
     if (eventMemory == 0) {
         return;
     }

     AutoMutex lock(mCallbackLock);
     mEventQueue.add(eventMemory);
     mCallbackCond.signal();
     ALOGV("%s DONE", __FUNCTION__);
!!!557189.cpp!!!	prepareEvent(inout halEvent : radio_hal_event_t) : sp<IMemory>
    sp<IMemory> eventMemory;

    // The event layout in shared memory is:
    // sizeof(struct radio_event) bytes : the event itself
    // 4 bytes                          : metadata size or 0
    // N bytes                          : metadata if present
    uint32_t metadataOffset = sizeof(struct radio_event) + sizeof(uint32_t);
    uint32_t metadataSize = 0;

    switch (halEvent->type) {
    case RADIO_EVENT_TUNED:
    case RADIO_EVENT_AF_SWITCH:
        if (radio_metadata_check(halEvent->info.metadata) == 0) {
            metadataSize = (uint32_t)radio_metadata_get_size(halEvent->info.metadata);
        }
        break;
    case RADIO_EVENT_METADATA:
        if (radio_metadata_check(halEvent->metadata) != 0) {
            return eventMemory;
        }
        metadataSize = (uint32_t)radio_metadata_get_size(halEvent->metadata);
        break;
    default:
        break;
    }

    eventMemory = mMemoryDealer->allocate(metadataOffset + metadataSize);
    if (eventMemory == 0 || eventMemory->pointer() == NULL) {
        eventMemory.clear();
        return eventMemory;
    }

    struct radio_event *event = (struct radio_event *)eventMemory->pointer();

    *(uint32_t *)((uint8_t *)event + metadataOffset - sizeof(uint32_t)) = metadataSize;

    event->type = halEvent->type;
    event->status = halEvent->status;

    switch (event->type) {
    case RADIO_EVENT_CONFIG:
        event->config.band = halEvent->config;
        break;
    case RADIO_EVENT_TUNED:
    case RADIO_EVENT_AF_SWITCH:
        event->info = halEvent->info;
        if (metadataSize != 0) {
            memcpy((uint8_t *)event + metadataOffset, halEvent->info.metadata, metadataSize);
        }
        break;
    case RADIO_EVENT_TA:
    case RADIO_EVENT_EA:
    case RADIO_EVENT_ANTENNA:
    case RADIO_EVENT_CONTROL:
        event->on = halEvent->on;
        break;
    case RADIO_EVENT_METADATA:
        if (metadataSize != 0) {
            memcpy((uint8_t *)event + metadataOffset, halEvent->metadata, metadataSize);
        }
        break;
    case RADIO_EVENT_HW_FAILURE:
    default:
        break;
    }

    return eventMemory;
