class NumberKeyListener
!!!8272261.java!!!	lookup(inout event : KeyEvent, inout content : Spannable) : int
        return event.getMatch(getAcceptedChars(), getMetaState(content, event));
!!!8272389.java!!!	filter(inout source : CharSequence, in start : int, in end : int, inout dest : Spanned, in dstart : int, in dend : int) : CharSequence
        char[] accept = getAcceptedChars();
        boolean filter = false;

        int i;
        for (i = start; i < end; i++) {
            if (!ok(accept, source.charAt(i))) {
                break;
            }
        }

        if (i == end) {
            // It was all OK.
            return null;
        }

        if (end - start == 1) {
            // It was not OK, and there is only one char, so nothing remains.
            return "";
        }

        SpannableStringBuilder filtered =
            new SpannableStringBuilder(source, start, end);
        i -= start;
        end -= start;

        int len = end - start;
        // Only count down to i because the chars before that were all OK.
        for (int j = end - 1; j >= i; j--) {
            if (!ok(accept, source.charAt(j))) {
                filtered.delete(j, j + 1);
            }
        }

        return filtered;
!!!8272517.java!!!	ok(inout accept : char [[]], in c : char) : boolean
        for (int i = accept.length - 1; i >= 0; i--) {
            if (accept[i] == c) {
                return true;
            }
        }

        return false;
!!!8272645.java!!!	onKeyDown(inout view : View, inout content : Editable, in keyCode : int, inout event : KeyEvent) : boolean
        int selStart, selEnd;

        {
            int a = Selection.getSelectionStart(content);
            int b = Selection.getSelectionEnd(content);

            selStart = Math.min(a, b);
            selEnd = Math.max(a, b);
        }

        if (selStart < 0 || selEnd < 0) {
            selStart = selEnd = 0;
            Selection.setSelection(content, 0);
        }

        int i = event != null ? lookup(event, content) : 0;
        int repeatCount = event != null ? event.getRepeatCount() : 0;
        if (repeatCount == 0) {
            if (i != 0) {
                if (selStart != selEnd) {
                    Selection.setSelection(content, selEnd);
                }

                content.replace(selStart, selEnd, String.valueOf((char) i));

                adjustMetaAfterKeypress(content);
                return true;
            }
        } else if (i == '0' && repeatCount == 1) {
            // Pretty hackish, it replaces the 0 with the +

            if (selStart == selEnd && selEnd > 0 &&
                    content.charAt(selStart - 1) == '0') {
                content.replace(selStart - 1, selEnd, String.valueOf('+'));
                adjustMetaAfterKeypress(content);
                return true;
            }
        }

        adjustMetaAfterKeypress(content);
        return super.onKeyDown(view, content, keyCode, event);
!!!8272773.java!!!	addDigits(inout collection : Collection<Character>, inout locale : Locale) : boolean
        if (locale == null) {
            return false;
        }
        final String[] digits = DecimalFormatSymbols.getInstance(locale).getDigitStrings();
        for (int i = 0; i < 10; i++) {
            if (digits[i].length() > 1) { // multi-codeunit digits. Not supported.
                return false;
            }
            collection.add(Character.valueOf(digits[i].charAt(0)));
        }
        return true;
!!!8272901.java!!!	addFormatCharsFromSkeleton(inout collection : Collection<Character>, inout locale : Locale, in skeleton : String, in symbolsToIgnore : String) : boolean
        if (locale == null) {
            return false;
        }
        final String pattern = DateFormat.getBestDateTimePattern(locale, skeleton);
        boolean outsideQuotes = true;
        for (int i = 0; i < pattern.length(); i++) {
            final char ch = pattern.charAt(i);
            if (Character.isSurrogate(ch)) { // characters outside BMP are not supported.
                return false;
            } else if (ch == SINGLE_QUOTE) {
                outsideQuotes = !outsideQuotes;
                // Single quote characters should be considered if and only if they follow
                // another single quote.
                if (i == 0 || pattern.charAt(i - 1) != SINGLE_QUOTE) {
                    continue;
                }
            }

            if (outsideQuotes) {
                if (symbolsToIgnore.indexOf(ch) != -1) {
                    // Skip expected pattern characters.
                    continue;
                } else if (DATE_TIME_FORMAT_SYMBOLS.indexOf(ch) != -1) {
                    // An unexpected symbols is seen. We've failed.
                    return false;
                }
            }
            // If we are here, we are either inside quotes, or we have seen a non-pattern
            // character outside quotes. So ch is a valid character in a date.
            collection.add(Character.valueOf(ch));
        }
        return true;
!!!8273029.java!!!	addFormatCharsFromSkeletons(inout collection : Collection<Character>, inout locale : Locale, inout skeletons : String [[]], in symbolsToIgnore : String) : boolean
        for (int i = 0; i < skeletons.length; i++) {
            final boolean success = addFormatCharsFromSkeleton(
                    collection, locale, skeletons[i], symbolsToIgnore);
            if (!success) {
                return false;
            }
        }
        return true;
!!!8273157.java!!!	addAmPmChars(inout collection : Collection<Character>, inout locale : Locale) : boolean
        if (locale == null) {
            return false;
        }
        final String[] amPm = LocaleData.get(locale).amPm;
        for (int i = 0; i < amPm.length; i++) {
            for (int j = 0; j < amPm[i].length(); j++) {
                final char ch = amPm[i].charAt(j);
                if (Character.isBmpCodePoint(ch)) {
                    collection.add(Character.valueOf(ch));
                } else {  // We don't support non-BMP characters.
                    return false;
                }
            }
        }
        return true;
!!!8273285.java!!!	collectionToArray(inout chars : Collection<Character>) : char
        final char[] result = new char[chars.size()];
        int i = 0;
        for (Character ch : chars) {
            result[i++] = ch;
        }
        return result;
