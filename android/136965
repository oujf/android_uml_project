format 214
"include" // source::frameworks::av::media::libstagefright::codec2::include
  revision 2
  modified_by 5 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/media/libstagefright/codec2/include/"
  cpp_src_dir "C:/Users/Jeff/Documents/aosp/frameworks/av/media/libstagefright/codec2/include/"
  cpp_namespace "android"
  classview 135045 "include"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 135941 "nsecs_t"
      visibility package stereotype "typedef" explicit_base_type "int64_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 378885 "C2String"
      visibility package stereotype "typedef" explicit_base_type "std::string"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " \\mainpage Codec2

Codec2 is a frame-based data processing API used by android.

The framework accesses components via the \\ref API.

 \\ingroup API

The Codec2 API defines the operation of data processing components and their interaction with
the rest of the system.

Coding Conventions

Mitigating Binary Compatibility.

While full binary compatibility is not a goal of the API (due to our use of STL), we try to
mitigate binary breaks by adhering to the following conventions:

- at most one vtable with placeholder virtual methods
- all optional/placeholder virtual methods returning a status_t, with C2_NOT_IMPLEMENTED not
  requiring any update to input/output arguments.
- limiting symbol export of inline methods
- use of pimpl (or shared-pimpl)

Naming

- all classes and types prefix with C2
- classes for internal use prefix with _C2
- enum values in global namespace prefix with C2_ all caps
- enum values inside classes have no C2_ prefix as class already has it
- supporting two kinds of enum naming: all-caps and kCamelCase
\\todo revisit kCamelCase for param-type

Aspects

Aspects define certain common behavior across a group of objects.
- classes whose name matches _C2.*Aspect
- only protected constructors
- no desctructor and copiable
- all methods are inline or static (this is opposite of the interface paradigm where all methods
  are virtual, which would not work due to the at most one vtable rule.)
- only private variables (this prevents subclasses interfering with the aspects.)

/ \\defgroup types Common Types
/ @{

C2String: basic string implementation
"
    end

    class 379013 "C2StringLiteral"
      visibility package stereotype "typedef" explicit_base_type "char"
      cpp_decl "${comment}typedef  const ${type}* ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 379141 "C2Error"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "C2Error: status codes used.
"
    end

    class 379397 "c2_types<T>"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " specialization for a single type "
      class 379525 "wide_type"
	visibility package stereotype "typedef" explicit_base_type "std::decay<T>::type"
	cpp_decl "${comment}typedef  typename ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 379653 "narrow_type"
	visibility package stereotype "typedef" base_type class_ref 379525 // wide_type
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 394757 // <dependency>
	  relation 394757 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 394757 // <dependency>
	    b parent class_ref 379525 // wide_type
	end
      end

      class 379781 "mintype"
	visibility package stereotype "typedef" base_type class_ref 379525 // wide_type
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 394885 // <dependency>
	  relation 394885 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 394885 // <dependency>
	    b parent class_ref 379525 // wide_type
	end
      end
    end

    class 379909 "c2_types<T,U>"
      visibility package stereotype "struct"
      nformals 2
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "U" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " specialization for two types "
      class 380037 "wide_type"
	visibility package stereotype "typedef" explicit_base_type "std::decay<
            decltype(true ? std::declval<T>() : std::declval<U>())>::type"
	cpp_decl "${comment}typedef  typename ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 380165 "b_"
	visibility package stereotype "typedef" explicit_base_type "std::decay<
            typename std::conditional<sizeof(T) < sizeof(U), T, U>::type>::type narrow_type;
    typedef typename std::conditional<
            std::is_signed<T>::value, wide_type, narrow_type>::type mintype;
};

/// @}

/// \\endcond

/**
 * Type support utility class. Only supports similar classes, such as:
 * - all floating point
 * - all unsigned/all signed
 * - all pointer
 */
template<typename T, typename U, typename... V>
struct c2_types<T, U, V...> {
    /** Common type that accommodates all template parameter types. */
    typedef typename c2_types<typename c2_types<T, U>::wide_type, V...>::wide_type wide_type;
    /** Narrowest type of the template parameter types. */
    typedef typename c2_types<typename c2_types<T, U>::narrow_type, V...>::narrow_type narrow_type;
    /** Type that accommodates the minimum value for any input for the template parameter types. */
    typedef typename c2_types<typename c2_types<T, U>::mintype, V...>::mintype mintype;
};

/**
 *  \\ingroup utils_internal
 * specialization for two values */
template<typename T, typename U>
inline constexpr typename c2_types<T, U>::wide_type c2_max(const T a, const U b) {
    typedef typename c2_types<T, U>::wide_type wide_type;
    return ({ wide_type a_(a), b_(b); a_ >"
	cpp_decl "${comment}typedef  typename ${type} ${name} ? a_ : b_;
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
      end
    end

    class 380549 "C2Fence"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ \\defgroup buffer Buffers
/ @{
/ \\defgroup buffer_sync Synchronization
/ @{

Synchronization is accomplished using event and fence objects.

These are cross-process extensions of promise/future infrastructure.
Events are analogous to std::promise<void>, whereas fences are to std::shared_future<void>.

Fences and events are shareable/copyable.

Fences are used in two scenarios, and all copied instances refer to the same event.
\\todo do events need to be copyable or should they be unique?

acquire sync fence object: signaled when it is safe for the component or client to access
(the contents of) an object.

release sync fence object: \\todo

Fences can be backed by hardware. Hardware fences are guaranteed to signal NO MATTER WHAT within
a short (platform specific) amount of time; this guarantee is usually less than 15 msecs.


Fence object used by components and the framework.

Implements the waiting for an event, analogous to a 'future'.

To be implemented by vendors if using HW fences.
"
      operation 1097221 "wait"
	public return_type class_ref 379141 // C2Error
	nparams 1
	  param in name "timeoutNs" type class_ref 135941 // nsecs_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Waits for a fence to be signaled with a timeout.

\\todo a mechanism to cancel a wait - for now the only way to do this is to abandon the
event, but fences are shared so canceling a wait will cancel all waits.

\\param timeoutNs           the maximum time to wait in nsecs

\\retval C2_OK            the fence has been signaled
\\retval C2_TIMED_OUT     the fence has not been signaled within the timeout
\\retval C2_BAD_STATE     the fence has been abandoned without being signaled (it will never
                         be signaled)
\\retval C2_NO_PERMISSION no permission to wait for the fence (unexpected - system)
\\retval C2_CORRUPTED     some unknown error prevented waiting for the fence (unexpected)
"
      end

      operation 1097349 "valid"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Used to check if this fence is valid (if there is a chance for it to be signaled.)
A fence becomes invalid if the controling event is destroyed without it signaling the fence.

\\return whether this fence is valid
"
      end

      operation 1097477 "ready"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Used to check if this fence has been signaled (is ready).

\\return whether this fence has been signaled
"
      end

      operation 1097605 "fd"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a file descriptor that can be used to wait for this fence in a select system call.
\\note The returned file descriptor, if valid, must be closed by the caller.

This can be used in e.g. poll() system calls. This file becomes readable (POLLIN) when the
fence is signaled, and bad (POLLERR) if the fence is abandoned.

\\return a file descriptor representing this fence (with ownership), or -1 if the fence
has already been signaled (\\todo or abandoned).

\\todo this must be compatible with fences used by gralloc
"
      end

      operation 1097733 "isHW"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns whether this fence is a hardware-backed fence.
\\return whether this is a hardware fence
"
      end

      extra_member 151429 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 772613 "mImpl"
	private explicit_type "Impl"
	stereotype "std::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 380677 "C2Event"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Event object used by components and the framework.

Implements the signaling of an event, analogous to a 'promise'.

Hardware backed events do not go through this object, and must be exposed directly as fences
by vendors.
"
      operation 1097861 "fence"
	const public return_type class_ref 380549 // C2Fence
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a fence for this event.
"
      end

      operation 1097989 "fire"
	public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Signals (all) associated fence(s).
This has no effect no effect if the event was already signaled or abandoned.

\\retval C2_OK            the fence(s) were successfully signaled
\\retval C2_BAD_STATE     the fence(s) have already been abandoned or merged (caller error)
\\retval C2_ALREADY_EXISTS the fence(s) have already been signaled (caller error)
\\retval C2_NO_PERMISSION no permission to signal the fence (unexpected - system)
\\retval C2_CORRUPTED     some unknown error prevented signaling the fence(s) (unexpected)
"
      end

      operation 1098117 "merge"
	public return_type class_ref 379141 // C2Error
	nparams 1
	  param in name "fences" explicit_type "std::vector<C2Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Trigger this event from the merging of the supplied fences. This means that it will be
abandoned if any of these fences have been abandoned, and it will be fired if all of these
fences have been signaled.

\\retval C2_OK            the merging was successfully done
\\retval C2_NO_MEMORY     not enough memory to perform the merging
\\retval C2_ALREADY_EXISTS    the fence have already been merged (caller error)
\\retval C2_BAD_STATE     the fence have already been signaled or abandoned (caller error)
\\retval C2_NO_PERMISSION no permission to merge the fence (unexpected - system)
\\retval C2_CORRUPTED     some unknown error prevented merging the fence(s) (unexpected)
"
      end

      operation 1098245 "abandon"
	public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Abandons the event and any associated fence(s).
\\note Call this to explicitly abandon an event before it is destructed to avoid a warning.

This has no effect no effect if the event was already signaled or abandoned.

\\retval C2_OK            the fence(s) were successfully signaled
\\retval C2_BAD_STATE     the fence(s) have already been signaled or merged (caller error)
\\retval C2_ALREADY_EXISTS    the fence(s) have already been abandoned (caller error)
\\retval C2_NO_PERMISSION no permission to abandon the fence (unexpected - system)
\\retval C2_CORRUPTED     some unknown error prevented signaling the fence(s) (unexpected)
"
      end

      extra_member 151557 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 772741 "mImpl"
	private explicit_type "Impl"
	stereotype "std::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 380805 "_C2InnateError"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ \\addtogroup buf_internal Internal
/ @{

Interface for objects that encapsulate an updatable error value.
"
      operation 1098373 "error"
	const cpp_inline public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mError; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1098501 "_C2InnateError"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "error" type class_ref 379141 // C2Error
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : mError(error) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      classrelation 395013 // mError (<directional composition>)
	relation 395013 *-->
	  a role_name "mError" protected
	    comment " this error is updatable by the object"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 395013 // mError (<directional composition>)
	  b parent class_ref 379141 // C2Error
      end
    end

    class 380933 "C2Acquirable"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}

This is a utility template for objects protected by an acquire fence, so that errors during
acquiring the object are propagated to the object itself.
"
      classrelation 395141 // <generalisation>
	relation 395141 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 395141 // <generalisation>
	  b parent class_ref 380549 // C2Fence
      end

      operation 1098629 "get"
	public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Acquires the object protected by an acquire fence. Any errors during the mapping will be
passed to the object.

\\return acquired object potentially invalidated if waiting for the fence failed.
"
      end

      operation 1098757 "C2Acquirable"
	cpp_inline protected explicit_return_type ""
	nparams 3
	  param in name "error" type class_ref 379141 // C2Error
	  param in name "fence" type class_ref 380549 // C2Fence
	  param in name "t" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : C2Fence(fence), mInitialError(error), mT(t) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      classrelation 395269 // mInitialError (<directional composition>)
	relation 395269 *-->
	  a role_name "mInitialError" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 395269 // mInitialError (<directional composition>)
	  b parent class_ref 379141 // C2Error
      end

      attribute 772869 "mT"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " TODO: move instead of copy"
      end
    end

    class 381061 "_C2LinearCapacityAspect"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}
/ \\defgroup linear Linear Data Blocks
/ @{

LINEAR ASPECTS, BLOCKS AND VIEWS
************************************************************************************************

Common aspect for all objects that have a linear capacity.
"
      operation 1098885 "capacity"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCapacity; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ \\name Linear capacity interface
/ @{"
      end

      operation 1099013 "_C2LinearCapacityAspect"
	cpp_deleted cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment " explicitly disable construction from size_t"
      end

      operation 1099141 "_C2LinearCapacityAspect"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : mCapacity(capacity) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1099269 "_C2LinearCapacityAspect"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "parent" type class_ref 381061 // _C2LinearCapacityAspect
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : mCapacity(parent == nullptr ? 0 : parent->capacity()) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      attribute 772997 "mCapacity"
	const_attribute private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 381189 "_C2LinearRangeAspect"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}

Aspect for objects that have a linear range.

This class is copiable.
"
      classrelation 395397 // <generalisation>
	relation 395397 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 395397 // <generalisation>
	  b parent class_ref 381061 // _C2LinearCapacityAspect
      end

      operation 1099397 "offset"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mOffset; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ \\name Linear range interface
/ @{"
      end

      operation 1099525 "size"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mSize; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1099653 "_C2LinearRangeAspect"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "parent" type class_ref 381061 // _C2LinearCapacityAspect
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : _C2LinearCapacityAspect(parent),
          mOffset(0),
          mSize(capacity()) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1099781 "_C2LinearRangeAspect"
	cpp_inline protected explicit_return_type ""
	nparams 3
	  param in name "parent" type class_ref 381061 // _C2LinearCapacityAspect
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : _C2LinearCapacityAspect(parent),
          mOffset(c2_min(offset, capacity())),
          mSize(c2_min(size, capacity() - mOffset)) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1099909 "_C2LinearRangeAspect"
	cpp_inline protected explicit_return_type ""
	nparams 3
	  param in name "parent" type class_ref 381189 // _C2LinearRangeAspect
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : _C2LinearCapacityAspect(parent == nullptr ? 0 : parent->capacity()),
          mOffset(c2_min(c2_max(offset, parent == nullptr ? 0 : parent->offset()), capacity())),
          mSize(c2_min(c2_min(size, parent == nullptr ? 0 : parent->size()), capacity() - mOffset)) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment " subsection of the two [offset, offset + size] ranges"
      end

      classrelation 395525 // <dependency>
	relation 395525 -_->
	  stereotype "friend"
	  a public
	    cpp default "Generated"
	    classrelation_ref 395525 // <dependency>
	  b parent class_ref 381317 // _C2EditableLinearRange
      end

      attribute 773125 "mOffset"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " invariants 0 <= mOffset <= mOffset + mSize <= capacity()
"
      end

      attribute 773253 "mSize"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 381317 "_C2EditableLinearRange"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}

Aspect for objects that have an editable linear range.

This class is copiable.
"
      classrelation 395653 // <generalisation>
	relation 395653 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 395653 // <generalisation>
	  b parent class_ref 381189 // _C2LinearRangeAspect
      end

      operation 1100037 "_C2EditableLinearRange"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "parent" type class_ref 381061 // _C2LinearCapacityAspect
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : _C2LinearRangeAspect(parent) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1100165 "_C2EditableLinearRange"
	cpp_inline protected explicit_return_type ""
	nparams 3
	  param in name "parent" type class_ref 381061 // _C2LinearCapacityAspect
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : _C2LinearRangeAspect(parent, offset, size) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1100293 "_C2EditableLinearRange"
	cpp_inline protected explicit_return_type ""
	nparams 3
	  param in name "parent" type class_ref 381189 // _C2LinearRangeAspect
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : _C2LinearRangeAspect(parent, offset, size) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment " subsection of the two [offset, offset + size] ranges"
      end

      operation 1100421 "setOffset"
	cpp_inline protected explicit_return_type "bool"
	nparams 1
	  param in name "offset" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (offset > capacity()) {
            return false;
        }

        if (offset > mOffset + mSize) {
            mSize = 0;
        } else {
            mSize = mOffset + mSize - offset;
        }
        mOffset = offset;
        return true;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ \\name Editable linear range interface
/ @{

Sets the offset to |offset|, while trying to keep the end of the buffer unchanged (e.g.
size will grow if offset is decreased, and may shrink if offset is increased.) Returns
true if successful, which is equivalent to if 0 <= |offset| <= capacity().

Note: setting offset and size will yield different result depending on the order of the
operations. Always set offset first to ensure proper size.
"
      end

      operation 1100549 "setSize"
	cpp_inline protected explicit_return_type "bool"
	nparams 1
	  param in name "size" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (size > capacity() - mOffset) {
            return false;
        } else {
            mSize = size;
            return true;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the size to |size|. Returns true if successful, which is equivalent to
if 0 <= |size| <= capacity() - offset().

Note: setting offset and size will yield different result depending on the order of the
operations. Always set offset first to ensure proper size.
"
      end

      operation 1100677 "setOffset_be"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "offset" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (offset > capacity()) {
            offset = capacity();
        }
        if (offset > mOffset + mSize) {
            mSize = 0;
        } else {
            mSize = mOffset + mSize - offset;
        }
        mOffset = offset;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the offset to |offset| with best effort. Same as setOffset() except that offset will
be clamped to the buffer capacity.

Note: setting offset and size (even using best effort) will yield different result depending
on the order of the operations. Always set offset first to ensure proper size.
"
      end

      operation 1100805 "setSize_be"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mSize = std::min(size, capacity() - mOffset);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets the size to |size| with best effort. Same as setSize() except that the selected region
will be clamped to the buffer capacity (e.g. size is clamped to [0, capacity() - offset()]).

Note: setting offset and size (even using best effort) will yield different result depending
on the order of the operations. Always set offset first to ensure proper size.
"
      end
    end

    class 381445 "C2Block1D"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 395781 // <generalisation>
	relation 395781 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 395781 // <generalisation>
	  b parent class_ref 381189 // _C2LinearRangeAspect
      end

      operation 1100933 "handle"
	const public return_type class_ref 380421 // C2Handle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1101061 "C2Block1D"
	protected explicit_return_type ""
	nparams 1
	  param in name "alloc" explicit_type "std::shared_ptr<C2LinearAllocation>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1101189 "C2Block1D"
	protected explicit_return_type ""
	nparams 3
	  param in name "alloc" explicit_type "std::shared_ptr<C2LinearAllocation>"
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      extra_member 151685 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 773381 "mImpl"
	private explicit_type "Impl"
	stereotype "std::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 381573 "C2ReadView"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Read view provides read-only access for a linear memory segment.

This class is copiable.
"
      classrelation 395909 // <generalisation>
	relation 395909 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 395909 // <generalisation>
	  b parent class_ref 381061 // _C2LinearCapacityAspect
      end

      operation 1101317 "data"
	public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return pointer to the start of the block or nullptr on error.
"
      end

      operation 1101445 "subView"
	const public return_type class_ref 381573 // C2ReadView
	nparams 2
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a portion of this view.

\\param offset  the start offset of the portion. \\note This is clamped to the capacity of this
             view.
\\param size    the size of the portion. \\note This is clamped to the remaining data from offset.

\\return a read view containing a portion of this view
"
      end

      operation 1101573 "error"
	public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return error during the creation/mapping of this view.
"
      end

      extra_member 151813 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 773509 "mImpl"
	private explicit_type "Impl"
	stereotype "std::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 381701 "C2WriteView"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Write view provides read/write access for a linear memory segment.

This class is copiable. \\todo movable only?
"
      classrelation 396037 // <generalisation>
	relation 396037 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 396037 // <generalisation>
	  b parent class_ref 381317 // _C2EditableLinearRange
      end

      operation 1101701 "base"
	public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Start of the block.

\\return pointer to the start of the block or nullptr on error.
"
      end

      operation 1101829 "data"
	public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return pointer to the block at the current offset or nullptr on error.
"
      end

      operation 1101957 "error"
	public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return error during the creation/mapping of this view.
"
      end

      extra_member 151941 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 773637 "mImpl"
	private explicit_type "Impl"
	stereotype "std::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "/ \\todo should this be unique_ptr to make this movable only - to avoid inconsistent regions
/ between copies.
"
      end
    end

    class 381829 "C2ConstLinearBlock"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A constant (read-only) linear block (portion of an allocation) with an acquire fence.
Blocks are unmapped when created, and can be mapped into a read view on demand.

This class is copiable and contains a reference to the allocation that it is based on.
"
      classrelation 396165 // <generalisation>
	relation 396165 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 396165 // <generalisation>
	  b parent class_ref 381445 // C2Block1D
      end

      operation 1102085 "map"
	const public explicit_return_type "C2Acquirable<C2ReadView>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Maps this block into memory and returns a read view for it.

\\return a read view for this block.
"
      end

      operation 1102213 "subBlock"
	const public return_type class_ref 381829 // C2ConstLinearBlock
	nparams 2
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a portion of this block.

\\param offset  the start offset of the portion. \\note This is clamped to the capacity of this
             block.
\\param size    the size of the portion. \\note This is clamped to the remaining data from offset.

\\return a constant linear block containing a portion of this block
"
      end

      operation 1102341 "fence"
	const cpp_inline public return_type class_ref 380549 // C2Fence
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mFence; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the acquire fence for this block.

\\return a fence that must be waited on before reading the block.
"
      end

      classrelation 396293 // mFence (<directional composition>)
	relation 396293 *-->
	  a role_name "mFence" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 396293 // mFence (<directional composition>)
	  b parent class_ref 380549 // C2Fence
      end
    end

    class 381957 "C2LinearBlock"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Linear block is a writeable 1D block. Once written, it can be shared in whole or in parts with
consumers/readers as read-only const linear block(s).
"
      classrelation 396421 // <generalisation>
	relation 396421 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 396421 // <generalisation>
	  b parent class_ref 381445 // C2Block1D
      end

      operation 1102469 "map"
	public explicit_return_type "C2Acquirable<C2WriteView>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Maps this block into memory and returns a write view for it.

\\return a write view for this block.
"
      end

      operation 1102597 "share"
	public return_type class_ref 381829 // C2ConstLinearBlock
	nparams 3
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	  param in name "fence" type class_ref 380549 // C2Fence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Creates a read-only const linear block for a portion of this block; optionally protected
by an acquire fence. There are two ways to use this:

1) share ready block after writing data into the block. In this case no fence shall be
   supplied, and the block shall not be modified after calling this method.
2) share block metadata before actually (finishing) writing the data into the block. In
   this case a fence must be supplied that will be triggered when the data is written.
   The block shall be modified only until firing the event for the fence.
"
      end
    end

    class 382085 "C2CircularBlock"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}

CIRCULAR BLOCKS AND VIEWS
************************************************************************************************
/ \\defgroup circular Circular buffer support
/ @{

Circular blocks can be used to share data between a writer and a reader (and/or other consumers)-
in a memory-efficient way by reusing a section of memory. Circular blocks are a bit more complex
than single reader/single writer schemes to facilitate block-based consuming of data.

They can operate in two modes:

1) one writer that creates blocks to be consumed (this model can be used by components)

2) one writer that writes continuously, and one reader that can creates blocks to be consumed
   by further recipients (this model is used by the framework, and cannot be used by components.)

Circular blocks have four segments with running pointers:
 - reserved: data reserved and available for the writer
 - committed: data committed by the writer and available to the reader (if present)
 - used: data used by consumers (if present)
 - available: unused data available to be reserved
"
      classrelation 396549 // <generalisation>
	relation 396549 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 396549 // <generalisation>
	  b parent class_ref 381445 // C2Block1D
      end
    end

    class 382213 "_C2CircularBlockSegment"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " end of free section"
      classrelation 396677 // <generalisation>
	relation 396677 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 396677 // <generalisation>
	  b parent class_ref 381061 // _C2LinearCapacityAspect
      end

      operation 1102725 "available"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the available size for this segment.

\\return currently available size for this segment
"
      end

      operation 1102853 "reserve"
	public return_type class_ref 379141 // C2Error
	nparams 2
	  param in name "size" explicit_type "size_t"
	  param inout name "fence" type class_ref 380549 // C2Fence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Reserve some space for this segment from its current start.

\\param size    desired space in bytes
\\param fence   a pointer to an acquire fence. If non-null, the reservation is asynchronous and
             a fence will be stored here that will be signaled when the reservation is
             complete. If null, the reservation is synchronous.

\\retval C2_OK            the space was successfully reserved
\\retval C2_NO_MEMORY     the space requested cannot be reserved
\\retval C2_TIMED_OUT     the reservation timed out \\todo when?
\\retval C2_CORRUPTED     some unknown error prevented reserving space. (unexpected)
"
      end

      operation 1102981 "abandon"
	public return_type class_ref 379141 // C2Error
	nparams 1
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Abandons a portion of this segment. This will move to the beginning of this segment.

\\note This methods is only allowed if this segment is producing blocks.

\\param size    number of bytes to abandon

\\retval C2_OK            the data was successfully abandoned
\\retval C2_TIMED_OUT     the operation timed out (unexpected)
\\retval C2_CORRUPTED     some unknown error prevented abandoning the data (unexpected)
"
      end

      operation 1103109 "share"
	public return_type class_ref 379141 // C2Error
	nparams 3
	  param in name "size" explicit_type "size_t"
	  param in name "fence" type class_ref 380549 // C2Fence
	  param inout name "blocks" explicit_type "std::list<C2ConstLinearBlock>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Share a portion as block(s) with consumers (these are moved to the used section).

\\note This methods is only allowed if this segment is producing blocks.
\\note Share does not move the beginning of the segment. (\\todo add abandon/offset?)

\\param size    number of bytes to share
\\param fence   fence to be used for the section
\\param blocks  list where the blocks of the section are appended to

\\retval C2_OK            the portion was successfully shared
\\retval C2_NO_MEMORY     not enough memory to share the portion
\\retval C2_TIMED_OUT     the operation timed out (unexpected)
\\retval C2_CORRUPTED     some unknown error prevented sharing the data (unexpected)
"
      end

      operation 1103237 "begin"
	public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the beginning offset of this segment from the start of this circular block.

@return beginning offset
"
      end

      operation 1103365 "end"
	public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the end offset of this segment from the start of this circular block.

@return end offset
"
      end
    end

    class 382341 "C2CircularWriteView"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A circular write-view is a dynamic mapped view for a segment of a circular block. Care must be
taken when using this view so that only the section owned by the segment is modified.
"
      classrelation 396805 // <generalisation>
	relation 396805 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 396805 // <generalisation>
	  b parent class_ref 381061 // _C2LinearCapacityAspect
      end

      operation 1103493 "base"
	public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Start of the circular block.
\\note the segment does not own this pointer.

\\return pointer to the start of the circular block or nullptr on error.
"
      end

      operation 1103621 "error"
	public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return error during the creation/mapping of this view.
"
      end
    end

    class 382469 "C2CircularWriter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The writer of a circular buffer.

Can commit data to a reader (not supported for components) OR share data blocks directly with a
consumer.

If a component supports outputting data into circular buffers, it must allocate a circular
block and use a circular writer.
"
      classrelation 396933 // <generalisation>
	relation 396933 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 396933 // <generalisation>
	  b parent class_ref 382213 // _C2CircularBlockSegment
      end

      operation 1103749 "commit"
	public return_type class_ref 379141 // C2Error
	nparams 2
	  param in name "size" explicit_type "size_t"
	  param in name "fence" type class_ref 380549 // C2Fence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Commits a portion of this segment to the next segment. This moves the beginning of the
segment.

\\param size    number of bytes to commit to the next segment
\\param fence   fence used for the commit (the fence must signal before the data is committed)
"
      end

      operation 1103877 "map"
	public explicit_return_type "C2Acquirable<C2CircularWriteView>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Maps this block into memory and returns a write view for it.

\\return a write view for this block.
"
      end
    end

    class 382597 "_C2PlanarCapacityAspect"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}
/ \\defgroup graphic Graphic Data Blocks
/ @{

Interface for objects that have a width and height (planar capacity).
"
      operation 1104005 "width"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mWidth; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ \\name Planar capacity interface
/ @{"
      end

      operation 1104133 "height"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mHeight; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1104261 "_C2PlanarCapacityAspect"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : mWidth(width), mHeight(height) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1104389 "_C2PlanarCapacityAspect"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "parent" type class_ref 382597 // _C2PlanarCapacityAspect
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : mWidth(parent == nullptr ? 0 : parent->width()),
          mHeight(parent == nullptr ? 0 : parent->height()) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      attribute 773765 "mWidth"
	const_attribute private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 773893 "mHeight"
	const_attribute private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 382725 "C2Rect"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}

C2Rect: rectangle type with non-negative coordinates.

\\note This struct has public fields without getters/setters. All methods are inline.
"
      attribute 774021 "mLeft"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " public:
"
      end

      attribute 774149 "mTop"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 774277 "mWidth"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 774405 "mHeight"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 1104517 "C2Rect"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : C2Rect(width, height, 0, 0) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1104645 "C2Rect"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "left" explicit_type "uint32_t"
	  param in name "top" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : mLeft(left), mTop(top), mWidth(width), mHeight(height) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1104773 "isEmpty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mWidth == 0 || mHeight == 0;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " utility methods"
      end

      operation 1104901 "isValid"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mLeft <= ~mWidth && mTop <= ~mHeight;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1105029 "operator bool"
	const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return isValid() && !isEmpty();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1105157 "operator !"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return !bool(*this);
    };
"
	
	
	
	
      end

      operation 1105285 "contains"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (!isValid() || !other.isValid()) {
            return false;
        } else if (other.isEmpty()) {
            return true;
        } else {
            return mLeft <= other.mLeft && mTop <= other.mTop
                    && mLeft + mWidth >= other.mLeft + other.mWidth
                    && mTop + mHeight >= other.mTop + other.mHeight;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1105413 "operator =="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (!isValid()) {
            return !other.isValid();
        } else if (isEmpty()) {
            return other.isEmpty();
        } else {
            return mLeft == other.mLeft && mTop == other.mTop
                    && mWidth == other.mWidth && mHeight == other.mHeight;
        }
    };
"
	
	
	
	
      end

      operation 1105541 "operator !="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return !operator==(other);
    };
"
	
	
	
	
      end

      operation 1105669 "operator >="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return contains(other);
    };
"
	
	
	
	
      end

      operation 1105797 "operator >"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return contains(other) && !operator==(other);
    };
"
	
	
	
	
      end

      operation 1105925 "operator <="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return other.contains(*this);
    };
"
	
	
	
	
      end

      operation 1106053 "operator <"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return other.contains(*this) && !operator==(other);
    };
"
	
	
	
	
      end
    end

    class 382853 "C2PlaneInfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "C2PlaneInfo: information on the layout of flexible planes.

Public fields without getters/setters.
"
      class 382981 "Channel"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} : uint32_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 774533 "Y"
	  public type class_ref 382981 // Channel
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 774661 "R"
	  public type class_ref 382981 // Channel
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 774789 "G"
	  public type class_ref 382981 // Channel
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 774917 "B"
	  public type class_ref 382981 // Channel
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 775045 "A"
	  public type class_ref 382981 // Channel
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 775173 "Cr"
	  public type class_ref 382981 // Channel
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 775301 "Cb"
	  public type class_ref 382981 // Channel
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 775429 "mColInc"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " column increment in bytes. may be negative"
      end

      attribute 775557 "mRowInc"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " row increment in bytes. may be negative"
      end

      attribute 775685 "mHorizSubsampling"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " subsampling compared to width"
      end

      attribute 775813 "mVertSubsampling"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " subsampling compared to height"
      end

      attribute 775941 "mBitDepth"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 776069 "mAllocatedDepth"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 1106181 "minOffset"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        ssize_t offs = 0;
        if (width > 0 && mColInc < 0) {
            offs += mColInc * (ssize_t)(width - 1);
        }
        if (height > 0 && mRowInc < 0) {
            offs += mRowInc * (ssize_t)(height - 1);
        }
        return offs;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1106309 "maxOffset"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "allocatedDepth" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        ssize_t offs = (allocatedDepth + 7) >> 3;
        if (width > 0 && mColInc > 0) {
            offs += mColInc * (ssize_t)(width - 1);
        }
        if (height > 0 && mRowInc > 0) {
            offs += mRowInc * (ssize_t)(height - 1);
        }
        return offs;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 383109 "C2PlaneLayout"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      class 383237 "Type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} : uint32_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 776197 "MEDIA_IMAGE_TYPE_UNKNOWN"
	  public type class_ref 383237 // Type
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 776325 "MEDIA_IMAGE_TYPE_YUV"
	  public type class_ref 383237 // Type
	  init_value " 0x100"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 776453 "MEDIA_IMAGE_TYPE_YUVA"
	  public type class_ref 383237 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 776581 "MEDIA_IMAGE_TYPE_RGB"
	  public type class_ref 383237 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 776709 "MEDIA_IMAGE_TYPE_RGBA"
	  public type class_ref 383237 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 397061 // mType (<directional composition>)
	relation 397061 *-->
	  a role_name "mType" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 397061 // mType (<directional composition>)
	  b parent class_ref 383237 // Type
      end

      attribute 776837 "mNumPlanes"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " number of planes"
      end

      class 383365 "PlaneIndex"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} : uint32_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 776965 "Y"
	  public type class_ref 383365 // PlaneIndex
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 777093 "U"
	  public type class_ref 383365 // PlaneIndex
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 777221 "V"
	  public type class_ref 383365 // PlaneIndex
	  init_value " 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 777349 "R"
	  public type class_ref 383365 // PlaneIndex
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 777477 "G"
	  public type class_ref 383365 // PlaneIndex
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 777605 "B"
	  public type class_ref 383365 // PlaneIndex
	  init_value " 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 777733 "A"
	  public type class_ref 383365 // PlaneIndex
	  init_value " 3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 777861 "MAX_NUM_PLANES"
	  public type class_ref 383365 // PlaneIndex
	  init_value " 4"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 397189 // mPlanes (<directional composition>)
	relation 397189 *-->
	  a role_name "mPlanes" multiplicity "[MAX_NUM_PLANES]" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 397189 // mPlanes (<directional composition>)
	  b parent class_ref 382853 // C2PlaneInfo
      end
    end

    class 383493 "_C2PlanarSection"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Aspect for objects that have a planar section (crop rectangle).

This class is copiable.
"
      classrelation 397317 // <generalisation>
	relation 397317 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 397317 // <generalisation>
	  b parent class_ref 382597 // _C2PlanarCapacityAspect
      end

      operation 1106437 "crop"
	cpp_inline public return_type class_ref 382725 // C2Rect
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCrop; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ \\name Planar section interface
/ @{
 crop can be an empty rect, does not have to line up with subsampling
 NOTE: we do not support floating-point crop"
      end

      operation 1106565 "setCrop_be"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "crop" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Sets crop to crop intersected with [(0,0) .. (width, height)]
"
      end

      operation 1106693 "setCrop"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "crop" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "If crop is within the dimensions of this object, it sets crop to it.

\\return true iff crop is within the dimensions of this object
"
      end

      classrelation 397445 // mCrop (<directional composition>)
	relation 397445 *-->
	  a role_name "mCrop" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 397445 // mCrop (<directional composition>)
	  b parent class_ref 382725 // C2Rect
      end
    end

    class 383621 "C2Block2D"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}"
      classrelation 397573 // <generalisation>
	relation 397573 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 397573 // <generalisation>
	  b parent class_ref 383493 // _C2PlanarSection
      end

      operation 1106821 "handle"
	const public return_type class_ref 380421 // C2Handle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      extra_member 152069 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 777989 "mImpl"
	private explicit_type "Impl"
	stereotype "std::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 383749 "C2GraphicView"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Graphic view provides read or read-write access for a graphic block.

This class is copiable.

\\note Due to the subsampling of graphic buffers, a read view must still contain a crop rectangle
to ensure subsampling is followed. This results in nearly identical interface between read and
write views, so C2GraphicView can encompass both of them.
"
      classrelation 397701 // <generalisation>
	relation 397701 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 397701 // <generalisation>
	  b parent class_ref 383493 // _C2PlanarSection
      end

      operation 1106949 "data"
	const public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return pointer to the start of the block or nullptr on error.
"
      end

      operation 1107077 "data"
	public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return pointer to the start of the block or nullptr on error.
"
      end

      operation 1107205 "subView"
	const public return_type class_ref 383749 // C2GraphicView
	nparams 1
	  param in name "rect" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a section of this view.

\\param rect    the dimension of the section. \\note This is clamped to the crop of this view.

\\return a read view containing the requested section of this view
"
      end

      operation 1107333 "subView"
	public return_type class_ref 383749 // C2GraphicView
	nparams 1
	  param in name "rect" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1107461 "error"
	const public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return error during the creation/mapping of this view.
"
      end

      extra_member 152197 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 778117 "mImpl"
	private explicit_type "Impl"
	stereotype "std::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 383877 "C2ConstGraphicBlock"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A constant (read-only) graphic block (portion of an allocation) with an acquire fence.
Blocks are unmapped when created, and can be mapped into a read view on demand.

This class is copiable and contains a reference to the allocation that it is based on.
"
      classrelation 397829 // <generalisation>
	relation 397829 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 397829 // <generalisation>
	  b parent class_ref 383621 // C2Block2D
      end

      operation 1107589 "map"
	const public explicit_return_type "C2Acquirable<const C2GraphicView>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Maps this block into memory and returns a read view for it.

\\return a read view for this block.
"
      end

      operation 1107717 "subBlock"
	const public return_type class_ref 383877 // C2ConstGraphicBlock
	nparams 1
	  param in name "rect" type class_ref 382725 // C2Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a section of this block.

\\param rect    the coordinates of the section. \\note This is clamped to the crop rectangle of
             this block.

\\return a constant graphic block containing a portion of this block
"
      end

      operation 1107845 "fence"
	const cpp_inline public return_type class_ref 380549 // C2Fence
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mFence; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the acquire fence for this block.

\\return a fence that must be waited on before reading the block.
"
      end

      classrelation 397957 // mFence (<directional composition>)
	relation 397957 *-->
	  a role_name "mFence" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 397957 // mFence (<directional composition>)
	  b parent class_ref 380549 // C2Fence
      end
    end

    class 384005 "C2GraphicBlock"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Graphic block is a writeable 2D block. Once written, it can be shared in whole or in part with
consumers/readers as read-only const graphic block.
"
      classrelation 398085 // <generalisation>
	relation 398085 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 398085 // <generalisation>
	  b parent class_ref 383621 // C2Block2D
      end

      operation 1107973 "map"
	public explicit_return_type "C2Acquirable<C2GraphicView>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Maps this block into memory and returns a write view for it.

\\return a write view for this block.
"
      end

      operation 1108101 "share"
	public return_type class_ref 383877 // C2ConstGraphicBlock
	nparams 2
	  param in name "crop" type class_ref 382725 // C2Rect
	  param in name "fence" type class_ref 380549 // C2Fence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Creates a read-only const linear block for a portion of this block; optionally protected
by an acquire fence. There are two ways to use this:

1) share ready block after writing data into the block. In this case no fence shall be
   supplied, and the block shall not be modified after calling this method.
2) share block metadata before actually (finishing) writing the data into the block. In
   this case a fence must be supplied that will be triggered when the data is written.
   The block shall be modified only until firing the event for the fence.
"
      end
    end

    class 384133 "C2BufferData"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "C2BufferData: the main, non-meta data of a buffer. A buffer can contain either linear blocks
or graphic blocks, and can contain either a single block or multiple blocks. This is determined
by its type.
"
      class 384261 "Type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} : uint32_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 778245 "LINEAR"
	  public type class_ref 384261 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 778373 "LINEAR_CHUNKS"
	  public type class_ref 384261 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 778501 "GRAPHIC"
	  public type class_ref 384261 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 778629 "GRAPHIC_CHUNKS"
	  public type class_ref 384261 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 1108229 "type"
	const public return_type class_ref 384261 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the type of this buffer (data).
\\return the type of this buffer data.
"
      end

      operation 1108357 "linearBlocks"
	const public explicit_return_type "std::list<C2ConstLinearBlock>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the linear blocks of this buffer.
\\return a constant list of const linear blocks of this buffer.
\\retval empty list if this buffer does not contain linear block(s).
"
      end

      operation 1108485 "graphicBlocks"
	const public explicit_return_type "std::list<C2ConstGraphicBlock>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the graphic blocks of this buffer.
\\return a constant list of const graphic blocks of this buffer.
\\retval empty list if this buffer does not contain graphic block(s).
"
      end

      extra_member 152325 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 778757 "mImpl"
	private explicit_type "Impl"
	stereotype "std::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 384389 "C2Buffer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " no public constructor
 C2BufferData(const std::shared_ptr<const Impl> &impl) : mImpl(impl) {}

C2Buffer: buffer base class. These are always used as shared_ptrs. Though the underlying buffer
objects (native buffers, ion buffers, or dmabufs) are reference-counted by the system,
C2Buffers hold only a single reference.

These objects cannot be used on the stack.
"
      operation 1108613 "data"
	const public return_type class_ref 384133 // C2BufferData
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the buffer's data.

\\return the buffer's data.
"
      end

      operation 1108741 "asLinearBuffer"
	const cpp_inline public explicit_return_type "std::shared_ptr<C2LinearBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mType == LINEAR ? std::shared_ptr::reinterpret_cast<C2LinearBuffer>(this) : nullptr;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1108869 "asGraphicBuffer"
	const cpp_inline public explicit_return_type "std::shared_ptr<C2GraphicBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mType == GRAPHIC ? std::shared_ptr::reinterpret_cast<C2GraphicBuffer>(this) : nullptr;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1108997 "asCircularBuffer"
	const cpp_inline public explicit_return_type "std::shared_ptr<C2CircularBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mType == CIRCULAR ? std::shared_ptr::reinterpret_cast<C2CircularBuffer>(this) : nullptr;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      class 384517 "OnDestroyNotify"
	visibility package stereotype "typedef" explicit_base_type "void"
	cpp_decl "${comment}typedef ${type}(* ${name}) (const C2Buffer *buf, void *arg);
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 1109125 "registerOnDestroyNotify"
	public return_type class_ref 379141 // C2Error
	nparams 2
	  param inout name "onDestroyNotify" type class_ref 384517 // OnDestroyNotify
	  param inout name "arg" explicit_type "void"
	    defaultvalue "nullptr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Registers for a pre-destroy notification. This is called just prior to the destruction of
this buffer (when this buffer is no longer valid.)

\\param onDestroyNotify   the notification callback
\\param arg               an arbitrary parameter passed to the callback

\\retval C2_OK        the registration was successful.
\\retval C2_DUPLICATE a notification was already registered for this callback and argument
\\retval C2_NO_MEMORY not enough memory to register for this callback
\\retval C2_CORRUPTED an unknown error prevented the registration (unexpected)
"
      end

      operation 1109253 "unregisterOnDestroyNotify"
	public return_type class_ref 379141 // C2Error
	nparams 2
	  param inout name "onDestroyNotify" type class_ref 384517 // OnDestroyNotify
	  param inout name "arg" explicit_type "void"
	    defaultvalue "nullptr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Unregisters a previously registered pre-destroy notification.

\\param onDestroyNotify   the notification callback
\\param arg               an arbitrary parameter passed to the callback

\\retval C2_OK        the unregistration was successful.
\\retval C2_NOT_FOUND the notification was not found
\\retval C2_CORRUPTED an unknown error prevented the registration (unexpected)
"
      end

      operation 1109381 "~C2Buffer"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/@}"
      end

      operation 1109509 "infos"
	const public explicit_return_type "std::list<std::shared_ptr<const C2Info>>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/@name Buffer-specific arbitrary metadata handling
/@{

Gets the list of metadata associated with this buffer.

\\return a constant list of info objects associated with this buffer.
"
      end

      operation 1109637 "setInfo"
	public return_type class_ref 379141 // C2Error
	nparams 1
	  param in name "info" explicit_type "std::shared_ptr<C2Info>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Attaches (or updates) an (existing) metadata for this buffer.
If the metadata is stream specific, the stream information will be reset.

\\param info Metadata to update

\\retval C2_OK        the metadata was successfully attached/updated.
\\retval C2_NO_MEMORY not enough memory to attach the metadata (this return value is not
                     used if the same kind of metadata is already attached to the buffer).
"
      end

      operation 1109765 "hasInfo"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "index" type class_ref 384773 // Type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Checks if there is a certain type of metadata attached to this buffer.

\\param index the parameter type of the metadata

\\return true iff there is a metadata with the parameter type attached to this buffer.
"
      end

      operation 1109893 "removeInfo"
	const public explicit_return_type "std::shared_ptr<C2Info>"
	nparams 1
	  param in name "index" type class_ref 384773 // Type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1110021 "C2Buffer"
	cpp_defaulted cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "/@}
 no public constructor"
      end
    end

    class 384645 "C2Param"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameter base class.
"
      class 384773 "Type"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 400517 // <generalisation>
	  relation 400517 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 400517 // <generalisation>
	    b parent class_ref 390405 // BaseIndex
	end

	operation 1121285 "isGlobal"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return (mIndex & kDirMask) == kDirGlobal; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns true iff this is a global parameter (not for input nor output)"
	end

	operation 1121413 "forInput"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return (mIndex & kDirMask) == kDirInput; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns true iff this is an input or input stream parameter"
	end

	operation 1121541 "forOutput"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return (mIndex & kDirMask) == kDirOutput; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns true iff this is an output or output stream parameter"
	end

	operation 1121669 "forStream"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIndex & kStreamFlag; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns true iff this is a stream parameter"
	end

	operation 1121797 "forPort"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return !forStream() && !isGlobal(); };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns true iff this is a port (input or output) parameter"
	end

	operation 1121925 "type"
	  const cpp_inline public explicit_return_type "uint32_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIndex & (~kStreamIdMask); };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns the parameter type: the parameter index without the stream ID"
	end

	operation 1122053 "kind"
	  const cpp_inline public return_type class_ref 390277 // Kind
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            switch (mIndex & kTypeMask) {
                case kTypeStruct: return STRUCT;
                case kTypeInfo: return INFO;
                case kTypeSetting: return SETTING;
                case kTypeTuning: return TUNING;
                default: return NONE; // should not happen
            }
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ return the kind of this param"
	end

	operation 1122181 "Type"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "index" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : BaseIndex(index) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ constructor/conversion from uint32_t"
	end

	operation 1122309 "Type"
	  cpp_deleted cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "index" explicit_type "uint64_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment " no conversion from uint64_t"
	end

	classrelation 400645 // <dependency>
	  relation 400645 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 400645 // <dependency>
	    b parent class_ref 384645 // C2Param
	end

	classrelation 400773 // <dependency>
	  relation 400773 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 400773 // <dependency>
	    b parent class_ref 389637 // C2Tuning
	end

	classrelation 400901 // <dependency>
	  relation 400901 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 400901 // <dependency>
	    b parent class_ref 390789 // C2Setting
	end

	classrelation 401029 // <dependency>
	  relation 401029 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 401029 // <dependency>
	    b parent class_ref 388485 // C2Info
	end

	extra_member 152709 "friend"
	  
	  cpp " class F> friend struct C2GlobalParam;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	extra_member 152837 "friend"
	  
	  cpp " class F> friend struct C2PortParam;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	extra_member 152965 "friend"
	  
	  cpp " class F> friend struct C2StreamParam;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	classrelation 401157 // <dependency>
	  relation 401157 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 401157 // <dependency>
	    b parent class_ref 390917 // _C2ParamInspector
	end

	operation 1122437 "setPort"
	  cpp_inline private explicit_return_type "bool"
	  nparams 1
	    param in name "output" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            if (isGlobal()) {
                return false;
            } else {
                mIndex = (mIndex & ~kDirMask) | (output ? kDirOutput : kDirInput);
                return true;
            }
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Sets the port/stream direction.
@return true on success, false if could not set direction (e.g. it is global param).
"
	end
      end

      class 385029 "Index"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 401285 // <generalisation>
	  relation 401285 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      idl "${type}"
	      classrelation_ref 401285 // <generalisation>
	    b parent class_ref 384773 // Type
	end

	operation 1122565 "operator uint32_t"
	  const cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIndex; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns the index as uint32_t"
	end

	operation 1122693 "Index"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "index" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : Type(index) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ constructor/conversion from uint32_t"
	end

	operation 1122821 "Index"
	  cpp_deleted cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "index" explicit_type "uint64_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment " no conversion from uint64_t"
	end

	operation 1122949 "stream"
	  const cpp_inline public explicit_return_type "uint"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            return forStream() ? rawStream() : ~0U;
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns the stream ID or ~0 if not a stream"
	end

	classrelation 401413 // <dependency>
	  relation 401413 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 401413 // <dependency>
	    b parent class_ref 384645 // C2Param
	end

	classrelation 401541 // <dependency>
	  relation 401541 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 401541 // <dependency>
	    b parent class_ref 390917 // _C2ParamInspector
	end

	operation 1123077 "isValid"
	  const cpp_inline private explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            // there is no Type::isValid (even though some of this check could be
            // performed on types) as this is only used on index...
            return (forStream() ? rawStream() < kStreamIdMax : rawStream() == 0)
                    && (mIndex & kDirMask) != kDirUndefined;
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "@return true if the type is valid, e.g. direction is not undefined AND
stream is 0 if not a stream param.
"
	end

	operation 1123205 "rawStream"
	  const cpp_inline private explicit_return_type "uint"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            return (mIndex & kStreamIdMask) >> kStreamIdShift;
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns the raw stream ID field"
	end

	operation 1123333 "makeStreamId"
	  class_operation cpp_inline private explicit_return_type "uint32_t"
	  nparams 1
	    param in name "stream" explicit_type "uint"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            // saturate stream ID (max value is invalid)
            if (stream > kStreamIdMax) {
                stream = kStreamIdMax;
            }
            return (stream << kStreamIdShift) & kStreamIdMask;
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns the streamId bitfield for a given |stream|. If stream is invalid,
/ returns an invalid bitfield."
	end

	operation 1123461 "setStream"
	  cpp_inline private explicit_return_type "bool"
	  nparams 1
	    param in name "stream" explicit_type "uint"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            if (forStream()) {
                mIndex = (mIndex & ~kStreamIdMask) | makeStreamId(stream);
                return this->stream() < kStreamIdMax;
            }
            return false;
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "Sets the stream index.
\\return true on success, false if could not set index (e.g. not a stream param).
"
	end
      end

      class 390277 "Kind"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} : uint32_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 784773 "NONE"
	  public type class_ref 390277 // Kind
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 784901 "STRUCT"
	  public type class_ref 390277 // Kind
	  init_value " (1 << 0)"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 785029 "INFO"
	  public type class_ref 390277 // Kind
	  init_value " (1 << 1)"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 785157 "SETTING"
	  public type class_ref 390277 // Kind
	  init_value " (1 << 2)"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 785285 "TUNING"
	  public type class_ref 390277 // Kind
	  init_value " (1 << 3) | SETTING"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 390405 "BaseIndex"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	class 390533 "anonymous3"
	  visibility package stereotype "enum"
	  cpp_decl "${comment}enum : uint32_t {
${items}};
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  attribute 785413 "kTypeMask"
	    public type class_ref 390533 // anonymous3
	    init_value " 0xC0000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 785541 "kTypeStruct"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x00000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 785669 "kTypeTuning"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x40000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 785797 "kTypeSetting"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x80000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 785925 "kTypeInfo"
	    public type class_ref 390533 // anonymous3
	    init_value " 0xC0000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 786053 "kDirMask"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x30000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 786181 "kDirGlobal"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x20000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 786309 "kDirUndefined"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x30000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 786437 "kDirInput"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x00000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 786565 "kDirOutput"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x10000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 786693 "kStreamFlag"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x02000000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 786821 "kStreamIdMask"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x01FE0000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 786949 "kStreamIdShift"
	    public type class_ref 390533 // anonymous3
	    init_value " 17"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 787077 "kStreamIdMax"
	    public type class_ref 390533 // anonymous3
	    init_value " kStreamIdMask >> kStreamIdShift"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 787205 "kStreamMask"
	    public type class_ref 390533 // anonymous3
	    init_value " kStreamFlag | kStreamIdMask"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 787333 "kFlexibleFlag"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x00010000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 787461 "kVendorFlag"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x00008000"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 787589 "kParamMask"
	    public type class_ref 390533 // anonymous3
	    init_value " 0x0000FFFF"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 787717 "kBaseMask"
	    public type class_ref 390533 // anonymous3
	    init_value " kParamMask | kFlexibleFlag"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end
	end

	class 390661 "anonymous4"
	  visibility package stereotype "enum"
	  cpp_decl "${comment}enum : uint32_t {
${items}};
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  attribute 787845 "kVendorStart"
	    public type class_ref 390661 // anonymous4
	    init_value " kVendorFlag"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 787973 "_kFlexibleFlag"
	    public type class_ref 390661 // anonymous4
	    init_value " kFlexibleFlag"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl "  ${name},${comment}"
	    mysql_decl ""
	    MysqlColumn
	  end
	end

	operation 1120517 "BaseIndex"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "index" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : mIndex(index) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ constructor/conversion from uint32_t"
	end

	operation 1120645 "BaseIndex"
	  cpp_deleted cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "index" explicit_type "uint64_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment " no conversion from uint64_t"
	end

	operation 1120773 "isVendor"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIndex & kVendorFlag; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns true iff this is a vendor extension parameter"
	end

	operation 1120901 "isFlexible"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIndex & kFlexibleFlag; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns true iff this is a flexible parameter (with variable size)"
	end

	operation 1121029 "baseIndex"
	  const cpp_inline public explicit_return_type "uint"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIndex & kBaseMask; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns the base type: the index for the underlying struct"
	end

	operation 1121157 "paramIndex"
	  const cpp_inline public explicit_return_type "uint"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIndex & kParamMask; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	  comment "/ returns the param index for the underlying struct"
	end
      end

      operation 1123589 "isVendor"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.isVendor(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " public getters for Index methods
/ returns true iff this is a vendor extension parameter"
      end

      operation 1123717 "isFlexible"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.isFlexible(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns true iff this is a flexible parameter"
      end

      operation 1123845 "isGlobal"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.isGlobal(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns true iff this is a global parameter (not for input nor output)"
      end

      operation 1123973 "forInput"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.forInput(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns true iff this is an input or input stream parameter"
      end

      operation 1124101 "forOutput"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.forOutput(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns true iff this is an output or output stream parameter"
      end

      operation 1124229 "forStream"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.forStream(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns true iff this is a stream parameter"
      end

      operation 1124357 "forPort"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.forPort(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns true iff this is a port (input or output) parameter"
      end

      operation 1124485 "stream"
	const cpp_inline public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.stream(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns the stream ID or ~0 if not a stream"
      end

      operation 1124613 "type"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.type(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns the parameter type: the parameter index without the stream ID"
      end

      operation 1124741 "kind"
	const cpp_inline public return_type class_ref 390277 // Kind
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.kind(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns the kind of this parameter"
      end

      operation 1124869 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mSize; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns the size of the parameter or 0 if the parameter is invalid"
      end

      operation 1124997 "operator bool"
	const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.isValid() && _mSize > 0; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns true iff the parameter is valid"
      end

      operation 1125125 "operator !"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return !operator bool(); };
"
	
	
	
	
	comment "/ returns true iff the parameter is invalid"
      end

      operation 1125253 "operator =="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" type class_ref 384645 // C2Param
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return equals(o) && memcmp(this, &o, _mSize) == 0;
    };
"
	
	
	
	
	comment " equality is done by memcmp (use equals() to prevent any overread)"
      end

      operation 1125381 "operator !="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" type class_ref 384645 // C2Param
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return !operator==(o); };
"
	
	
	
	
      end

      operation 1125509 "From"
	class_operation cpp_inline public return_type class_ref 384645 // C2Param
	nparams 2
	  param inout name "addr" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        // _mSize must fit into size
        if (len < sizeof(_mSize) + offsetof(C2Param, _mSize)) {
            return nullptr;
        }
        // _mSize must match length
        C2Param *param = (C2Param*)addr;
        if (param->_mSize != len) {
            return nullptr;
        }
        return param;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ safe(r) type cast from pointer and size"
      end

      operation 1125637 "As"
	stereotype "template"
	const cpp_inline public explicit_return_type "P"
	nparams 0
	cpp_decl "    ${comment}template<typename P>
  ${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return const_cast<const P*>(P::From(const_cast<C2Param*>(this))); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1125765 "setStream"
	cpp_inline protected explicit_return_type "bool"
	nparams 1
	  param in name "stream" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return _mIndex.setStream(stream);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ sets the stream field. Returns true iff successful."
      end

      operation 1125893 "setPort"
	cpp_inline protected explicit_return_type "bool"
	nparams 1
	  param in name "output" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return _mIndex.setPort(output);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ sets the port (direction). Returns true iff successful."
      end

      operation 1126021 "invalidate"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { _mSize = 0; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ invalidate this parameter. There is no recovery from this call; e.g. parameter
/ cannot be 'corrected' to be valid."
      end

      operation 1126149 "updateFrom"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 384645 // C2Param
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (other._mSize == _mSize && other._mIndex == _mIndex && _mSize > 0) {
            memcpy(this, &other, _mSize);
            return true;
        }
        return false;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " if other is the same kind of (valid) param as this, copy it into this and return true.
 otherwise, do not copy anything, and return false."
      end

      operation 1126277 "ifSuitable"
	class_operation cpp_inline protected return_type class_ref 384645 // C2Param
	nparams 5
	  param in name "o" type class_ref 384645 // C2Param
	  param in name "size" explicit_type "size_t"
	  param in name "type" type class_ref 384773 // Type
	  param in name "flexSize" explicit_type "size_t"
	    defaultvalue "0"
	  param in name "checkDir" explicit_type "bool"
	    defaultvalue "true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        if (o == nullptr || o->_mSize < size || (flexSize && ((o->_mSize - size) % flexSize))) {
            return nullptr;
        } else if (checkDir) {
            return o->_mIndex.type() == type.mIndex ? o : nullptr;
        } else if (o->_mIndex.isGlobal()) {
            return nullptr;
        } else {
            return ((o->_mIndex.type() ^ type.mIndex) & ~Type::kDirMask) ? nullptr : o;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " returns |o| if it is a null ptr, or if can suitably be a param of given |type| (e.g. has
 same type (ignoring stream ID), and size). Otherwise, returns null. If |checkDir| is false,
 allow undefined or different direction (e.g. as constructed from C2PortParam() vs.
 C2PortParam::input), but still require equivalent type (stream, port or global); otherwise,
 return null."
      end

      operation 1126405 "C2Param"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param in name "paramSize" explicit_type "uint32_t"
	  param in name "paramIndex" type class_ref 385029 // Index
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : _mSize(paramSize),
          _mIndex(paramIndex) {
        if (paramSize > sizeof(C2Param)) {
            memset(this + 1, 0, paramSize - sizeof(C2Param));
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "/ base constructor"
      end

      operation 1126533 "C2Param"
	cpp_inline protected explicit_return_type ""
	nparams 3
	  param in name "paramSize" explicit_type "uint32_t"
	  param in name "paramIndex" type class_ref 385029 // Index
	  param in name "stream" explicit_type "uint"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : _mSize(paramSize),
          _mIndex(paramIndex | Index::makeStreamId(stream)) {
        if (paramSize > sizeof(C2Param)) {
            memset(this + 1, 0, paramSize - sizeof(C2Param));
        }
        if (!forStream()) {
            invalidate();
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "/ base constructor with stream set"
      end

      classrelation 401669 // <dependency>
	relation 401669 -_->
	  stereotype "friend"
	  a public
	    cpp default "Generated"
	    classrelation_ref 401669 // <dependency>
	  b parent class_ref 390917 // _C2ParamInspector
      end

      operation 1126661 "_baseIndex"
	const cpp_inline private explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIndex.baseIndex(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns the base type: the index for the underlying struct (for testing
/ as this can be gotten by the baseIndex enum)"
      end

      operation 1126789 "equals"
	const cpp_inline private explicit_return_type "bool"
	nparams 1
	  param in name "o" type class_ref 384645 // C2Param
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return _mSize == o._mSize && _mIndex == o._mIndex;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns true iff |o| has the same size and index as this. This performs the
/ basic check for equality."
      end

      attribute 788101 "_mSize"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 401797 // _mIndex (<directional composition>)
	relation 401797 *-->
	  a role_name "_mIndex" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 401797 // _mIndex (<directional composition>)
	  b parent class_ref 385029 // Index
      end
    end

    class 384901 "C2InfoBuffer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "    Type _mType;

An extension of C2Info objects that can contain arbitrary buffer data.

\\note This object is not describable and contains opaque data.
"
      operation 1110149 "index"
	const public return_type class_ref 385029 // Index
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the index of this info object.

\\return the parameter index.
"
      end

      operation 1110277 "data"
	const public return_type class_ref 384133 // C2BufferData
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Gets the buffer's data.

\\return the buffer's data.
"
      end
    end

    class 385157 "C2MemoryUsage"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}

ALLOCATIONS
************************************************************************************************
/ \\defgroup allocator Allocation and memory placement
/ @{

Buffer/memory usage bits. These are used by the allocators to select optimal memory type/pool and
buffer layout.

\\note This struct has public fields without getters/setters. All methods are inline.
"
      class 385285 "Consumer"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} : uint64_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 778885 "kSoftwareRead"
	  public type class_ref 385285 // Consumer
	  init_value " GRALLOC_USAGE_SW_READ_OFTEN"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779013 "kRenderScriptRead"
	  public type class_ref 385285 // Consumer
	  init_value " GRALLOC_USAGE_RENDERSCRIPT"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779141 "kTextureRead"
	  public type class_ref 385285 // Consumer
	  init_value " GRALLOC_USAGE_HW_TEXTURE"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779269 "kHardwareComposer"
	  public type class_ref 385285 // Consumer
	  init_value " GRALLOC_USAGE_HW_COMPOSER"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779397 "kHardwareEncoder"
	  public type class_ref 385285 // Consumer
	  init_value " GRALLOC_USAGE_HW_VIDEO_ENCODER"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779525 "kProtectedRead"
	  public type class_ref 385285 // Consumer
	  init_value " GRALLOC_USAGE_PROTECTED"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 385413 "Producer"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} : uint64_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 779653 "kSoftwareWrite"
	  public type class_ref 385413 // Producer
	  init_value " GRALLOC_USAGE_SW_WRITE_OFTEN"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779781 "kRenderScriptWrite"
	  public type class_ref 385413 // Producer
	  init_value " GRALLOC_USAGE_RENDERSCRIPT"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 779909 "kTextureWrite"
	  public type class_ref 385413 // Producer
	  init_value " GRALLOC_USAGE_HW_RENDER"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 780037 "kCompositionTarget"
	  public type class_ref 385413 // Producer
	  init_value " GRALLOC_USAGE_HW_COMPOSER | GRALLOC_USAGE_HW_RENDER"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 780165 "kHardwareDecoder"
	  public type class_ref 385413 // Producer
	  init_value " GRALLOC_USAGE_HW_VIDEO_ENCODER"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 780293 "kProtectedWrite"
	  public type class_ref 385413 // Producer
	  init_value " GRALLOC_USAGE_PROTECTED"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 780421 "mConsumer"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " e.g. input"
      end

      attribute 780549 "mProducer"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " e.g. output"
      end
    end

    class 385541 "C2LinearAllocation"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "\\ingroup linear allocator
1D allocation interface.
"
      classrelation 398213 // <generalisation>
	relation 398213 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 398213 // <generalisation>
	  b parent class_ref 381061 // _C2LinearCapacityAspect
      end

      operation 1110405 "map"
	abstract cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 5
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	  param in name "usage" type class_ref 385157 // C2MemoryUsage
	  param inout name "fenceFd" explicit_type "int"
	  param inout name "addr" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Maps a portion of an allocation starting from |offset| with |size| into local process memory.
Stores the starting address into |addr|, or NULL if the operation was unsuccessful.
|fenceFd| is a file descriptor referring to an acquire sync fence object. If it is already
safe to access the buffer contents, then -1.

\\param offset          starting position of the portion to be mapped (this does not have to
                     be page aligned)
\\param size            size of the portion to be mapped (this does not have to be page
                     aligned)
\\param usage           the desired usage. \\todo this must be kSoftwareRead and/or
                     kSoftwareWrite.
\\param fenceFd         a pointer to a file descriptor if an async mapping is requested. If
                     not-null, and acquire fence FD will be stored here on success, or -1
                     on failure. If null, the mapping will be synchronous.
\\param addr            a pointer to where the starting address of the mapped portion will be
                     stored. On failure, nullptr will be stored here.

\\todo Only one portion can be mapped at the same time - this is true for gralloc, but there
      is no need for this for 1D buffers.
\\todo Do we need to support sync operation as we could just wait for the fence?

\\retval C2_OK        the operation was successful
\\retval C2_NO_PERMISSION no permission to map the portion
\\retval C2_TIMED_OUT the operation timed out
\\retval C2_NO_MEMORY not enough memory to complete the operation
\\retval C2_BAD_VALUE the parameters (offset/size) are invalid or outside the allocation, or
                     the usage flags are invalid (caller error)
\\retval C2_CORRUPTED some unknown error prevented the operation from completing (unexpected)
"
      end

      operation 1110533 "unmap"
	abstract cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 3
	  param inout name "addr" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param inout name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Unmaps a portion of an allocation at |addr| with |size|. These must be parameters previously
passed to |map|; otherwise, this operation is a no-op.

\\param addr            starting address of the mapped region
\\param size            size of the mapped region
\\param fenceFd         a pointer to a file descriptor if an async unmapping is requested. If
                     not-null, a release fence FD will be stored here on success, or -1
                     on failure. This fence signals when the original allocation contains
                     any changes that happened to the mapped region. If null, the unmapping
                     will be synchronous.

\\retval C2_OK        the operation was successful
\\retval C2_TIMED_OUT the operation timed out
\\retval C2_BAD_VALUE the parameters (addr/size) do not correspond to previously mapped
                     regions (caller error)
\\retval C2_CORRUPTED some unknown error prevented the operation from completing (unexpected)
\\retval C2_NO_PERMISSION no permission to unmap the portion (unexpected - system)
"
      end

      operation 1110661 "isValid"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns true if this is a valid allocation.

\\todo remove?
"
      end

      operation 1110789 "handle"
	abstract const cpp_virtual public return_type class_ref 380421 // C2Handle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a pointer to the allocation handle.
"
      end

      operation 1110917 "equals"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "other" explicit_type "std::shared_ptr<C2LinearAllocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns true if this is the same allocation as |other|.
"
      end

      operation 1111045 "C2LinearAllocation"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : _C2LinearCapacityAspect(c2_min(capacity, UINT32_MAX)) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment " \\todo should we limit allocation directly?"
      end

      operation 1111173 "~C2LinearAllocation"
	cpp_virtual cpp_defaulted protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 385669 "C2GraphicAllocation"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "\\ingroup graphic allocator
2D allocation interface.
"
      classrelation 398341 // <generalisation>
	relation 398341 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 398341 // <generalisation>
	  b parent class_ref 382597 // _C2PlanarCapacityAspect
      end

      operation 1111301 "map"
	abstract cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 5
	  param in name "rect" type class_ref 382725 // C2Rect
	  param in name "usage" type class_ref 385157 // C2MemoryUsage
	  param inout name "fenceFd" explicit_type "int"
	  param inout name "layout" type class_ref 383109 // C2PlaneLayout
	  param inout name "addr" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Maps a rectangular section (as defined by |rect|) of a 2D allocation into local process
memory for flexible access. On success, it fills out |layout| with the plane specifications
and fills the |addr| array with pointers to the first byte of the top-left pixel of each
plane used. Otherwise, it leaves |layout| and |addr| untouched. |fenceFd| is a file
descriptor referring to an acquire sync fence object. If it is already safe to access the
buffer contents, then -1.

\\note Only one portion of the graphic allocation can be mapped at the same time. (This is
from gralloc1 limitation.)

\\param rect            section to be mapped (this does not have to be aligned)
\\param usage           the desired usage. \\todo this must be kSoftwareRead and/or
                     kSoftwareWrite.
\\param fenceFd         a pointer to a file descriptor if an async mapping is requested. If
                     not-null, and acquire fence FD will be stored here on success, or -1
                     on failure. If null, the mapping will be synchronous.
\\param layout          a pointer to where the mapped planes' descriptors will be
                     stored. On failure, nullptr will be stored here.

\\todo Do we need to support sync operation as we could just wait for the fence?

\\retval C2_OK        the operation was successful
\\retval C2_NO_PERMISSION no permission to map the section
\\retval C2_ALREADY_EXISTS there is already a mapped region (caller error)
\\retval C2_TIMED_OUT the operation timed out
\\retval C2_NO_MEMORY not enough memory to complete the operation
\\retval C2_BAD_VALUE the parameters (rect) are invalid or outside the allocation, or the
                     usage flags are invalid (caller error)
\\retval C2_CORRUPTED some unknown error prevented the operation from completing (unexpected)

"
      end

      operation 1111429 "unmap"
	abstract cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 1
	  param inout name "fenceFd" type class_ref 380549 // C2Fence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Unmaps the last mapped rectangular section.

\\param fenceFd         a pointer to a file descriptor if an async unmapping is requested. If
                     not-null, a release fence FD will be stored here on success, or -1
                     on failure. This fence signals when the original allocation contains
                     any changes that happened to the mapped section. If null, the unmapping
                     will be synchronous.

\\retval C2_OK        the operation was successful
\\retval C2_TIMED_OUT the operation timed out
\\retval C2_NOT_FOUND there is no mapped region (caller error)
\\retval C2_CORRUPTED some unknown error prevented the operation from completing (unexpected)
\\retval C2_NO_PERMISSION no permission to unmap the section (unexpected - system)
"
      end

      operation 1111557 "isValid"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns true if this is a valid allocation.

\\todo remove?
"
      end

      operation 1111685 "handle"
	abstract const cpp_virtual public return_type class_ref 380421 // C2Handle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a pointer to the allocation handle.
"
      end

      operation 1111813 "equals"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "other" explicit_type "std::shared_ptr<const C2GraphicAllocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns true if this is the same allocation as |other|.
"
      end

      operation 1111941 "~C2GraphicAllocation"
	cpp_virtual protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 385797 "C2Allocator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Allocators are used by the framework to allocate memory (allocations) for buffers. They can
 support either 1D or 2D allocations.

 \\note In theory they could support both, but in practice, we will use only one or the other.

 Never constructed on stack.

 Allocators are provided by vendors.
"
      operation 1112069 "allocateLinearBuffer"
	cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Allocates a 1D allocation of given |capacity| and |usage|. If successful, the allocation is
stored in |allocation|. Otherwise, |allocation| is set to 'nullptr'.

\\param capacity        the size of requested allocation (the allocation could be slightly
                     larger, e.g. to account for any system-required alignment)
\\param usage           the memory usage info for the requested allocation. \\note that the
                     returned allocation may be later used/mapped with different usage.
                     The allocator should layout the buffer to be optimized for this usage,
                     but must support any usage. One exception: protected buffers can
                     only be used in a protected scenario.
\\param allocation      pointer to where the allocation shall be stored on success. nullptr
                     will be stored here on failure

\\retval C2_OK        the allocation was successful
\\retval C2_NO_MEMORY not enough memory to complete the allocation
\\retval C2_TIMED_OUT the allocation timed out
\\retval C2_NO_PERMISSION     no permission to complete the allocation
\\retval C2_BAD_VALUE capacity or usage are not supported (invalid) (caller error)
\\retval C2_UNSUPPORTED       this allocator does not support 1D allocations
\\retval C2_CORRUPTED some unknown, unrecoverable error occured during allocation (unexpected)
"
      end

      operation 1112197 "recreateLinearBuffer"
	cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "(Re)creates a 1D allocation from a native |handle|. If successful, the allocation is stored
in |allocation|. Otherwise, |allocation| is set to 'nullptr'.

\\param handle      the handle for the existing allocation
\\param allocation  pointer to where the allocation shall be stored on success. nullptr
                 will be stored here on failure

\\retval C2_OK        the allocation was recreated successfully
\\retval C2_NO_MEMORY not enough memory to recreate the allocation
\\retval C2_TIMED_OUT the recreation timed out (unexpected)
\\retval C2_NO_PERMISSION     no permission to recreate the allocation
\\retval C2_BAD_VALUE invalid handle (caller error)
\\retval C2_UNSUPPORTED       this allocator does not support 1D allocations
\\retval C2_CORRUPTED some unknown, unrecoverable error occured during allocation (unexpected)
"
      end

      operation 1112325 "allocateGraphicBuffer"
	cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Allocates a 2D allocation of given |width|, |height|, |format| and |usage|. If successful,
the allocation is stored in |allocation|. Otherwise, |allocation| is set to 'nullptr'.

\\param width           the width of requested allocation (the allocation could be slightly
                     larger, e.g. to account for any system-required alignment)
\\param height          the height of requested allocation (the allocation could be slightly
                     larger, e.g. to account for any system-required alignment)
\\param format          the pixel format of requested allocation. This could be a vendor
                     specific format.
\\param usage           the memory usage info for the requested allocation. \\note that the
                     returned allocation may be later used/mapped with different usage.
                     The allocator should layout the buffer to be optimized for this usage,
                     but must support any usage. One exception: protected buffers can
                     only be used in a protected scenario.
\\param allocation      pointer to where the allocation shall be stored on success. nullptr
                     will be stored here on failure

\\retval C2_OK        the allocation was successful
\\retval C2_NO_MEMORY not enough memory to complete the allocation
\\retval C2_TIMED_OUT the allocation timed out
\\retval C2_NO_PERMISSION     no permission to complete the allocation
\\retval C2_BAD_VALUE width, height, format or usage are not supported (invalid) (caller error)
\\retval C2_UNSUPPORTED       this allocator does not support 2D allocations
\\retval C2_CORRUPTED some unknown, unrecoverable error occured during allocation (unexpected)
"
      end

      operation 1112453 "recreateGraphicBuffer"
	cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "(Re)creates a 2D allocation from a native handle.  If successful, the allocation is stored
in |allocation|. Otherwise, |allocation| is set to 'nullptr'.

\\param handle      the handle for the existing allocation
\\param allocation  pointer to where the allocation shall be stored on success. nullptr
                 will be stored here on failure

\\retval C2_OK        the allocation was recreated successfully
\\retval C2_NO_MEMORY not enough memory to recreate the allocation
\\retval C2_TIMED_OUT the recreation timed out (unexpected)
\\retval C2_NO_PERMISSION     no permission to recreate the allocation
\\retval C2_BAD_VALUE invalid handle (caller error)
\\retval C2_UNSUPPORTED       this allocator does not support 2D allocations
\\retval C2_CORRUPTED some unknown, unrecoverable error occured during recreation (unexpected)
"
      end

      operation 1112581 "C2Allocator"
	cpp_defaulted protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1112709 "~C2Allocator"
	cpp_virtual cpp_defaulted protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 385925 "C2BlockAllocator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Block allocators are used by components to allocate memory for output buffers. They can
 support either linear (1D), circular (1D) or graphic (2D) allocations.

 Never constructed on stack.

 Block allocators are provided by the framework.
"
      operation 1112837 "allocateLinearBlock"
	cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Allocates a linear writeable block of given |capacity| and |usage|. If successful, the
block is stored in |block|. Otherwise, |block| is set to 'nullptr'.

\\param capacity        the size of requested block.
\\param usage           the memory usage info for the requested allocation. \\note that the
                     returned allocation may be later used/mapped with different usage.
                     The allocator shall lay out the buffer to be optimized for this usage,
                     but must support any usage. One exception: protected buffers can
                     only be used in a protected scenario.
\\param block      pointer to where the allocated block shall be stored on success. nullptr
                     will be stored here on failure

\\retval C2_OK        the allocation was successful
\\retval C2_NO_MEMORY not enough memory to complete the allocation
\\retval C2_TIMED_OUT the allocation timed out
\\retval C2_NO_PERMISSION     no permission to complete the allocation
\\retval C2_BAD_VALUE capacity or usage are not supported (invalid) (caller error)
\\retval C2_UNSUPPORTED       this allocator does not support linear allocations
\\retval C2_CORRUPTED some unknown, unrecoverable error occured during allocation (unexpected)
"
      end

      operation 1112965 "allocateCircularBlock"
	cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Allocates a circular writeable block of given |capacity| and |usage|. If successful, the
block is stored in |block|. Otherwise, |block| is set to 'nullptr'.

\\param capacity        the size of requested circular block. (the allocation could be slightly
                     larger, e.g. to account for any system-required alignment)
\\param usage           the memory usage info for the requested allocation. \\note that the
                     returned allocation may be later used/mapped with different usage.
                     The allocator shall lay out the buffer to be optimized for this usage,
                     but must support any usage. One exception: protected buffers can
                     only be used in a protected scenario.
\\param block      pointer to where the allocated block shall be stored on success. nullptr
                     will be stored here on failure

\\retval C2_OK            the allocation was successful
\\retval C2_NO_MEMORY     not enough memory to complete the allocation
\\retval C2_TIMED_OUT     the allocation timed out
\\retval C2_NO_PERMISSION     no permission to complete the allocation
\\retval C2_BAD_VALUE     capacity or usage are not supported (invalid) (caller error)
\\retval C2_UNSUPPORTED   this allocator does not support circular allocations
\\retval C2_CORRUPTED     some unknown, unrecoverable error occured during allocation (unexpected)
"
      end

      operation 1113093 "allocateGraphicBlock"
	cpp_virtual public return_type class_ref 379141 // C2Error
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Allocates a 2D graphic block of given |width|, |height|, |format| and |usage|. If successful,
the allocation is stored in |block|. Otherwise, |block| is set to 'nullptr'.

\\param width           the width of requested allocation (the allocation could be slightly
                     larger, e.g. to account for any system-required alignment)
\\param height          the height of requested allocation (the allocation could be slightly
                     larger, e.g. to account for any system-required alignment)
\\param format          the pixel format of requested allocation. This could be a vendor
                     specific format.
\\param usage           the memory usage info for the requested allocation. \\note that the
                     returned allocation may be later used/mapped with different usage.
                     The allocator should layout the buffer to be optimized for this usage,
                     but must support any usage. One exception: protected buffers can
                     only be used in a protected scenario.
\\param block      pointer to where the allocation shall be stored on success. nullptr
                     will be stored here on failure

\\retval C2_OK            the allocation was successful
\\retval C2_NO_MEMORY     not enough memory to complete the allocation
\\retval C2_TIMED_OUT     the allocation timed out
\\retval C2_NO_PERMISSION     no permission to complete the allocation
\\retval C2_BAD_VALUE     width, height, format or usage are not supported (invalid) (caller error)
\\retval C2_UNSUPPORTED   this allocator does not support 2D allocations
\\retval C2_CORRUPTED     some unknown, unrecoverable error occured during allocation (unexpected)
"
      end

      operation 1113221 "C2BlockAllocator"
	cpp_defaulted protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1113349 "~C2BlockAllocator"
	cpp_virtual cpp_defaulted protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 386053 "C2LinearBuffer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}
/ \\cond INTERNAL
/ \\todo These are no longer used
/ \\addtogroup linear
/ @{
 \\deprecated "
      classrelation 398469 // <generalisation>
	relation 398469 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 398469 // <generalisation>
	  b parent class_ref 384389 // C2Buffer
      end

      classrelation 398597 // <generalisation>
	relation 398597 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 398597 // <generalisation>
	  b parent class_ref 381189 // _C2LinearRangeAspect
      end

      classrelation 398725 // <generalisation>
	relation 398725 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 398725 // <generalisation>
	  b parent class_ref 386181 // typedef1
      end

      operation 1113477 "handle"
	const public return_type class_ref 380421 // C2Handle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " \\todo what is this? "
      end

      operation 1113605 "C2LinearBuffer"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "block" type class_ref 381829 // C2ConstLinearBlock
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      extra_member 152453 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 780677 "mImpl"
	private explicit_type "Impl"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 386181 "typedef1"
      visibility package stereotype "typedef" explicit_base_type "std::enable_shared_from_this<C2LinearBuffer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 386309 "C2WriteCursor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      operation 1113733 "remaining"
	const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1113861 "commit"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " remaining data to be read"
      end

      operation 1113989 "reset"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " commits the current position. discard data before current position"
      end

      operation 1114117 "slice"
	const public explicit_return_type "C2ReadCursor"
	nparams 1
	  param in name "size" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " resets position to the last committed position
 slices off at most |size| bytes, and moves cursor ahead by the number of bytes
 sliced off."
      end

      operation 1114245 "reserve"
	public return_type class_ref 386309 // C2WriteCursor
	nparams 1
	  param in name "size" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " slices off at most |size| bytes, and moves cursor ahead by the number of bytes
 sliced off."
      end

      operation 1114373 "waitForSpace"
	public return_type class_ref 380549 // C2Fence
	nparams 1
	  param in name "size" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " bool read(T&);
 bool write(T&);"
      end
    end

    class 386437 "C2ColorSpace"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ @}
/ \\addtogroup graphic
/ @{"
      class 386565 "Standard"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 780805 "BT601"
	  public type class_ref 386565 // Standard
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 780933 "BT709"
	  public type class_ref 386565 // Standard
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 781061 "BT2020"
	  public type class_ref 386565 // Standard
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 386693 "Range"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 781189 "LIMITED"
	  public type class_ref 386693 // Range
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 781317 "FULL"
	  public type class_ref 386693 // Range
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 386821 "TransferFunction"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 781445 "BT709Transfer"
	  public type class_ref 386821 // TransferFunction
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 781573 "BT2020Transfer"
	  public type class_ref 386821 // TransferFunction
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 781701 "HybridLogGamma2"
	  public type class_ref 386821 // TransferFunction
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 781829 "HybridLogGamma4"
	  public type class_ref 386821 // TransferFunction
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end
    end

    class 386949 "C2GraphicBuffer"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " \\deprecated "
      classrelation 398853 // <generalisation>
	relation 398853 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 398853 // <generalisation>
	  b parent class_ref 384389 // C2Buffer
      end

      operation 1114501 "width"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mWidth; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " constant attributes"
      end

      operation 1114629 "height"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mHeight; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1114757 "format"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mFormat; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1114885 "usage"
	const cpp_inline public return_type class_ref 385157 // C2MemoryUsage
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mUsage; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1115013 "colorSpace"
	abstract const cpp_virtual public return_type class_ref 386437 // C2ColorSpace
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " modifiable attributes"
      end

      operation 1115141 "setColorSpace_be"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "colorSpace" type class_ref 386437 // C2ColorSpace
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " best effort"
      end

      operation 1115269 "setColorSpace"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "colorSpace" type class_ref 386437 // C2ColorSpace
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1115397 "handle"
	const public return_type class_ref 380421 // C2Handle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      attribute 781957 "mWidth"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 782085 "mHeight"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 782213 "mFormat"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 398981 // mUsage (<directional composition>)
	relation 398981 *-->
	  a role_name "mUsage" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 398981 // mUsage (<directional composition>)
	  b parent class_ref 385157 // C2MemoryUsage
      end

      extra_member 152581 "Impl"
	
	stereotype "class"
	cpp "    class Impl;
" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 782341 "mImpl"
	protected explicit_type "Impl"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${visibility}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 387077 "C2ComponentListener"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      operation 1115525 "onWorkDone"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "component" explicit_type "std::weak_ptr<C2Component>"
	  param in name "workItems" explicit_type "std::vector<std::unique_ptr<C2Work>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1115653 "onTripped"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "component" explicit_type "std::weak_ptr<C2Component>"
	  param in name "settingResult" explicit_type "std::vector<std::shared_ptr<C2SettingResult>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1115781 "onError"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "component" explicit_type "std::weak_ptr<C2Component>"
	  param in name "errorCode" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1115909 "~C2ComponentListener"
	cpp_virtual protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " virtual void onTunnelReleased(<from>, <to>) = 0;
 virtual void onComponentReleased(<id>) = 0;"
      end
    end

    class 387205 "C2ComponentInterface"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Component interface object. This object contains all of the configuration of a potential or
actual component. It can be created and used independently of an actual C2Component instance to
query support and parameters for various component settings and configurations for a potential
component. Actual components also expose this interface.
"
      operation 1116037 "getName"
	abstract const cpp_virtual public return_type class_ref 378885 // C2String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " ALWAYS AVAILABLE METHODS
 =============================================================================================

Returns the name of this component or component interface object.
This is a unique name for this component or component interface 'class'; however, multiple
instances of this component SHALL have the same name.

This method MUST be supported in any state. This call does not change the state nor the
internal states of the component.

This method MUST be \"non-blocking\" and return within 1ms.

\\return the name of this component or component interface object.
\\retval an empty string if there was not enough memory to allocate the actual name.
"
      end

      operation 1116165 "getId"
	abstract const cpp_virtual public return_type class_ref 387333 // node_id
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns a unique ID for this component or interface object.
This ID is used as work targets, unique work IDs, and when configuring tunneling.

This method MUST be supported in any state. This call does not change the state nor the
internal states of the component.

This method MUST be \"non-blocking\" and return within 1ms.

\\return a unique node ID for this component or component interface instance.
"
      end

      operation 1116293 "query_nb"
	abstract const cpp_virtual public return_type class_ref 387461 // status_t
	nparams 3
	  param in name "stackParams" explicit_type "std::vector<C2Param* const>"
	  param in name "heapParamIndices" explicit_type "std::vector<C2Param::Index>"
	  param inout name "heapParams" explicit_type "std::vector<std::unique_ptr<C2Param>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * const ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Queries a set of parameters from the component or interface object.
Querying is performed at best effort: the component SHALL query all supported parameters and
skip unsupported ones, or heap allocated parameters that could not be allocated. Any errors
are communicated in the return value. Additionally, preallocated (e.g. stack) parameters that
could not be queried are invalidated. Parameters to be allocated on the heap are omitted from
the result.

\\note Parameter values do not depend on the order of query.

\\todo This method cannot be used to query info-buffers. Is that a problem?

This method MUST be supported in any state. This call does not change the state nor the
internal states of the component.

This method MUST be \"non-blocking\" and return within 1ms.

\\param[in,out] stackParams   a list of params queried. These are initialized specific to each
                     setting; e.g. size and index are set and rest of the members are
                     cleared.
                     \\note Flexible settings that are of incorrect size will be invalidated.
\\param[in] heapParamIndices a vector of param indices for params to be queried and returned on the
                     heap. These parameters will be returned in heapParams. Unsupported param
                     indices will be ignored.
\\param[out] heapParams    a list of params where to which the supported heap parameters will be
                     appended in the order they appear in heapParamIndices.

\\retval C2_OK        all parameters could be queried
\\retval C2_BAD_INDEX all supported parameters could be queried, but some parameters were not
                     supported
\\retval C2_NO_MEMORY could not allocate memory for a supported parameter
\\retval C2_CORRUPTED some unknown error prevented the querying of the parameters
                     (unexpected)
"
      end

      operation 1116421 "config_nb"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 2
	  param in name "params" explicit_type "std::vector<C2Param* const>"
	  param inout name "failures" explicit_type "std::vector<std::unique_ptr<C2SettingResult>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * const ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets a set of parameters for the component or interface object.
Tuning is performed at best effort: the component SHALL update all supported configuration at
best effort (unless configured otherwise) and skip unsupported ones. Any errors are
communicated in the return value and in |failures|.

\\note Parameter tuning DOES depend on the order of the tuning parameters. E.g. some parameter
update may allow some subsequent parameter update.

This method MUST be supported in any state.

This method MUST be \"non-blocking\" and return within 1ms.

\\param[in,out] params          a list of parameter updates. These will be updated to the actual
                     parameter values after the updates (this is because tuning is performed
                     at best effort).
                     \\todo params that could not be updated are not marked here, so are
                     confusing - are they \"existing\" values or intended to be configured
                     values?
\\param[out] failures        a list of parameter failures

\\retval C2_OK        all parameters could be updated successfully
\\retval C2_BAD_INDEX all supported parameters could be updated successfully, but some
                     parameters were not supported
\\retval C2_BAD_VALUE some supported parameters could not be updated successfully because
                     they contained unsupported values. These are returned in |failures|.
\\retval C2_NO_MEMORY some supported parameters could not be updated successfully because
                     they contained unsupported values, but could not allocate a failure
                     object for them.
\\retval C2_CORRUPTED some unknown error prevented the update of the parameters
                     (unexpected)
"
      end

      operation 1116549 "commit_sm"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 2
	  param in name "params" explicit_type "std::vector<C2Param* const>"
	  param inout name "failures" explicit_type "std::vector<std::unique_ptr<C2SettingResult>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * const ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Atomically sets a set of parameters for the component or interface object.

\\note This method is used mainly for reserving resources for a component.

The component SHALL update all supported configuration at
best effort(TBD) (unless configured otherwise) and skip unsupported ones. Any errors are
communicated in the return value and in |failures|.

\\note Parameter tuning DOES depend on the order of the tuning parameters. E.g. some parameter
update may allow some subsequent parameter update.

This method MUST be supported in any state.

This method may be momentarily blocking, but MUST return within 5ms.

\\param params[in,out]          a list of parameter updates. These will be updated to the actual
                     parameter values after the updates (this is because tuning is performed
                     at best effort).
                     \\todo params that could not be updated are not marked here, so are
                     confusing - are they \"existing\" values or intended to be configured
                     values?
\\param failures[out]        a list of parameter failures

\\retval C2_OK        all parameters could be updated successfully
\\retval C2_BAD_INDEX all supported parameters could be updated successfully, but some
                     parameters were not supported
\\retval C2_BAD_VALUE some supported parameters could not be updated successfully because
                     they contained unsupported values. These are returned in |failures|.
\\retval C2_NO_MEMORY some supported parameters could not be updated successfully because
                     they contained unsupported values, but could not allocate a failure
                     object for them.
\\retval C2_CORRUPTED some unknown error prevented the update of the parameters
                     (unexpected)
"
      end

      operation 1116677 "createTunnel_sm"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 1
	  param in name "targetComponent" type class_ref 387333 // node_id
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " TUNNELING
 =============================================================================================

Creates a tunnel from this component to the target component.

If the component is successfully created, subsequent work items queued may include a
tunneled path between these components.

This method MUST be supported in any state.

This method may be momentarily blocking, but MUST return within 5ms.

\\retval C2_OK        the tunnel was successfully created
\\retval C2_BAD_INDEX the target component does not exist
\\retval C2_ALREADY_EXIST the tunnel already exists
\\retval C2_UNSUPPORTED  the tunnel is not supported

\\retval C2_TIMED_OUT could not create the tunnel within the time limit (unexpected)
\\retval C2_CORRUPTED some unknown error prevented the creation of the tunnel (unexpected)
"
      end

      operation 1116805 "releaseTunnel_sm"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 1
	  param in name "targetComponent" type class_ref 387333 // node_id
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Releases a tunnel from this component to the target component.

The release of a tunnel is delayed while there are pending work items for the tunnel.
After releasing a tunnel, subsequent work items queued MUST NOT include a tunneled
path between these components.

This method MUST be supported in any state.

This method may be momentarily blocking, but MUST return within 5ms.

\\retval C2_OK        the tunnel was marked for release successfully
\\retval C2_BAD_INDEX the target component does not exist
\\retval C2_NOT_FOUND the tunnel does not exist

\\retval C2_TIMED_OUT could not mark the tunnel for release within the time limit (unexpected)
\\retval C2_CORRUPTED some unknown error prevented the release of the tunnel (unexpected)
"
      end

      operation 1116933 "getParamReflector"
	abstract const cpp_virtual public explicit_return_type "std::shared_ptr<C2ParamReflector>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " REFLECTION MECHANISM (USED FOR EXTENSION)
 =============================================================================================

Returns the parameter reflector.

This is used to describe parameter fields.

\\return a shared parameter reflector object.
"
      end

      operation 1117061 "getSupportedParams"
	abstract const cpp_virtual public return_type class_ref 387461 // status_t
	nparams 1
	  param inout name "params" explicit_type "std::vector<std::shared_ptr<C2ParamDescriptor>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * const ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the set of supported parameters.

\\param[out] params a vector of supported parameters will be appended to this vector.

\\retval C2_OK        the operation completed successfully.
\\retval C2_NO_MEMORY not enough memory to complete this method.
"
      end

      operation 1117189 "getSupportedValues"
	abstract const cpp_virtual public return_type class_ref 387461 // status_t
	nparams 2
	  param in name "fields" explicit_type "std::vector<const C2ParamField>"
	  param inout name "values" explicit_type "std::vector<C2FieldSupportedValues>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, ${t1} * const ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "
\\todo should this take a list considering that setting some fields may further limit other
fields in the same list?
"
      end

      operation 1117317 "~C2ComponentInterface"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 387333 "node_id"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ================================================================================================
  WORK
 ================================================================================================
 node_id-s"
    end

    class 387589 "C2Component"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      operation 1117445 "queue_nb"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 1
	  param inout name "items" explicit_type "std::list<std::unique_ptr<C2Work>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * const ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " METHODS AVAILABLE WHEN RUNNING
 =============================================================================================

Queues up work for the component.

This method MUST be supported in running (including tripped) states.

This method MUST be \"non-blocking\" and return within 1ms

It is acceptable for this method to return OK and return an error value using the
onWorkDone() callback.

\\retval C2_OK        the work was successfully queued
\\retval C2_BAD_INDEX some component(s) in the work do(es) not exist
\\retval C2_UNSUPPORTED  the components are not tunneled

\\retval C2_NO_MEMORY not enough memory to queue the work
\\retval C2_CORRUPTED some unknown error prevented queuing the work (unexpected)
"
      end

      operation 1117573 "announce_nb"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 1
	  param in name "items" explicit_type "std::vector<C2WorkOutline>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Announces a work to be queued later for the component. This reserves a slot for the queue
to ensure correct work ordering even if the work is queued later.

This method MUST be supported in running (including tripped) states.

This method MUST be \"non-blocking\" and return within 1 ms

\\retval C2_OK        the work announcement has been successfully recorded
\\retval C2_BAD_INDEX some component(s) in the work outline do(es) not exist
\\retval C2_UNSUPPORTED  the componentes are not tunneled

\\retval C2_NO_MEMORY not enough memory to record the work announcement
\\retval C2_CORRUPTED some unknown error prevented recording the announcement (unexpected)

\\todo Can this be rolled into queue_nb?
"
      end

      operation 1117701 "flush_sm"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 2
	  param in name "flushThrough" explicit_type "bool"
	  param inout name "flushedWork" explicit_type "std::list<std::unique_ptr<C2Work>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * const ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Discards and abandons any pending work for the component, and optionally any component
downstream.

\\todo define this: we could flush all work before last item queued for component across all
                   components linked to this; flush only work items that are queued to this
                   component
\\todo return work # of last flushed item; or all flushed (but not returned items)
\\todo we could make flush take a work item and flush all work before/after that item to allow
      TBD (slicing/seek?)
\\todo we could simply take a list of numbers and flush those... this is bad for decoders
      also, what would happen to fine grade references?

This method MUST be supported in running (including tripped) states.

This method may be momentarily blocking, but must return within 5ms.

Work that could be immediately abandoned/discarded SHALL be returned in |flushedWork|; this
can be done in an arbitrary order.

Work that could not be abandoned or discarded immediately SHALL be marked to be
discarded at the earliest opportunity, and SHALL be returned via the onWorkDone() callback.

\\param flushThrough    flush work from this component and all components connected downstream
                     from it via tunneling.

\\retval C2_OK        the work announcement has been successfully recorded
\\retval C2_TIMED_OUT the flush could not be completed within the time limit (unexpected)
\\retval C2_CORRUPTED some unknown error prevented flushing from completion (unexpected)
"
      end

      operation 1117829 "drain_nb"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 1
	  param in name "drainThrough" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Drains the component, and optionally downstream components

\\todo define this; we could place EOS to all upstream components, just this component, or
      all upstream and downstream component.
\\todo should EOS carry over to downstream components?

Marks last work item as \"end-of-stream\", so component is notified not to wait for further
work before it processes work already queued. This method is called to set the end-of-stream
flag after work has been queued. Client can continue to queue further work immediately after
this method returns.

This method MUST be supported in running (including tripped) states.

This method MUST be \"non-blocking\" and return within 1ms.

Work that is completed SHALL be returned via the onWorkDone() callback.

\\param drainThrough    marks the last work item with a persistent \"end-of-stream\" marker that
                     will drain downstream components.

\\todo this may confuse work-ordering downstream; could be an mode enum

\\retval C2_OK        the work announcement has been successfully recorded
\\retval C2_TIMED_OUT the flush could not be completed within the time limit (unexpected)
\\retval C2_CORRUPTED some unknown error prevented flushing from completion (unexpected)
"
      end

      operation 1117957 "start"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " STATE CHANGE METHODS
 =============================================================================================

Starts the component.

This method MUST be supported in stopped state.

\\todo This method MUST return within 500ms. Seems this should be able to return quickly, as
there are no immediate guarantees. Though there are guarantees for responsiveness immediately
after start returns.

\\todo Could we just start a ComponentInterface to get a Component?

\\retval C2_OK        the work announcement has been successfully recorded
\\retval C2_NO_MEMORY not enough memory to start the component
\\retval C2_TIMED_OUT the component could not be started within the time limit (unexpected)
\\retval C2_CORRUPTED some unknown error prevented starting the component (unexpected)
"
      end

      operation 1118085 "stop"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Stops the component.

This method MUST be supported in running (including tripped) state.

This method MUST return withing 500ms.

Upon this call, all pending work SHALL be abandoned.

\\todo should this return completed work, since client will just free it? Perhaps just to
verify accounting.

This does not alter any settings and tunings that may have resulted in a tripped state.
(Is this material given the definition? Perhaps in case we want to start again.)
"
      end

      operation 1118213 "reset"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Resets the component.

This method MUST be supported in running (including tripped) state.

This method MUST be supported during any other call (\\todo or just blocking ones?)

This method MUST return withing 500ms.

After this call returns all work is/must be abandoned, all references should be released.

\\todo should this return completed work, since client will just free it? Also, if it unblocks
a stop, where should completed work be returned?

This brings settings back to their default - \"guaranteeing\" no tripped space.

\\todo reclaim support - it seems that since ownership is passed, this will allow reclaiming stuff.
"
      end

      operation 1118341 "release"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Releases the component.

This method MUST be supported in any state. (\\todo Or shall we force reset() first to bring
to a known state?)

This method MUST return withing 500ms.

\\todo should this return completed work, since client will just free it? Also, if it unblocks
a stop, where should completed work be returned?

TODO: does it matter if this call has a short time limit? Yes, as upon return all references
shall be abandoned.
"
      end

      operation 1118469 "intf"
	abstract cpp_virtual public explicit_return_type "std::shared_ptr<C2ComponentInterface>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the interface for this component.

\\return the component interface
"
      end

      operation 1118597 "~C2Component"
	cpp_virtual cpp_defaulted protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 387717 "C2FrameInfoParser"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      operation 1118725 "getType"
	abstract const cpp_virtual public return_type class_ref 379013 // C2StringLiteral
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return the content type supported by this info parser.

\\todo this may be redundant
"
      end

      operation 1118853 "getParsedParams"
	abstract const cpp_virtual public explicit_return_type "std::vector<C2Param::Index>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "\\return a vector of supported parameter indices parsed by this info parser.

\\todo sticky vs. non-sticky params? this may be communicated by param-reflector.
"
      end

      operation 1118981 "reset"
	cpp_virtual cpp_inline public return_type class_ref 387461 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return C2_OK; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Resets this info parser. This brings this parser to its initial state after creation.

This method SHALL return within 5ms.

\\retval C2_OK        the info parser was reset
\\retval C2_TIMED_OUT could not reset the parser within the time limit (unexpected)
\\retval C2_CORRUPTED some unknown error prevented the resetting of the parser (unexpected)
"
      end

      operation 1119109 "parseFrame"
	cpp_virtual public return_type class_ref 387461 // status_t
	nparams 1
	  param inout name "frame" explicit_type "C2BufferPack"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1119237 "~C2FrameInfoParser"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 387845 "C2ComponentInfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 387973 "C2AllocatorStore"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " TBD"
      class 388101 "Type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 782469 "LINEAR"
	  public type class_ref 388101 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 782597 "GRALLOC"
	  public type class_ref 388101 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 1119365 "createAllocator"
	abstract cpp_virtual public return_type class_ref 387461 // status_t
	nparams 2
	  param in name "type" type class_ref 388101 // Type
	  param inout name "allocator" explicit_type "std::shared_ptr<C2Allocator>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * const ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Creates an allocator.

\\param type      the type of allocator to create
\\param allocator shared pointer where the created allocator is stored. Cleared on failure
                 and updated on success.

\\retval C2_OK        the allocator was created successfully
\\retval C2_TIMED_OUT could not create the allocator within the time limit (unexpected)
\\retval C2_CORRUPTED some unknown error prevented the creation of the allocator (unexpected)

\\retval C2_NOT_FOUND no such allocator
\\retval C2_NO_MEMORY not enough memory to create the allocator
"
      end

      operation 1119493 "~C2AllocatorStore"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 388229 "C2ComponentStore"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      operation 1119621 "createComponent"
	cpp_virtual private return_type class_ref 387461 // status_t
	nparams 2
	  param in name "name" type class_ref 378885 // C2String
	  param inout name "component" explicit_type "std::shared_ptr<C2Component>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * const ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * const ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Creates a component.

This method SHALL return within 100ms.

\\param name          name of the component to create
\\param component     shared pointer where the created component is stored. Cleared on
                     failure and updated on success.

\\retval C2_OK        the component was created successfully
\\retval C2_TIMED_OUT could not create the component within the time limit (unexpected)
\\retval C2_CORRUPTED some unknown error prevented the creation of the component (unexpected)

\\retval C2_NOT_FOUND no such component
\\retval C2_NO_MEMORY not enough memory to create the component
"
      end

      operation 1119749 "createInterface"
	cpp_virtual private return_type class_ref 387461 // status_t
	nparams 2
	  param in name "name" type class_ref 378885 // C2String
	  param inout name "interface" explicit_type "std::shared_ptr<C2ComponentInterface>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * const ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * const ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Creates a component interface.

This method SHALL return within 100ms.

\\param name          name of the component interface to create
\\param interface     shared pointer where the created interface is stored

\\retval C2_OK        the component interface was created successfully
\\retval C2_TIMED_OUT could not create the component interface within the time limit
                     (unexpected)
\\retval C2_CORRUPTED some unknown error prevented the creation of the component interface
                     (unexpected)

\\retval C2_NOT_FOUND no such component interface
\\retval C2_NO_MEMORY not enough memory to create the component interface

\\todo Do we need an interface, or could this just be a component that is never started?
"
      end

      operation 1119877 "getComponents"
	cpp_virtual private explicit_return_type "std::vector<std::unique_ptr<const C2ComponentInfo>>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns the list of components supported by this component store.

This method SHALL return within 1ms.

\\retval vector of component information.
"
      end

      operation 1120005 "copyBuffer"
	cpp_virtual private return_type class_ref 387461 // status_t
	nparams 2
	  param in name "src" explicit_type "std::shared_ptr<C2GraphicBuffer>"
	  param in name "dst" explicit_type "std::shared_ptr<C2GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " -------------------------------------- UTILITY METHODS --------------------------------------
 on-demand buffer layout conversion (swizzling)"
      end

      operation 1120133 "query_nb"
	abstract cpp_virtual private return_type class_ref 387461 // status_t
	nparams 3
	  param in name "stackParams" explicit_type "std::vector<C2Param* const>"
	  param in name "heapParamIndices" explicit_type "std::vector<C2Param::Index>"
	  param inout name "heapParams" explicit_type "std::vector<std::unique_ptr<C2Param>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * const ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " status_t selectPreferredColor(formats<A>, formats<B>);
 GLOBAL SETTINGS
 system-wide stride & slice-height (???)

Queries a set of system-wide parameters.
Querying is performed at best effort: the store SHALL query all supported parameters and
skip unsupported ones, or heap allocated parameters that could not be allocated. Any errors
are communicated in the return value. Additionally, preallocated (e.g. stack) parameters that
could not be queried are invalidated. Parameters to be allocated on the heap are omitted from
the result.

\\note Parameter values do not depend on the order of query.

This method MUST be \"non-blocking\" and return within 1ms.

\\param stackParams     a list of params queried. These are initialized specific to each
                     setting; e.g. size and index are set and rest of the members are
                     cleared.
                     NOTE: Flexible settings that are of incorrect size will be invalidated.
\\param heapParamIndices a vector of param indices for params to be queried and returned on the
                     heap. These parameters will be returned in heapParams. Unsupported param
                     indices will be ignored.
\\param heapParams      a list of params where to which the supported heap parameters will be
                     appended in the order they appear in heapParamIndices.

\\retval C2_OK        all parameters could be queried
\\retval C2_BAD_INDEX all supported parameters could be queried, but some parameters were not
                     supported
\\retval C2_NO_MEMORY could not allocate memory for a supported parameter
\\retval C2_CORRUPTED some unknown error prevented the querying of the parameters
                     (unexpected)
"
      end

      operation 1120261 "config_nb"
	abstract cpp_virtual private return_type class_ref 387461 // status_t
	nparams 2
	  param in name "params" explicit_type "std::vector<C2Param* const>"
	  param inout name "failures" explicit_type "std::list<std::unique_ptr<C2SettingResult>>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * const ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Sets a set of system-wide parameters.

\\note There are no settable system-wide parameters defined thus far, but may be added in the
future.

Tuning is performed at best effort: the store SHALL update all supported configuration at
best effort (unless configured otherwise) and skip unsupported ones. Any errors are
communicated in the return value and in |failures|.

\\note Parameter tuning DOES depend on the order of the tuning parameters. E.g. some parameter
update may allow some subsequent parameter update.

This method MUST be \"non-blocking\" and return within 1ms.

\\param params          a list of parameter updates. These will be updated to the actual
                     parameter values after the updates (this is because tuning is performed
                     at best effort).
                     \\todo params that could not be updated are not marked here, so are
                     confusing - are they \"existing\" values or intended to be configured
                     values?
\\param failures        a list of parameter failures

\\retval C2_OK        all parameters could be updated successfully
\\retval C2_BAD_INDEX all supported parameters could be updated successfully, but some
                     parameters were not supported
\\retval C2_BAD_VALUE some supported parameters could not be updated successfully because
                     they contained unsupported values. These are returned in |failures|.
\\retval C2_NO_MEMORY some supported parameters could not be updated successfully because
                     they contained unsupported values, but could not allocate a failure
                     object for them.
\\retval C2_CORRUPTED some unknown error prevented the update of the parameters
                     (unexpected)
"
      end

      operation 1120389 "~C2ComponentStore"
	cpp_virtual cpp_defaulted private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 388357 "C2ParamIndexKind"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} : uint32_t {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 782725 "kParamIndexDomain"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 782853 "kParamIndexSupportedParams"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 782981 "kParamIndexRequiredParams"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 783109 "kParamIndexReadOnlyParams"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 783237 "kParamIndexRequestedInfos"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 783365 "kParamIndexLatency"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 783493 "kParamIndexTemporal"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 783621 "kParamIndexMime"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 783749 "kParamIndexStreamCount"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 783877 "kParamIndexFormat"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 784005 "kParamIndexStructStart"
	public type class_ref 388357 // C2ParamIndexKind
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 784133 "kParamIndexVideoSize"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 784261 "kParamIndexMaxVideoSizeHint"
	public type class_ref 388357 // C2ParamIndexKind
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 784389 "kParamIndexParamStart"
	public type class_ref 388357 // C2ParamIndexKind
	init_value " 0x800"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 388485 "C2Info"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Info base structure for component method signatures. Wrap constructors.
"
      classrelation 402181 // <generalisation>
	relation 402181 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 402181 // <generalisation>
	  b parent class_ref 384645 // C2Param
      end

      class 391301 "anonymous7"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum : uint32_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 788485 "indexFlags"
	  public type class_ref 391301 // anonymous7
	  init_value " Type::kTypeInfo "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end
    end

    class 388613 "C2ComponentDomainInfo"
      visibility package stereotype "typedef" base_type class_ref 388485 // C2Info
      cpp_decl "${comment}typedef C2GlobalParam<${type},C2SimpleValueStruct<C2DomainKind>,kParamIndexDomain> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " read-only"
      classrelation 399109 // <dependency>
	relation 399109 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 399109 // <dependency>
	  b parent class_ref 388485 // C2Info
      end
    end

    class 388741 "C2SupportedParamsInfo"
      visibility package stereotype "typedef" base_type class_ref 388485 // C2Info
      cpp_decl "${comment}typedef C2GlobalParam<${type},C2Uint32Array,kParamIndexSupportedParams> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " typedef C2GlobalParam<C2Info, C2Uint32Value, kParamIndexDomain> C2ComponentDomainInfo;
DESCRIBE_TEMPLATED_C2STRUCT(C2SimpleValueStruct<C2DomainKind>, { C2FIELD(mValue, \"value\") });
 read-only"
      classrelation 399237 // <dependency>
	relation 399237 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 399237 // <dependency>
	  b parent class_ref 388485 // C2Info
      end
    end

    class 388869 "C2RequiredParamsInfo"
      visibility package stereotype "typedef" base_type class_ref 388485 // C2Info
      cpp_decl "${comment}typedef C2GlobalParam<${type},C2Uint32Array,kParamIndexRequiredParams> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ \\todo do we define it as a param?
 read-only"
      classrelation 399365 // <dependency>
	relation 399365 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 399365 // <dependency>
	  b parent class_ref 388485 // C2Info
      end
    end

    class 388997 "C2ReadOnlyParamsInfo"
      visibility package stereotype "typedef" base_type class_ref 388485 // C2Info
      cpp_decl "${comment}typedef C2GlobalParam<${type},C2Uint32Array,kParamIndexReadOnlyParams> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " read-only"
      classrelation 399493 // <dependency>
	relation 399493 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 399493 // <dependency>
	  b parent class_ref 388485 // C2Info
      end
    end

    class 389125 "C2RequestedInfosInfo"
      visibility package stereotype "typedef" base_type class_ref 388485 // C2Info
      cpp_decl "${comment}typedef C2GlobalParam<${type},C2Uint32Array,kParamIndexRequestedInfos> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " read-only"
      classrelation 399621 // <dependency>
	relation 399621 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 399621 // <dependency>
	  b parent class_ref 388485 // C2Info
      end
    end

    class 389253 "C2PortLatencyInfo"
      visibility package stereotype "typedef" base_type class_ref 388485 // C2Info
      cpp_decl "${comment}typedef C2PortParam<${type},C2Uint32Value,kParamIndexLatency> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment " read-only
typedef C2GlobalParam<C2Info, C2Uint32Value, kParamIndexRequestedInfos> C2RequestedInfosInfo;
/ latency"
      classrelation 399749 // <dependency>
	relation 399749 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 399749 // <dependency>
	  b parent class_ref 388485 // C2Info
      end
    end

    class 389381 "C2ComponentLatencyInfo"
      visibility package stereotype "typedef" base_type class_ref 388485 // C2Info
      cpp_decl "${comment}typedef C2GlobalParam<${type},C2Uint32Value,kParamIndexLatency> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 399877 // <dependency>
	relation 399877 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 399877 // <dependency>
	  b parent class_ref 388485 // C2Info
      end
    end

    class 389509 "C2ComponentTemporalInfo"
      visibility package stereotype "typedef" base_type class_ref 388485 // C2Info
      cpp_decl "${comment}typedef C2GlobalParam<${type},C2Uint32Value,kParamIndexTemporal> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ \\todo"
      classrelation 400005 // <dependency>
	relation 400005 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 400005 // <dependency>
	  b parent class_ref 388485 // C2Info
      end
    end

    class 389637 "C2Tuning"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Tuning base structure for component method signatures. Wrap constructors.
"
      classrelation 402053 // <generalisation>
	relation 402053 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 402053 // <generalisation>
	  b parent class_ref 390789 // C2Setting
      end

      class 391173 "anonymous6"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum : uint32_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 788357 "indexFlags"
	  public type class_ref 391173 // anonymous6
	  init_value " Type::kTypeTuning "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end
    end

    class 389765 "C2PortMimeConfig"
      visibility package stereotype "typedef" base_type class_ref 389637 // C2Tuning
      cpp_decl "${comment}typedef C2PortParam<${type},C2StringValue,kParamIndexMime> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ port configuration"
      classrelation 400133 // <dependency>
	relation 400133 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 400133 // <dependency>
	  b parent class_ref 389637 // C2Tuning
      end
    end

    class 389893 "C2PortStreamCountConfig"
      visibility package stereotype "typedef" base_type class_ref 389637 // C2Tuning
      cpp_decl "${comment}typedef C2PortParam<${type},C2Uint32Value,kParamIndexStreamCount> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 400261 // <dependency>
	relation 400261 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 400261 // <dependency>
	  b parent class_ref 389637 // C2Tuning
      end
    end

    class 390021 "C2StreamMimeConfig"
      visibility package stereotype "typedef" base_type class_ref 389637 // C2Tuning
      cpp_decl "${comment}typedef C2StreamParam<${type},C2StringValue,kParamIndexMime> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 400389 // <dependency>
	relation 400389 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 400389 // <dependency>
	  b parent class_ref 389637 // C2Tuning
      end
    end

    class 390149 "C2VideoSizeStruct"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Component description fields:

// format (video/compressed/audio/other-do we need other?) per stream

// likely some of these are exposed as separate settings:

struct C2BaseTuning {
// latency characteristics
uint32_t latency;
bool temporal;               // seems this only makes sense if latency is 1..., so this could be captured as latency = 0
uint32_t delay;

uint32_t numInputStreams;    // RW? - or suggestion only: RO
uint32_t numOutputStreams;   // RW
//
// refs characteristics (per stream?)
uint32_t maxInputRefs;       // RO
uint32_t maxOutputRefs;      // RO
uint32_t maxInputMemory;     // RO - max time refs are held for
uint32_t maxOutputMemory;    // RO

// per stream
bool compressed;
// format... video/compressed/audio/other?
// actual \"audio/video\" format type
uint32_t width/height? is this needed, or just queue...
// mime...
};

 overall component
   => C: domain: audio or video
   => C: kind: decoder, encoder or filter
   => \"mime\" class
   => C: temporal (bool) => does this depend on ordering?
   => I: latency
   => I: history max duration...
   => I: history max frames kept...
   => I: reordering depth
   => I: frc (bool) (perhaps ratio?)
   => I: current frc
   - pause
   => last frame 'number' processed
   => current frame 'number' processed
   => invalid settings =>[]
 video decoder configuration:                                 // audio
   - encoding                                                 // -encoding
   - hint: max width/height                                   // -hint: sample rate, channels
   - hint: profile/level                                      // -hint: tools used
   - hint: framerate (bitrate?)                               // -hint: bitrate
   - default: color space (from container)
   - hint: color format                                       // -hint: pcm-encoding
   - hint: # of views (e.g. MVC)                              // -hint?: channel groups
   - default: HDR static info (from container)                // -hint?: channel mappings
   - hint: rotation (e.g. for allocator)
 => # of streams required and their formats? (setting?)
 => # of streams produced and their formats? (tuning)
 => output
   - # of views                                               // -channel groups && channel mappings
   - width/height/crop/color format/color space/HDR static info (from buffers)
     (as required by the allocator & framework)
   - SEI (or equivalent) <= [port]
     - CC
   - reference info
 video encoder configurations
   - encoding                                                 // - encoding
   - hint: width/height                                       // - hint: sample rate, channels
   - hint: frame rate
   - hint: max width/height (? does this differ from width/height?)
   - # of input (e.g. MVC)                                    // - hint: # groups and mappings
   - # of output (e.g. SVC) => bitrates/width/height/framerates? per stream
   - hint: profile/level                                      // - hint: profile/level
   - HDR static info + (info: HDR)
   - color space
   - hint: color format?                                      // - hint: pcm encoding
   - SEI
     - CC
   - reference directive
   - hint: bitrate (or quality)                               // - hint: bitrate/quality
   - optional: codec-specific parameters                      // - optional: csd
 => output                                                    // => output
   - layers per stream?                                       // E-AC3?... DTS?...Dolby-Vision?
   - reference info
 RM:
   - need SPS for full knowledge => component should return max. (component can use less)
   - critical parameters? (interlaced? profile? level?)"
      attribute 784517 "mWidth"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "/< video width"
      end

      attribute 784645 "mHeight"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "/< video height"
      end
    end

    class 390789 "C2Setting"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Setting base structure for component method signatures. Wrap constructors.
"
      classrelation 401925 // <generalisation>
	relation 401925 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    idl "${type}"
	    classrelation_ref 401925 // <generalisation>
	  b parent class_ref 384645 // C2Param
      end

      class 391045 "anonymous5"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum : uint32_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 788229 "indexFlags"
	  public type class_ref 391045 // anonymous5
	  init_value " Type::kTypeSetting "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end
    end

    class 391429 "_C2FieldId"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Structure uniquely specifying a field in an arbitrary structure.

\\note This structure is used differently in C2FieldDescriptor to
identify array fields, such that _mSize is the size of each element. This is
because the field descriptor contains the array-length, and we want to keep
a relevant element size for variable length arrays.
"
      operation 1126917 "_C2FieldId"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "offset" explicit_type "T"
	cpp_decl "    ${comment}template<typename T, class B = typename std::remove_extent<T>::type>
  ${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : // offset is from \"0\" so will fit on 32-bits
          _mOffset((uint32_t)(uintptr_t)(offset)),
          _mSize(sizeof(B)) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "public:

Constructor used for C2FieldDescriptor that removes the array extent.

\\param[in] offset pointer to the field in an object at address 0.
"
      end

      operation 1127045 "_C2FieldId"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : _mOffset(offset), _mSize(size) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Direct constructor from offset and size.

\\param[in] offset offset of the field.
\\param[in] size size of the field.
"
      end

      operation 1127173 "_C2FieldId"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "" explicit_type "U"
	  param inout name "pm" explicit_type "R"
	cpp_decl "    ${comment}template<typename R, typename T, typename U, typename B = typename std::remove_extent<R>::type>
  ${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} T::* ${p1}${v1}${)}${volatile}${throw}${abstract} : _mOffset((uint32_t)(uintptr_t)(&(((U*)256)->*pm)) - 256u),
          _mSize(sizeof(B)) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructor used to identify a field in an object.

\\param U[type] pointer to the object that contains this field. This is needed in case the
       field is in an (inherited) base class, in which case T will be that base class.
\\param pm[im] member pointer to the field
"
      end

      operation 1127301 "_C2FieldId"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "pm" explicit_type "R"
	cpp_decl "    ${comment}template<typename R, typename T, typename B = typename std::remove_extent<R>::type>
  ${inline}${name}${(}${t0} T::* ${p0}${v0}${)}${volatile}${throw}${abstract} : _mOffset((uint32_t)(uintptr_t)(&(((T*)0)->*pm))),
          _mSize(sizeof(B)) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "Constructor used to identify a field in an object.

\\param U[type] pointer to the object that contains this field
\\param pm[im] member pointer to the field
"
      end

      operation 1127429 "operator =="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 391429 // _C2FieldId
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return _mOffset == other._mOffset && _mSize == other._mSize;
    };
"
	
	
	
	
      end

      operation 1127557 "operator <"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 391429 // _C2FieldId
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return _mOffset < other._mOffset ||
            // NOTE: order parent structure before sub field
            (_mOffset == other._mOffset && _mSize > other._mSize);
    };
"
	
	
	
	
      end

      operation 1127685 "size"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mSize; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1127813 "PrintTo"
	preserve_cpp_body_indent friend public explicit_return_type "void"
	nparams 2
	  param in name "id" type class_ref 391429 // _C2FieldId
	  param inout name "os" explicit_type "::std::ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      attribute 788613 "_mOffset"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " offset of field"
      end

      attribute 788741 "_mSize"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " size of field"
      end
    end

    class 391557 "C2ParamField"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Structure uniquely specifying a field in a configuration
"
      operation 1127941 "C2ParamField"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "param" explicit_type "S"
	  param inout name "offset" explicit_type "T"
	cpp_decl "    ${comment}template<typename S, typename T>
  ${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw}${abstract} : _mIndex(param->index()),
          _mFieldId(offset) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "public:
 TODO: fix what this is for T[] (for now size becomes T[1])"
      end

      operation 1128069 "C2ParamField"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "p" explicit_type "U"
	  param inout name "pm" explicit_type "R"
	cpp_decl "    ${comment}template<typename R, typename T, typename U>
  ${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} T::* ${p1}${v1}${)}${volatile}${throw}${abstract} : _mIndex(p->type()), _mFieldId(p, pm) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1128197 "operator =="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 391557 // C2ParamField
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return _mIndex == other._mIndex && _mFieldId == other._mFieldId;
    };
"
	
	
	
	
      end

      operation 1128325 "operator <"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 391557 // C2ParamField
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return _mIndex < other._mIndex ||
            (_mIndex == other._mIndex && _mFieldId < other._mFieldId);
    };
"
	
	
	
	
      end

      classrelation 402309 // _mFieldId (<directional composition>)
	relation 402309 *-->
	  a role_name "_mFieldId" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 402309 // _mFieldId (<directional composition>)
	  b parent class_ref 391429 // _C2FieldId
      end
    end

    class 391685 "C2Value"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A shared (union) representation of numeric values
"
      class 391813 "Primitive"
	visibility package stereotype "union"
	cpp_decl "${comment}${template}union ${name} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 788869 "i32"
	  public explicit_type "int32_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}case ${case} : ${readonly}${type} ${name};"
	  mysql_decl ""
	  MysqlColumn
	  comment "/< int32_t value"
	end

	attribute 788997 "u32"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}case ${case} : ${readonly}${type} ${name};"
	  mysql_decl ""
	  MysqlColumn
	  comment "/< uint32_t value"
	end

	attribute 789125 "i64"
	  public explicit_type "int64_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}case ${case} : ${readonly}${type} ${name};"
	  mysql_decl ""
	  MysqlColumn
	  comment "/< int64_t value"
	end

	attribute 789253 "u64"
	  public explicit_type "uint64_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}case ${case} : ${readonly}${type} ${name};"
	  mysql_decl ""
	  MysqlColumn
	  comment "/< uint64_t value"
	end

	attribute 789381 "fp"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${comment}case ${case} : ${readonly}${type} ${name};"
	  mysql_decl ""
	  MysqlColumn
	  comment "/< float value"
	end

	operation 1128453 "Primitive"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "value" explicit_type "int32_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : i32(value) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	  comment " constructors - implicit"
	end

	operation 1128581 "Primitive"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "value" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : u32(value) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 1128709 "Primitive"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "value" explicit_type "int64_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : i64(value) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 1128837 "Primitive"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "value" explicit_type "uint64_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : u64(value) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 1128965 "Primitive"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "value" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : fp(value)  { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	operation 1129093 "Primitive"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : u64(0) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	end

	classrelation 402437 // <dependency>
	  relation 402437 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 402437 // <dependency>
	    b parent class_ref 391685 // C2Value
	end

	operation 1129221 "ref"
	  stereotype "template"
	  const private explicit_return_type "T"
	  nparams 0
	  cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	end
      end

      class 391941 "Type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 789509 "NO_INIT"
	  public type class_ref 391941 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 789637 "INT32"
	  public type class_ref 391941 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 789765 "UINT32"
	  public type class_ref 391941 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 789893 "INT64"
	  public type class_ref 391941 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 790021 "UINT64"
	  public type class_ref 391941 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 790149 "FLOAT"
	  public type class_ref 391941 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 1129349 "typeFor"
	stereotype "template"
	class_operation public return_type class_ref 391941 // Type
	nparams 0
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}constexpr ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}constexpr ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1129477 "C2Value"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : mType(typeFor<T>()),  mValue(value) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment " constructors - implicit"
      end

      operation 1129605 "C2Value"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : mType(NO_INIT) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1129733 "type"
	const cpp_inline public return_type class_ref 391941 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mType; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1129861 "get"
	stereotype "template"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param inout name "value" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (mType == typeFor<T>()) {
            *value = mValue.ref<T>();
            return true;
        }
        return false;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      classrelation 402565 // mType (<directional composition>)
	relation 402565 *-->
	  a role_name "mType" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 402565 // mType (<directional composition>)
	  b parent class_ref 391941 // Type
      end

      classrelation 402693 // mValue (<directional composition>)
	relation 402693 *-->
	  a role_name "mValue" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${visibility}${type} ${name};
"
	    classrelation_ref 402693 // mValue (<directional composition>)
	  b parent class_ref 391813 // Primitive
      end
    end

    class 392069 "C2FieldDescriptor"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "field descriptor. A field is uniquely defined by an index into a parameter.
(Note: Stream-id is not captured as a field.)

Ordering of fields is by offset. In case of structures, it is depth first,
with a structure taking an index just before and in addition to its members.
"
      class 392197 "Type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} : uint32_t {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 790277 "INT32"
	  public type class_ref 392197 // Type
	  init_value " C2Value::INT32"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 790405 "UINT32"
	  public type class_ref 392197 // Type
	  init_value " C2Value::UINT32"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 790533 "INT64"
	  public type class_ref 392197 // Type
	  init_value " C2Value::INT64"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 790661 "UINT64"
	  public type class_ref 392197 // Type
	  init_value " C2Value::UINT64"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 790789 "FLOAT"
	  public type class_ref 392197 // Type
	  init_value " C2Value::FLOAT"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 790917 "STRING"
	  public type class_ref 392197 // Type
	  init_value " 0x100"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 791045 "BLOB"
	  public type class_ref 392197 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 791173 "STRUCT_FLAG"
	  public type class_ref 392197 // Type
	  init_value " 0x10000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 392325 "named_value_type"
	visibility package stereotype "typedef" base_type class_ref 378885 // C2String
	cpp_decl "${comment}typedef std::pair<${type},C2Value::Primitive> ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 402821 // <dependency>
	  relation 402821 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 402821 // <dependency>
	    b parent class_ref 378885 // C2String
	end
      end

      class 392453 "named_values_type"
	visibility package stereotype "typedef" base_type class_ref 392325 // named_value_type
	cpp_decl "${comment}typedef std::vector<const ${type}> ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 402949 // <dependency>
	  relation 402949 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 402949 // <dependency>
	    b parent class_ref 392325 // named_value_type
	end
      end

      operation 1129989 "namedValuesFor"
	stereotype "template"
	class_operation public return_type class_ref 392453 // named_values_type
	nparams 1
	  param in name "" explicit_type "B"
	cpp_decl "    ${comment}template<typename B>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "typedef std::pair<std::vector<C2String>, std::vector<C2Value::Primitive>> named_values_type;

Template specialization that returns the named values for a type.

\\todo hide from client.

\\return a vector of name-value pairs.
"
      end

      operation 1130117 "C2FieldDescriptor"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param in name "type" explicit_type "uint32_t"
	  param in name "length" explicit_type "uint32_t"
	  param in name "name" type class_ref 379013 // C2StringLiteral
	  param in name "offset" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw}${abstract} : _mType((Type)type), _mLength(length), _mName(name), _mFieldId(offset, size) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1130245 "C2FieldDescriptor"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "offset" explicit_type "T"
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}template<typename T, class B = typename std::remove_extent<T>::type>
  ${inline}${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${volatile}${throw}${abstract} : _mType(this->getType((B*)nullptr)),
          _mLength(std::is_array<T>::value ? std::extent<T>::value : 1),
          _mName(name),
          _mNamedValues(namedValuesFor(*(B*)0)),
          _mFieldId(offset) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1130373 "C2FieldDescriptor"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param inout name "" explicit_type "S"
	  param inout name "field" explicit_type "T"
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}template<typename T, typename S, class B = typename std::remove_extent<T>::type>
  ${inline}constexpr ${name}${(}${t0} * ${p0}${v0}, ${t1} S::* ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${volatile}${throw}${abstract} : _mType(this->getType((B*)nullptr)),
          _mLength(std::is_array<T>::value ? std::extent<T>::value : 1),
          _mName(name),
          _mFieldId(&(((S*)0)->*field)) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
	comment "template<typename T, typename B=typename std::remove_extent<T>::type>
inline C2FieldDescriptor<T, B, false>(T* offset, const char *name)
: _mType(this->getType((B*)nullptr)),
_mLength(std::is_array<T>::value ? std::extent<T>::value : 1),
_mName(name),
_mFieldId(offset) {}

/ \\deprecated"
      end

      operation 1130501 "type"
	const cpp_inline public return_type class_ref 392197 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mType; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns the type of this field"
      end

      operation 1130629 "length"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mLength; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns the length of the field in case it is an array. Returns 0 for
/ T[] arrays, returns 1 for T[1] arrays as well as if the field is not an array."
      end

      operation 1130757 "name"
	const cpp_inline public return_type class_ref 379013 // C2StringLiteral
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mName; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ returns the name of the field"
      end

      operation 1130885 "namedValues"
	const cpp_inline public return_type class_ref 392453 // named_values_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mNamedValues; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1131013 "PrintTo"
	preserve_cpp_body_indent friend public explicit_return_type "void"
	nparams 2
	  param in name "fd" type class_ref 392069 // C2FieldDescriptor
	  param inout name "os" explicit_type "::std::ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1131141 "operator =="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "" type class_ref 392069 // C2FieldDescriptor
	  param in name "" type class_ref 392069 // C2FieldDescriptor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 403077 // _mType (<directional composition>)
	relation 403077 *-->
	  a role_name "_mType" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 403077 // _mType (<directional composition>)
	  b parent class_ref 392197 // Type
      end

      attribute 791301 "_mLength"
	const_attribute private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " the last member can be arbitrary length if it is T[] array,"
      end

      classrelation 403205 // _mName (<directional composition>)
	relation 403205 *-->
	  a role_name "_mName" const_relation private
	    comment " extending to the end of the parameter (this is marked with
 0). T[0]-s are not fields.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 403205 // _mName (<directional composition>)
	  b parent class_ref 379013 // C2StringLiteral
      end

      classrelation 403333 // _mNamedValues (<directional composition>)
	relation 403333 *-->
	  a role_name "_mNamedValues" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 403333 // _mNamedValues (<directional composition>)
	  b parent class_ref 392453 // named_values_type
      end

      classrelation 403461 // _mFieldId (<directional composition>)
	relation 403461 *-->
	  a role_name "_mFieldId" const_relation private
	    comment " field identifier (offset and size)"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 403461 // _mFieldId (<directional composition>)
	  b parent class_ref 391429 // _C2FieldId
      end

      operation 1131269 "getType"
	class_operation cpp_inline private return_type class_ref 392197 // Type
	nparams 1
	  param inout name "" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return INT32; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " NOTE: We do not capture default value(s) here as that may depend on the component.
 NOTE: We also do not capture bestEffort, as 1) this should be true for most fields,
 2) this is at parameter granularity.
 type resolution"
      end

      operation 1131397 "getType"
	class_operation cpp_inline private return_type class_ref 392197 // Type
	nparams 1
	  param inout name "" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return UINT32; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1131525 "getType"
	class_operation cpp_inline private return_type class_ref 392197 // Type
	nparams 1
	  param inout name "" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return INT64; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1131653 "getType"
	class_operation cpp_inline private return_type class_ref 392197 // Type
	nparams 1
	  param inout name "" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return UINT64; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1131781 "getType"
	class_operation cpp_inline private return_type class_ref 392197 // Type
	nparams 1
	  param inout name "" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return FLOAT; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1131909 "getType"
	class_operation cpp_inline private return_type class_ref 392197 // Type
	nparams 1
	  param inout name "" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return STRING; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1132037 "getType"
	class_operation cpp_inline private return_type class_ref 392197 // Type
	nparams 1
	  param inout name "" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return BLOB; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 392581 "C2ParamDescriptor"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes parameters for a component.
"
      operation 1132165 "isRequired"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIsRequired; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns whether setting this param is required to configure this component.
This can only be true for builtin params for platform-defined components (e.g. video and
audio encoders/decoders, video/audio filters).
For vendor-defined components, it can be true even for vendor-defined params,
but it is not recommended, in case the component becomes platform-defined.
"
      end

      operation 1132293 "isPersistent"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mIsPersistent; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "Returns whether this parameter is persistent. This is always true for C2Tuning and C2Setting,
but may be false for C2Info. If true, this parameter persists across frames and applies to
the current and subsequent frames. If false, this C2Info parameter only applies to the
current frame and is not assumed to have the same value (or even be present) on subsequent
frames, unless it is specified for those frames.
"
      end

      operation 1132421 "name"
	const cpp_inline public return_type class_ref 378885 // C2String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mName; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ Returns the name of this param.
/ This defaults to the underlying C2Struct's name, but could be altered for a component."
      end

      operation 1132549 "type"
	const cpp_inline public return_type class_ref 384773 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return _mType; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment "/ Returns the parameter type
/ \\todo fix this"
      end

      operation 1132677 "C2ParamDescriptor"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "isRequired" explicit_type "bool"
	  param in name "name" type class_ref 379013 // C2StringLiteral
	  param in name "" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${volatile}${throw}${abstract} : _mIsRequired(isRequired),
          _mIsPersistent(true),
          _mName(name),
          _mType(T::typeIndex) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1132805 "C2ParamDescriptor"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "isRequired" explicit_type "bool"
	  param in name "name" type class_ref 379013 // C2StringLiteral
	  param in name "type" type class_ref 384773 // Type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : _mIsRequired(isRequired),
          _mIsPersistent(true),
          _mName(name),
          _mType(type) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      attribute 791429 "_mIsRequired"
	const_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 791557 "_mIsPersistent"
	const_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 403589 // _mName (<directional composition>)
	relation 403589 *-->
	  a role_name "_mName" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 403589 // _mName (<directional composition>)
	  b parent class_ref 378885 // C2String
      end

      classrelation 403717 // _mType (<directional composition>)
	relation 403717 *-->
	  a role_name "_mType" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 403717 // _mType (<directional composition>)
	  b parent class_ref 384773 // Type
      end
    end

    class 392709 "C2ParamReflector"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameter reflector class.

This class centralizes the description of parameter structures. This can be shared
by multiple components as describing a parameter does not imply support of that
parameter. However, each supported parameter and any dependent structures within
must be described by the parameter reflector provided by a component.
"
      operation 1132933 "describe"
	abstract cpp_virtual public explicit_return_type "std::unique_ptr<C2StructDescriptor>"
	nparams 1
	  param in name "paramIndex" type class_ref 390405 // BaseIndex
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}${type} ${name}${(}${)}${raisesnl}${raises};
"
	comment " Describes a parameter structure.

 \\param[in] paramIndex the base index of the parameter structure

 \\return the description of the parameter structure
 \\retval nullptr if the parameter is not supported by this reflector

 This methods shall not block and return immediately.

 \\note this class does not take a set of indices because we would then prefer
 to also return any dependent structures, and we don't want this logic to be
 repeated in each reflector. Alternately, this could just return a map of all
 descriptions, but we want to conserve memory if client only wants the description
 of a few indices.
"
      end

      operation 1133061 "~C2ParamReflector"
	cpp_virtual cpp_defaulted protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 392837 "C2TypedFieldSupportedValues"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A useable supported values for a field.

This can be either a range or a set of values. The range can be linear or geometric with a
clear minimum and maximum value, and can have an optional step size or geometric ratio. Values
can optionally represent flags.

\\note Do not use flags to represent bitfields. Use individual values or separate fields instead.
"
      class 392965 "Type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 791685 "RANGE"
	  public type class_ref 392965 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 791813 "VALUES"
	  public type class_ref 392965 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 791941 "FLAGS"
	  public type class_ref 392965 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 403845 // type (<directional composition>)
	relation 403845 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 403845 // type (<directional composition>)
	  b parent class_ref 392965 // Type
      end

      attribute 792069 "range"
	public explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct  {
        T min;
        T max;
        T step;
        T nom;
        T denom;
    } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 792197 "values"
	public explicit_type "T"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      operation 1133189 "C2TypedFieldSupportedValues"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "min" explicit_type "T"
	  param in name "max" explicit_type "T"
	  param in name "step" explicit_type "T"
	    defaultvalue "T(std::is_floating_point<T>::value ? 0 : 1)"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : type(RANGE),
          range{min, max, step, (T)1, (T)1} { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1133317 "C2TypedFieldSupportedValues"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "min" explicit_type "T"
	  param in name "max" explicit_type "T"
	  param in name "nom" explicit_type "T"
	  param in name "den" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} :
        type(RANGE),
        range{min, max, (T)0, nom, den} { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1133445 "C2TypedFieldSupportedValues"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "flags" explicit_type "bool"
	  param in name "list" explicit_type "std::initializer_list<T>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        type(flags ? FLAGS : VALUES),
        values(list) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 393093 "C2FieldSupportedValues"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Generic supported values for a field.

This can be either a range or a set of values. The range can be linear or geometric with a
clear minimum and maximum value, and can have an optional step size or geometric ratio. Values
can optionally represent flags.

\\note Do not use flags to represent bitfields. Use individual values or separate fields instead.
"
      class 393221 "Type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 792325 "RANGE"
	  public type class_ref 393221 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 792453 "VALUES"
	  public type class_ref 393221 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 792581 "FLAGS"
	  public type class_ref 393221 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 403973 // type (<directional composition>)
	relation 403973 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 403973 // type (<directional composition>)
	  b parent class_ref 393221 // Type
      end

      class 393349 "Primitive"
	visibility package stereotype "typedef" base_type class_ref 391813 // Primitive
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 404101 // <dependency>
	  relation 404101 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 404101 // <dependency>
	    b parent class_ref 391813 // Primitive
	end
      end

      attribute 792709 "range"
	public explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct  {
        Primitive min;
        Primitive max;
        Primitive step;
        Primitive nom;
        Primitive denom;
    } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 404229 // values (<directional composition>)
	relation 404229 *-->
	  stereotype "std::vector"
	  a role_name "values" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 404229 // values (<directional composition>)
	  b parent class_ref 393349 // Primitive
      end

      operation 1133573 "C2FieldSupportedValues"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "min" explicit_type "T"
	  param in name "max" explicit_type "T"
	  param in name "step" explicit_type "T"
	    defaultvalue "T(std::is_floating_point<T>::value ? 0 : 1)"
	cpp_decl "    ${comment}template<typename T>
  ${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : type(RANGE),
          range{min, max, step, (T)1, (T)1} { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1133701 "C2FieldSupportedValues"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "min" explicit_type "T"
	  param in name "max" explicit_type "T"
	  param in name "nom" explicit_type "T"
	  param in name "den" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} :
        type(RANGE),
        range{min, max, (T)0, nom, den} { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1133829 "C2FieldSupportedValues"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "flags" explicit_type "bool"
	  param in name "list" explicit_type "std::initializer_list<T>"
	cpp_decl "    ${comment}template<typename T>
  ${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : type(flags ? FLAGS : VALUES),
          range{(T)0, (T)0, (T)0, (T)0, (T)0} {
        for(T value : list) {
            values.emplace_back(value);
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end

      operation 1133957 "C2FieldSupportedValues"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "flags" explicit_type "bool"
	  param in name "" explicit_type "T"
	cpp_decl "    ${comment}template<typename T, typename E = decltype(C2FieldDescriptor::namedValuesFor(*(T*)0))>
  ${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${volatile}${throw}${abstract} : type(flags ? FLAGS : VALUES),
          range{(T)0, (T)0, (T)0, (T)0, (T)0} {
              C2FieldDescriptor::named_values_type named = C2FieldDescriptor::namedValuesFor(*(T*)0);
        for (const C2FieldDescriptor::named_value_type &item : named) {
            values.emplace_back(item.second);
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	idl_decl "  ${comment}${oneway}factory init_${name}${(}${)}${raisesnl}${raises};
"
      end
    end

    class 393477 "C2SettingResult"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ \\defgroup work Work and data processing
/ @{"
      class 393605 "Failure"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 792837 "READ_ONLY"
	  public type class_ref 393605 // Failure
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 792965 "MISMATCH"
	  public type class_ref 393605 // Failure
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 793093 "BAD_VALUE"
	  public type class_ref 393605 // Failure
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 793221 "BAD_TYPE"
	  public type class_ref 393605 // Failure
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 793349 "BAD_PORT"
	  public type class_ref 393605 // Failure
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 793477 "BAD_INDEX"
	  public type class_ref 393605 // Failure
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 793605 "CONFLICT"
	  public type class_ref 393605 // Failure
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl "  ${name},${comment}"
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 404357 // field (<directional composition>)
	relation 404357 *-->
	  a role_name "field" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 404357 // field (<directional composition>)
	  b parent class_ref 391557 // C2ParamField
      end

      classrelation 404485 // failure (<directional composition>)
	relation 404485 *-->
	  a role_name "failure" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 404485 // failure (<directional composition>)
	  b parent class_ref 393605 // Failure
      end

      classrelation 404613 // supportedValues (<directional composition>)
	relation 404613 *-->
	  stereotype "std::unique_ptr"
	  a role_name "supportedValues" public
	    comment "< if different from normal (e.g. in conflict w/another param or input data)"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 404613 // supportedValues (<directional composition>)
	  b parent class_ref 393093 // C2FieldSupportedValues
      end

      classrelation 404741 // conflictingFields (<directional composition>)
	relation 404741 *-->
	  stereotype "std::list"
	  a role_name "conflictingFields" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 404741 // conflictingFields (<directional composition>)
	  b parent class_ref 391557 // C2ParamField
      end
    end

    class 393733 "flags_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} : uint32_t {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 793733 "BUFFERFLAG_CODEC_CONFIG"
	public type class_ref 393733 // flags_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 793861 "BUFFERFLAG_DROP_FRAME"
	public type class_ref 393733 // flags_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end

      attribute 793989 "BUFFERFLAG_END_OF_STREAM"
	public type class_ref 393733 // flags_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl "  ${name},${comment}"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 393989 "C2WorkOrdinalStruct"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 794245 "timestamp"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 794373 "frame_index"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " submission ordinal on the initial component"
      end

      attribute 794501 "custom_ordinal"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment " can be given by the component, e.g. decode order"
      end

      classrelation 404869 // ordinal (<directional composition>)
	relation 404869 *-->
	  a role_name "ordinal" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 404869 // ordinal (<directional composition>)
	  b parent class_ref 393989 // C2WorkOrdinalStruct
      end

      attribute 794629 "buffers"
	public explicit_type "std::shared_ptr<C2Buffer>"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 794757 "infos"
	public explicit_type "std::unique_ptr<C2Info>"
	stereotype "std::list"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "< for initial work item, these may also come from the parser - if provided
< for output buffers, these are the responses to requestedInfos
"
      end

      attribute 794885 "infoBuffers"
	public explicit_type "std::shared_ptr<C2InfoBuffer>"
	stereotype "std::list"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 394117 "C2Worklet"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 404997 // component (<directional composition>)
	relation 404997 *-->
	  a role_name "component" public
	    comment "public:
 IN
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 404997 // component (<directional composition>)
	  b parent class_ref 387333 // node_id
      end

      attribute 795013 "tunings"
	public explicit_type "std::unique_ptr<C2Param>"
	stereotype "std::list"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "< tunings to be applied before processing this"
      end

      classrelation 405125 // requestedInfos (<directional composition>)
	relation 405125 *-->
	  stereotype "std::list"
	  a role_name "requestedInfos" public
	    comment " worklet
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 405125 // requestedInfos (<directional composition>)
	  b parent class_ref 384773 // Type
      end

      attribute 795141 "allocators"
	public explicit_type "std::shared_ptr<C2BlockAllocator>"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "< This vector shall be the same size as"
      end

      attribute 795269 "output"
	public explicit_type "C2BufferPack"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "< output.buffers.
 OUT
"
      end

      attribute 795397 "failures"
	public explicit_type "std::unique_ptr<C2SettingResult>"
	stereotype "std::list"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end
    end

    class 394245 "C2Work"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This structure holds information about all a single work item.

This structure shall be passed by the client to the component for the first worklet. As such,
worklets must not be empty. The ownership of this object is passed.

input:
     The input data to be processed. This is provided by the client with ownership. When the work
     is returned, the input buffer-pack's buffer vector shall contain nullptrs.

worklets:
     The chain of components and associated allocators, tunings and info requests that the data
     must pass through. If this has more than a single element, the tunnels between successive
     components of the worklet chain must have been (successfully) pre-registered at the time
     the work is submitted. Allocating the output buffers in the worklets is the responsibility
     of each component. Upon work submission, each output buffer-pack shall be an appropriately
     sized vector containing nullptrs. When the work is completed/returned to the client,

worklets_processed:
     It shall be initialized to 0 by the client when the work is submitted.
     It shall contain the number of worklets that were successfully processed when the work is
     returned. If this is less then the number of worklets, result must not be success.
     It must be in the range of [0, worklets.size()].

result:
     The final outcome of the work. If 0 when work is returned, it is assumed that all worklets
     have been processed.
"
      attribute 795525 "preChainInfos"
	public explicit_type "std::pair<std::unique_ptr<C2PortMimeConfig>, std::unique_ptr<C2Info>>"
	stereotype "std::list"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
	comment "public:
 pre-chain infos (for portions of a tunneling chain that happend before this work-chain for
 this work item - due to framework facilitated (non-tunneled) work-chaining)
"
      end

      attribute 795653 "preChainInfoBlobs"
	public explicit_type "std::pair<std::unique_ptr<C2PortMimeConfig>, std::unique_ptr<C2Buffer>>"
	stereotype "std::list"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 795781 "input"
	public explicit_type "C2BufferPack"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 795909 "worklets"
	public explicit_type "std::unique_ptr<C2Worklet>"
	stereotype "std::list"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      attribute 796037 "worklets_processed"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl "  ${comment}${readonly}${attribute}${type} ${name};
"
	mysql_decl ""
	MysqlColumn
      end

      classrelation 405253 // result (<directional composition>)
	relation 405253 *-->
	  a role_name "result" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 405253 // result (<directional composition>)
	  b parent class_ref 387461 // status_t
      end
    end

    class 394373 "C2WorkOutline"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 405381 // ordinal (<directional composition>)
	relation 405381 *-->
	  a role_name "ordinal" public
	    comment "public:
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 405381 // ordinal (<directional composition>)
	  b parent class_ref 393989 // C2WorkOrdinalStruct
      end

      classrelation 405509 // chain (<directional composition>)
	relation 405509 *-->
	  stereotype "std::list"
	  a role_name "chain" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    idl "  ${comment}${readonly}${attribute}${type} ${name};
"
	    classrelation_ref 405509 // chain (<directional composition>)
	  b parent class_ref 387333 // node_id
      end
    end
  end

  deploymentview 157829 "include"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 222085 "C2"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 135941 // nsecs_t
	class_ref 378885 // C2String
	class_ref 379013 // C2StringLiteral
	class_ref 379141 // C2Error
	class_ref 379397 // c2_types<T>
	class_ref 379909 // c2_types<T,U>
      end
    end

    artifact 222469 "C2Buffer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 380549 // C2Fence
	class_ref 380677 // C2Event
	class_ref 380805 // _C2InnateError
	class_ref 380933 // C2Acquirable
	class_ref 381061 // _C2LinearCapacityAspect
	class_ref 381189 // _C2LinearRangeAspect
	class_ref 381317 // _C2EditableLinearRange
	class_ref 381445 // C2Block1D
	class_ref 381573 // C2ReadView
	class_ref 381701 // C2WriteView
	class_ref 381829 // C2ConstLinearBlock
	class_ref 381957 // C2LinearBlock
	class_ref 382085 // C2CircularBlock
	class_ref 382213 // _C2CircularBlockSegment
	class_ref 382341 // C2CircularWriteView
	class_ref 382469 // C2CircularWriter
	class_ref 382597 // _C2PlanarCapacityAspect
	class_ref 382725 // C2Rect
	class_ref 382853 // C2PlaneInfo
	class_ref 383109 // C2PlaneLayout
	class_ref 383493 // _C2PlanarSection
	class_ref 383621 // C2Block2D
	class_ref 383749 // C2GraphicView
	class_ref 383877 // C2ConstGraphicBlock
	class_ref 384005 // C2GraphicBlock
	class_ref 384133 // C2BufferData
	class_ref 384389 // C2Buffer
	class_ref 384901 // C2InfoBuffer
	class_ref 385157 // C2MemoryUsage
	class_ref 385541 // C2LinearAllocation
	class_ref 385669 // C2GraphicAllocation
	class_ref 385797 // C2Allocator
	class_ref 385925 // C2BlockAllocator
	class_ref 386181 // typedef1
	class_ref 386053 // C2LinearBuffer
	class_ref 386309 // C2WriteCursor
	class_ref 386437 // C2ColorSpace
	class_ref 386949 // C2GraphicBuffer
      end
    end

    artifact 222597 "C2Component"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 387077 // C2ComponentListener
	class_ref 387205 // C2ComponentInterface
	class_ref 387589 // C2Component
	class_ref 387717 // C2FrameInfoParser
	class_ref 387845 // C2ComponentInfo
	class_ref 387973 // C2AllocatorStore
	class_ref 388229 // C2ComponentStore
      end
    end

    artifact 222725 "C2Config"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 388357 // C2ParamIndexKind
	class_ref 388613 // C2ComponentDomainInfo
	class_ref 388741 // C2SupportedParamsInfo
	class_ref 388869 // C2RequiredParamsInfo
	class_ref 388997 // C2ReadOnlyParamsInfo
	class_ref 389125 // C2RequestedInfosInfo
	class_ref 389253 // C2PortLatencyInfo
	class_ref 389381 // C2ComponentLatencyInfo
	class_ref 389509 // C2ComponentTemporalInfo
	class_ref 389765 // C2PortMimeConfig
	class_ref 389893 // C2PortStreamCountConfig
	class_ref 390021 // C2StreamMimeConfig
	class_ref 390149 // C2VideoSizeStruct
      end
    end

    artifact 222853 "C2Param"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 384645 // C2Param
	class_ref 390789 // C2Setting
	class_ref 389637 // C2Tuning
	class_ref 388485 // C2Info
	class_ref 391429 // _C2FieldId
	class_ref 391557 // C2ParamField
	class_ref 391685 // C2Value
	class_ref 392069 // C2FieldDescriptor
	class_ref 392581 // C2ParamDescriptor
	class_ref 392709 // C2ParamReflector
	class_ref 392837 // C2TypedFieldSupportedValues
	class_ref 393093 // C2FieldSupportedValues
      end
    end

    artifact 223109 "C2Work"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef ${MODULE}_${NAME}_H
#define ${MODULE}_${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_elems
	class_ref 393477 // C2SettingResult
	class_ref 387333 // node_id
	class_ref 393733 // flags_t
	class_ref 393989 // C2WorkOrdinalStruct
	class_ref 394117 // C2Worklet
	class_ref 394245 // C2Work
	class_ref 394373 // C2WorkOutline
      end
    end
  end

  package_ref 164997 // include
end
