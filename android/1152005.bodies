class IndentingPrintWriter
!!!10115717.java!!!	IndentingPrintWriter(inout writer : Writer, in singleIndent : String)
        this(writer, singleIndent, -1);
!!!10115845.java!!!	IndentingPrintWriter(inout writer : Writer, in singleIndent : String, in wrapLength : int)
        super(writer);
        mSingleIndent = singleIndent;
        mWrapLength = wrapLength;
!!!10115973.java!!!	increaseIndent() : void
        mIndentBuilder.append(mSingleIndent);
        mCurrentIndent = null;
!!!10116101.java!!!	decreaseIndent() : void
        mIndentBuilder.delete(0, mSingleIndent.length());
        mCurrentIndent = null;
!!!10116229.java!!!	printPair(in key : String, inout value : Object) : void
        print(key + "=" + String.valueOf(value) + " ");
!!!10116357.java!!!	printPair(in key : String, inout value : Object [[]]) : void
        print(key + "=" + Arrays.toString(value) + " ");
!!!10116485.java!!!	printHexPair(in key : String, in value : int) : void
        print(key + "=0x" + Integer.toHexString(value) + " ");
!!!10116613.java!!!	println() : void
        write('\n');
!!!10116741.java!!!	write(in c : int) : void
        mSingleChar[0] = (char) c;
        write(mSingleChar, 0, 1);
!!!10116869.java!!!	write(in s : String, in off : int, in len : int) : void
        final char[] buf = new char[len];
        s.getChars(off, len - off, buf, 0);
        write(buf, 0, len);
!!!10116997.java!!!	write(inout buf : char [[]], in offset : int, in count : int) : void
        final int indentLength = mIndentBuilder.length();
        final int bufferEnd = offset + count;
        int lineStart = offset;
        int lineEnd = offset;

        // March through incoming buffer looking for newlines
        while (lineEnd < bufferEnd) {
            char ch = buf[lineEnd++];
            mCurrentLength++;
            if (ch == '\n') {
                maybeWriteIndent();
                super.write(buf, lineStart, lineEnd - lineStart);
                lineStart = lineEnd;
                mEmptyLine = true;
                mCurrentLength = 0;
            }

            // Wrap if we've pushed beyond line length
            if (mWrapLength > 0 && mCurrentLength >= mWrapLength - indentLength) {
                if (!mEmptyLine) {
                    // Give ourselves a fresh line to work with
                    super.write('\n');
                    mEmptyLine = true;
                    mCurrentLength = lineEnd - lineStart;
                } else {
                    // We need more than a dedicated line, slice it hard
                    maybeWriteIndent();
                    super.write(buf, lineStart, lineEnd - lineStart);
                    super.write('\n');
                    mEmptyLine = true;
                    lineStart = lineEnd;
                    mCurrentLength = 0;
                }
            }
        }

        if (lineStart != lineEnd) {
            maybeWriteIndent();
            super.write(buf, lineStart, lineEnd - lineStart);
        }
!!!10117125.java!!!	maybeWriteIndent() : void
        if (mEmptyLine) {
            mEmptyLine = false;
            if (mIndentBuilder.length() != 0) {
                if (mCurrentIndent == null) {
                    mCurrentIndent = mIndentBuilder.toString().toCharArray();
                }
                super.write(mCurrentIndent, 0, mCurrentIndent.length);
            }
        }
