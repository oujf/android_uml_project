class NotificationMessagingTemplateViewWrapper
!!!3885061.java!!!	NotificationMessagingTemplateViewWrapper(inout ctx : Context, inout view : View, inout row : ExpandableNotificationRow)
        super(ctx, view, row);
!!!3885189.java!!!	resolveViews() : void
        mContractedMessage = null;

        View container = mView.findViewById(com.android.internal.R.id.notification_messaging);
        if (container instanceof MessagingLinearLayout
                && ((MessagingLinearLayout) container).getChildCount() > 0) {
            MessagingLinearLayout messagingContainer = (MessagingLinearLayout) container;

            int childCount = messagingContainer.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View child = messagingContainer.getChildAt(i);

                if (child.getVisibility() == View.GONE
                        && child instanceof TextView
                        && !TextUtils.isEmpty(((TextView) child).getText())) {
                    mHistoricMessages.add(child);
                }

                // Only consider the first visible child - transforming to a position other than the
                // first looks bad because we have to move across other messages that are fading in.
                if (child.getId() == messagingContainer.getContractedChildId()) {
                    mContractedMessage = child;
                } else if (child.getVisibility() == View.VISIBLE) {
                    break;
                }
            }
        }
!!!3885317.java!!!	onContentUpdated(inout row : ExpandableNotificationRow) : void
        // Reinspect the notification. Before the super call, because the super call also updates
        // the transformation types and we need to have our values set by then.
        resolveViews();
        super.onContentUpdated(row);
!!!3885445.java!!!	updateTransformedTypes() : void
        // This also clears the existing types
        super.updateTransformedTypes();
        if (mContractedMessage != null) {
            mTransformationHelper.addTransformedView(TransformableView.TRANSFORMING_VIEW_TEXT,
                    mContractedMessage);
        }
!!!3885573.java!!!	setRemoteInputVisible(inout visible : boolean) : void
        for (int i = 0; i < mHistoricMessages.size(); i++) {
            mHistoricMessages.get(i).setVisibility(visible ? View.VISIBLE : View.GONE);
        }
