class EnabledComponentsObserver
!!!12542085.java!!!	EnabledComponentsObserver(inout context : Context, in settingName : String, in servicePermission : String, in serviceName : String, inout lock : Object, inout listeners : Collection<EnabledComponentChangeListener>)
        mLock = lock;
        mContext = context;
        mSettingName = settingName;
        mServiceName = serviceName;
        mServicePermission = servicePermission;
        mEnabledComponentListeners.addAll(listeners);
!!!12542213.java!!!	build(inout context : Context, inout handler : Handler, in settingName : String, inout looper : Looper, in servicePermission : String, in serviceName : String, in lock : Object, inout listeners : Collection<EnabledComponentChangeListener>) : EnabledComponentsObserver

        SettingsObserver s = SettingsObserver.build(context, handler, settingName);

        final EnabledComponentsObserver o = new EnabledComponentsObserver(context, settingName,
                servicePermission, serviceName, lock, listeners);

        PackageMonitor packageMonitor = new PackageMonitor() {
            @Override
            public void onSomePackagesChanged() {
                o.onPackagesChanged();

            }

            @Override
            public void onPackageDisappeared(String packageName, int reason) {
                o.onPackagesChanged();

            }

            @Override
            public void onPackageModified(String packageName) {
                o.onPackagesChanged();

            }

            @Override
            public boolean onHandleForceStop(Intent intent, String[] packages, int uid,
                    boolean doit) {
                o.onPackagesChanged();

                return super.onHandleForceStop(intent, packages, uid, doit);
            }
        };

        packageMonitor.register(context, looper, UserHandle.ALL, true);

        s.addListener(o);

        return o;

!!!12542341.java!!!	onPackagesChanged() : void
        rebuildAll();
!!!12542469.java!!!	onSettingChanged() : void
        rebuildAll();
!!!12542597.java!!!	onSettingRestored(in prevValue : String, in newValue : String, in userId : int) : void
        rebuildAll();
!!!12542725.java!!!	onUsersChanged() : void
        rebuildAll();
!!!12542853.java!!!	rebuildAll() : void
        synchronized (mLock) {
            mInstalledSet.clear();
            mEnabledSet.clear();
            final int[] userIds = getCurrentProfileIds();
            for (int i : userIds) {
                ArraySet<ComponentName> implementingPackages = loadComponentNamesForUser(i);
                ArraySet<ComponentName> packagesFromSettings =
                        loadComponentNamesFromSetting(mSettingName, i);
                packagesFromSettings.retainAll(implementingPackages);

                mInstalledSet.put(i, implementingPackages);
                mEnabledSet.put(i, packagesFromSettings);

            }
        }
        sendSettingChanged();
!!!12542981.java!!!	isValid(inout component : ComponentName, in userId : int) : int
        synchronized (mLock) {
            ArraySet<ComponentName> installedComponents = mInstalledSet.get(userId);
            if (installedComponents == null || !installedComponents.contains(component)) {
                return NOT_INSTALLED;
            }
            ArraySet<ComponentName> validComponents = mEnabledSet.get(userId);
            if (validComponents == null || !validComponents.contains(component)) {
                return DISABLED;
            }
            return NO_ERROR;
        }
!!!12543109.java!!!	getInstalled(in userId : int) : ArraySet
        synchronized (mLock) {
            ArraySet<ComponentName> ret = mInstalledSet.get(userId);
            if (ret == null) {
                return new ArraySet<ComponentName>();
            }
            return ret;
        }
!!!12543237.java!!!	getEnabled(in userId : int) : ArraySet
        synchronized (mLock) {
            ArraySet<ComponentName> ret = mEnabledSet.get(userId);
            if (ret == null) {
                return new ArraySet<ComponentName>();
            }
            return ret;

        }
!!!12543365.java!!!	getCurrentProfileIds() : int
        UserManager userManager = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
        if (userManager == null) {
            return null;
        }
        return userManager.getEnabledProfileIds(ActivityManager.getCurrentUser());
!!!12543493.java!!!	loadComponentNames(inout pm : PackageManager, in userId : int, in serviceName : String, in permissionName : String) : ArraySet

        ArraySet<ComponentName> installed = new ArraySet<>();
        Intent queryIntent = new Intent(serviceName);
        List<ResolveInfo> installedServices = pm.queryIntentServicesAsUser(
                queryIntent,
                PackageManager.GET_SERVICES | PackageManager.GET_META_DATA |
                                    PackageManager.MATCH_DIRECT_BOOT_AWARE |
                                    PackageManager.MATCH_DIRECT_BOOT_UNAWARE,
                userId);
        if (installedServices != null) {
            for (int i = 0, count = installedServices.size(); i < count; i++) {
                ResolveInfo resolveInfo = installedServices.get(i);
                ServiceInfo info = resolveInfo.serviceInfo;

                ComponentName component = new ComponentName(info.packageName, info.name);
                if (!permissionName.equals(info.permission)) {
                    Slog.w(TAG, "Skipping service " + info.packageName + "/" + info.name
                            + ": it does not require the permission "
                            + permissionName);
                    continue;
                }
                installed.add(component);
            }
        }
        return installed;
!!!12543621.java!!!	loadComponentNamesForUser(in userId : int) : ArraySet
        return loadComponentNames(mContext.getPackageManager(), userId, mServiceName,
                mServicePermission);
!!!12543749.java!!!	loadComponentNamesFromSetting(in settingName : String, in userId : int) : ArraySet
        final ContentResolver cr = mContext.getContentResolver();
        String settingValue = Settings.Secure.getStringForUser(
                cr,
                settingName,
                userId);
        if (TextUtils.isEmpty(settingValue))
            return new ArraySet<>();
        String[] restored = settingValue.split(ENABLED_SERVICES_SEPARATOR);
        ArraySet<ComponentName> result = new ArraySet<>(restored.length);
        for (int i = 0; i < restored.length; i++) {
            ComponentName value = ComponentName.unflattenFromString(restored[i]);
            if (null != value) {
                result.add(value);
            }
        }
        return result;
!!!12543877.java!!!	sendSettingChanged() : void
        for (EnabledComponentChangeListener l : mEnabledComponentListeners) {
            l.onEnabledComponentChanged();
        }
