class WifiDisplaySource::PlaybackSession::Track
!!!1623941.cpp!!!	setRepeaterSource(in source : sp<RepeaterSource>) : void
    mRepeaterSource = source;
!!!1624069.cpp!!!	getFormat() : sp<AMessage>
    return mFormat != NULL ? mFormat : mConverter->getOutputFormat();
!!!1624197.cpp!!!	isAudio() : bool
    return mIsAudio;
!!!1624325.cpp!!!	converter() : sp<Converter>
    return mConverter;
!!!1624453.cpp!!!	repeaterSource() : sp<RepeaterSource>
    return mRepeaterSource;
!!!1624581.cpp!!!	mediaSenderTrackIndex() : ssize_t
    CHECK_GE(mMediaSenderTrackIndex, 0);
    return mMediaSenderTrackIndex;
!!!1624709.cpp!!!	setMediaSenderTrackIndex(in index : size_t) : void
    mMediaSenderTrackIndex = index;
!!!1624837.cpp!!!	start() : status_t
    ALOGV("Track::start isAudio=%d", mIsAudio);

    CHECK(!mStarted);

    status_t err = OK;

    if (mMediaPuller != NULL) {
        err = mMediaPuller->start();
    }

    if (err == OK) {
        mStarted = true;
    }

    return err;
!!!1624965.cpp!!!	stopAsync() : void
    ALOGV("Track::stopAsync isAudio=%d", mIsAudio);

    if (mConverter != NULL) {
        mConverter->shutdownAsync();
    }

    sp<AMessage> msg = new AMessage(kWhatMediaPullerStopped, this);

    if (mStarted && mMediaPuller != NULL) {
        if (mRepeaterSource != NULL) {
            // Let's unblock MediaPuller's MediaSource::read().
            mRepeaterSource->wakeUp();
        }

        mMediaPuller->stopAsync(msg);
    } else {
        mStarted = false;
        msg->post();
    }
!!!1625093.cpp!!!	pause() : void
    mMediaPuller->pause();
!!!1625221.cpp!!!	resume() : void
    mMediaPuller->resume();
!!!1625349.cpp!!!	queueAccessUnit(in accessUnit : sp<ABuffer>) : void
    mQueuedAccessUnits.push_back(accessUnit);
!!!1625477.cpp!!!	dequeueAccessUnit() : sp<ABuffer>
    if (mQueuedAccessUnits.empty()) {
        return NULL;
    }

    sp<ABuffer> accessUnit = *mQueuedAccessUnits.begin();
    CHECK(accessUnit != NULL);

    mQueuedAccessUnits.erase(mQueuedAccessUnits.begin());

    return accessUnit;
!!!1625605.cpp!!!	hasOutputBuffer(inout timeUs : int64_t) : bool
    *timeUs = 0ll;

    if (mQueuedOutputBuffers.empty()) {
        return false;
    }

    const sp<ABuffer> &outputBuffer = *mQueuedOutputBuffers.begin();

    CHECK(outputBuffer->meta()->findInt64("timeUs", timeUs));

    return true;
!!!1625733.cpp!!!	queueOutputBuffer(in accessUnit : sp<ABuffer>) : void
    mQueuedOutputBuffers.push_back(accessUnit);
    mLastOutputBufferQueuedTimeUs = ALooper::GetNowUs();
!!!1625861.cpp!!!	dequeueOutputBuffer() : sp<ABuffer>
    CHECK(!mQueuedOutputBuffers.empty());

    sp<ABuffer> outputBuffer = *mQueuedOutputBuffers.begin();
    mQueuedOutputBuffers.erase(mQueuedOutputBuffers.begin());

    return outputBuffer;
!!!1625989.cpp!!!	isSuspended() : bool
    if (!mQueuedOutputBuffers.empty()) {
        return false;
    }

    if (mLastOutputBufferQueuedTimeUs < 0ll) {
        // We've never seen an output buffer queued, but tracks start
        // out live, not suspended.
        return false;
    }

    // If we've not seen new output data for 60ms or more, we consider
    // this track suspended for the time being.
    return (ALooper::GetNowUs() - mLastOutputBufferQueuedTimeUs) > 60000ll;
!!!1626245.cpp!!!	requestIDRFrame() : void
    if (mIsAudio) {
        return;
    }

    if (mRepeaterSource != NULL) {
        mRepeaterSource->wakeUp();
    }

    mConverter->requestIDRFrame();
!!!1626373.cpp!!!	onMessageReceived(in msg : sp<AMessage>) : void
    switch (msg->what()) {
        case kWhatMediaPullerStopped:
        {
            mConverter.clear();

            mStarted = false;

            sp<AMessage> notify = mNotify->dup();
            notify->setInt32("what", kWhatStopped);
            notify->post();

            ALOGI("kWhatStopped %s posted", mIsAudio ? "audio" : "video");
            break;
        }

        default:
            TRESPASS();
    }
!!!1626501.cpp!!!	IsAudioFormat(in format : sp<AMessage>) : bool
    AString mime;
    CHECK(format->findString("mime", &mime));

    return !strncasecmp(mime.c_str(), "audio/", 6);
